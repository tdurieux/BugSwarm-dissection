diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index e990b267a7..f9b4051930 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -322,6 +322,7 @@
       <property name="basicOffset" value="4"/>
       <property name="braceAdjustment" value="0"/>
       <property name="caseIndent" value="4"/>
+      <property name="throwsIndent" value="8"/>
     </module>
     <module name="OuterTypeFilename"/>
     <module name="TodoComment">
diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index 8f19328741..be3c04f91d 100755
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -118,7 +118,7 @@ protected void verify(Checker checker,
             String messageFileName,
             String[] expected,
             Integer... warnsExpected)
-        throws Exception {
+            throws Exception {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
         Collections.addAll(theFiles, processedFiles);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 2211372147..76f27b1baf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -521,7 +521,7 @@ public final void setModuleClassLoader(ClassLoader moduleClassLoader) {
      * @throws UnsupportedEncodingException if charset is unsupported.
      */
     public void setCharset(String charset)
-        throws UnsupportedEncodingException {
+            throws UnsupportedEncodingException {
         if (!Charset.isSupported(charset)) {
             final String message = "unsupported charset: '" + charset + "'";
             throw new UnsupportedEncodingException(message);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index d86f12177f..d4fdc7d504 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -118,7 +118,7 @@
      */
     private ConfigurationLoader(final PropertyResolver overrideProps,
                                 final boolean omitIgnoredModules)
-        throws ParserConfigurationException, SAXException {
+            throws ParserConfigurationException, SAXException {
         saxHandler = new InternalLoader();
         overridePropsResolver = overrideProps;
         this.omitIgnoredModules = omitIgnoredModules;
@@ -148,7 +148,7 @@ private ConfigurationLoader(final PropertyResolver overrideProps,
      * @throws SAXException if an error occurs
      */
     private void parseInputSource(InputSource source)
-        throws IOException, SAXException {
+            throws IOException, SAXException {
         saxHandler.parseInputSource(source);
     }
 
@@ -176,7 +176,7 @@ public static Configuration loadConfiguration(String config,
      */
     public static Configuration loadConfiguration(String config,
         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
-        throws CheckstyleException {
+            throws CheckstyleException {
         // figure out if this is a File or a URL
         final URI uri = CommonUtils.getUriByFilename(config);
         final InputSource source = new InputSource(uri.toString());
@@ -204,7 +204,7 @@ public static Configuration loadConfiguration(String config,
     @Deprecated
     public static Configuration loadConfiguration(InputStream configStream,
         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
-        throws CheckstyleException {
+            throws CheckstyleException {
         return loadConfiguration(new InputSource(configStream),
                                  overridePropsResolver, omitIgnoredModules);
     }
@@ -223,7 +223,7 @@ public static Configuration loadConfiguration(InputStream configStream,
      */
     public static Configuration loadConfiguration(InputSource configSource,
             PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
-        throws CheckstyleException {
+            throws CheckstyleException {
         try {
             final ConfigurationLoader loader =
                 new ConfigurationLoader(overridePropsResolver,
@@ -265,7 +265,7 @@ public static Configuration loadConfiguration(InputSource configSource,
      */
     private static String replaceProperties(
             String value, PropertyResolver props, String defaultValue)
-        throws CheckstyleException {
+            throws CheckstyleException {
         if (value == null) {
             return null;
         }
@@ -319,7 +319,7 @@ private static String replaceProperties(
     private static void parsePropertyString(String value,
                                            List<String> fragments,
                                            List<String> propertyRefs)
-        throws CheckstyleException {
+            throws CheckstyleException {
         int prev = 0;
         //search for the next instance of $ from the 'prev' position
         int pos = value.indexOf(DOLLAR_SIGN, prev);
@@ -401,7 +401,7 @@ else if (value.charAt(pos + 1) == '{') {
          * @throws ParserConfigurationException if an error occurs
          */
         InternalLoader()
-            throws SAXException, ParserConfigurationException {
+                throws SAXException, ParserConfigurationException {
             super(createIdToResourceNameMap());
         }
 
@@ -410,7 +410,7 @@ public void startElement(String uri,
                                  String localName,
                                  String qName,
                                  Attributes attributes)
-            throws SAXException {
+                throws SAXException {
             if (qName.equals(MODULE)) {
                 //create configuration
                 final String name = attributes.getValue(NAME);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
index e8b8873d8d..18ef30f163 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
@@ -21,7 +21,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.regex.Pattern;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
@@ -39,13 +38,6 @@
     /** OS specific line separator. */
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
-    /** Newline pattern. */
-    private static final Pattern NEWLINE = Pattern.compile("\n");
-    /** Return pattern. */
-    private static final Pattern RETURN = Pattern.compile("\r");
-    /** Tab pattern. */
-    private static final Pattern TAB = Pattern.compile("\t");
-
     /** Prevent instances. */
     private DetailNodeTreeStringPrinter() {
         // no code
@@ -91,7 +83,7 @@ public static String printTree(DetailNode ast, String rootPrefix, String prefix)
             }
             messageBuilder.append(getIndentation(node))
                     .append(JavadocUtils.getTokenName(node.getType())).append(" -> ")
-                    .append(excapeAllControlChars(node.getText())).append(" [")
+                    .append(JavadocUtils.excapeAllControlChars(node.getText())).append(" [")
                     .append(node.getLineNumber()).append(':').append(node.getColumnNumber())
                     .append(']').append(LINE_SEPARATOR)
                     .append(printTree(JavadocUtils.getFirstChild(node), rootPrefix, prefix));
@@ -100,17 +92,6 @@ public static String printTree(DetailNode ast, String rootPrefix, String prefix)
         return messageBuilder.toString();
     }
 
-    /**
-     * Replace all control chars with excaped symbols.
-     * @param text the String to process.
-     * @return the processed String with all control chars excaped.
-     */
-    private static String excapeAllControlChars(String text) {
-        final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll("\\\\n");
-        final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll("\\\\r");
-        return TAB.matcher(textWithoutReturns).replaceAll("\\\\t");
-    }
-
     /**
      * Get indentation for a node.
      * @param node the DetailNode to get the indentation for.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 9043f5b06b..e66e4911b9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -76,7 +76,7 @@
      * @throws SAXException if an error occurs
      */
     private PackageNamesLoader()
-        throws ParserConfigurationException, SAXException {
+            throws ParserConfigurationException, SAXException {
         super(DTD_PUBLIC_ID, DTD_RESOURCE_NAME);
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 54cc0aeef8..6187b2a7d7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -147,7 +147,7 @@ public void finishLocalSetup() {
 
     @Override
     public void setupChild(Configuration childConf)
-        throws CheckstyleException {
+            throws CheckstyleException {
         final String name = childConf.getName();
         final Object module = moduleFactory.createModule(name);
         if (!(module instanceof AbstractCheck)) {
@@ -202,7 +202,7 @@ protected void processFiltered(File file, List<String> lines) throws CheckstyleE
      * @throws CheckstyleException if an error occurs
      */
     private void registerCheck(AbstractCheck check)
-        throws CheckstyleException {
+            throws CheckstyleException {
         validateDefaultTokens(check);
         final int[] tokens;
         final Set<String> checkTokens = check.getTokenNames();
@@ -419,7 +419,7 @@ private void notifyLeave(DetailAST ast, AstState astState) {
      *                 if parsing failed
      */
     public static DetailAST parse(FileContents contents)
-        throws RecognitionException, TokenStreamException {
+            throws RecognitionException, TokenStreamException {
         final String fullText = contents.getText().getFullText().toString();
         final Reader reader = new StringReader(fullText);
         final GeneratedJavaLexer lexer = new GeneratedJavaLexer(reader);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index e84187b06d..0478dacf73 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -600,7 +600,7 @@ public AuditListener createListener(Task task) throws IOException {
          * @throws IOException if an error occurs
          */
         private AuditListener createDefaultLogger(Task task)
-            throws IOException {
+                throws IOException {
             if (toFile == null || !useFile) {
                 return new DefaultLogger(
                     new LogOutputStream(task, Project.MSG_DEBUG),
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
index 2e60e6d65b..75ed6d6390 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
@@ -64,7 +64,7 @@
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(String publicId, String dtdResourceName)
-        throws SAXException, ParserConfigurationException {
+            throws SAXException, ParserConfigurationException {
         this(new HashMap<String, String>(1));
         publicIdToResourceNameMap.put(publicId, dtdResourceName);
     }
@@ -76,7 +76,7 @@ protected AbstractLoader(String publicId, String dtdResourceName)
      * @throws ParserConfigurationException if an error occurs
      */
     protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)
-        throws SAXException, ParserConfigurationException {
+            throws SAXException, ParserConfigurationException {
         this.publicIdToResourceNameMap =
             Maps.newHashMap(publicIdToResourceNameMap);
         final SAXParserFactory factory = SAXParserFactory.newInstance();
@@ -95,13 +95,13 @@ protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)
      * @throws SAXException in an error occurs
      */
     public void parseInputSource(InputSource inputSource)
-        throws IOException, SAXException {
+            throws IOException, SAXException {
         parser.parse(inputSource);
     }
 
     @Override
     public InputSource resolveEntity(String publicId, String systemId)
-        throws SAXException, IOException {
+            throws SAXException, IOException {
         if (publicIdToResourceNameMap.keySet().contains(publicId)) {
             final String dtdResourceName =
                     publicIdToResourceNameMap.get(publicId);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 959900490c..fe04384157 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -120,7 +120,7 @@ private static BeanUtilsBean createBeanUtilsBean() {
      */
     @Override
     public final void configure(Configuration config)
-        throws CheckstyleException {
+            throws CheckstyleException {
         configuration = config;
 
         final String[] attributes = config.getAttributeNames();
@@ -191,7 +191,7 @@ private void tryCopyProperty(String moduleName, String key, Object value, boolea
      */
     @Override
     public final void contextualize(Context context)
-        throws CheckstyleException {
+            throws CheckstyleException {
 
         final Collection<String> attributes = context.getAttributeNames();
 
@@ -235,7 +235,7 @@ protected void finishLocalSetup() throws CheckstyleException {
      * @see Configuration#getChildren
      */
     protected void setupChild(Configuration childConf)
-        throws CheckstyleException {
+            throws CheckstyleException {
         if (childConf != null) {
             throw new CheckstyleException(childConf.getName() + " is not allowed as a child in "
                     + getConfiguration().getName());
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index dd1f510bb2..fa25cb6b92 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -70,7 +70,7 @@ public ClassResolver(ClassLoader loader, String pkg, Set<String> imports) {
      * @throws ClassNotFoundException if unable to resolve the class
      */
     public Class<?> resolve(String name, String currentClass)
-        throws ClassNotFoundException {
+            throws ClassNotFoundException {
         // See if the class is full qualified
         Class<?> clazz = resolveQualifiedName(name);
         if (clazz != null) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
index f9142628d9..fe4308b86d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
@@ -125,7 +125,7 @@ public void setLineSeparator(String lineSeparatorParam) {
      *         provided reader
      */
     private boolean endsWithNewline(RandomAccessFile randomAccessFile)
-        throws IOException {
+            throws IOException {
         final int len = lineSeparator.length();
         if (randomAccessFile.length() < len) {
             return false;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
index 7bf85ce46c..5180d9da99 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
@@ -23,6 +23,7 @@
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
+import com.puppycrawl.tools.checkstyle.utils.JavadocUtils;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
@@ -100,11 +101,17 @@ public void visitToken(DetailAST ast) {
      */
     private static String convertToString(DetailAST ast) {
         final String tokenText;
-        if (ast.getType() == TokenTypes.LABELED_STAT) {
-            tokenText = ast.getFirstChild().getText() + ast.getText();
-        }
-        else {
-            tokenText = ast.getText();
+        switch (ast.getType()) {
+            case TokenTypes.LABELED_STAT:
+                tokenText = ast.getFirstChild().getText() + ast.getText();
+                break;
+            // multyline tokens need to become singlelined
+            case TokenTypes.COMMENT_CONTENT:
+                tokenText = JavadocUtils.excapeAllControlChars(ast.getText());
+                break;
+            default:
+                tokenText = ast.getText();
+                break;
         }
         return tokenText;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
index e82bf5b5b3..7c11ba96b9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
@@ -93,7 +93,7 @@ public void startElement(final String namespaceUri,
                              final String localName,
                              final String qName,
                              final Attributes attributes)
-        throws SAXException {
+            throws SAXException {
         if ("import-control".equals(qName)) {
             final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);
             stack.push(new PkgControl(pkg));
@@ -196,7 +196,7 @@ private PkgControl getRoot() {
      * @throws SAXException if the attribute does not exist.
      */
     private static String safeGet(final Attributes attributes, final String name)
-        throws SAXException {
+            throws SAXException {
         final String returnValue = attributes.getValue(name);
         if (returnValue == null) {
             throw new SAXException("missing attribute " + name);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index fa9628a2f3..9c01cf811b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -215,8 +215,18 @@ public static DetailAST getFirstToken(DetailAST ast) {
      * @return the start of the line for the given expression
      */
     protected final int getLineStart(DetailAST ast) {
-        final String line = indentCheck.getLine(ast.getLineNo() - 1);
-        return getLineStart(line);
+        return getLineStart(ast.getLineNo());
+    }
+
+    /**
+     * Get the start of the line for the given line number.
+     *
+     * @param lineNo   the line number to find the start for
+     *
+     * @return the start of the line for the given expression
+     */
+    protected final int getLineStart(int lineNo) {
+        return getLineStart(indentCheck.getLine(lineNo - 1));
     }
 
     /**
@@ -369,6 +379,22 @@ protected void checkWrappingIndentation(DetailAST firstNode, DetailAST lastNode)
         indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode);
     }
 
+    /**
+     * Checks indentation on wrapped lines between and including
+     * {@code firstNode} and {@code lastNode}.
+     *
+     * @param firstNode First node to start examining.
+     * @param lastNode Last node to examine inclusively.
+     * @param wrappedIndentLevel Indentation all wrapped lines should use.
+     * @param startIndent Indentation first line before wrapped lines used.
+     * @param ignoreFirstLine Test if first line's indentation should be checked or not.
+     */
+    protected void checkWrappingIndentation(DetailAST firstNode, DetailAST lastNode,
+            int wrappedIndentLevel, int startIndent, boolean ignoreFirstLine) {
+        indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode,
+                wrappedIndentLevel, startIndent, ignoreFirstLine);
+    }
+
     /**
      * Check the indent level of the children of the specified parent
      * expression.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index e9c3958f71..7e1ff94cfc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -74,6 +74,20 @@ public void checkIndentation(DetailAST firstNode, DetailAST lastNode) {
      * @param indentLevel Indentation all wrapped lines should use.
      */
     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {
+        checkIndentation(firstNode, lastNode, indentLevel, -1, true);
+    }
+
+    /**
+     * Checks line wrapping into expressions and definitions.
+     *
+     * @param firstNode First node to start examining.
+     * @param lastNode Last node to examine inclusively.
+     * @param indentLevel Indentation all wrapped lines should use.
+     * @param startIndent Indentation first line before wrapped lines used.
+     * @param ignoreFirstLine Test if first line's indentation should be checked or not.
+     */
+    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel,
+            int startIndent, boolean ignoreFirstLine) {
         final NavigableMap<Integer, DetailAST> firstNodesOnLines = collectFirstNodes(firstNode,
                 lastNode);
 
@@ -82,9 +96,18 @@ public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indent
             checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);
         }
 
-        // First node should be removed because it was already checked before.
-        firstNodesOnLines.remove(firstNodesOnLines.firstKey());
-        final int firstNodeIndent = getLineStart(firstLineNode);
+        if (ignoreFirstLine) {
+            // First node should be removed because it was already checked before.
+            firstNodesOnLines.remove(firstNodesOnLines.firstKey());
+        }
+
+        final int firstNodeIndent;
+        if (startIndent == -1) {
+            firstNodeIndent = getLineStart(firstLineNode);
+        }
+        else {
+            firstNodeIndent = startIndent;
+        }
         final int currentIndent = firstNodeIndent + indentLevel;
 
         for (DetailAST node : firstNodesOnLines.values()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
index 185f2fb138..666e4b96a4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
@@ -57,9 +57,59 @@ protected void checkModifiers() {
         }
     }
 
+    /**
+     * Check the indentation level of the throws clause.
+     */
+    private void checkThrows() {
+        final DetailAST throwsAst = getMainAst().findFirstToken(TokenTypes.LITERAL_THROWS);
+
+        if (throwsAst != null) {
+            checkWrappingIndentation(throwsAst, throwsAst.getNextSibling(), getIndentCheck()
+                    .getThrowsIndent(), getLineStart(getMethodDefLineStart(getMainAst())),
+                    !isOnStartOfLine(throwsAst));
+        }
+    }
+
+    /**
+     * Gets the start line of the method, excluding any annotations. This is required because the
+     * current {@link TokenTypes#METHOD_DEF} may not always be the start as seen in
+     * https://github.com/checkstyle/checkstyle/issues/3145.
+     *
+     * @param mainAst
+     *            The method definition ast.
+     * @return The start column position of the method.
+     */
+    private int getMethodDefLineStart(DetailAST mainAst) {
+        // get first type position
+        int lineStart = mainAst.findFirstToken(TokenTypes.IDENT).getLineNo();
+
+        // check if there is a type before the indent
+        final DetailAST typeNode = mainAst.findFirstToken(TokenTypes.TYPE);
+        if (typeNode != null) {
+            lineStart = getFirstLine(lineStart, typeNode);
+        }
+
+        // check if there is a modifier before the type
+        for (DetailAST node = mainAst.findFirstToken(TokenTypes.MODIFIERS).getFirstChild();
+                node != null;
+                node = node.getNextSibling()) {
+            // skip annotations as we check them else where as outside the method
+            if (node.getType() == TokenTypes.ANNOTATION) {
+                continue;
+            }
+
+            if (node.getLineNo() < lineStart) {
+                lineStart = node.getLineNo();
+            }
+        }
+
+        return lineStart;
+    }
+
     @Override
     public void checkIndentation() {
         checkModifiers();
+        checkThrows();
 
         checkWrappingIndentation(getMainAst(), getMethodDefParamRightParen(getMainAst()));
         if (getLCurly() == null) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
index 2e457802c5..ab2d1d9351 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
@@ -142,6 +142,7 @@ public boolean isInheritDocTag() {
     public boolean canReferenceImports() {
         return tagInfo == JavadocTagInfo.SEE
                 || tagInfo == JavadocTagInfo.LINK
+                || tagInfo == JavadocTagInfo.VALUE
                 || tagInfo == JavadocTagInfo.LINKPLAIN
                 || tagInfo == JavadocTagInfo.THROWS
                 || tagInfo == JavadocTagInfo.EXCEPTION;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
index 3ebb574b1a..82e3474a63 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
@@ -71,7 +71,7 @@
      * @throws SAXException if an error occurs
      */
     private SuppressionsLoader()
-        throws ParserConfigurationException, SAXException {
+            throws ParserConfigurationException, SAXException {
         super(createIdToResourceNameMap());
     }
 
@@ -80,7 +80,7 @@ public void startElement(String namespaceUri,
                              String localName,
                              String qName,
                              Attributes attributes)
-        throws SAXException {
+            throws SAXException {
         if ("suppress".equals(qName)) {
             //add SuppressElement filter to the filter chain
             final String checks = attributes.getValue("checks");
@@ -121,7 +121,7 @@ public void startElement(String namespaceUri,
      * @throws CheckstyleException if an error occurs.
      */
     public static FilterSet loadSuppressions(String filename)
-        throws CheckstyleException {
+            throws CheckstyleException {
         // figure out if this is a File or a URL
         final URI uri = CommonUtils.getUriByFilename(filename);
         final InputSource source = new InputSource(uri.toString());
@@ -137,7 +137,7 @@ public static FilterSet loadSuppressions(String filename)
      */
     private static FilterSet loadSuppressions(
             InputSource source, String sourceName)
-        throws CheckstyleException {
+            throws CheckstyleException {
         try {
             final SuppressionsLoader suppressionsLoader =
                 new SuppressionsLoader();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
index e035c79d18..d079628716 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java
@@ -79,6 +79,15 @@
     private static final Pattern INLINE_TAG_PATTERN = Pattern.compile(
         ".*?\\{@(\\p{Alpha}+)\\s+(.*?)\\}");
 
+    /** Newline pattern. */
+    private static final Pattern NEWLINE = Pattern.compile("\n");
+
+    /** Return pattern. */
+    private static final Pattern RETURN = Pattern.compile("\r");
+
+    /** Tab pattern. */
+    private static final Pattern TAB = Pattern.compile("\t");
+
     // Using reflection gets all token names and values from JavadocTokenTypes class
     // and saves to TOKEN_NAME_TO_VALUE and TOKEN_VALUE_TO_NAME collections.
     static {
@@ -448,4 +457,14 @@ public static String getTagName(DetailNode javadocTagSection) {
         return javadocTagName;
     }
 
+    /**
+     * Replace all control chars with excaped symbols.
+     * @param text the String to process.
+     * @return the processed String with all control chars excaped.
+     */
+    public static String excapeAllControlChars(String text) {
+        final String textWithoutNewlines = NEWLINE.matcher(text).replaceAll("\\\\n");
+        final String textWithoutReturns = RETURN.matcher(textWithoutNewlines).replaceAll("\\\\r");
+        return TAB.matcher(textWithoutReturns).replaceAll("\\\\t");
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index ff7064703f..4eb36415a3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -49,7 +49,7 @@ private static String getConfigPath(String filename) {
     }
 
     private static Configuration loadConfiguration(String name)
-        throws CheckstyleException {
+            throws CheckstyleException {
         return loadConfiguration(name, new Properties());
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
index 779e6f9d92..3222c00b7f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -54,7 +54,7 @@
 public class PackageNamesLoaderTest {
     @Test
     public void testDefault()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final Set<String> packageNames = PackageNamesLoader
                 .getPackageNames(Thread.currentThread()
                         .getContextClassLoader());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
index 95a13f4c7b..9251a0c63d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
@@ -44,7 +44,7 @@ public void testCtorException() {
 
     @Test
     public void testMakeObjectFromName()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final Checker checker =
             (Checker) factory.createModule(
                         "com.puppycrawl.tools.checkstyle.Checker");
@@ -53,7 +53,7 @@ public void testMakeObjectFromName()
 
     @Test
     public void testMakeCheckFromName()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final ConstantNameCheck check =
                 (ConstantNameCheck) factory.createModule(
                         "com.puppycrawl.tools.checkstyle.checks.naming.ConstantName");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index b9a2642c21..41c1eaae6c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -81,7 +81,7 @@ public void testImproperFileExtension() throws Exception {
 
     @Test
     public void testAcceptableTokens()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("tokens", "VARIABLE_DEF, ENUM_DEF, CLASS_DEF, METHOD_DEF,"
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
index 0271195c37..f83a8dbf8d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
@@ -50,7 +50,7 @@
 
     @Test
     public void testEncode()
-        throws IOException {
+            throws IOException {
         new XMLLogger(outStream, false);
         final String[][] encodings = {
             {"<", "&lt;"},
@@ -73,7 +73,7 @@ public void testEncode()
 
     @Test
     public void testIsReference()
-        throws IOException {
+            throws IOException {
         new XMLLogger(outStream, false);
         final String[] references = {
             "&#0;",
@@ -103,7 +103,7 @@ public void testIsReference()
 
     @Test
     public void testCloseStream()
-        throws IOException {
+            throws IOException {
         final XMLLogger logger = new XMLLogger(outStream, true);
         logger.auditStarted(null);
         logger.auditFinished(null);
@@ -113,7 +113,7 @@ public void testCloseStream()
 
     @Test
     public void testNoCloseStream()
-        throws IOException {
+            throws IOException {
         final XMLLogger logger = new XMLLogger(outStream, false);
         logger.auditStarted(null);
         logger.auditFinished(null);
@@ -124,7 +124,7 @@ public void testNoCloseStream()
 
     @Test
     public void testFileStarted()
-        throws IOException {
+            throws IOException {
         final XMLLogger logger = new XMLLogger(outStream, true);
         logger.auditStarted(null);
         final AuditEvent ev = new AuditEvent(this, "Test.java");
@@ -136,7 +136,7 @@ public void testFileStarted()
 
     @Test
     public void testFileFinished()
-        throws IOException {
+            throws IOException {
         final XMLLogger logger = new XMLLogger(outStream, true);
         logger.auditStarted(null);
         final AuditEvent ev = new AuditEvent(this, "Test.java");
@@ -199,7 +199,7 @@ public void testAddIgnored() throws IOException {
 
     @Test
     public void testAddException()
-        throws IOException {
+            throws IOException {
         final XMLLogger logger = new XMLLogger(outStream, true);
         logger.auditStarted(null);
         final LocalizedMessage message =
@@ -219,7 +219,7 @@ public void testAddException()
     }
 
     private String[] getOutStreamLines()
-        throws IOException {
+            throws IOException {
         final byte[] bytes = outStream.toByteArray();
         final ByteArrayInputStream inStream =
             new ByteArrayInputStream(bytes);
@@ -243,7 +243,7 @@ public void testAddException()
      * @param expectedLines expected error report lines
      */
     private void verifyLines(String... expectedLines)
-        throws IOException {
+            throws IOException {
         final String[] lines = getOutStreamLines();
         assertEquals("length.", expectedLines.length + 3, lines.length);
         assertEquals("first line.",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
index c3435ce7ac..8b8b2aa7f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testJavaStyle()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ArrayTypeStyleCheck.class);
         final String[] expected = {
@@ -60,7 +60,7 @@ public void testJavaStyle()
 
     @Test
     public void testCStyle()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ArrayTypeStyleCheck.class);
         checkConfig.addAttribute("javaStyle", "false");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
index afb97f33cd..e9ba4a1497 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
@@ -41,7 +41,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -50,7 +50,7 @@ public void testDefault()
 
     @Test
     public void testMaximumNumber()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_NATIVE");
@@ -64,7 +64,7 @@ public void testMaximumNumber()
 
     @Test
     public void testMessage()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_NATIVE");
@@ -79,7 +79,7 @@ public void testMessage()
 
     @Test
     public void testMinimumNumber()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_SWITCH");
@@ -93,7 +93,7 @@ public void testMinimumNumber()
 
     @Test
     public void testMinimumDepth()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_SWITCH");
@@ -106,7 +106,7 @@ public void testMinimumDepth()
 
     @Test
     public void testMaximumDepth()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_SWITCH");
@@ -119,7 +119,7 @@ public void testMaximumDepth()
 
     @Test
     public void testEmptyStatements()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(DescendantTokenCheck.class);
         checkConfig.addAttribute("tokens", "EMPTY_STAT");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
index 2d80911b5d..2333de88c3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
@@ -145,7 +145,7 @@ public void testNoNewlineAtEndOfFile() throws Exception {
 
     @Test(expected = CheckstyleException.class)
     public void testSetLineSeparatorFailure()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(NewlineAtEndOfFileCheck.class);
         checkConfig.addAttribute("lineSeparator", "ct");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
index 103e2ff135..385b0d1dd3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -45,7 +45,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefaults()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(UncommentedMainCheck.class);
         final String[] expected = {
@@ -59,7 +59,7 @@ public void testDefaults()
 
     @Test
     public void testExcludedClasses()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(UncommentedMainCheck.class);
         checkConfig.addAttribute("excludedClasses", "\\.Main.*$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
index 1602825b90..248b0a8c28 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(UpperEllCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
index f0298a9516..e55ca7aa88 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testStrictSettings()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidNestedBlocksCheck.class);
         final String[] expected = {
@@ -62,7 +62,7 @@ public void testStrictSettings()
 
     @Test
     public void testAllowSwitchInCase()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidNestedBlocksCheck.class);
         checkConfig.addAttribute("allowInSwitchCase", "true");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
index feed5499a6..ff7acfb9c4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
@@ -53,7 +53,7 @@ public void testBlockOptionValueOf() {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(EmptyBlockCheck.class);
         final String[] expected = {
@@ -71,7 +71,7 @@ public void testDefault()
 
     @Test
     public void testText()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(EmptyBlockCheck.class);
         checkConfig.addAttribute("option", BlockOption.TEXT.toString());
@@ -87,7 +87,7 @@ public void testText()
 
     @Test
     public void testStatement()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(EmptyBlockCheck.class);
         checkConfig.addAttribute("option", BlockOption.STMT.toString());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheckTest.java
index 218400b2d9..f1d2471fd1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ArrayTrailingCommaCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheckTest.java
index 9e708a301b..0d751cbe26 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testIt()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidInlineConditionalsCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheckTest.java
index fd00686308..8534db582b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(CovariantEqualsCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheckTest.java
index 75b524bcdc..79e5b5aca1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheckTest.java
@@ -59,7 +59,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testDefaultMethodsInJava8()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(DefaultComesLastCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheckTest.java
index ad3e3d2211..45782a6d1b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testEmptyStatements()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(EmptyStatementCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
index 634bf69de3..6663441810 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
@@ -156,7 +156,7 @@ public void testEnhancedForLoopVariableFalse() throws Exception {
 
     @Test
     public void testLambda()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(FinalLocalVariableCheck.class);
         checkConfig.addAttribute("tokens", "PARAMETER_DEF,VARIABLE_DEF");
@@ -169,7 +169,7 @@ public void testLambda()
 
     @Test
     public void testVariableNameShadowing()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(FinalLocalVariableCheck.class);
         checkConfig.addAttribute("tokens", "PARAMETER_DEF,VARIABLE_DEF");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
index 472d9766c8..e72cd48990 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
@@ -85,7 +85,7 @@ public void testStaticVisibilityFromAnonymousClasses() throws Exception {
 
     @Test
     public void testNoParameters()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("tokens", "VARIABLE_DEF");
@@ -114,7 +114,7 @@ public void testNoParameters()
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         final String[] expected = {
@@ -160,7 +160,7 @@ public void testDefault()
     /** Tests ignoreFormat property. */
     @Test
     public void testIgnoreFormat()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("ignoreFormat", "^i.*$");
@@ -201,7 +201,7 @@ public void testIgnoreFormat()
     /** Tests ignoreSetter property. */
     @Test
     public void testIgnoreSetter()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("ignoreSetter", "true");
@@ -244,7 +244,7 @@ public void testIgnoreSetter()
     /** Tests ignoreSetter and setterCanReturnItsClass properties. */
     @Test
     public void testIgnoreChainSetter()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("ignoreSetter", "true");
@@ -286,7 +286,7 @@ public void testIgnoreChainSetter()
     /** Tests ignoreConstructorParameter property. */
     @Test
     public void testIgnoreConstructorParameter()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         checkConfig.addAttribute("ignoreConstructorParameter", "true");
@@ -330,7 +330,7 @@ public void testIgnoreConstructorParameter()
     /** Test against a class with field declarations in different order. */
     @Test
     public void testReordered()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HiddenFieldCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheckTest.java
index 114247a2c6..84d942ef07 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheckTest.java
@@ -39,7 +39,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCheckWithDefaultSettings()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenCheck.class);
         final String[] expected = {
@@ -51,7 +51,7 @@ public void testCheckWithDefaultSettings()
 
     @Test
     public void testPreviouslyIllegalTokens()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenCheck.class);
         checkConfig.addAttribute("tokens", "LITERAL_SWITCH,POST_INC,POST_DEC");
@@ -75,20 +75,57 @@ public void testNative() throws Exception {
     }
 
     @Test
-    public void testCommentToken()
+    public void testCommentContentToken()
             throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(IllegalTokenCheck.class);
         checkConfig.addAttribute("tokens", "COMMENT_CONTENT");
 
         final String[] expected = {
-                "3:3: " + getCheckMessage(MSG_KEY, "*\n" +
-                        " * Test for illegal tokens\n" +
-                        " "),
-                "31:30: " + getCheckMessage(MSG_KEY, " some comment href"),
-                "35:28: " + getCheckMessage(MSG_KEY, " some a href"),
+            "3:3: " + getCheckMessage(MSG_KEY, "*\\n * Test for illegal tokens\\n "),
+            "31:29: " + getCheckMessage(MSG_KEY, " some comment href\\n"),
+            "35:28: " + getCheckMessage(MSG_KEY, " some a href\\n"),
+        };
+        verify(checkConfig, getPath("InputIllegalTokens.java"), expected);
+    }
+
+    @Test
+    public void testBlockCommentBeginToken()
+            throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(IllegalTokenCheck.class);
+        checkConfig.addAttribute("tokens", "BLOCK_COMMENT_BEGIN");
+
+        final String[] expected = {
+            "3:1: " + getCheckMessage(MSG_KEY, "/*"),
         };
         verify(checkConfig, getPath("InputIllegalTokens.java"), expected);
     }
 
+    @Test
+    public void testBlockCommentEndToken()
+            throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(IllegalTokenCheck.class);
+        checkConfig.addAttribute("tokens", "BLOCK_COMMENT_END");
+
+        final String[] expected = {
+            "5:2: " + getCheckMessage(MSG_KEY, "*/"),
+        };
+        verify(checkConfig, getPath("InputIllegalTokens.java"), expected);
+    }
+
+    @Test
+    public void testSingleLineCommentToken()
+            throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(IllegalTokenCheck.class);
+        checkConfig.addAttribute("tokens", "SINGLE_LINE_COMMENT");
+
+        final String[] expected = {
+            "31:27: " + getCheckMessage(MSG_KEY, "//"),
+            "35:26: " + getCheckMessage(MSG_KEY, "//"),
+        };
+        verify(checkConfig, getPath("InputIllegalTokens.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java
index 3fe3b50ec4..0a899d7bf0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCaseSensitive()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenTextCheck.class);
         checkConfig.addAttribute("tokens", "STRING_LITERAL");
@@ -54,7 +54,7 @@ public void testCaseSensitive()
 
     @Test
     public void testCaseInSensitive()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenTextCheck.class);
         checkConfig.addAttribute("tokens", "STRING_LITERAL");
@@ -69,7 +69,7 @@ public void testCaseInSensitive()
 
     @Test
     public void testCustomMessage()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenTextCheck.class);
         checkConfig.addAttribute("tokens", "STRING_LITERAL");
@@ -85,7 +85,7 @@ public void testCustomMessage()
 
     @Test
     public void testNullCustomMessage()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalTokenTextCheck.class);
         checkConfig.addAttribute("tokens", "STRING_LITERAL");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java
index 5783d2a69f..9ee86cde21 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java
@@ -39,7 +39,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MagicNumberCheck.class);
         final String[] expected = {
@@ -90,7 +90,7 @@ public void testDefault()
 
     @Test
     public void testIgnoreSome()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MagicNumberCheck.class);
         checkConfig.addAttribute("ignoreNumbers", "0, 1, 3.0, 8, 16, 3000");
@@ -136,7 +136,7 @@ public void testIgnoreSome()
 
     @Test
     public void testIgnoreNone()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MagicNumberCheck.class);
         checkConfig.addAttribute("ignoreNumbers", "");
@@ -210,7 +210,7 @@ public void testIgnoreNone()
 
     @Test
     public void testIntegersOnly()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MagicNumberCheck.class);
         checkConfig.addAttribute("tokens", "NUM_INT, NUM_LONG");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
index 5681845bb5..d0a55dee80 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
@@ -43,7 +43,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testHasClone()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(NoCloneCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoFinalizerCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoFinalizerCheckTest.java
index efb484bb96..407fb09e3d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoFinalizerCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoFinalizerCheckTest.java
@@ -45,7 +45,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testHasFinalizer()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(NoFinalizerCheck.class);
         final String[] expected = {
@@ -56,7 +56,7 @@ public void testHasFinalizer()
 
     @Test
     public void testHasNoFinalizer()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(NoFinalizerCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
index 4488618b7f..cf6ef9757f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
@@ -41,7 +41,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterAssignmentCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
index 6bca740bca..539de79634 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
@@ -41,7 +41,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(InterfaceIsTypeCheck.class);
         final String[] expected = {
@@ -52,7 +52,7 @@ public void testDefault()
 
     @Test
     public void testAllowMarker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(InterfaceIsTypeCheck.class);
         checkConfig.addAttribute("allowMarkerInterfaces", "false");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
index 195dddb77b..fb7ea81a97 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
@@ -63,7 +63,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testInner()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "30:24: " + getCheckMessage(MSG_KEY, "rData"),
             "33:27: " + getCheckMessage(MSG_KEY, "protectedVariable"),
@@ -77,7 +77,7 @@ public void testInner()
 
     @Test
     public void testIgnoreAccess()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(VisibilityModifierCheck.class);
         checkConfig.addAttribute("publicMemberPattern", "^r[A-Z]");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
index 2248cbfdd1..1f2e976167 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
@@ -41,7 +41,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefaultOperation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStarImportCheck.class);
         final String[] expected = {
@@ -59,7 +59,7 @@ public void testDefaultOperation()
 
     @Test
     public void testExcludes()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStarImportCheck.class);
         checkConfig.addAttribute("excludes",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
index 430bd78434..46e2d04e3b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testDefaultOperation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStaticImportCheck.class);
         final String[] expected = {
@@ -70,7 +70,7 @@ public void testDefaultOperation()
 
     @Test
     public void testStarExcludes()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStaticImportCheck.class);
         checkConfig.addAttribute("excludes", "java.io.File.*,sun.net.ftpclient.FtpClient.*");
@@ -90,7 +90,7 @@ public void testStarExcludes()
 
     @Test
     public void testMemberExcludes()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStaticImportCheck.class);
         checkConfig.addAttribute("excludes", "java.io.File.listRoots");
@@ -112,7 +112,7 @@ public void testMemberExcludes()
 
     @Test
     public void testBogusMemberExcludes()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStaticImportCheck.class);
 
@@ -140,7 +140,7 @@ public void testBogusMemberExcludes()
 
     @Test
     public void testInnerClassMemberExcludesStar()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(AvoidStaticImportCheck.class);
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
index 4e33f762b2..6913c8eb38 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
@@ -47,7 +47,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testWithSupplied()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalImportCheck.class);
         checkConfig.addAttribute("illegalPkgs", "java.io");
@@ -61,7 +61,7 @@ public void testWithSupplied()
 
     @Test
     public void testWithDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(IllegalImportCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
index 2711f45911..4cf9cda61c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
@@ -60,7 +60,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(RedundantImportCheck.class);
         final String[] expected = {
@@ -77,7 +77,7 @@ public void testWithChecker()
 
     @Test
     public void testUnnamedPackage()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(RedundantImportCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
index e598fb5e9d..e8c6c4d1aa 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
@@ -104,6 +104,13 @@ public void testProcessJavadoc() throws Exception {
         verify(checkConfig, getPath("InputUnusedImports.java"), expected);
     }
 
+    @Test
+    public void testProcessJavadocWithLinkTag() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(UnusedImportsCheck.class);
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputUnusedImportWithValueTag.java"), expected);
+    }
+
     @Test
     public void testAnnotations() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(UnusedImportsCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 1a70e8a75f..852a43dca7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -541,7 +541,7 @@ public void testValidIfWithChecker() throws Exception {
 
     @Test
     public void testValidDotWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -559,7 +559,7 @@ public void testValidDotWithChecker()
 
     @Test
     public void testValidMethodWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -580,7 +580,7 @@ public void testValidMethodWithChecker()
 
     @Test
     public void testInvalidMethodWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -632,7 +632,7 @@ public void testInvalidMethodWithChecker()
 
     @Test
     public void testInvalidSwitchWithChecker()
-        throws Exception {
+            throws Exception {
 
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
@@ -675,7 +675,7 @@ public void testInvalidSwitchWithChecker()
 
     @Test
     public void testValidSwitchWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -693,7 +693,7 @@ public void testValidSwitchWithChecker()
 
     @Test
     public void testValidArrayInitDefaultIndentWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -711,7 +711,7 @@ public void testValidArrayInitDefaultIndentWithChecker()
 
     @Test
     public void testValidArrayInitWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "8");
@@ -729,7 +729,7 @@ public void testValidArrayInitWithChecker()
 
     @Test
     public void testInvalidArrayInitWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -781,7 +781,7 @@ public void testInvalidArrayInitWithChecker()
 
     @Test
     public void testValidTryWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -799,7 +799,7 @@ public void testValidTryWithChecker()
 
     @Test
     public void testInvalidTryWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -838,7 +838,7 @@ public void testInvalidTryWithChecker()
 
     @Test
     public void testInvalidClassDefWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -893,7 +893,7 @@ public void testInvalidClassDefWithChecker()
 
     @Test
     public void testInvalidBlockWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -958,7 +958,7 @@ public void testInvalidBlockWithChecker()
 
     @Test
     public void testInvalidIfWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1050,7 +1050,7 @@ public void testInvalidIfWithChecker()
 
     @Test
     public void testInvalidWhileWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1120,7 +1120,7 @@ public void testInvalidInvalidAnonymousClass() throws Exception {
 
     @Test
     public void testInvalidForWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1161,7 +1161,7 @@ public void testInvalidForWithChecker()
 
     @Test
     public void testValidForWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1179,7 +1179,7 @@ public void testValidForWithChecker()
 
     @Test
     public void testValidDoWhileWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1197,7 +1197,7 @@ public void testValidDoWhileWithChecker()
 
     @Test
     public void testInvalidDoWhileWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1233,7 +1233,7 @@ public void testInvalidDoWhileWithChecker()
 
     @Test
     public void testValidBlockWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1251,7 +1251,7 @@ public void testValidBlockWithChecker()
 
     @Test
     public void testValidWhileWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1269,7 +1269,7 @@ public void testValidWhileWithChecker()
 
     @Test
     public void testValidClassDefWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1290,7 +1290,7 @@ public void testValidClassDefWithChecker()
 
     @Test
     public void testValidInterfaceDefWithChecker()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
         checkConfig.addAttribute("arrayInitIndent", "4");
@@ -1308,7 +1308,7 @@ public void testValidInterfaceDefWithChecker()
 
     @Test
     public void testValidCommaWithChecker()
-        throws Exception {
+            throws Exception {
 
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
 
@@ -1377,6 +1377,33 @@ public void testThrowsIndentationLevel() throws Exception {
         verifyWarns(checkConfig, getPath("InputInvalidThrowsIndent.java"), expected);
     }
 
+    @Test
+    public void testThrowsIndentationLevel2() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+
+        checkConfig.addAttribute("basicOffset", "1");
+        checkConfig.addAttribute("forceStrictCondition", "true");
+        checkConfig.addAttribute("lineWrappingIndentation", "3");
+        checkConfig.addAttribute("tabWidth", "4");
+        checkConfig.addAttribute("throwsIndent", "5");
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_ERROR, "Exception", 0, 6),
+            "10: " + getCheckMessage(MSG_ERROR, "NullPointerException", 0, 6),
+            "13: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "16: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "18: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "19: " + getCheckMessage(MSG_ERROR, "Exception", 0, 6),
+            "22: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "23: " + getCheckMessage(MSG_ERROR, "Exception", 0, 6),
+            "24: " + getCheckMessage(MSG_ERROR, "NullPointerException", 0, 6),
+            "27: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "28: " + getCheckMessage(MSG_ERROR, "Exception", 0, 6),
+            "31: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+            "37: " + getCheckMessage(MSG_ERROR, "throws", 0, 6),
+        };
+        verifyWarns(checkConfig, getPath("InputInvalidThrowsIndent2.java"), expected);
+    }
+
     @Test
     public void testCaseLevel() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index 6ebd8c332c..c083a0cc49 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -122,7 +122,7 @@ public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInTwoFiles() thr
 
     @Test
     public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInSingleFile()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(TempCheck.class);
         final String[] expected = {
             "4: " + getCheckMessage(MSG_JAVADOC_MISSED_HTML_CLOSE, 4, "unclosedTag"),
@@ -133,7 +133,7 @@ public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInSingleFile()
 
     @Test
     public void testPosition()
-        throws Exception {
+            throws Exception {
         JavadocCatchCheck.clearCounter();
         final DefaultConfiguration checkConfig = createCheckConfig(JavadocCatchCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -143,7 +143,7 @@ public void testPosition()
 
     @Test
     public void testPositionWithSinglelineComments()
-        throws Exception {
+            throws Exception {
         JavadocCatchCheck.clearCounter();
         final DefaultConfiguration checkConfig = createCheckConfig(JavadocCatchCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -153,7 +153,7 @@ public void testPositionWithSinglelineComments()
 
     @Test
     public void testPositionOnlyComments()
-        throws Exception {
+            throws Exception {
         JavadocCatchCheck.clearCounter();
         final DefaultConfiguration checkConfig = createCheckConfig(JavadocCatchCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
index b8b0c9f52c..4c08344a68 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
@@ -68,7 +68,7 @@ public void testGetAcceptableTokens() {
 
     @Test
     public void testDefaultSettings()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocStyleCheck.class);
         final String[] expected = {
@@ -203,7 +203,7 @@ public void testOnInputWithNoJavadoc() throws Exception {
 
     @Test
     public void testScopePublic()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocStyleCheck.class);
         checkConfig.addAttribute("checkFirstSentence", "true");
@@ -228,7 +228,7 @@ public void testScopePublic()
 
     @Test
     public void testScopeProtected()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocStyleCheck.class);
         checkConfig.addAttribute("checkFirstSentence", "true");
@@ -256,7 +256,7 @@ public void testScopeProtected()
 
     @Test
     public void testScopePackage()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocStyleCheck.class);
         checkConfig.addAttribute("checkFirstSentence", "true");
@@ -306,7 +306,7 @@ public void testEmptyJavadoc() throws Exception {
 
     @Test
     public void testExcludeScope()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocStyleCheck.class);
         checkConfig.addAttribute("scope", "private");
@@ -400,7 +400,7 @@ public void packageInfoValid() throws Exception {
 
     @Test
     public void testRestrictedTokenSet()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(JavadocStyleCheck.class);
         checkConfig.addAttribute("tokens", "METHOD_DEF");
         checkConfig.addAttribute("scope", "public");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
index ca81756dcc..cea2c8b595 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
@@ -183,7 +183,7 @@ public void testAuthorRequired() throws Exception {
 
     @Test
     public void testAuthorRegularEx()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocTypeCheck.class);
         checkConfig.addAttribute("authorFormat", "0*");
@@ -197,7 +197,7 @@ public void testAuthorRegularEx()
 
     @Test
     public void testAuthorRegularExError()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocTypeCheck.class);
         checkConfig.addAttribute("authorFormat", "ABC");
@@ -217,7 +217,7 @@ public void testAuthorRegularExError()
 
     @Test
     public void testVersionRequired()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocTypeCheck.class);
         checkConfig.addAttribute("versionFormat", "\\S");
@@ -229,7 +229,7 @@ public void testVersionRequired()
 
     @Test
     public void testVersionRegularEx()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocTypeCheck.class);
         checkConfig.addAttribute("versionFormat", "^\\p{Digit}+\\.\\p{Digit}+$");
@@ -243,7 +243,7 @@ public void testVersionRegularEx()
 
     @Test
     public void testVersionRegularExError()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocTypeCheck.class);
         checkConfig.addAttribute("versionFormat", "\\$Revision.*\\$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
index 839a814f7b..707db246bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
@@ -66,7 +66,7 @@ public void testGetAcceptableTokens() {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocVariableCheck.class);
         final String[] expected = {
@@ -80,7 +80,7 @@ public void testDefault()
 
     @Test
     public void testAnother()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocVariableCheck.class);
         final String[] expected = {
@@ -93,7 +93,7 @@ public void testAnother()
 
     @Test
     public void testAnother2()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocVariableCheck.class);
         checkConfig.addAttribute("scope", Scope.PUBLIC.getName());
@@ -103,7 +103,7 @@ public void testAnother2()
 
     @Test
     public void testAnother3()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocVariableCheck.class);
         final String[] expected = {
@@ -120,7 +120,7 @@ public void testAnother3()
 
     @Test
     public void testAnother4()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(JavadocVariableCheck.class);
         checkConfig.addAttribute("scope", Scope.PUBLIC.getName());
@@ -242,7 +242,7 @@ public void testExcludeScope() throws Exception {
 
     @Test
     public void testIgnoredVariableNames()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(JavadocVariableCheck.class);
         checkConfig.addAttribute("ignoreNamePattern", "log|logger");
@@ -291,7 +291,7 @@ public void testIgnoredVariableNames()
 
     @Test
     public void testDoNotIgnoreAnythingWhenIgnoreNamePatternIsEmpty()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(JavadocVariableCheck.class);
         checkConfig.addAttribute("ignoreNamePattern", "");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
index f7d64c3ebd..3d00b7c9f3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
@@ -163,7 +163,7 @@ public void testIgnoreMissing() throws Exception {
 
     @Test
     public void testRegularEx()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("tag", "@author");
         checkConfig.addAttribute("tagFormat", "0*");
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -172,7 +172,7 @@ public void testRegularEx()
 
     @Test
     public void testRegularExError()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("tag", "@author");
         checkConfig.addAttribute("tagFormat", "ABC");
         final String[] expected = {
@@ -206,7 +206,7 @@ protected void verify(Checker checker,
                           File[] processedFiles,
                           String messageFileName,
                           String... expected)
-        throws Exception {
+            throws Exception {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
         Collections.addAll(theFiles, processedFiles);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
index ec6be33f4f..4807762694 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
@@ -72,7 +72,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testDefaultMethods()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(ModifierOrderCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
index 18561d56d7..bffcc61444 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
@@ -84,7 +84,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testStaticMethodInInterface()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(RedundantModifierCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -93,7 +93,7 @@ public void testStaticMethodInInterface()
 
     @Test
     public void testFinalInInterface()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(RedundantModifierCheck.class);
         final String[] expected = {
@@ -190,7 +190,7 @@ public void testNestedStaticEnum() throws Exception {
 
     @Test
     public void testFinalInAnonymousClass()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(RedundantModifierCheck.class);
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java
index 1d913d3a7e..7bc4ca3809 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java
@@ -234,7 +234,7 @@ public void testTypeAndVariablesAndMethodNamesWithIgnoresStatic() throws Excepti
 
     @Test
     public void testTypeNamesForThreePermittedCapitalLettersWithOverriddenMethod()
-        throws Exception {
+            throws Exception {
 
         final DefaultConfiguration checkConfig =
             createCheckConfig(AbbreviationAsWordInNameCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
index a58ab7d558..501fcd0b9c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetClassRequiredTokens() {
 
     @Test
     public void testClassDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ClassTypeParameterNameCheck.class);
 
@@ -65,7 +65,7 @@ public void testClassDefault()
 
     @Test
     public void testClassFooName()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ClassTypeParameterNameCheck.class);
         checkConfig.addAttribute("format", "^foo$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
index c7db03a9b9..396529b1bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
@@ -59,7 +59,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testIllegalRegexp()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ConstantNameCheck.class);
         checkConfig.addAttribute("format", "\\");
@@ -78,7 +78,7 @@ public void testIllegalRegexp()
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ConstantNameCheck.class);
 
@@ -93,7 +93,7 @@ public void testDefault()
 
     @Test
     public void testAccessControlTuning()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ConstantNameCheck.class);
         checkConfig.addAttribute("applyToPublic", "false");
@@ -110,7 +110,7 @@ public void testAccessControlTuning()
 
     @Test
     public void testInterfaceAndAnnotation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ConstantNameCheck.class);
 
@@ -125,7 +125,7 @@ public void testInterfaceAndAnnotation()
 
     @Test
     public void testDefault1()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ConstantNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -154,7 +154,7 @@ public void testIntoInterface() throws Exception {
 
     @Test
     public void testStaticMethodInInterface()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(ConstantNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
index 824f051b23..e648c29afa 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetInterfaceRequiredTokens() {
 
     @Test
     public void testInterfaceDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(InterfaceTypeParameterNameCheck.class);
 
@@ -63,7 +63,7 @@ public void testInterfaceDefault()
 
     @Test
     public void testInterfaceFooName()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(InterfaceTypeParameterNameCheck.class);
         checkConfig.addAttribute("format", "^foo$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
index 9e7fe5446c..349a80930d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalFinalVariableNameCheck.class);
 
@@ -63,7 +63,7 @@ public void testDefault()
 
     @Test
     public void testSet()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalFinalVariableNameCheck.class);
         checkConfig.addAttribute("format", "[A-Z]+");
@@ -78,7 +78,7 @@ public void testSet()
 
     @Test
     public void testInnerClass()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalFinalVariableNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheckTest.java
index aa4f99c3b2..72a56f4067 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheckTest.java
@@ -40,7 +40,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalVariableNameCheck.class);
 
@@ -57,7 +57,7 @@ public void testDefault()
 
     @Test
     public void testInnerClass()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalVariableNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -66,7 +66,7 @@ public void testInnerClass()
 
     @Test
     public void testLoopVariables()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LocalVariableNameCheck.class);
         checkConfig.addAttribute("format", "^[a-z]{2,}[a-zA-Z0-9]*$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
index dec4ba7e79..8387d3857c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testSpecified()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         checkConfig.addAttribute("format", "^m[A-Z][a-zA-Z0-9]*$");
@@ -64,7 +64,7 @@ public void testSpecified()
 
     @Test
     public void testInnerClass()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
index 2b25bc3a4e..7717bd118e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
@@ -50,7 +50,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MethodNameCheck.class);
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
index 6463db2abe..7a8b008c73 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetMethodRequiredTokens() {
 
     @Test
     public void testMethodDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MethodTypeParameterNameCheck.class);
 
@@ -67,7 +67,7 @@ public void testMethodDefault()
 
     @Test
     public void testMethodFooName()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MethodTypeParameterNameCheck.class);
         checkConfig.addAttribute("format", "^foo$");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
index cf5138ecd6..50a92c08cd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testSpecified()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(PackageNameCheck.class);
         checkConfig.addAttribute("format", "[A-Z]+");
@@ -65,7 +65,7 @@ public void testSpecified()
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(PackageNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
index 1abc728e74..0fd2d47241 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testCatch()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNameCheck.class);
         checkConfig.addAttribute("format", "^NO_WAY_MATEY$");
@@ -59,7 +59,7 @@ public void testCatch()
 
     @Test
     public void testSpecified()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNameCheck.class);
         checkConfig.addAttribute("format", "^a[A-Z][a-zA-Z0-9]*$");
@@ -76,7 +76,7 @@ public void testSpecified()
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -95,7 +95,7 @@ public void testGetAcceptableTokens() {
 
     @Test
     public void testSkipMethodsWithOverrideAnnotationTrue()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNameCheck.class);
         checkConfig.addAttribute("format", "^h$");
@@ -117,7 +117,7 @@ public void testSkipMethodsWithOverrideAnnotationTrue()
 
     @Test
     public void testSkipMethodsWithOverrideAnnotationFalse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNameCheck.class);
         checkConfig.addAttribute("format", "^h$");
@@ -140,7 +140,7 @@ public void testSkipMethodsWithOverrideAnnotationFalse()
 
     @Test
     public void testIsOverriddenNoNullPointerException()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(ParameterNameCheck.class);
         checkConfig.addAttribute("format", "^[a-z][a-zA-Z0-9]*$");
         checkConfig.addAttribute("ignoreOverridden", "true");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
index 27e8518499..fbda477b34 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
@@ -49,7 +49,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testSpecified()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(StaticVariableNameCheck.class);
         checkConfig.addAttribute("format", "^s[A-Z][a-zA-Z0-9]*$");
@@ -64,7 +64,7 @@ public void testSpecified()
 
     @Test
     public void testAccessTuning()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(StaticVariableNameCheck.class);
         checkConfig.addAttribute("format", "^s[A-Z][a-zA-Z0-9]*$");
@@ -78,7 +78,7 @@ public void testAccessTuning()
 
     @Test
     public void testInterfaceOrAnnotationBlock()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(StaticVariableNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java
index 7bcd91e758..650e991d66 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java
@@ -43,7 +43,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testSpecified()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(TypeNameCheck.class);
         checkConfig.addAttribute("format", "^inputHe");
@@ -53,7 +53,7 @@ public void testSpecified()
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(TypeNameCheck.class);
         final String[] expected = {
@@ -71,7 +71,7 @@ public void testDefault()
 
     @Test
     public void testClassSpecific()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypeNameCheck.class);
         checkConfig.addAttribute("tokens", TokenUtils.getTokenName(TokenTypes.CLASS_DEF));
@@ -84,7 +84,7 @@ public void testClassSpecific()
 
     @Test
     public void testInterfaceSpecific()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypeNameCheck.class);
         checkConfig.addAttribute("tokens", TokenUtils.getTokenName(TokenTypes.INTERFACE_DEF));
@@ -97,7 +97,7 @@ public void testInterfaceSpecific()
 
     @Test
     public void testEnumSpecific()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypeNameCheck.class);
         checkConfig.addAttribute("tokens", TokenUtils.getTokenName(TokenTypes.ENUM_DEF));
@@ -110,7 +110,7 @@ public void testEnumSpecific()
 
     @Test
     public void testAnnotationSpecific()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypeNameCheck.class);
         checkConfig.addAttribute("tokens", TokenUtils.getTokenName(TokenTypes.ANNOTATION_DEF));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
index 0d251417e1..e203a53412 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
@@ -149,7 +149,7 @@ public void testIllegalFailAboveErrorLimit() throws Exception {
 
     @Test
     public void testMessagePropertyGood()
-        throws Exception {
+            throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
         final DefaultConfiguration checkConfig =
             createCheckConfig(RegexpCheck.class);
@@ -165,7 +165,7 @@ public void testMessagePropertyGood()
 
     @Test
     public void testMessagePropertyBad()
-        throws Exception {
+            throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
         final DefaultConfiguration checkConfig =
             createCheckConfig(RegexpCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
index db386ebd0c..89cb1b887e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
@@ -67,7 +67,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testMessageProperty()
-        throws Exception {
+            throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
         checkConfig.addAttribute("format", illegal);
         final String message = "Bad line :(";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
index 6956498189..86f7dfa88e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
@@ -58,7 +58,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testMessageProperty()
-        throws Exception {
+            throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
         checkConfig.addAttribute("format", illegal);
         final String message = "Bad line :(";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
index 81f267a8ad..a8e8c7bedf 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
@@ -65,7 +65,7 @@ public void testIt() throws Exception {
 
     @Test
     public void testMessageProperty()
-        throws Exception {
+            throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
         checkConfig.addAttribute("format", illegal);
         final String message = "Bad line :(";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
index 945075f31c..33e141ed5b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
@@ -58,7 +58,7 @@ public void testGetAcceptableTokens() {
 
     @Test
     public void testSimple()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LineLengthCheck.class);
         checkConfig.addAttribute("max", "80");
@@ -72,7 +72,7 @@ public void testSimple()
 
     @Test
     public void shouldLogActualLineLength()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(LineLengthCheck.class);
         checkConfig.addAttribute("max", "80");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
index dc3a20241c..e264ac29f3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
@@ -61,7 +61,7 @@ public void testGetAcceptableTokens() {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNumberCheck.class);
         final String[] expected = {
@@ -72,7 +72,7 @@ public void testDefault()
 
     @Test
     public void testNum()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNumberCheck.class);
         checkConfig.addAttribute("max", "2");
@@ -85,7 +85,7 @@ public void testNum()
 
     @Test
     public void shouldLogActualParameterNumber()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParameterNumberCheck.class);
         checkConfig.addMessage("maxParam", "{0},{1}");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
index d4819361e0..f8895fa978 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
@@ -57,7 +57,7 @@ public void testDefaultTokensLineWrapping() throws Exception {
 
     @Test
     public void testCustomTokensLineWrapping()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(NoLineWrapCheck.class);
         checkConfig.addAttribute("tokens", "IMPORT, CLASS_DEF, METHOD_DEF, ENUM_DEF");
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
index 9caaa82ae0..a5c9aa4c98 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
@@ -50,7 +50,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "15:19: " + getCheckMessage(MSG_LINE_NEW, "+"),
             "16:15: " + getCheckMessage(MSG_LINE_NEW, "-"),
@@ -63,7 +63,7 @@ public void testDefault()
 
     @Test
     public void testOpWrapEol()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("option", WrapOption.EOL.toString());
         final String[] expected = {
             "18:13: " + getCheckMessage(MSG_LINE_PREVIOUS, "-"),
@@ -75,7 +75,7 @@ public void testOpWrapEol()
 
     @Test
     public void testAssignEol()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("tokens", "ASSIGN");
         checkConfig.addAttribute("option", WrapOption.EOL.toString());
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
index 3c032989c8..7a9ab592ee 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
@@ -44,7 +44,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParenPadCheck.class);
         final String[] expected = {
@@ -63,7 +63,7 @@ public void testDefault()
 
     @Test
     public void testSpace()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParenPadCheck.class);
         checkConfig.addAttribute("option", PadOption.SPACE.toString());
@@ -107,7 +107,7 @@ public void testSpace()
 
     @Test
     public void testDefaultForIterator()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParenPadCheck.class);
         final String[] expected = {
@@ -124,7 +124,7 @@ public void testDefaultForIterator()
 
     @Test
     public void testSpaceEmptyForIterator()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(ParenPadCheck.class);
         checkConfig.addAttribute("option", PadOption.SPACE.toString());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
index b7b85e4b05..5f85ff8af3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
@@ -52,7 +52,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDot()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("option", "NL");
         checkConfig.addAttribute("tokens", "DOT");
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java
index 03cf246229..213160c998 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java
@@ -45,7 +45,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testDefault()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypecastParenPadCheck.class);
         final String[] expected = {
@@ -57,7 +57,7 @@ public void testDefault()
 
     @Test
     public void testSpace()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(TypecastParenPadCheck.class);
         checkConfig.addAttribute("option", PadOption.SPACE.toString());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
index 03bf71b971..d0c01184af 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
@@ -63,7 +63,7 @@ public void testGetRequiredTokens() {
 
     @Test
     public void testIt()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "16:22: " + getCheckMessage(MSG_WS_NOT_PRECEDED, "="),
             "16:23: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "="),
@@ -107,7 +107,7 @@ public void testIt()
 
     @Test
     public void testIt2()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "153:27: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "="),
             "154:27: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "="),
@@ -121,7 +121,7 @@ public void testIt2()
 
     @Test
     public void testIt3()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "37:14: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "while"),
             "54:12: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "for"),
@@ -137,7 +137,7 @@ public void testIt3()
 
     @Test
     public void testIt4()
-        throws Exception {
+            throws Exception {
         checkConfig.addAttribute("allowEmptyMethods", "true");
         checkConfig.addAttribute("allowEmptyConstructors", "true");
         final String[] expected = {
@@ -149,7 +149,7 @@ public void testIt4()
 
     @Test
     public void testGenericsTokensAreFlagged()
-        throws Exception {
+            throws Exception {
         final String[] expected = {
             "6:67: " + getCheckMessage(MSG_WS_NOT_PRECEDED, "&"),
             "6:68: " + getCheckMessage(MSG_WS_NOT_FOLLOWED, "&"),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
index 1befbbb461..989ce67c06 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
@@ -114,7 +114,7 @@ private void verifySuppressed(Configuration aFilterConfig,
 
     @Override
     public Checker createChecker(Configuration checkConfig)
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkerConfig =
             new DefaultConfiguration("configuration");
         final DefaultConfiguration checksConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index e60663c525..3347128d31 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -204,7 +204,7 @@ private static DefaultConfiguration createFilterConfig(Class<?> classObj) {
 
     private void verifySuppressed(Configuration filterConfig,
             String... suppressed)
-        throws Exception {
+            throws Exception {
         verify(createChecker(filterConfig),
                getPath("InputSuppressWithNearbyCommentFilter.java"),
                removeSuppressed(ALL_MESSAGES, suppressed));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index be09f4dea9..ce099d7d9f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -204,7 +204,7 @@ private static DefaultConfiguration createFilterConfig(Class<?> aClass) {
 
     private void verifySuppressed(Configuration aFilterConfig,
             String... aSuppressed)
-        throws Exception {
+            throws Exception {
         verify(createChecker(aFilterConfig),
                getPath("InputSuppressionCommentFilter.java"),
                removeSuppressed(ALL_MESSAGES, aSuppressed));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
index e6c52dc3ed..fe3502c2e0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
@@ -171,7 +171,7 @@ public void testNonExistanceSuppressionUrlWithTrueOptional() throws Exception {
     }
 
     private static SuppressionFilter createSupressionFilter(String fileName, boolean optional)
-        throws CheckstyleException {
+            throws CheckstyleException {
         final SuppressionFilter suppressionFilter = new SuppressionFilter();
         suppressionFilter.setFile(fileName);
         suppressionFilter.setOptional(optional);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
index 26663242bb..8f9ef7cde6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
@@ -57,7 +57,7 @@ protected String getPath(String filename) {
 
     @Test
     public void testNoSuppressions()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final FilterSet fc =
             SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));
         final FilterSet fc2 = new FilterSet();
@@ -100,7 +100,7 @@ public void testLoadFromNonExistingUrl() throws CheckstyleException {
 
     @Test
     public void testMultipleSuppression()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final FilterSet fc =
             SuppressionsLoader.loadSuppressions(getPath("suppressions_multiple.xml"));
         final FilterSet fc2 = new FilterSet();
@@ -268,7 +268,7 @@ public void testInvalidFileFormat() {
 
     @Test
     public void testLoadFromClasspath()
-        throws CheckstyleException {
+            throws CheckstyleException {
         final FilterSet fc =
             SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));
         final FilterSet fc2 = new FilterSet();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/EmbeddedNullCharTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/EmbeddedNullCharTest.java
index 37f4a55372..ab507e3c05 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/EmbeddedNullCharTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/EmbeddedNullCharTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/HexFloatsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/HexFloatsTest.java
index 3a72ee8a45..2239b2e40e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/HexFloatsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/HexFloatsTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7DiamondTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7DiamondTest.java
index a7e1aa3a2f..f5f700b7dd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7DiamondTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7DiamondTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7MultiCatchTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7MultiCatchTest.java
index e132c25671..b5d23f6157 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7MultiCatchTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7MultiCatchTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7NumericalLiteralsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7NumericalLiteralsTest.java
index 6e25fe347c..8d0fb24f72 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7NumericalLiteralsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7NumericalLiteralsTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7StringSwitchTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7StringSwitchTest.java
index 4db23678bc..6f7993ad80 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7StringSwitchTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7StringSwitchTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7TryWithResourcesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7TryWithResourcesTest.java
index 6804ed5d03..1b698000f4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7TryWithResourcesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/Java7TryWithResourcesTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/LineCommentAtTheEndOfFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/LineCommentAtTheEndOfFileTest.java
index b907b1bf5a..cfe9df7417 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/LineCommentAtTheEndOfFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/LineCommentAtTheEndOfFileTest.java
@@ -44,7 +44,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/MultiDimensionalArraysInGenericsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/MultiDimensionalArraysInGenericsTest.java
index c96652d6b5..9d3ede31cb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/MultiDimensionalArraysInGenericsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/MultiDimensionalArraysInGenericsTest.java
@@ -38,7 +38,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/UnicodeEscapeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/UnicodeEscapeTest.java
index a950c8eb3d..8bf160ff42 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/UnicodeEscapeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/UnicodeEscapeTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/VarargTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/VarargTest.java
index 45953bb501..4fcc1eae3c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/VarargTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/VarargTest.java
@@ -42,7 +42,7 @@ protected String getPath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationTest.java
index 215ef886cd..b859693e9f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationTest.java
@@ -44,7 +44,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testSimpleTypeAnnotation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -54,7 +54,7 @@ public void testSimpleTypeAnnotation()
 
     @Test
     public void testAnnotationOnClass()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -64,7 +64,7 @@ public void testAnnotationOnClass()
 
     @Test
     public void testClassCastTypeAnnotation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -74,7 +74,7 @@ public void testClassCastTypeAnnotation()
 
     @Test
     public void testMethodParametersTypeAnnotation()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -84,7 +84,7 @@ public void testMethodParametersTypeAnnotation()
 
     @Test
     public void testAnnotationInThrows()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -94,7 +94,7 @@ public void testAnnotationInThrows()
 
     @Test
     public void testAnnotationInGeneric()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -104,7 +104,7 @@ public void testAnnotationInGeneric()
 
     @Test
     public void testAnnotationOnConstructorCall()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -114,7 +114,7 @@ public void testAnnotationOnConstructorCall()
 
     @Test
     public void testAnnotationNestedCall()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -124,7 +124,7 @@ public void testAnnotationNestedCall()
 
     @Test
     public void testAnnotationOnWildcards()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -134,7 +134,7 @@ public void testAnnotationOnWildcards()
 
     @Test
     public void testAnnotationInCatchParameters()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationsOnArrayTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationsOnArrayTest.java
index ca31b4991a..a9b707dfbe 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationsOnArrayTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/AnnotationsOnArrayTest.java
@@ -38,7 +38,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/DefaultMethodsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/DefaultMethodsTest.java
index 027bbfd865..93749b2ff6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/DefaultMethodsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/DefaultMethodsTest.java
@@ -44,7 +44,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -54,7 +54,7 @@ public void testCanParse()
 
     @Test
     public void testSwitch()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/LambdaTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/LambdaTest.java
index 32f50b2875..9a9376b5bf 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/LambdaTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/LambdaTest.java
@@ -38,7 +38,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testLambdaInVariableInitialization()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -48,7 +48,7 @@ public void testLambdaInVariableInitialization()
 
     @Test
     public void testWithoutArgsOneLineLambdaBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -58,7 +58,7 @@ public void testWithoutArgsOneLineLambdaBody()
 
     @Test
     public void testWithoutArgsFullLambdaBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -68,7 +68,7 @@ public void testWithoutArgsFullLambdaBody()
 
     @Test
     public void testWithOneArgWithOneLineBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -78,7 +78,7 @@ public void testWithOneArgWithOneLineBody()
 
     @Test
     public void testWithOneArgWithFullBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -88,7 +88,7 @@ public void testWithOneArgWithFullBody()
 
     @Test
     public void testWithOneArgWithoutTypeOneLineBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -98,7 +98,7 @@ public void testWithOneArgWithoutTypeOneLineBody()
 
     @Test
     public void testWithOneArgWithoutTypeFullBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -108,7 +108,7 @@ public void testWithOneArgWithoutTypeFullBody()
 
     @Test
     public void testWithFewArgsWithoutTypeOneLineBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -118,7 +118,7 @@ public void testWithFewArgsWithoutTypeOneLineBody()
 
     @Test
     public void testWithFewArgsWithoutTypeFullBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -128,7 +128,7 @@ public void testWithFewArgsWithoutTypeFullBody()
 
     @Test
     public void testWithOneArgWithoutParenthesesWithoutTypeOneLineBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -138,7 +138,7 @@ public void testWithOneArgWithoutParenthesesWithoutTypeOneLineBody()
 
     @Test
     public void testWithOneArgWithoutParenthesesWithoutTypeFullBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -148,7 +148,7 @@ public void testWithOneArgWithoutParenthesesWithoutTypeFullBody()
 
     @Test
     public void testWithFewArgWIthTypeOneLine()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -158,7 +158,7 @@ public void testWithFewArgWIthTypeOneLine()
 
     @Test
     public void testWithFewArgWithTypeFullBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -168,7 +168,7 @@ public void testWithFewArgWithTypeFullBody()
 
     @Test
     public void testWIthMultilineBody()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -178,7 +178,7 @@ public void testWIthMultilineBody()
 
     @Test
     public void testCasesFromSpec()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -188,7 +188,7 @@ public void testCasesFromSpec()
 
     @Test
     public void testWithTypecast()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -198,7 +198,7 @@ public void testWithTypecast()
 
     @Test
     public void testInAssignment()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -208,7 +208,7 @@ public void testInAssignment()
 
     @Test
     public void testInTernary()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/MethodReferencesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/MethodReferencesTest.java
index 5a06491471..3b6399cd4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/MethodReferencesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/MethodReferencesTest.java
@@ -38,7 +38,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -48,7 +48,7 @@ public void testCanParse()
 
     @Test
     public void testFromSpec()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -58,7 +58,7 @@ public void testFromSpec()
 
     @Test
     public void testGenericInPostfixExpressionBeforeReference()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -94,7 +94,7 @@ public void testFromSpring()
 
     @Test
     public void testMethodReferences7()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/TypeUseAnnotationsOnQualifiedTypesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/TypeUseAnnotationsOnQualifiedTypesTest.java
index 0170aead52..4d87c1f951 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/TypeUseAnnotationsOnQualifiedTypesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/TypeUseAnnotationsOnQualifiedTypesTest.java
@@ -38,7 +38,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
 
     @Test
     public void testCanParse()
-        throws Exception {
+            throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(MemberNameCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
index f9299d3973..0061d4b78b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
@@ -42,7 +42,7 @@
     private final BaseErrorListener errorListener = new FailOnErrorListener();
 
     private ParseTree parseJavadoc(String aBlockComment)
-        throws IOException {
+            throws IOException {
         final Charset utf8Charset = Charset.forName("UTF-8");
         final InputStream in = new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));
 
@@ -61,7 +61,7 @@ private ParseTree parseJavadoc(String aBlockComment)
     }
 
     private static String getFileContent(File filename)
-        throws IOException {
+            throws IOException {
         return Files.toString(filename, Charsets.UTF_8);
     }
 
@@ -81,7 +81,7 @@ private static String getDocPath(String filename) throws IOException {
 
     @Test
     public void oneSimpleHtmlTag()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputOneSimpleHtmlTag.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeOneSimpleHtmlTag();
@@ -90,7 +90,7 @@ public void oneSimpleHtmlTag()
 
     @Test
     public void textBeforeJavadocTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputTextBeforeJavadocTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeTextBeforeJavadocTags();
@@ -99,7 +99,7 @@ public void textBeforeJavadocTags()
 
     @Test
     public void customJavadocTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputCustomJavadocTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeCustomJavadocTags();
@@ -108,7 +108,7 @@ public void customJavadocTags()
 
     @Test
     public void javadocTagDescriptionWithInlineTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputJavadocTagDescriptionWithInlineTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeJavadocTagDescriptionWithInlineTags();
@@ -117,7 +117,7 @@ public void javadocTagDescriptionWithInlineTags()
 
     @Test
     public void leadingAsterisks()
-        throws IOException {
+            throws IOException {
         final String filename = getPath("InputLeadingAsterisks.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeLeadingAsterisks();
@@ -126,7 +126,7 @@ public void leadingAsterisks()
 
     @Test
     public void authorWithMailto()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputAuthorWithMailto.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeAuthorWithMailto();
@@ -135,7 +135,7 @@ public void authorWithMailto()
 
     @Test
     public void htmlTagsInParagraph()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputHtmlTagsInParagraph.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeHtmlTagsInParagraph();
@@ -144,7 +144,7 @@ public void htmlTagsInParagraph()
 
     @Test
     public void linkInlineTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputLinkInlineTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeLinkInlineTags();
@@ -153,7 +153,7 @@ public void linkInlineTags()
 
     @Test
     public void seeReferenceWithFewNestedClasses()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputSeeReferenceWithFewNestedClasses.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeSeeReferenceWithFewNestedClasses();
@@ -162,7 +162,7 @@ public void seeReferenceWithFewNestedClasses()
 
     @Test
     public void paramWithGeneric()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputParamWithGeneric.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeParamWithGeneric();
@@ -171,7 +171,7 @@ public void paramWithGeneric()
 
     @Test
     public void serial()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputSerial.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeSerial();
@@ -180,7 +180,7 @@ public void serial()
 
     @Test
     public void since()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputSince.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeSince();
@@ -189,7 +189,7 @@ public void since()
 
     @Test
     public void unclosedAndClosedParagraphs()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputUnclosedAndClosedParagraphs.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedAndClosedParagraphs();
@@ -198,7 +198,7 @@ public void unclosedAndClosedParagraphs()
 
     @Test
     public void listWithUnclosedItemInUnclosedParagraph()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputListWithUnclosedItemInUnclosedParagraph.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder
@@ -208,7 +208,7 @@ public void listWithUnclosedItemInUnclosedParagraph()
 
     @Test
     public void unclosedParagraphFollowedByJavadocTag()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputUnclosedParagraphFollowedByJavadocTag.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedParagraphFollowedByJavadocTag();
@@ -217,7 +217,7 @@ public void unclosedParagraphFollowedByJavadocTag()
 
     @Test
     public void allJavadocInlineTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputAllJavadocInlineTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeAllJavadocInlineTags();
@@ -226,7 +226,7 @@ public void allJavadocInlineTags()
 
     @Test
     public void docRootInheritDoc()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputDocRootInheritDoc.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeDocRootInheritDoc();
@@ -235,7 +235,7 @@ public void docRootInheritDoc()
 
     @Test
     public void fewWhiteSpacesAsSeparator()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputFewWhiteSpacesAsSeparator.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeFewWhiteSpacesAsSeparator();
@@ -244,7 +244,7 @@ public void fewWhiteSpacesAsSeparator()
 
     @Test
     public void mixedCaseOfHtmlTags()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputMixedCaseOfHtmlTags.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeMixedCaseOfHtmlTags();
@@ -253,7 +253,7 @@ public void mixedCaseOfHtmlTags()
 
     @Test
     public void htmlComments()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputComments.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeComments();
@@ -262,7 +262,7 @@ public void htmlComments()
 
     @Test
     public void negativeNumberInAttribute()
-        throws IOException {
+            throws IOException {
         final String filename = getHtmlPath("InputNegativeNumberInAttribute.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeNegativeNumberInAttribute();
@@ -271,7 +271,7 @@ public void negativeNumberInAttribute()
 
     @Test
     public void dollarInLink()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputDollarInLink.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeDollarInLink();
@@ -280,7 +280,7 @@ public void dollarInLink()
 
     @Test
     public void dotCharacterInCustomTags()
-        throws IOException {
+            throws IOException {
         final String filename = getDocPath("InputCustomTagWithDot.txt");
         final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
         final ParseTree expectedTree = ParseTreeBuilder.treeCustomTagWithDot();
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/InputUnusedImportWithValueTag.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/InputUnusedImportWithValueTag.java
new file mode 100755
index 0000000000..80b42ef23e
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/InputUnusedImportWithValueTag.java
@@ -0,0 +1,15 @@
+package com.puppycrawl.tools.checkstyle.checks.imports;
+
+import java.util.Calendar;
+
+public class InputUnusedImportWithValueTag {
+
+    /**
+     * Method determines current month as for {@value Calendar#MONTH}.
+     *
+     * @return index of the current month.
+     */
+    public int currentMonth() {
+        return 1;
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
index 724329e3c0..ec707eb429 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
@@ -161,7 +161,7 @@ private void myMethod() //indent:4 exp:4
     } //indent:4 exp:4
 
     private void myFunc() //indent:4 exp:4
-      throws Exception //indent:6 exp:6
+        throws Exception //indent:8 exp:8
     { //indent:4 exp:4
     } //indent:4 exp:4
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent.java
index 33dd601a6d..ad814a5e99 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent.java
@@ -22,14 +22,25 @@ public InputInvalidThrowsIndent() //indent:4 exp:4
 
     // This should pass for our reconfigured throwsIndent test. //indent:4 exp:4
     private void myFunc() //indent:4 exp:4
-            throws Exception //indent:12 exp:12
+            throws Exception //indent:12 exp:>=12
     { //indent:4 exp:4
     } //indent:4 exp:4
 
     // This is the out of the box default configuration, but should fail //indent:4 exp:4
     // for our reconfigured test. //indent:4 exp:4
     private void myFunc2() //indent:4 exp:4
-        throws Exception //indent:8 exp:8
+            throws Exception //indent:12 exp:>=12
+    { //indent:4 exp:4
+    } //indent:4 exp:4
+
+    private void myFunc3() //indent:4 exp:4
+            throws //indent:12 exp:>=12
+            Exception //indent:12 exp:>=12
+    { //indent:4 exp:4
+    } //indent:4 exp:4
+
+    private void myFunc4() throws //indent:4 exp:4
+                Exception //indent:16 exp:>=12
     { //indent:4 exp:4
     } //indent:4 exp:4
 } //indent:0 exp:0
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent2.java
new file mode 100755
index 0000000000..c4b4fda37d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidThrowsIndent2.java
@@ -0,0 +1,40 @@
+package com.puppycrawl.tools.checkstyle.checks.indentation; //indent:0 exp:0
+
+public abstract class InputInvalidThrowsIndent2 { //indent:0 exp:0
+ public void m1() throws Exception { //indent:1 exp:1
+ } //indent:1 exp:1
+ public void m2() throws //indent:1 exp:1
+Exception { //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ public void m3() throws Exception, //indent:1 exp:1
+NullPointerException { //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ public void m4() //indent:1 exp:1
+throws Exception { //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ public abstract void m5() //indent:1 exp:1
+throws Exception; //indent:0 exp:6 warn
+ public void m6() //indent:1 exp:1
+throws //indent:0 exp:6 warn
+Exception { //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ public void m7() //indent:1 exp:1
+throws //indent:0 exp:6 warn
+Exception, //indent:0 exp:6 warn
+NullPointerException { //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ double[] m8() //indent:1 exp:1
+throws //indent:0 exp:6 warn
+Exception { return null; //indent:0 exp:6 warn
+ } //indent:1 exp:1
+ public InputInvalidThrowsIndent2() //indent:1 exp:1
+throws Exception {//indent:0 exp:6 warn
+ } //indent:1 exp:1
+ @TestAnnotation //indent:1 exp:1
+ public //indent:1 exp:1
+    static //indent:4 exp:4
+    void m9() //indent:4 exp:4
+throws Exception {} //indent:0 exp:6 warn
+} //indent:0 exp:0
+
+@interface TestAnnotation {} //indent:0 exp:0
\ No newline at end of file
diff --git a/src/xdocs/config_misc.xml b/src/xdocs/config_misc.xml
index 0b9acf0d81..4914d3d282 100755
--- a/src/xdocs/config_misc.xml
+++ b/src/xdocs/config_misc.xml
@@ -1006,19 +1006,19 @@ String unitAbbrev = "\u03bc\u03bc\u03bc";
           </tr>
           <tr>
             <td>basicOffset</td>
-            <td>how many spaces to use for new indentation level</td>
+            <td>how far new indentation level should be indented when on the next line</td>
             <td><a href="property_types.html#integer">Integer</a></td>
             <td>4</td>
           </tr>
           <tr>
             <td>braceAdjustment</td>
-            <td>how far braces should be indented when on the next line</td>
+            <td>how far a braces should be indented when on the next line</td>
             <td><a href="property_types.html#integer">Integer</a></td>
             <td>0</td>
           </tr>
           <tr>
             <td>caseIndent</td>
-            <td>how much to indent a case label</td>
+            <td>how far a case label should be indented when on next line</td>
             <td><a href="property_types.html#integer">Integer</a></td>
             <td>4</td>
           </tr>
@@ -1030,7 +1030,7 @@ String unitAbbrev = "\u03bc\u03bc\u03bc";
           </tr>
           <tr>
             <td>arrayInitIndent</td>
-            <td>how much to indent an array initialisation when on next line</td>
+            <td>how far an array initialisation should be indented when on next line</td>
             <td><a href="property_types.html#integer">Integer</a></td>
             <td>4</td>
           </tr>
@@ -1042,8 +1042,8 @@ String unitAbbrev = "\u03bc\u03bc\u03bc";
           </tr>
           <tr>
             <td>forceStrictCondition</td>
-            <td>force strict condition in line wrapping case. If value is true, line wrap indent
-                have to be same as lineWrappingIndentation parameter</td>
+            <td>force strict indent level in line wrapping case. If value is true, line wrap indent
+                have to be same as lineWrappingIndentation parameter. If value is false, line wrap indent could be bigger on any value user would like.</td>
             <td><a href="property_types.html#boolean">Boolean</a></td>
             <td>false</td>
           </tr>
diff --git a/src/xdocs/writingjavadocchecks.xml.vm b/src/xdocs/writingjavadocchecks.xml.vm
index 9b0ac35439..b89783cb32 100755
--- a/src/xdocs/writingjavadocchecks.xml.vm
+++ b/src/xdocs/writingjavadocchecks.xml.vm
@@ -23,33 +23,63 @@
 
     <section name="What is Javadoc comment">
       <p>
-      Javadoc comment is multiline comment that starts with <b>*</b> character and placed under class definition, interface definition, enum definition, method definition or field definition. 
-      The comment should be written in XHTML to be correctly processed by Checkstyle. This means that every HTML tag should have matching closed HTML tag or it is self-closed one (singlton tag). 
-      The only exceptions are &lt;p&gt;, &lt;li&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;body&gt;, &lt;colgroup&gt;, &lt;dd&gt;, &lt;dt&gt;, &lt;head&gt;, &lt;html&gt;, &lt;option&gt;, 
-      &lt;tbody&gt;, &lt;thead&gt;, &lt;tfoot&gt; and Checkstyle won't show error about missing closing tag, however, it leads to broken XHTML structure and, therefore, 
+      Javadoc comment is multiline comment that starts with <b>*</b> character and placed above class definition, interface definition, enum definition, method definition or field definition.
+      <p>For example, here is java file:</p>
+      <source><![CDATA[
+/**
+ * My <b>class</b>.
+ * @see AbstractClass
+ */
+public class MyClass {
+
+}
+      ]]></source>
+      Javadoc content is:
+      <source><![CDATA[
+ * My <b>class</b>.
+ * @see AbstractClass
+      ]]></source>
+      </p>
+      Attention that java comment is start with <code>/*</code>, following with Identificator of comment type. Javadoc Identificator is <code>*</code>. All symbols after Javadoc Identificator till <code>*/</code> are part of javadoc comment. In internet you can find different types of documentation
+      generation tools similar to javadoc. Such tools reply on different Identificators: "!", "#", "$".
+      Comments looks like <code>"/*! some comment */"</code> , <code>"/*# some comment */"</code> , <code>"/*$ some comment */"</code>. Such multiline comments are not a javadoc.
+    </section>
+
+    <section name="Limitations">
+      <p>
+      Javadoc by specification could contain any HTML tags that to let user generate content hi needs.
+      Checkstyle can not parse something that looks like an HTML, so limitation appear.
+      The comment should be written in XHTML to be correctly processed by Checkstyle. This means that every HTML tag should have matching closed HTML tag or it is self-closed one (singlton tag).
+      The only exceptions are &lt;p&gt;, &lt;li&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;body&gt;, &lt;colgroup&gt;, &lt;dd&gt;, &lt;dt&gt;, &lt;head&gt;, &lt;html&gt;, &lt;option&gt;,
+      &lt;tbody&gt;, &lt;thead&gt;, &lt;tfoot&gt; and Checkstyle won't show error about missing closing tag, however, it leads to broken XHTML structure and, therefore,
       incorrect Abstract Syntax Tree of the Javadoc comment anyway. See examples at "HTML Code In Javadoc Comments" chapter.
       </p>
+      <p>
+        Javadoc parser requires XHTML to be used in Javadoc comments, i.e. if there is some open tag(for example &lt;div&gt;) then there have to be its close tag &lt;/div&gt;.
+        This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment, therefore, your new Check can't get its parse tree and process anything from this Javadoc comment. For more details and examples go to "HTML code in Javadoc comments" section.
+      </p>
     </section>
 
     <section name="Overview">
       <p>
-      To start implementing your own Check create new class and extend <a href='http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html'>AbstractJavadocCheck</a>. It has two abstract methods:
+      To start implementing new Check create new class and extend <a href='http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html'>AbstractJavadocCheck</a>. It has two abstract methods you should implement:
       </p>
       <ul>
-        <li>getDefaultJavadocTokens() - return array of token types that your new Check requires to process (see "Token Types" section)</li>
-        <li>visitJavadocToken(DetailNode) - it's the place you should put tree nodes proccessing. The argument is Javadoc tree node of type you described 
+        <li>getDefaultJavadocTokens() - return int array of javadoc token types your Check is going to process. The array should contain int constants from JavadocTokenTypes class.
+          There is also TokenTypes class in Checkstyle. Make sure you use JavadocTokenTypes class in your Check, because the TokenTypes is used to describe standard Java DetailAST token type.</li>
+        <li>visitJavadocToken(DetailNode) - it's the place you should put tree nodes proccessing. The argument is Javadoc tree node of type you described
           before in getDefaultJavadocTokens() method.</li>
       </ul>
-      <p>
-        Javadoc parser requires XHTML to be used in Javadoc comments, i.e. if there is some open tag(for example &lt;div&gt;) then there have to be its close tag &lt;/div&gt;.
-        This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment, therefore, your new Check can't get its parse tree and process anything from this Javadoc comment. For more details and examples go to "HTML code in Javadoc comments" section.
-      </p>
     </section>
 
     <section name="Difference between Java Grammar and Javadoc comments Grammar">
       <p>
-        Java grammar parses java file due to language specifications. So, there are singleline comments and multiline/block comments in it. Java compiler doesn't know about Javadoc because it is just a multiline comment.
-        To parse multiline comment as a Javadoc comment, checkstyle has second grammar - Javadoc grammar. So, it's supposed to proccess block comments and parse them to Abstract Syntax Tree.
+        Java grammar parses java file due to Java language specifications. So, there are singleline comments and multiline/block comments in it. Java compiler doesn't know about Javadoc because it is just a multiline comment.
+        To parse multiline comment as a Javadoc comment, checkstyle has special Parser
+        that is based on ANTLR Javadoc grammar. So, it's supposed to proccess block comments
+        that start with Javadoc Identificator and parse them to Abstract Syntax Tree (AST).
+      </p>
+      <p>
         The problem is that Java grammar is old one and uses ANTLR v2, while Javadoc grammar uses ANTLR v4. Because of that, these two grammars and their trees are not compatible.
         Java AST consists of DetailAST objects, while Javadoc AST consists of DetailNode objects.
       </p>
@@ -57,9 +87,9 @@
 
     <section name="Tools to see Javadoc tree structure">
       <p>
-      Checkstyle can print Abstract Syntax Tree including Javadoc trees. You need to run checkstyle jar file with <b>-J</b> argument, providing java file.
+      Checkstyle can print Abstract Syntax Tree for Java and Javadoc trees. You need to run checkstyle jar file with <b>-J</b> argument, providing java file.
       </p>
-      <p>For example, here is java file:</p>
+      <p>For example, here is MyClass.java file:</p>
       <source><![CDATA[
 /**
  * My <b>class</b>.
@@ -125,7 +155,7 @@ CLASS_DEF -> CLASS_DEF [5:0]
       But in most cases while developing Javadoc Check you need only parse tree of the exact Javadoc comment.
       To do that just copy Javadoc comment to separate file and remove <b>/**</b> at the begining and <b>*/</b> at the end. After that, run checkstyle with <b>-j</b> argument.
       </p>
-      <p>File:</p>
+      <p>MyJavadocComment.javadoc file:</p>
       <source><![CDATA[
  * My <b>class</b>.
  * @see AbstractClass
@@ -172,13 +202,18 @@ JAVADOC ->  * My <b>class</b>.\r\n * @see AbstractClass<EOF> [0:0]
       ]]></source>
     </section>
 
-    <section name="Token types">
+    <section name="Access Java AST from Javadoc Check">
+      As you alreasy know Javadoc parse tree is result of parsing block comment. There is a method to get the original block comment from Javadoc Check.
+      You may need this block comment to check its position or something else in main DetailAST tree.
+      <p>
+      For example, to write a JavadocCheck that verifies @param tags in Javadoc comment of a method definition, you also need all method's parameter names. To get method definition AST you should access main DetailAST tree throuth block comment AST. For this purpose use <a href="http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getBlockCommentAst--">getBlockCommentAst()</a> method that returns DetailAST node.
+      </p>
     </section>
 
     <section name="HTML Code In Javadoc Comments">
     <p>
     Examples:
-    1) Unclosed paragraph HTML tag. As you see in the tree, content of the paragraph tag is not nested to this tag. That is because HTML tags are not closed by pair tag &lt;/p&gt;, and Checkstyle requires XHTML to correctly parse Javadoc comments.
+    1) Unclosed paragraph HTML tag. As you see in the tree, content of the paragraph tag is not nested to this tag. That is because HTML tags are not closed by pair tag &lt;/p&gt;, and Checkstyle requires XHTML to predictably parse Javadoc comments.
     </p>
     <source><![CDATA[
 <p> First
@@ -215,7 +250,7 @@ JAVADOC -> <p> First\r\n<p> Second<EOF> [0:0]
 `--EOF -> <EOF> [1:10]
     ]]></source>
     <p>
-    2) Here is correct version with open and closed HTML tags. 
+    2) Here is correct version with open and closed HTML tags.
     </p>
     <source><![CDATA[
 <p> First </p>
@@ -267,16 +302,20 @@ JAVADOC -> <p> First </p>\r\n<p> Second </p><EOF> [0:0]
     ]]></source>
     </section>
 
-
     <section name="Checkstyle SDK GUI">
+      Not implemented yet. See <a href="https://github.com/checkstyle/checkstyle/issues/408">Github Issue #408</a>.
     </section>
 
-    <section name="Access Java AST from Javadoc Check">
+    <section name="Integrating new Javadoc Check">
+      Javadoc Checks as well as regular Checks extend <a href="http://checkstyle.sourceforge.net/apidocs/index.html">AbstractCheck</a> class. So integrating new Javadoc Check is similar to <a href="writingchecks.html#Integrate_your_Check">integrating other Checks</a>.
     </section>
 
-    <section name="Integrating new Javadoc Check">
+    <section name="Examples of Javadoc Checks">
+      The best source knowledge about how to write Javadoc Checks
+      could be taken from
+      <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fjava+repo%3Acheckstyle%2Fcheckstyle+%22extends+AbstractJavadocCheck%22">
+        existing Checks</a>.
     </section>
 
   </body>
 </document>
-
