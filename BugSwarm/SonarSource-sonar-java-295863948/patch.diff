diff --git a/java-frontend/src/main/java/org/sonar/java/bytecode/cfg/BytecodeCFGBuilder.java b/java-frontend/src/main/java/org/sonar/java/bytecode/cfg/BytecodeCFGBuilder.java
index 4abd488f33..b70e87a098 100644
--- a/java-frontend/src/main/java/org/sonar/java/bytecode/cfg/BytecodeCFGBuilder.java
+++ b/java-frontend/src/main/java/org/sonar/java/bytecode/cfg/BytecodeCFGBuilder.java
@@ -22,6 +22,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Throwables;
 import com.google.common.io.ByteStreams;
+import java.util.Arrays;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.Handle;
@@ -64,9 +65,8 @@ private BytecodeCFGBuilder() {
   }
 
   @CheckForNull
-  public static BytecodeCFG buildCFG(String signature, SquidClassLoader classLoader) {
-    String className = signature.substring(0, signature.indexOf('#'));
-    try(InputStream is = classLoader.getResourceAsStream(Convert.bytecodeName(className) + ".class")) {
+  private static byte[] getClassBytes(String className, SquidClassLoader classLoader) {
+    try (InputStream is = classLoader.getResourceAsStream(Convert.bytecodeName(className) + ".class")) {
       if (is == null) {
         LOG.debug(".class not found for {}", className);
         return null;
@@ -76,12 +76,22 @@ public static BytecodeCFG buildCFG(String signature, SquidClassLoader classLoade
       if (Java9Support.isJava9Class(bytes)) {
         Java9Support.setJava8MajorVersion(bytes);
       }
-      return buildCFG(signature, bytes);
+      return bytes;
     } catch (IOException e) {
       throw Throwables.propagate(e);
     }
   }
 
+  @CheckForNull
+  public static BytecodeCFG buildCFG(String signature, SquidClassLoader classLoader) {
+    String className = signature.substring(0, signature.indexOf('#'));
+    byte[] classBytes = getClassBytes(className, classLoader);
+    if (classBytes == null) {
+      return null;
+    }
+    return buildCFG(signature, classBytes);
+  }
+
   @VisibleForTesting
   @CheckForNull
   static BytecodeCFG buildCFG(String sign, byte[] bytes) {
@@ -95,6 +105,8 @@ static BytecodeCFG buildCFG(String sign, byte[] bytes) {
     List<Block> blocks;
     boolean isStaticMethod;
     boolean isVarArgs;
+    List<String> throwsDeclaration;
+    boolean methodVisited;
 
     BytecodeCFG() {
       blocks = new ArrayList<>();
@@ -116,6 +128,14 @@ public boolean isVarArgs() {
       return isVarArgs;
     }
 
+    public List<String> getThrowsDeclaration() {
+      return throwsDeclaration;
+    }
+
+    public boolean isMethodVisited() {
+      return methodVisited;
+    }
+
     public List<Block> blocks() {
       return blocks;
     }
@@ -265,16 +285,24 @@ public void visit(int version, int access, String name, String signature, String
     public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
       if (name.equals(methodSignature.substring(methodSignature.indexOf('#') + 1, methodSignature.indexOf('(')))
         && desc.equals(methodSignature.substring(methodSignature.indexOf('(')))) {
+        methodVisitor.initCFG(access, convertExceptions(exceptions));
         if (isOverridableOrNativeMethod(access)) {
           // avoid computing CFG when the method behavior won't be used
           return null;
         }
-        methodVisitor.initCFG(access);
+        methodVisitor.cfg.methodVisited = true;
         return new JSRInlinerAdapter(methodVisitor, access, name, desc, signature, exceptions);
       }
       return null;
     }
 
+    private static List<String> convertExceptions(@Nullable String[] exceptions) {
+      return exceptions == null ? Collections.emptyList() : Arrays.stream(exceptions)
+          .map(Type::getObjectType)
+          .map(Type::getClassName)
+          .collect(Collectors.toList());
+    }
+
     private boolean isOverridableOrNativeMethod(int methodFlags) {
       if (Flags.isFlagged(methodFlags, Flags.NATIVE)) {
         return true;
@@ -295,12 +323,13 @@ private boolean isOverridableOrNativeMethod(int methodFlags) {
       super(Opcodes.ASM5);
     }
 
-    private void initCFG(int access) {
+    private void initCFG(int access, List<String> exceptions) {
       cfg = new BytecodeCFG();
       currentBlock = new Block(cfg);
       cfg.blocks.add(currentBlock);
       cfg.isStaticMethod = Flags.isFlagged(access, Flags.STATIC);
       cfg.isVarArgs = Flags.isFlagged(access, Flags.VARARGS);
+      cfg.throwsDeclaration = exceptions;
     }
 
     @Override
diff --git a/java-frontend/src/main/java/org/sonar/java/bytecode/se/BytecodeEGWalker.java b/java-frontend/src/main/java/org/sonar/java/bytecode/se/BytecodeEGWalker.java
index ec2530f84e..2778eb2b2a 100644
--- a/java-frontend/src/main/java/org/sonar/java/bytecode/se/BytecodeEGWalker.java
+++ b/java-frontend/src/main/java/org/sonar/java/bytecode/se/BytecodeEGWalker.java
@@ -22,16 +22,23 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import java.io.IOException;
+import java.io.InputStream;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Deque;
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.annotation.CheckForNull;
 import javax.annotation.Nullable;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.util.Printer;
 import org.sonar.api.utils.log.Logger;
@@ -39,6 +46,9 @@
 import org.sonar.java.bytecode.cfg.BytecodeCFGBuilder;
 import org.sonar.java.bytecode.cfg.Instruction;
 import org.sonar.java.bytecode.loader.SquidClassLoader;
+import org.sonar.java.resolve.Convert;
+import org.sonar.java.resolve.JavaSymbol;
+import org.sonar.java.resolve.JavaType;
 import org.sonar.java.resolve.SemanticModel;
 import org.sonar.java.resolve.Symbols;
 import org.sonar.java.se.ExplodedGraph;
@@ -56,6 +66,7 @@
 import org.sonar.java.se.symbolicvalues.SymbolicValue;
 import org.sonar.java.se.xproc.BehaviorCache;
 import org.sonar.java.se.xproc.MethodBehavior;
+import org.sonar.plugins.java.api.semantic.Symbol;
 import org.sonar.plugins.java.api.semantic.Type;
 
 import static org.objectweb.asm.Opcodes.AALOAD;
@@ -224,6 +235,7 @@
 
   @VisibleForTesting
   ExplodedGraph explodedGraph;
+  private SquidClassLoader classLoader;
 
   /**
    * Because some instructions manipulate stack differently depending on the type of the value, we need this constraint to know category of the value
@@ -281,6 +293,7 @@ public MethodBehavior getMethodBehavior(String signature, SquidClassLoader class
       // should not generate any method behavior
       return null;
     }
+    this.classLoader = classLoader;
     methodBehavior = behaviorCache.methodBehaviorForSymbol(signature);
     if (!methodBehavior.isVisited()) {
       try {
@@ -308,7 +321,10 @@ private void execute(String signature, SquidClassLoader classLoader) {
     programState = ProgramState.EMPTY_STATE;
     steps = 0;
     BytecodeCFGBuilder.BytecodeCFG bytecodeCFG = BytecodeCFGBuilder.buildCFG(signature, classLoader);
-    if (bytecodeCFG == null) {
+    if (bytecodeCFG != null) {
+      methodBehavior.setThrownDeclaration(bytecodeCFG.getThrowsDeclaration());
+    }
+    if (bytecodeCFG == null || !bytecodeCFG.isMethodVisited()) {
       return;
     }
     methodBehavior.setVarArgs(bytecodeCFG.isVarArgs());
@@ -768,6 +784,13 @@ private boolean handleMethodInvocation(Instruction instruction) {
       return !methodInvokedBehavior.yields().isEmpty();
     }
     programState = pop.state;
+    if (methodInvokedBehavior != null) {
+      methodInvokedBehavior.getThrownDeclaration().forEach(exception -> {
+        Type exceptionType = semanticModel.getClassType(exception);
+        ProgramState ps = programState.stackValue(constraintManager.createExceptionalSymbolicValue(exceptionType));
+        enqueueExceptionHandlers(exceptionType, ps);
+      });
+    }
     if (instruction.hasReturnValue()) {
       programState = programState.stackValue(returnSV);
       programState = setDoubleOrLong(returnSV, instruction.isLongOrDoubleValue());
diff --git a/java-frontend/src/main/java/org/sonar/java/se/xproc/MethodBehavior.java b/java-frontend/src/main/java/org/sonar/java/se/xproc/MethodBehavior.java
index 5ccdff4f23..b37e49c9ef 100644
--- a/java-frontend/src/main/java/org/sonar/java/se/xproc/MethodBehavior.java
+++ b/java-frontend/src/main/java/org/sonar/java/se/xproc/MethodBehavior.java
@@ -21,6 +21,7 @@
 
 import com.google.common.collect.ImmutableList;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
@@ -40,6 +41,7 @@
   private final String signature;
   private boolean complete = false;
   private boolean visited = false;
+  private List<String> thrownDeclaration;
 
   public MethodBehavior(String signature, boolean varArgs) {
     this.signature = signature;
@@ -47,6 +49,7 @@ public MethodBehavior(String signature, boolean varArgs) {
     this.parameters = new ArrayList<>();
     this.varArgs = varArgs;
     this.arity = org.objectweb.asm.Type.getArgumentTypes(signature.substring(signature.indexOf('('))).length;
+    this.thrownDeclaration = Collections.emptyList();
   }
 
   public MethodBehavior(String signature) {
@@ -169,4 +172,12 @@ public String signature() {
   public void setVarArgs(boolean varArgs) {
     this.varArgs = varArgs;
   }
+
+  public List<String> getThrownDeclaration() {
+    return thrownDeclaration;
+  }
+
+  public void setThrownDeclaration(List<String> thrownDeclaration) {
+    this.thrownDeclaration = thrownDeclaration;
+  }
 }
diff --git a/java-frontend/src/test/java/org/sonar/java/bytecode/se/BytecodeEGWalkerExecuteTest.java b/java-frontend/src/test/java/org/sonar/java/bytecode/se/BytecodeEGWalkerExecuteTest.java
index ca0cc58e5d..679490fbc9 100644
--- a/java-frontend/src/test/java/org/sonar/java/bytecode/se/BytecodeEGWalkerExecuteTest.java
+++ b/java-frontend/src/test/java/org/sonar/java/bytecode/se/BytecodeEGWalkerExecuteTest.java
@@ -108,6 +108,7 @@ public static void initializeClassLoaderAndSemanticModel() {
     List<File> files = new ArrayList<>(FileUtils.listFiles(new File("target/test-jars"), new String[]{"jar", "zip"}, true));
     files.add(new File("target/classes"));
     files.add(new File("target/test-classes"));
+    files.add(new File("C:\\projects\\sonar-java\\its\\sources\\commons-beanutils\\target\\classes"));
     squidClassLoader = new SquidClassLoader(files);
     File file = new File("src/test/java/org/sonar/java/bytecode/se/BytecodeEGWalkerExecuteTest.java");
     CompilationUnitTree tree = (CompilationUnitTree) JavaParser.createParser().parse(file);
@@ -1177,6 +1178,13 @@ public void method_returning_new_should_have_not_null_result() {
     assertThat(typeConstraint.type.equals("java.lang.String")).isTrue();
   }
 
+  @Test
+  public void test_sig() {
+    MethodBehavior mb = walker.getMethodBehavior("org.apache.commons.beanutils.MethodUtils#getMatchingAccessibleMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", squidClassLoader);
+    System.out.println(mb.yields());
+    System.out.println(mb.isComplete());
+  }
+
   /**
    * ---------------- used by test checking methods ---------
    */
