/*
 * RELEASING A NEW VERSION
 *  - set the following properties in ~/.gradle/gradle.properties
 *    - nexusUsername=<username>
 *    - nexusPassword=<pwd>
 *    - signing.secretKeyRingFile=<file>
 *    - signing.password=<passphrase>
 *  - Execute ./release.sh. This is what will happen:
 *    - all tests are executed locally
 *    - you will be asked for the version number of the release and the next development (SNAPSHOT) version
 *    - the gradle release plugin will then tag and push the release tag to github
 *    - checks out the just created release tag e.g. '0.11.0'
 *    - executes 'gradle uploadArchives'
 *  - Release the deployment at https://oss.sonatype.org/#welcome
 *    more information is available under http://central.sonatype.org/pages/releasing-the-deployment.html
 *
 */

import groovy.json.StringEscapeUtils

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.3.0'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
		classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
	}
}

plugins {
	id 'net.researchgate.release' version '2.3.5'
}

repositories {
	mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
if (!System.getProperty("java.version").startsWith("1.6.")) {
	apply plugin: 'cobertura'
	apply plugin: 'com.github.kt3k.coveralls'
}

ext {
	metricsVersion = '3.1.2'
	slf4jVersion = '1.7.21'
	jacksonVersion = '2.7.4'
	esVersion = '2.2.0'
	byteBuddyVersion = '1.4.1'
	getProjectsToRelease = this.&getProjectsToRelease
}

subprojects {
	group = "org.stagemonitor"

	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'java'
	if (!System.getProperty("java.version").startsWith("1.6.")) {
		apply plugin: 'cobertura'
	}

	if (projectsToRelease.contains(project)) {
		apply plugin: 'osgi'
		apply from: "$rootDir/gradle/publish-maven.gradle"

		jar {
			manifest {
				attributes("Implementation-Version": version)
				instruction 'Bundle-Vendor', 'iSYS Software GmbH'
				instruction 'Bundle-Description', 'Open source performance monitoring'
				instruction 'Bundle-DocURL', 'http://www.stagemonitor.org'
			}
		}
	}

	configurations {
		provided
		compile.extendsFrom provided

		optional
		compile.extendsFrom optional
	}

	repositories {
		mavenCentral()
		mavenLocal()
	}

	dependencies {
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-all:2.0.2-beta'
		testCompile 'ch.qos.logback:logback-classic:1.1.7'
		testCompile 'commons-io:commons-io:2.5'
	}

	test.testLogging.exceptionFormat = 'full'

	compileJava {
		sourceCompatibility = 1.6
		targetCompatibility = 1.6
		options.debug = true
		options.debugOptions.debugLevel = "source,lines,vars"
	}

	compileTestJava {
		options.debugOptions.debugLevel = "source,lines,vars"
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.incremental = true
	}

	if (!System.getProperty("java.version").startsWith("1.6.")) {
		cobertura {
			coverageFormats = []
			coverageIgnoreTrivial = true
		}
	}

	processResources {
		eachFile { resource ->
			def filePath = resource.file.canonicalPath
			def isGrafanaDashboard = filePath.endsWith(".json") && filePath.contains("grafana/") && filePath.contains("Elasticsearch") && !resource.path.contains("Grafana1")
			if (isGrafanaDashboard) {
				def documentationPath = filePath.replace(".json", "Documentation.md")
				def documentationFile = new File(documentationPath)
				if (documentationFile.exists()) {
					def documentationContent = """$documentationFile.text

---

[Edit this page](https://github.com/stagemonitor/stagemonitor/edit/master/${rootProject.relativePath(documentationFile)})
"""
					filter { line ->
						line.replace('$documentation', StringEscapeUtils.escapeJavaScript(documentationContent))
					}
				}
			}
		}
	}

	javadoc {
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	task copyToLib( type: Copy ) {
		into "$buildDir/libs/lib"
		from configurations.runtime - configurations.provided
	}

}

release {
	preTagCommitMessage = 'release '
	tagCommitMessage = 'release '
	newVersionCommitMessage = 'next development version '
	git {
		requireBranch = null
	}
}

def getProjectsToRelease() {
	subprojects.findAll { !(it.toString() =~ "benchmark|byte-buddy|grafana-elasticsearch") }
}

test.dependsOn << projectsToRelease*.tasks*.withType(Test).flatten()

if (!System.getProperty("java.version").startsWith("1.6.")) {
	cobertura {
		coverageMergeDatafiles =  projectsToRelease.collect { file("${it.buildDir.path}/cobertura/cobertura.ser") }
		coverageFormats = ['html', 'xml']
		coverageIgnoreTrivial = true
		coverageSourceDirs = [projectsToRelease.sourceSets.main.java.srcDirs.flatten() ]
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.12"
}

task printProjectsToTest() << {
	println getProjectsToRelease()
}

task install
install.dependsOn subprojects.compileJava
