diff --git a/build.gradle b/build.gradle
index b5997c8654..532d82271c 100755
--- a/build.gradle
+++ b/build.gradle
@@ -125,6 +125,7 @@ test {
     useTestNG() {
         suites 'src/test/resources/testng.xml'
     }
+    testLogging.showStandardStreams = true
     systemProperties = System.getProperties()
     systemProperties['test.resources.dir'] = 'build/resources/test/'
 }
diff --git a/src/main/java/org/testng/ITestNGMethod.java b/src/main/java/org/testng/ITestNGMethod.java
index f0db926f4d..0738b9ab5c 100755
--- a/src/main/java/org/testng/ITestNGMethod.java
+++ b/src/main/java/org/testng/ITestNGMethod.java
@@ -208,6 +208,7 @@
   boolean getEnabled();
 
   public String getDescription();
+  void setDescription(String description);
 
   public void incrementCurrentInvocationCount();
   public int getCurrentInvocationCount();
diff --git a/src/main/java/org/testng/internal/BaseTestMethod.java b/src/main/java/org/testng/internal/BaseTestMethod.java
index 68d838e529..14b140b991 100755
--- a/src/main/java/org/testng/internal/BaseTestMethod.java
+++ b/src/main/java/org/testng/internal/BaseTestMethod.java
@@ -624,6 +624,7 @@ public int getThreadPoolSize() {
   public void setThreadPoolSize(int threadPoolSize) {
   }
 
+  @Override
   public void setDescription(String description) {
     m_description = description;
   }
diff --git a/src/main/java/org/testng/internal/ClonedMethod.java b/src/main/java/org/testng/internal/ClonedMethod.java
index 29b7265a0c..1a8ff08e22 100755
--- a/src/main/java/org/testng/internal/ClonedMethod.java
+++ b/src/main/java/org/testng/internal/ClonedMethod.java
@@ -64,6 +64,11 @@ public String getDescription() {
     return "";
   }
 
+  @Override
+  public void setDescription(String description) {
+    m_method.setDescription(description);
+  }
+
   @Override
   public boolean getEnabled() {
     return true;
diff --git a/src/test/java/org/testng/internal/MethodInstanceTest.java b/src/test/java/org/testng/internal/MethodInstanceTest.java
index 0b3223c50b..f71bc6f233 100755
--- a/src/test/java/org/testng/internal/MethodInstanceTest.java
+++ b/src/test/java/org/testng/internal/MethodInstanceTest.java
@@ -466,6 +466,10 @@ public String getDescription() {
       return null;
     }
 
+    @Override
+    public void setDescription(String description) {
+    }
+
     @Override
     public void incrementCurrentInvocationCount() {
     }
diff --git a/src/test/java/test/methodinterceptors/multipleinterceptors/FirstInterceptor.java b/src/test/java/test/methodinterceptors/multipleinterceptors/FirstInterceptor.java
index f5a0db9957..5f785ba278 100755
--- a/src/test/java/test/methodinterceptors/multipleinterceptors/FirstInterceptor.java
+++ b/src/test/java/test/methodinterceptors/multipleinterceptors/FirstInterceptor.java
@@ -1,23 +1,8 @@
 package test.methodinterceptors.multipleinterceptors;
 
-import java.util.ArrayList;
-import java.util.List;
-import org.testng.IMethodInstance;
-import org.testng.IMethodInterceptor;
-import org.testng.ITestContext;
+public class FirstInterceptor extends MethodNameFilterInterceptor {
 
-public class FirstInterceptor implements IMethodInterceptor{
-    @Override
-    public List<IMethodInstance> intercept(List<IMethodInstance> methods, ITestContext context) {
-        MultipleInterceptorsTest.interceptors.add(this.getClass());
-        List<IMethodInstance> result = new ArrayList<IMethodInstance>();
-
-        for (IMethodInstance method : methods) {
-            String name = method.getMethod().getMethodName();
-            if (!name.equals("a")) {
-                result.add(method);
-            }
-        }
-        return result;
+    public FirstInterceptor() {
+        super("a");
     }
 }
diff --git a/src/test/java/test/methodinterceptors/multipleinterceptors/MethodNameFilterInterceptor.java b/src/test/java/test/methodinterceptors/multipleinterceptors/MethodNameFilterInterceptor.java
new file mode 100755
index 0000000000..6f48258728
--- /dev/null
+++ b/src/test/java/test/methodinterceptors/multipleinterceptors/MethodNameFilterInterceptor.java
@@ -0,0 +1,37 @@
+package test.methodinterceptors.multipleinterceptors;
+
+import org.testng.IMethodInstance;
+import org.testng.IMethodInterceptor;
+import org.testng.ITestContext;
+import org.testng.ITestNGMethod;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class MethodNameFilterInterceptor implements IMethodInterceptor {
+
+  private final String methodName;
+
+  protected MethodNameFilterInterceptor(String methodName) {
+    this.methodName = methodName;
+  }
+
+  @Override
+  public List<IMethodInstance> intercept(List<IMethodInstance> methods, ITestContext context) {
+    List<IMethodInstance> result = new ArrayList<>();
+    for (IMethodInstance methodInstance : methods) {
+      ITestNGMethod method = methodInstance.getMethod();
+      String name = method.getMethodName();
+      if (!name.equals(methodName)) {
+        result.add(methodInstance);
+        String currentDescription = method.getDescription();
+        if (currentDescription == null) {
+          method.setDescription(methodName);
+        } else {
+          method.setDescription(currentDescription + methodName);
+        }
+      }
+    }
+    return result;
+  }
+}
diff --git a/src/test/java/test/methodinterceptors/multipleinterceptors/MultipleInterceptorsTest.java b/src/test/java/test/methodinterceptors/multipleinterceptors/MultipleInterceptorsTest.java
index 7211eb5f45..0fe23bbd14 100755
--- a/src/test/java/test/methodinterceptors/multipleinterceptors/MultipleInterceptorsTest.java
+++ b/src/test/java/test/methodinterceptors/multipleinterceptors/MultipleInterceptorsTest.java
@@ -1,46 +1,37 @@
 package test.methodinterceptors.multipleinterceptors;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
 import org.testng.Assert;
 import org.testng.TestListenerAdapter;
 import org.testng.TestNG;
 import org.testng.annotations.Test;
+
+import java.util.Collections;
+
 import test.SimpleBaseTest;
 
 public class MultipleInterceptorsTest extends SimpleBaseTest {
     
-    public static List<Class> interceptors = new ArrayList<>();
-
     @Test
     public void testMultipleInterceptors(){
-      TestNG tng = create();
-      tng.setTestClasses(new Class[] { FooTest.class });
-      tng.setMethodInterceptor(new ThirdInterceptor());
+      TestNG tng = create(FooTest.class);
       tng.setMethodInterceptor(new FirstInterceptor());
       tng.setMethodInterceptor(new SecondInterceptor());
+      tng.setMethodInterceptor(new ThirdInterceptor());
       TestListenerAdapter tla = new TestListenerAdapter();
       tng.addListener(tla);
       tng.run();
       Assert.assertEquals(tla.getPassedTests().size(), 1);
       Assert.assertEquals(tla.getPassedTests().get(0).getName(), "d");
-      reset();
     }
 
     @Test
+    // FIXME With or without preserve-order, test is working
     public void testMultipleInterceptorsWithPreserveOrder() {
       TestNG tng = create();
-      tng.setTestSuites(Arrays.asList("target/test-classes/methodinterceptors/multipleinterceptors/multiple-interceptors.xml"));
+      tng.setTestSuites(Collections.singletonList(getPathToResource("/methodinterceptors/multipleinterceptors/multiple-interceptors.xml")));
+      TestListenerAdapter tla = new TestListenerAdapter();
+      tng.addListener(tla);
       tng.run();
-      //Assert.assertEquals(interceptors.size(), 3);
-      Assert.assertTrue(interceptors.get(0).equals(FirstInterceptor.class));
-      Assert.assertTrue(interceptors.get(1).equals(SecondInterceptor.class));
-      Assert.assertTrue(interceptors.get(2).equals(ThirdInterceptor.class));
-      reset();
-    }
-    
-    private void reset(){
-        interceptors.clear();
+      Assert.assertEquals(tla.getPassedTests().get(0).getMethod().getDescription(), "abcabc"); // Interceptor are called twice => GITHUB #154
     }
 }
diff --git a/src/test/java/test/methodinterceptors/multipleinterceptors/SecondInterceptor.java b/src/test/java/test/methodinterceptors/multipleinterceptors/SecondInterceptor.java
index 988aafdc43..df4a465a77 100755
--- a/src/test/java/test/methodinterceptors/multipleinterceptors/SecondInterceptor.java
+++ b/src/test/java/test/methodinterceptors/multipleinterceptors/SecondInterceptor.java
@@ -1,22 +1,8 @@
 package test.methodinterceptors.multipleinterceptors;
 
-import java.util.ArrayList;
-import java.util.List;
-import org.testng.IMethodInstance;
-import org.testng.IMethodInterceptor;
-import org.testng.ITestContext;
+public class SecondInterceptor extends MethodNameFilterInterceptor {
 
-public class SecondInterceptor implements IMethodInterceptor{
-    @Override
-    public List<IMethodInstance> intercept(List<IMethodInstance> methods, ITestContext context) {
-        List<IMethodInstance> result = new ArrayList<IMethodInstance>();
-        MultipleInterceptorsTest.interceptors.add(this.getClass());
-        for (IMethodInstance method : methods) {
-            String name = method.getMethod().getMethodName();
-            if (!name.equals("b")) {
-                result.add(method);
-            }
-        }
-        return result;
+    public SecondInterceptor() {
+        super("b");
     }
 }
diff --git a/src/test/java/test/methodinterceptors/multipleinterceptors/ThirdInterceptor.java b/src/test/java/test/methodinterceptors/multipleinterceptors/ThirdInterceptor.java
index dba9111c5f..90e3a53279 100755
--- a/src/test/java/test/methodinterceptors/multipleinterceptors/ThirdInterceptor.java
+++ b/src/test/java/test/methodinterceptors/multipleinterceptors/ThirdInterceptor.java
@@ -1,22 +1,8 @@
 package test.methodinterceptors.multipleinterceptors;
 
-import java.util.ArrayList;
-import java.util.List;
-import org.testng.IMethodInstance;
-import org.testng.IMethodInterceptor;
-import org.testng.ITestContext;
+public class ThirdInterceptor extends MethodNameFilterInterceptor {
 
-public class ThirdInterceptor implements IMethodInterceptor{
-    @Override
-    public List<IMethodInstance> intercept(List<IMethodInstance> methods, ITestContext context) {
-        List<IMethodInstance> result = new ArrayList<IMethodInstance>();
-        MultipleInterceptorsTest.interceptors.add(this.getClass());
-        for (IMethodInstance method : methods) {
-            String name = method.getMethod().getMethodName();
-            if (!name.equals("c")) {
-                result.add(method);
-            }
-        }
-        return result;
+    public ThirdInterceptor() {
+        super("c");
     }
 }
