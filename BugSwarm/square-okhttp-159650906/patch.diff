diff --git a/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
index 44cf4e6f19..35d2f67906 100755
--- a/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/MultipartBodyTest.java
@@ -146,13 +146,6 @@
     assertEquals(2, body.parts().size());
     assertEquals(568, body.contentLength());
 
-    Buffer part1Buffer = new Buffer();
-    MultipartBody.Part part1 = body.part(0);
-    part1.body().writeTo(part1Buffer);
-    assertEquals(Headers.of("Content-Disposition", "file; filename=\"file1.txt\""),
-        part1.headers());
-    assertEquals("... contents of file1.txt ...", part1Buffer.readUtf8());
-
     Buffer buffer = new Buffer();
     body.writeTo(buffer);
     assertEquals(buffer.size(), body.contentLength());
@@ -265,4 +258,17 @@
     } catch (IllegalArgumentException expected) {
     }
   }
+
+  @Test public void partAccessors() throws IOException {
+    MultipartBody body = new MultipartBody.Builder()
+        .addPart(Headers.of("Foo", "Bar"), RequestBody.create(null, "Baz"))
+        .build();
+    assertEquals(1, body.parts().size());
+
+    Buffer part1Buffer = new Buffer();
+    MultipartBody.Part part1 = body.part(0);
+    part1.body().writeTo(part1Buffer);
+    assertEquals(Headers.of("Foo", "Bar"), part1.headers());
+    assertEquals("Baz", part1Buffer.readUtf8());
+  }
 }
