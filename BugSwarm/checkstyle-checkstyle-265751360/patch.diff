diff --git a/config/intellij-idea-inspections.xml b/config/intellij-idea-inspections.xml
index b0c8a749d9..87304f2285 100755
--- a/config/intellij-idea-inspections.xml
+++ b/config/intellij-idea-inspections.xml
@@ -44,8 +44,7 @@
     <inspection_tool class="AnonymousClassMethodCount" enabled="false" level="WARNING" enabled_by_default="false"/>
     <inspection_tool class="AnonymousClassVariableHidesContainingMethodVariable" enabled="true" level="WARNING" enabled_by_default="true" />
     <inspection_tool class="AnonymousFunctionJS" enabled="true" level="ERROR" enabled_by_default="true" />
-    <!-- suppressed till GSoC project completion .... -->
-    <inspection_tool class="AnonymousHasLambdaAlternative" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="AnonymousHasLambdaAlternative" enabled="true" level="WARNING" enabled_by_default="true" />
     <!-- we are ok with anonymous classes -->
     <inspection_tool class="AnonymousInnerClass" enabled="false" level="ERROR" enabled_by_default="false" />
     <inspection_tool class="AnonymousInnerClassMayBeStatic" enabled="true" level="WARNING" enabled_by_default="true">
@@ -455,8 +454,7 @@ isolated classes and we cannot put them to separate package as it will affect us
     <inspection_tool class="ControlFlowStatementWithoutBraces" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="Convert2Diamond" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="Convert2Lambda" enabled="true" level="ERROR" enabled_by_default="true" />
-    <!-- disabled till GSoC project completion-->
-    <inspection_tool class="Convert2MethodRef" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="Convert2MethodRef" enabled="true" level="ERROR" enabled_by_default="true" />
     <!-- on the moment of review we were not a big fans of functional style, none of code coverage tools can
     distinguish that body of lambda is executed. When this problem is resolved we could reconsider disablement. -->
     <inspection_tool class="Convert2streamapi" enabled="false" level="ERROR" enabled_by_default="false" />
@@ -1230,8 +1228,7 @@ isolated classes and we cannot put them to separate package as it will affect us
     <!-- on the moment of review we were not a big fans of functional style, none of code coverage tools can
      distinguish that body of lambda is executed. When this problem is resolved we could reconsider disablement. -->
     <inspection_tool class="Java8MapApi" enabled="false" level="WARNING" enabled_by_default="false" />
-    <!-- Disabled till GSoC completion -->
-    <inspection_tool class="Java8MapForEach" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="Java8MapForEach" enabled="true" level="WARNING" enabled_by_default="true" />
     <inspection_tool class="JavaDoc" enabled="true" level="ERROR" enabled_by_default="true">
         <option name="TOP_LEVEL_CLASS_OPTIONS">
             <value>
@@ -1522,7 +1519,7 @@ isolated classes and we cannot put them to separate package as it will affect us
     </inspection_tool>
     <!-- we like nested method calls -->
     <inspection_tool class="NestedMethodCall" enabled="false" level="ERROR" enabled_by_default="false" />
-    <inspection_tool class="NestedSwitchStatement" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="NestedSwitchStatement" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="NestedSwitchStatementJS" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="NestedSynchronizedStatement" enabled="true" level="WARNING" enabled_by_default="true" />
     <inspection_tool class="NestedTryStatement" enabled="true" level="ERROR" enabled_by_default="true" >
@@ -1905,8 +1902,7 @@ isolated classes and we cannot put them to separate package as it will affect us
     <inspection_tool class="SimplifiableIfStatement" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="SimplifiableJUnitAssertion" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="SimplifyNegatedBinaryExpression" enabled="true" level="ERROR" enabled_by_default="true" />
-    <!-- suppressed till GSoC project completion .... -->
-    <inspection_tool class="SimplifyStreamApiCallChains" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="SimplifyStreamApiCallChains" enabled="true" level="WARNING" enabled_by_default="true" />
     <!-- the only violation found is false-positive at AvoidEscapedUnicodeCharactersCheck -->
     <inspection_tool class="SingleCharAlternation" enabled="false" level="WARNING" enabled_by_default="false" />
     <inspection_tool class="SingleCharacterStartsWith" enabled="true" level="ERROR" enabled_by_default="true" />
@@ -2051,7 +2047,7 @@ isolated classes and we cannot put them to separate package as it will affect us
     <inspection_tool class="StringBufferReplaceableByString" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="StringBufferReplaceableByStringBuilder" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="StringBufferToStringInConcatenation" enabled="true" level="WARNING" enabled_by_default="true" />
-    <inspection_tool class="StringCompareTo" enabled="false" level="ERROR" enabled_by_default="false" />
+    <inspection_tool class="StringCompareTo" enabled="true" level="ERROR" enabled_by_default="true" />
     <!-- we like it, it is not performance issue for us -->
     <inspection_tool class="StringConcatenation" enabled="false" level="ERROR" enabled_by_default="false" />
     <inspection_tool class="StringConcatenationArgumentToLogCall" enabled="true" level="ERROR" enabled_by_default="true" />
@@ -2268,8 +2264,11 @@ isolated classes and we cannot put them to separate package as it will affect us
     <inspection_tool class="TodoComment" enabled="false" level="ERROR" enabled_by_default="false" />
     <!-- show too much false-positives in our code -->
     <inspection_tool class="TooBroadCatch" enabled="false" level="ERROR" enabled_by_default="false" />
-    <!-- Disabled till GSoC completion -->
-    <inspection_tool class="TooBroadScope" enabled="false" level="ERROR" enabled_by_default="false">
+    <inspection_tool class="TooBroadScope" enabled="true" level="ERROR" enabled_by_default="false">
+        <scope name="Production" level="ERROR" enabled="true">
+            <option name="m_allowConstructorAsInitializer" value="false" />
+            <option name="m_onlyLookAtBlocks" value="false" />
+        </scope>
         <option name="m_allowConstructorAsInitializer" value="false" />
         <option name="m_onlyLookAtBlocks" value="false" />
     </inspection_tool>
diff --git a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
index 11f0da5956..342728b424 100755
--- a/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java
@@ -133,7 +133,6 @@ public Checker createChecker(Configuration moduleConfig)
      * @param moduleConfig {@link Configuration} instance.
      * @return {@link Checker} instance.
      * @throws CheckstyleException if an exception occurs during checker configuration.
-     * @noinspection BooleanParameter
      */
     protected Checker createChecker(Configuration moduleConfig, boolean addTreeWalker)
             throws Exception {
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
index bff213aa7f..72ec64d5de 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
@@ -42,7 +42,7 @@ protected String getPackageLocation() {
     }
 
     private String getPath(String packageName, String fileName) throws IOException {
-        return super.getPath("rule521" + packageName + File.separator + fileName);
+        return getPath("rule521" + packageName + File.separator + fileName);
     }
 
     @BeforeClass
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
index ef03801e78..b6523ea089 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
@@ -322,7 +322,7 @@ public void putExternalResources(Set<String> locations) {
      * @return true if the contents of external configuration resources were changed.
      */
     private boolean areExternalResourcesChanged(Set<ExternalResource> resources) {
-        return resources.stream().filter(resource -> {
+        return resources.stream().anyMatch(resource -> {
             boolean changed = false;
             if (isResourceLocationInCache(resource.location)) {
                 final String contentHashSum = resource.contentHashSum;
@@ -335,7 +335,7 @@ private boolean areExternalResourcesChanged(Set<ExternalResource> resources) {
                 changed = true;
             }
             return changed;
-        }).findFirst().isPresent();
+        });
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index d04c75b163..3b12ffe20d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -126,9 +126,9 @@ public FileText(File file, String charsetName) throws IOException {
         // Use the BufferedReader to break down the lines as this
         // is about 30% faster than using the
         // LINE_TERMINATOR.split(fullText, -1) method
-        final ArrayList<String> textLines = new ArrayList<>();
         final BufferedReader reader = new BufferedReader(new StringReader(fullText));
         try {
+            final ArrayList<String> textLines = new ArrayList<>();
             while (true) {
                 final String line = reader.readLine();
                 if (line == null) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 7c61b09e68..8f36059fca 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -71,12 +71,8 @@
      * A thread-local holder for the list of suppression entries for the last
      * file parsed.
      */
-    private static final ThreadLocal<List<Entry>> ENTRIES = new ThreadLocal<List<Entry>>() {
-        @Override
-        protected List<Entry> initialValue() {
-            return new LinkedList<>();
-        }
-    };
+    private static final ThreadLocal<List<Entry>> ENTRIES =
+            ThreadLocal.withInitial(LinkedList::new);
 
     /**
      * Returns the default alias for the source name of a check, which is the
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 7191d06a43..11c0e441ef 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -164,8 +164,7 @@ public void finishTree(DetailAST rootAST) {
                 final DetailAST equalsAST = detailASTDetailASTEntry.getValue();
                 log(equalsAST.getLineNo(), equalsAST.getColumnNo(), MSG_KEY_HASHCODE);
             });
-        objBlockWithHashCode.entrySet().forEach(detailASTDetailASTEntry -> {
-            final DetailAST equalsAST = detailASTDetailASTEntry.getValue();
+        objBlockWithHashCode.forEach((key, equalsAST) -> {
             log(equalsAST.getLineNo(), equalsAST.getColumnNo(), MSG_KEY_EQUALS);
         });
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 57941b0745..c7ae8d0924 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -722,11 +722,11 @@ private static DetailAST getGenericTypeArgs(DetailAST type, boolean isCanonicalN
      * @return true if all of generic type arguments are immutable.
      */
     private boolean areImmutableTypeArguments(List<String> typeArgsClassNames) {
-        return !typeArgsClassNames.stream().filter(
+        return typeArgsClassNames.stream().noneMatch(
             typeName -> {
                 return !immutableClassShortNames.contains(typeName)
                     && !immutableClassCanonicalNames.contains(typeName);
-            }).findFirst().isPresent();
+            });
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
index b18f5b7529..983a141696 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
@@ -248,13 +248,15 @@ private void collectReferencesFromJavadoc(DetailAST ast) {
      * @return a set of classes referenced in the javadoc block
      */
     private static Set<String> collectReferencesFromJavadoc(TextBlock textBlock) {
-        final Set<String> references = new HashSet<>();
         final List<JavadocTag> tags = new ArrayList<>();
         // gather all the inline tags, like @link
         // INLINE tags inside BLOCKs get hidden when using ALL
         tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));
         // gather all the block-level tags, like @throws and @see
         tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));
+
+        final Set<String> references = new HashSet<>();
+
         tags.stream()
             .filter(JavadocTag::canReferenceImports)
             .forEach(tag -> references.addAll(processJavadocTag(tag)));
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index d25ebfa5ce..bf87d35033 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -76,12 +76,7 @@
      * to guarantee basic thread safety and avoid shared, mutable state when not necessary.
      */
     private static final ThreadLocal<Map<String, ParseStatus>> TREE_CACHE =
-        new ThreadLocal<Map<String, ParseStatus>>() {
-            @Override
-            protected Map<String, ParseStatus> initialValue() {
-                return new HashMap<>();
-            }
-        };
+            ThreadLocal.withInitial(HashMap::new);
 
     /**
      * The file context.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java b/src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java
index e752da6f9e..f565438ae0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java
@@ -81,7 +81,7 @@ public static boolean start(RootDoc root)
                         final List<Tag> tags = Arrays.asList(field.firstSentenceTags());
                         final String joinedTags = tags
                             .stream()
-                            .map(tag -> tag.toString())
+                            .map(Tag::toString)
                             .collect(Collectors.joining("\", \"", "[\"", "\"]"));
                         final String message = String.format(Locale.ROOT,
                                 "Should be only one tag for %s. Tags %s.",
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java
index 33cc5167c7..c05c21c0cf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtils.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.utils;
 
 import java.io.IOException;
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Modifier;
 import java.util.Collection;
 import java.util.Set;
@@ -29,6 +30,7 @@
 import com.puppycrawl.tools.checkstyle.TreeWalkerFilter;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
+import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;
 import com.puppycrawl.tools.checkstyle.api.Filter;
@@ -65,7 +67,7 @@ private ModuleReflectionUtils() {
     /**
      * Checks whether a class may be considered as a checkstyle module. Checkstyle's modules are
      * non-abstract classes, which are either checkstyle's checks, file sets, filters, file filters,
-     * {@code TreeWalker} filters or root module.
+     * {@code TreeWalker} filters, audit listener, or root module.
      * @param clazz class to check.
      * @return true if the class may be considered as the checkstyle module.
      */
@@ -76,17 +78,36 @@ public static boolean isCheckstyleModule(Class<?> clazz) {
                     || isFilterModule(clazz)
                     || isFileFilterModule(clazz)
                     || isTreeWalkerFilterModule(clazz)
+                    || isAuditListener(clazz)
                     || isRootModule(clazz));
     }
 
     /**
-     * Checks whether a class extends 'AutomaticBean' and is non-abstract.
+     * Checks whether a class extends 'AutomaticBean', is non-abstract, and has a default
+     * constructor.
      * @param clazz class to check.
      * @return true if a class may be considered a valid production class.
      */
     public static boolean isValidCheckstyleClass(Class<?> clazz) {
         return AutomaticBean.class.isAssignableFrom(clazz)
-                && !Modifier.isAbstract(clazz.getModifiers());
+                && !Modifier.isAbstract(clazz.getModifiers())
+                && hasDefaultConstructor(clazz);
+    }
+
+    /**
+     * Checks if the class has a default constructor.
+     * @param clazz class to check
+     * @return true if the class has a default constructor.
+     */
+    private static boolean hasDefaultConstructor(Class<?> clazz) {
+        boolean result = false;
+        for (Constructor<?> constructor : clazz.getDeclaredConstructors()) {
+            if (constructor.getParameterCount() == 0) {
+                result = true;
+                break;
+            }
+        }
+        return result;
     }
 
     /**
@@ -129,6 +150,16 @@ public static boolean isFileFilterModule(Class<?> clazz) {
         return BeforeExecutionFileFilter.class.isAssignableFrom(clazz);
     }
 
+    /**
+     * Checks whether a class may be considered as the checkstyle audit listener module.
+     * Checkstyle's audit listener modules are classes which implement 'AuditListener' interface.
+     * @param clazz class to check.
+     * @return true if a class may be considered as the checkstyle audit listener module.
+     */
+    public static boolean isAuditListener(Class<?> clazz) {
+        return AuditListener.class.isAssignableFrom(clazz);
+    }
+
     /**
      * Checks whether a class may be considered as the checkstyle root module.
      * Checkstyle's root modules are classes which implement 'RootModule' interface.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java
index 3acd8f2543..bad0df22cf 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatterTest.java
@@ -41,34 +41,28 @@
 
     @Test
     public void testFormatFullyQualifiedModuleNameContainsCheckSuffix() {
-        final AuditEvent mock = PowerMockito.mock(AuditEvent.class);
-        when(mock.getSourceName()).thenReturn("com.test.package.TestModuleCheck");
-        when(mock.getSeverityLevel()).thenReturn(SeverityLevel.WARNING);
-        when(mock.getLine()).thenReturn(1);
-        when(mock.getColumn()).thenReturn(1);
-        when(mock.getMessage()).thenReturn("Mocked message.");
-        when(mock.getFileName()).thenReturn("InputMockFile.java");
+        final LocalizedMessage message = new LocalizedMessage(1, 1, null, null, null,
+                SeverityLevel.WARNING, null, TestModuleCheck.class, "Mocked message.");
+        final AuditEvent event = new AuditEvent("", "InputMockFile.java", message);
         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();
 
-        final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
+        final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. "
+                + "[AuditEventDefaultFormatterTest$TestModule]";
 
-        assertEquals("Invalid format", expected, formatter.format(mock));
+        assertEquals("Invalid format", expected, formatter.format(event));
     }
 
     @Test
     public void testFormatFullyQualifiedModuleNameDoesNotContainCheckSuffix() {
-        final AuditEvent mock = PowerMockito.mock(AuditEvent.class);
-        when(mock.getSourceName()).thenReturn("com.test.package.TestModule");
-        when(mock.getSeverityLevel()).thenReturn(SeverityLevel.WARNING);
-        when(mock.getLine()).thenReturn(1);
-        when(mock.getColumn()).thenReturn(1);
-        when(mock.getMessage()).thenReturn("Mocked message.");
-        when(mock.getFileName()).thenReturn("InputMockFile.java");
+        final LocalizedMessage message = new LocalizedMessage(1, 1, null, null, null,
+                SeverityLevel.WARNING, null, TestModule.class, "Mocked message.");
+        final AuditEvent event = new AuditEvent("", "InputMockFile.java", message);
         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();
 
-        final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [TestModule]";
+        final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. "
+                + "[AuditEventDefaultFormatterTest$TestModule]";
 
-        assertEquals("Invalid format", expected, formatter.format(mock));
+        assertEquals("Invalid format", expected, formatter.format(event));
     }
 
     @Test
@@ -105,19 +99,14 @@ public void testFormatModuleNameDoesNotContainCheckSuffix() {
 
     @Test
     public void testFormatModuleWithModuleId() {
-        final AuditEvent mock = PowerMockito.mock(AuditEvent.class);
-        when(mock.getSourceName()).thenReturn("TestModule");
-        when(mock.getSeverityLevel()).thenReturn(SeverityLevel.WARNING);
-        when(mock.getLine()).thenReturn(1);
-        when(mock.getColumn()).thenReturn(1);
-        when(mock.getMessage()).thenReturn("Mocked message.");
-        when(mock.getFileName()).thenReturn("InputMockFile.java");
-        when(mock.getModuleId()).thenReturn("ModuleId");
+        final LocalizedMessage message = new LocalizedMessage(1, 1, null, null, null,
+                SeverityLevel.WARNING, "ModuleId", TestModule.class, "Mocked message.");
+        final AuditEvent event = new AuditEvent("", "InputMockFile.java", message);
         final AuditEventFormatter formatter = new AuditEventDefaultFormatter();
 
         final String expected = "[WARN] InputMockFile.java:1:1: Mocked message. [ModuleId]";
 
-        assertEquals("Invalid format", expected, formatter.format(mock));
+        assertEquals("Invalid format", expected, formatter.format(event));
     }
 
     @Test
@@ -134,4 +123,12 @@ public void testCalculateBufferLength() throws Exception {
 
         assertEquals("Buffer length is not expected", 54, result);
     }
+
+    private static class TestModuleCheck {
+        // no code
+    }
+
+    private static class TestModule {
+        // no code
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
index 78f630eaaa..2544be4eb1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
@@ -147,11 +147,11 @@ public void testClearBranchTokenTypes() throws Exception {
         parent.setFirstChild(child);
 
         final List<Consumer<DetailAST>> clearBranchTokenTypesMethods = Arrays.asList(
-            ast -> child.setFirstChild(ast),
-            ast -> child.setNextSibling(ast),
-            ast -> child.addPreviousSibling(ast),
-            ast -> child.addNextSibling(ast),
-            ast -> child.addChild(ast),
+                child::setFirstChild,
+                child::setNextSibling,
+                child::addPreviousSibling,
+                child::addNextSibling,
+                child::addChild,
             ast -> {
                 try {
                     Whitebox.invokeMethod(child, "setParent", ast);
@@ -180,9 +180,9 @@ public void testClearChildCountCache() throws Exception {
         parent.setFirstChild(child);
 
         final List<Consumer<DetailAST>> clearChildCountCacheMethods = Arrays.asList(
-            ast -> child.setNextSibling(ast),
-            ast -> child.addPreviousSibling(ast),
-            ast -> child.addNextSibling(ast)
+                child::setNextSibling,
+                child::addPreviousSibling,
+                child::addNextSibling
         );
 
         for (Consumer<DetailAST> method : clearChildCountCacheMethods) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpInPkgTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpInPkgTest.java
index 5e1c9a0151..197cee5258 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpInPkgTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpInPkgTest.java
@@ -22,11 +22,19 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
+import org.junit.Before;
 import org.junit.Test;
 
 public class ImportControlRegExpInPkgTest {
-    private final ImportControl icRoot = new ImportControl("com\\.[^.]+\\.courtlink", true);
-    private final ImportControl icCommon = new ImportControl(icRoot, "com+on", true);
+    private ImportControl icRoot;
+    private ImportControl icCommon;
+
+    @Before
+    public void setUp() {
+        icRoot = new ImportControl("com\\.[^.]+\\.courtlink", true);
+        icCommon = new ImportControl(icRoot, "com+on", true);
+        icRoot.addChild(icCommon);
+    }
 
     @Test
     public void testRegExpInRootIsConsidered() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java
index 3845b542b6..bf92f2b890 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilsTest.java
@@ -28,6 +28,7 @@
 
 import org.junit.Test;
 
+import com.puppycrawl.tools.checkstyle.DefaultLogger;
 import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
 import com.puppycrawl.tools.checkstyle.TreeWalkerFilter;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
@@ -60,6 +61,8 @@ public void testIsCheckstyleModule() {
                 ModuleReflectionUtils.isCheckstyleModule(TreeWalkerFilterClass.class));
         assertTrue("Should return true when checkstyle module is passed",
                 ModuleReflectionUtils.isCheckstyleModule(FileFilterModuleClass.class));
+        assertTrue("Should return true when checkstyle module is passed",
+                ModuleReflectionUtils.isCheckstyleModule(AuditListenerClass.class));
         assertTrue("Should return true when checkstyle module is passed",
                 ModuleReflectionUtils.isCheckstyleModule(RootModuleClass.class));
     }
@@ -73,6 +76,9 @@ public void testIsValidCheckstyleClass() {
                 .isValidCheckstyleClass(InvalidNonAutomaticBeanClass.class));
         assertFalse("Should return false when invalid class is passed",
                 ModuleReflectionUtils.isValidCheckstyleClass(AbstractInvalidClass.class));
+        assertFalse("Should return false when invalid class is passed",
+                ModuleReflectionUtils
+                        .isValidCheckstyleClass(InvalidNonDefaultConstructorClass.class));
     }
 
     @Test
@@ -115,6 +121,14 @@ public void testIsTreeWalkerFilterModule() {
                 ModuleReflectionUtils.isTreeWalkerFilterModule(NotCheckstyleCheck.class));
     }
 
+    @Test
+    public void testIsAuditListener() {
+        assertTrue("Should return true when valid checkstyle AuditListener module is passed",
+                ModuleReflectionUtils.isAuditListener(DefaultLogger.class));
+        assertFalse("Should return false when invalid class is passed",
+                ModuleReflectionUtils.isAuditListener(NotCheckstyleCheck.class));
+    }
+
     @Test
     public void testIsRootModule() {
         assertTrue("Should return true when valid checkstyle root module is passed",
@@ -208,9 +222,59 @@ public boolean accept(TreeWalkerAuditEvent treeWalkerAuditEvent) {
         }
     }
 
+    private static class AuditListenerClass extends AutomaticBean implements AuditListener {
+
+        @Override
+        public void auditStarted(AuditEvent event) {
+            //dummy method
+        }
+
+        @Override
+        public void auditFinished(AuditEvent event) {
+            //dummy method
+        }
+
+        @Override
+        public void fileStarted(AuditEvent event) {
+            //dummy method
+        }
+
+        @Override
+        public void fileFinished(AuditEvent event) {
+            //dummy method
+        }
+
+        @Override
+        public void addError(AuditEvent event) {
+            //dummy method
+        }
+
+        @Override
+        public void addException(AuditEvent event, Throwable throwable) {
+            //dummy method
+        }
+    }
+
     private static class NotCheckstyleCheck {
         protected NotCheckstyleCheck() {
             //keep pmd calm and happy
         }
     }
+
+    private static class InvalidNonDefaultConstructorClass extends AutomaticBean {
+        private int field;
+
+        protected InvalidNonDefaultConstructorClass(int data) {
+            //keep pmd calm and happy
+            field = 0;
+            method(data);
+        }
+
+        public final void method(int data) {
+            field++;
+            if (data > 0) {
+                method(data - 1);
+            }
+        }
+    }
 }
