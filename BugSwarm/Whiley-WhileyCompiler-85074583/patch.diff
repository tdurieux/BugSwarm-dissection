diff --git a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
index 182414ad4c..6ec8d90f77 100755
--- a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
@@ -459,7 +459,7 @@ public void ConstrainedInt_Valid_5() {
 		runTest("ConstrainedInt_Valid_5");
 	}
 
-	@Test
+	@Ignore("TOO LONG") @Test
 	public void ConstrainedInt_Valid_6() {
 		runTest("ConstrainedInt_Valid_6");
 	}
@@ -559,7 +559,7 @@ public void ConstrainedList_Valid_27() {
 		runTest("ConstrainedList_Valid_27");
 	}
 
-	@Test
+	@Ignore("TOO LONG") @Test
 	public void ConstrainedList_Valid_28() {
 		runTest("ConstrainedList_Valid_28");
 	}
diff --git a/modules/wycs/src/wycs/core/SemanticType.java b/modules/wycs/src/wycs/core/SemanticType.java
index 00ef04ca11..2d287bfa70 100755
--- a/modules/wycs/src/wycs/core/SemanticType.java
+++ b/modules/wycs/src/wycs/core/SemanticType.java
@@ -705,7 +705,7 @@ protected SemanticType extract(int child) {
 	 */
 	public static SemanticType construct(Automaton automaton) {
 		// First, we canonicalise the automaton
-		Reductions.reduce(automaton, Types.reductions);		
+		Reductions.minimiseAndReduce(automaton, 5000, Types.reductions);		
 		automaton.canonicalise();
 
 		// Second, construct the object representing the type
diff --git a/modules/wycs/src/wycs/transforms/VerificationCheck.java b/modules/wycs/src/wycs/transforms/VerificationCheck.java
index 97c1e69fd2..6a82b7b577 100755
--- a/modules/wycs/src/wycs/transforms/VerificationCheck.java
+++ b/modules/wycs/src/wycs/transforms/VerificationCheck.java
@@ -469,7 +469,7 @@ public int convert(Automaton automaton, SemanticType type) {
 		// form before verification begins. This firstly reduces the amount of
 		// work during verification, and also allows the functions in
 		// SolverUtils to work properly.
-		Reductions.reduce(type_automaton, Types.reductions);
+		Reductions.minimiseAndReduce(type_automaton, 5000, Types.reductions);
 		return automaton.addAll(type_automaton.getRoot(0), type_automaton);
 	}
 
@@ -820,11 +820,12 @@ public static RESULT unsat(Automaton automaton,  RewriteMode rwMode, int maxStep
 		// not visited again.		
 		Rewrite rewrite = new Inference(Solver.SCHEMA, AbstractActivation.RANK_COMPARATOR, Solver.inferences, Solver.reductions);
 		// Initialise the rewrite with our starting state		
-		rewrite.initialise(automaton);
+		int HEAD = rewrite.initialise(automaton);
 		// Stacked rewriter ensures that reduction rules are applied atomically
 		// Breadth-first rewriter ensures that the search spans outwards in a
 		// fair style. This protects against rule starvation.
 		Rewriter rewriter = createRewriter(rewrite,rwMode);
+		rewriter.reset(HEAD);
 		// Finally, perform the rewrite!		
 		rewriter.apply(maxSteps);		
 		List<Rewrite.State> states = rewrite.states();
@@ -860,8 +861,8 @@ private static Rewriter createRewriter(Rewrite rewrite, RewriteMode rwMode) {
 		switch(rwMode) {
 		case UNFAIR:
 			return new LinearRewriter(rewrite,LinearRewriter.UNFAIR_HEURISTIC); 
-//		case EXHAUSTIVE:
-//			return new BreadthFirstRewriter(rewrite, normaliser);
+		case EXHAUSTIVE:
+			return new BreadthFirstRewriter(rewrite);
 		}
 		throw new RuntimeException("Unknown rewrite mode encountered: " + rwMode);
 	}
