diff --git a/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java b/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
index 02ac46c33a..53a2312fc2 100755
--- a/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
+++ b/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
@@ -287,10 +287,10 @@ else if (metric.getValue() != null && !metric.getValue().isJsonNull())
 					if (Validator.isNotNullOrEmpty(validationErrors, tagContext.setAttribute("name"), entry.getKey()))
 					{
 						tagContext.setName(entry.getKey());
-						Validator.isValidateCharacterSet(validationErrors, tagContext, entry.getKey());
+						Validator.isNotNullOrEmpty(validationErrors, tagContext, entry.getKey());
 					}
 					if (Validator.isNotNullOrEmpty(validationErrors, tagContext.setAttribute("value"), entry.getValue()))
-						Validator.isValidateCharacterSet(validationErrors, tagContext, entry.getValue());
+						Validator.isNotNullOrEmpty(validationErrors, tagContext, entry.getValue());
 
 					tagCount++;
 				}
diff --git a/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java b/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
index 536a1c022d..8860eb70b5 100755
--- a/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
+++ b/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
@@ -109,10 +109,8 @@ private void validateTag(int tagCount, String[] tag) throws ValidationException
 			throw new ValidationException(String.format("tag[%d] must be in the format 'name=value'.", tagCount));
 
 		Validator.validateNotNullOrEmpty(String.format("tag[%d].name", tagCount), tag[0]);
-		Validator.validateCharacterSet(String.format("tag[%d].name", tagCount), tag[0]);
 
 		Validator.validateNotNullOrEmpty(String.format("tag[%d].value", tagCount), tag[1]);
-		Validator.validateCharacterSet(String.format("tag[%d].value", tagCount), tag[1]);
 	}
 
 	@Override
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializer.java b/src/main/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializer.java
index 1848b5013e..f7247dc211 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializer.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializer.java
@@ -120,6 +120,7 @@ private StringBuilder escapeAppend(StringBuilder sb, String value, char escape)
 				startPos = i + 1;
 			}
 		}
+
 		if (startPos <= value.length())
 		{
 			sb.append(value, startPos, value.length());
@@ -128,13 +129,39 @@ private StringBuilder escapeAppend(StringBuilder sb, String value, char escape)
 		return sb;
 	}
 
+	private String unEscape(CharSequence source, int start, int end, char escape)
+	{
+		int startPos = start;
+		StringBuilder sb = new StringBuilder(end - start);
+
+		for (int i = start; i < end; i++)
+		{
+			char ch = source.charAt(i);
+			if (ch == escape)
+			{
+				sb.append(source, startPos, i);
+				i++; //Skip next char as it was escaped
+				startPos = i;
+			}
+		}
+
+		if (startPos <= end)
+		{
+			sb.append(source, startPos, end);
+		}
+
+		return sb.toString();
+	}
+
 
 	private String generateTagString(SortedMap<String, String> tags)
 	{
 		StringBuilder sb = new StringBuilder();
 		for (String key : tags.keySet())
 		{
+			//Escape tag names using :
 			escapeAppend(sb, key, ':').append("=");
+			//Escape tag values using =
 			escapeAppend(sb, tags.get(key), '=').append(":");
 		}
 
@@ -154,7 +181,7 @@ private void extractTags(DataPointsRowKey rowKey, String tagString)
 			{
 				if (tagString.charAt(position) == '=')
 				{
-					tag = tagString.substring(mark, position);
+					tag = unEscape(tagString, mark, position, ':');
 					mark = position +1;
 				}
 
@@ -167,7 +194,7 @@ private void extractTags(DataPointsRowKey rowKey, String tagString)
 			{
 				if (tagString.charAt(position) == ':')
 				{
-					value = tagString.substring(mark, position);
+					value = unEscape(tagString, mark, position, '=');
 					mark = position +1;
 
 					rowKey.addTag(getString(tag), getString(value));
diff --git a/src/main/java/org/kairosdb/util/Validator.java b/src/main/java/org/kairosdb/util/Validator.java
index 3976e2fcb8..c2f6066f63 100755
--- a/src/main/java/org/kairosdb/util/Validator.java
+++ b/src/main/java/org/kairosdb/util/Validator.java
@@ -25,12 +25,6 @@ private Validator()
 	{
 	}
 
-	public static void validateCharacterSet(String name, String value) throws ValidationException
-	{
-		ValidationErrors errors = new ValidationErrors();
-		if (!isValidateCharacterSet(errors, name, value))
-			throw new ValidationException(errors.getFirstError());
-	}
 
 	public static void validateNotNullOrEmpty(String name, String value) throws ValidationException
 	{
@@ -46,15 +40,6 @@ public static void validateMin(String name, long value, long minValue) throws Va
 			throw new ValidationException(errors.getFirstError());
 	}
 
-	public static boolean isValidateCharacterSet(ValidationErrors validationErrors, Object name, String value)
-	{
-		if (value == null || value.isEmpty() || !CharacterSet.isValidTagNameValue(value))
-		{
-			validationErrors.addErrorMessage(name + " may contain any character except colon ':', and equals '='.");
-			return false;
-		}
-		return true;
-	}
 
 	public static boolean isNotNullOrEmpty(ValidationErrors validationErrors, Object name, String value)
 	{
diff --git a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
index 690a2a26ec..77be008921 100755
--- a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
@@ -302,7 +302,7 @@ public void test_emptyTagName_Invalid() throws DatastoreException, IOException
 	}
 
 	@Test
-	public void test_tagName_invalidCharacters() throws DatastoreException, IOException
+	public void test_tagName_withColon() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"bad:name\":\"bar\"}, \"datapoints\": [[1,2]]}]";
 
@@ -314,9 +314,7 @@ public void test_tagName_invalidCharacters() throws DatastoreException, IOExcept
 
 		ValidationErrors validationErrors = parser.parse();
 
-		assertThat(validationErrors.size(), equalTo(1));
-		assertThat(validationErrors.getFirstError(),
-				equalTo("metric[0](name=metricName).tag[bad:name] may contain any character except colon ':', and equals '='."));
+		assertThat(validationErrors.size(), equalTo(0));
 	}
 
 	@Test
@@ -337,7 +335,7 @@ public void test_emptyTagValue_Invalid() throws DatastoreException, IOException
 	}
 
 	@Test
-	public void test_tagValue_invalidCharacters() throws DatastoreException, IOException
+	public void test_tagValue_withColon() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"foo\":\"bad:value\"}, \"datapoints\": [[1,2]]}]";
 
@@ -349,9 +347,7 @@ public void test_tagValue_invalidCharacters() throws DatastoreException, IOExcep
 
 		ValidationErrors validationErrors = parser.parse();
 
-		assertThat(validationErrors.size(), equalTo(1));
-		assertThat(validationErrors.getFirstError(),
-				equalTo("metric[0](name=metricName).tag[foo].value may contain any character except colon ':', and equals '='."));
+		assertThat(validationErrors.size(), equalTo(0));
 	}
 
 	@Test
diff --git a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
index 3af1d997b3..c432946cf1 100755
--- a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
+++ b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
@@ -107,21 +107,10 @@ public void test_tagName_empty_invalid() throws DatastoreException, ValidationEx
 	}
 
 	@Test
-	public void test_tagName_characters_invalid() throws DatastoreException, ValidationException
+	public void test_tagName_characters_validColonTagName() throws DatastoreException, ValidationException
 	{
-		try
-		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum:fi=barfum"});
-			fail("ValidationException expected");
-		}
-		catch (DatastoreException e)
-		{
-			fail("ValidationException expected");
-		}
-		catch (ValidationException e)
-		{
-			assertThat(e.getMessage(), equalTo("tag[1].name may contain any character except colon ':', and equals '='."));
-		}
+		command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum:fi=barfum"});
+
 	}
 
 	@Test
@@ -143,21 +132,9 @@ public void test_tagValue_empty_invalid() throws DatastoreException, ValidationE
 	}
 
 	@Test
-	public void test_tagValue_characters_invalid() throws DatastoreException, ValidationException
+	public void test_tagValue_characters_validColonTagValue() throws DatastoreException, ValidationException
 	{
-		try
-		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum=bar:fum"});
-			fail("ValidationException expected");
-		}
-		catch (DatastoreException e)
-		{
-			fail("ValidationException expected");
-		}
-		catch (ValidationException e)
-		{
-			assertThat(e.getMessage(), equalTo("tag[1].value may contain any character except colon ':', and equals '='."));
-		}
+		command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum=bar:fum"});
 	}
 
 	@Test
diff --git a/src/test/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializerTest.java b/src/test/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializerTest.java
index adfb2190de..ac3b69ea62 100755
--- a/src/test/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializerTest.java
+++ b/src/test/java/org/kairosdb/datastore/cassandra/DataPointsRowKeySerializerTest.java
@@ -86,6 +86,11 @@ public void test_toByteBuffer_tagsWithColonEquals()
 		map.put("a:a", "b:b");
 		map.put("c=c", "d=d");
 		map.put(":e", "f\\");
+		map.put("=a=", "===");
+		map.put(":a:", ":::");
+		map.put("=b=", ":::");
+		map.put(":b:", "===");
+		map.put("=c=", "normal");
 
 		DataPointsRowKeySerializer serializer = new DataPointsRowKeySerializer();
 		ByteBuffer buffer = serializer.toByteBuffer(new DataPointsRowKey("myMetric", 12345L, "myDataType", map));
@@ -95,14 +100,14 @@ public void test_toByteBuffer_tagsWithColonEquals()
 		assertThat(rowKey.getMetricName(), equalTo("myMetric"));
 		assertThat(rowKey.getDataType(), equalTo("myDataType"));
 		assertThat(rowKey.getTimestamp(), equalTo(12345L));
-		assertThat(rowKey.getTags().size(), equalTo(3));
+		assertThat(rowKey.getTags().size(), equalTo(8));
 		assertThat(rowKey.getTags().get("a:a"), equalTo("b:b"));
 		assertThat(rowKey.getTags().get("c=c"), equalTo("d=d"));
 		assertThat(rowKey.getTags().get(":e"), equalTo("f\\"));
-
-		//  === -> :====
-		//  ::: -> =::::
-		//  =:= -> ==::=
-		//  :=: -> ::==:
+		assertThat(rowKey.getTags().get("=a="), equalTo("==="));
+		assertThat(rowKey.getTags().get(":a:"), equalTo(":::"));
+		assertThat(rowKey.getTags().get("=b="), equalTo(":::"));
+		assertThat(rowKey.getTags().get(":b:"), equalTo("==="));
+		assertThat(rowKey.getTags().get("=c="), equalTo("normal"));
 	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/util/ValidatorTest.java b/src/test/java/org/kairosdb/util/ValidatorTest.java
index 6ceda9a3a3..b56f52adfb 100755
--- a/src/test/java/org/kairosdb/util/ValidatorTest.java
+++ b/src/test/java/org/kairosdb/util/ValidatorTest.java
@@ -26,25 +26,6 @@
 
 public class ValidatorTest
 {
-	@Test
-	public void test_validateCharacterSet_valid() throws ValidationException
-	{
-		Validator.validateCharacterSet("test", "ABC-123_xyz/456.789");
-	}
-
-	@Test
-	public void test_validateCharacterSet_invalid() throws ValidationException
-	{
-		try
-		{
-			Validator.validateCharacterSet("test", "abc:123");
-			fail("Expected ValidationException");
-		}
-		catch (ValidationException e)
-		{
-			assertThat(e.getMessage(), equalTo("test may contain any character except colon ':', and equals '='."));
-		}
-	}
 
 	@Test
 	public void test_validateNotNullOrEmpty_valid() throws ValidationException
@@ -100,23 +81,6 @@ public void test_validateMin_invalid() throws ValidationException
 		}
 	}
 
-	@Test
-	public void test_isValidateCharacterSet_valid()
-	{
-		ValidationErrors errors = new ValidationErrors();
-
-		assertThat(Validator.isValidateCharacterSet(errors, "test", "ABC-123_xyz/456.789"), equalTo(true));
-		assertThat(errors.size(), equalTo(0));
-	}
-
-	@Test
-	public void test_isValidateCharacterSet_invalid() throws ValidationException
-	{
-		ValidationErrors errors = new ValidationErrors();
-
-		assertThat(Validator.isValidateCharacterSet(errors, "test", "ABC:123"), equalTo(false));
-		assertThat(errors.getErrors(), hasItem("test may contain any character except colon ':', and equals '='."));
-	}
 
 	@Test
 	public void test_isNotNullOrEmpty_string_valid()
