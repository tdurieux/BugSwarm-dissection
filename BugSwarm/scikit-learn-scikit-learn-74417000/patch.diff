diff --git a/doc/whats_new.rst b/doc/whats_new.rst
index adf76c0bf2..e45e208890 100755
--- a/doc/whats_new.rst
+++ b/doc/whats_new.rst
@@ -133,6 +133,9 @@ Bug fixes
     - Fix in :class:`cluster.KMeans` cluster reassignment for sparse input by
       `Lars Buitinck`_.
 
+    - Fixed a bug in :class:`lda.LDA` that could cause asymmetric covariance 
+      matrices when using shrinkage. By `Martin Billinger`_.
+
 API changes summary
 -------------------
 
diff --git a/sklearn/cluster/k_medoids_.py b/sklearn/cluster/k_medoids_.py
index d363246b1b..d08eb4f51e 100755
--- a/sklearn/cluster/k_medoids_.py
+++ b/sklearn/cluster/k_medoids_.py
@@ -112,19 +112,11 @@ def fit(self, X, y=None):
 
         # Check that the array is good and attempt to convert it to
         # Numpy array if possible
-        X = check_array(X)
+        X = self._check_array(X)
 
         # Apply distance metric to get the distance matrix
         D = self.distance_func(X)
 
-        # Check that the number of clusters is less than or equal to
-        # the number of clusters
-        if self.n_clusters > D.shape[0]:
-            raise ValueError("The number of medoids " +
-                             "({}) ".format(self.n_clusters) +
-                             "must be larger than the sides " +
-                             "of the distance matrix ({})".format(D.shape[0]))
-
         medoid_ics = self._get_initial_medoid_indices(D, self.n_clusters)
 
         # Old medoids will be stored here for reference
@@ -133,11 +125,11 @@ def fit(self, X, y=None):
         # Continue the algorithm as long as
         # the medoids keep changing and the maximum number
         # of iterations is not exceeded
-        iter_idx = 0
+        self.n_iter_ = 0
         while not np.all(old_medoid_ics == medoid_ics) and \
-                iter_idx < self.max_iter:
+                self.n_iter_ < self.max_iter:
 
-            iter_idx += 1
+            self.n_iter_ += 1
 
             # Keep a copy of the old medoid assignments
             old_medoid_ics = np.copy(medoid_ics)
@@ -158,6 +150,20 @@ def fit(self, X, y=None):
         # Return self to enable method chaining
         return self
 
+    def _check_array(self, X):
+
+        X = check_array(X)
+
+        # Check that the number of clusters is less than or equal to
+        # the number of samples
+        if self.n_clusters > X.shape[0]:
+            raise ValueError("The number of medoids " +
+                             "({}) ".format(self.n_clusters) +
+                             "must be larger than the number " +
+                             "of samples ({})".format(X.shape[0]))
+
+        return X
+
     def _get_cluster_ics(self, D, medoid_ics):
         """Returns cluster indices for D and current medoid indices"""
 
diff --git a/sklearn/lda.py b/sklearn/lda.py
index 6a6da31701..47d3f4221a 100755
--- a/sklearn/lda.py
+++ b/sklearn/lda.py
@@ -53,7 +53,8 @@ def _cov(X, shrinkage=None):
         if shrinkage == 'auto':
             sc = StandardScaler()  # standardize features
             X = sc.fit_transform(X)
-            s = sc.std_ * ledoit_wolf(X)[0] * sc.std_  # scale back
+            s = ledoit_wolf(X)[0]
+            s = sc.std_[:, np.newaxis] * s * sc.std_[np.newaxis, :]  # rescale
         elif shrinkage == 'empirical':
             s = empirical_covariance(X)
         else:
diff --git a/sklearn/tests/test_lda.py b/sklearn/tests/test_lda.py
index 92b3d5957a..c4192c5982 100755
--- a/sklearn/tests/test_lda.py
+++ b/sklearn/tests/test_lda.py
@@ -149,3 +149,17 @@ def test_lda_scaling():
         # should be able to separate the data perfectly
         assert_equal(clf.fit(x, y).score(x, y), 1.0,
                      'using covariance: %s' % solver)
+
+
+def test_covariance():
+    x, y = make_blobs(n_samples=100, n_features=5,
+                      centers=1, random_state=42)
+
+    # make features correlated
+    x = np.dot(x, np.arange(x.shape[1] ** 2).reshape(x.shape[1], x.shape[1]))
+
+    c_e = lda._cov(x, 'empirical')
+    assert_almost_equal(c_e, c_e.T)
+
+    c_s = lda._cov(x, 'auto')
+    assert_almost_equal(c_s, c_s.T)
