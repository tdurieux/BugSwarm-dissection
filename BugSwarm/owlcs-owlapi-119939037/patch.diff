diff --git a/api/src/main/java/org/semanticweb/owlapitools/builders/BaseSetBuilder.java b/api/src/main/java/org/semanticweb/owlapitools/builders/BaseSetBuilder.java
index 63c07a56db..2890abaf6a 100755
--- a/api/src/main/java/org/semanticweb/owlapitools/builders/BaseSetBuilder.java
+++ b/api/src/main/java/org/semanticweb/owlapitools/builders/BaseSetBuilder.java
@@ -36,8 +36,7 @@
  * @param <I>
  *        contained items type
  */
-public abstract class BaseSetBuilder<T extends OWLObject, B, I> extends BaseBuilder<T, B> implements
-    SettableItem<I, B> {
+public abstract class BaseSetBuilder<T extends OWLObject, B, I> extends BaseBuilder<T, B> {
 
     @Nonnull protected final Set<I> items = new HashSet<>();
 
@@ -55,7 +54,6 @@ public BaseSetBuilder(OWLDataFactory df) {
      *        item to add
      * @return builder
      */
-    @Override
     @SuppressWarnings("unchecked")
     public B withItem(I arg) {
         items.add(arg);
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/owlxml/parser/PARSER_OWLXMLVocabulary.java b/parsers/src/main/java/org/semanticweb/owlapi/owlxml/parser/PARSER_OWLXMLVocabulary.java
index d8f6170a96..f0592087b6 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/owlxml/parser/PARSER_OWLXMLVocabulary.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/owlxml/parser/PARSER_OWLXMLVocabulary.java
@@ -17,14 +17,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.function.BiConsumer;
 import java.util.function.Function;
 
 import javax.annotation.Nullable;
 import javax.inject.Provider;
 
 import org.semanticweb.owlapi.model.*;
-import org.semanticweb.owlapi.owlxml.parser.OWLEH.HandleChild;
 import org.semanticweb.owlapi.vocab.Namespaces;
 import org.semanticweb.owlapi.vocab.OWL2Datatype;
 import org.semanticweb.owlapi.vocab.OWLFacet;
@@ -52,11 +50,11 @@
     /** LITERAL.                            */  PARSER_LITERAL                             (LITERAL                             , OWLLiteralEH::new),
     /** OBJECT_INVERSE_OF.                  */  PARSER_OBJECT_INVERSE_OF                   (OBJECT_INVERSE_OF                   , OWLInverseObjectPropertyEH::new),
     /** DATA_COMPLEMENT_OF.                 */  PARSER_DATA_COMPLEMENT_OF                  (DATA_COMPLEMENT_OF                  , OWLDataComplementOfEH::new),
-    /** DATA_ONE_OF.                        */  PARSER_DATA_ONE_OF                         (DATA_ONE_OF                         , ()->new OWLSetEH<>(BuilderDataOneOf::new, HandleChild.AbstractOWLDataRangeHandler)),
+    /** DATA_ONE_OF.                        */  PARSER_DATA_ONE_OF                         (DATA_ONE_OF                         , OWLDataOneOfEH::new),
     /** DATATYPE_RESTRICTION.               */  PARSER_DATATYPE_RESTRICTION                (DATATYPE_RESTRICTION                , OWLDatatypeRestrictionEH::new),
     /** FACET_RESTRICTION.                  */  PARSER_FACET_RESTRICTION                   (FACET_RESTRICTION                   , OWLDatatypeFacetRestrictionEH::new),
-    /** DATA_UNION_OF.                      */  PARSER_DATA_UNION_OF                       (DATA_UNION_OF                       , ()->new OWLSetEH<>(BuilderDataUnionOf::new, HandleChild.AbstractOWLDataRangeHandler)),
-    /** DATA_INTERSECTION_OF.               */  PARSER_DATA_INTERSECTION_OF                (DATA_INTERSECTION_OF                , ()->new OWLSetEH<>(BuilderDataIntersectionOf::new, HandleChild.AbstractOWLDataRangeHandler)),
+    /** DATA_UNION_OF.                      */  PARSER_DATA_UNION_OF                       (DATA_UNION_OF                       , OWLDataUnionOfEH::new),
+    /** DATA_INTERSECTION_OF.               */  PARSER_DATA_INTERSECTION_OF                (DATA_INTERSECTION_OF                , OWLDataIntersectionOfEH::new),
     /** OBJECT_INTERSECTION_OF.             */  PARSER_OBJECT_INTERSECTION_OF              (OBJECT_INTERSECTION_OF              , OWLObjectIntersectionOfEH::new),
     /** OBJECT_UNION_OF.                    */  PARSER_OBJECT_UNION_OF                     (OBJECT_UNION_OF                     , OWLObjectUnionOfEH::new),
     /** OBJECT_COMPLEMENT_OF.               */  PARSER_OBJECT_COMPLEMENT_OF                (OBJECT_COMPLEMENT_OF                , OWLObjectComplementOfEH::new),
@@ -75,14 +73,14 @@
     /** DATA_EXACT_CARDINALITY.             */  PARSER_DATA_EXACT_CARDINALITY              (DATA_EXACT_CARDINALITY              , ()->new AbstractDataCardinalityRestrictionEH<>(BuilderDataExactCardinality::new)),
     /** DATA_MAX_CARDINALITY.               */  PARSER_DATA_MAX_CARDINALITY                (DATA_MAX_CARDINALITY                , ()->new AbstractDataCardinalityRestrictionEH<>(BuilderDataMaxCardinality::new)),
     /** SUB_CLASS_OF.                       */  PARSER_SUB_CLASS_OF                        (SUB_CLASS_OF                        , OWLSubClassAxiomEH::new),
-    /** EQUIVALENT_CLASSES.                 */  PARSER_EQUIVALENT_CLASSES                  (EQUIVALENT_CLASSES                  , ()->new OWLSetAxiomEH<>(BuilderEquivalentClasses::new)),
-    /** DISJOINT_CLASSES.                   */  PARSER_DISJOINT_CLASSES                    (DISJOINT_CLASSES                    , ()->new OWLSetAxiomEH<>(BuilderDisjointClasses::new)),
+    /** EQUIVALENT_CLASSES.                 */  PARSER_EQUIVALENT_CLASSES                  (EQUIVALENT_CLASSES                  , OWLEquivalentClassesAxiomEH::new),
+    /** DISJOINT_CLASSES.                   */  PARSER_DISJOINT_CLASSES                    (DISJOINT_CLASSES                    , OWLDisjointClassesAxiomEH::new),
     /** DISJOINT_UNION.                     */  PARSER_DISJOINT_UNION                      (DISJOINT_UNION                      , OWLDisjointUnionEH::new),
     /** UNION_OF.                           */  PARSER_UNION_OF                            (UNION_OF                            , OWLUnionOfEH::new),
     /** SUB_OBJECT_PROPERTY_OF.             */  PARSER_SUB_OBJECT_PROPERTY_OF              (SUB_OBJECT_PROPERTY_OF              , OWLSubObjectPropertyOfAxiomEH::new),
     /** OBJECT_PROPERTY_CHAIN.              */  PARSER_OBJECT_PROPERTY_CHAIN               (OBJECT_PROPERTY_CHAIN               , OWLSubObjectPropertyChainEH::new),
-    /** EQUIVALENT_OBJECT_PROPERTIES.       */  PARSER_EQUIVALENT_OBJECT_PROPERTIES        (EQUIVALENT_OBJECT_PROPERTIES        , ()->new OWLSetAxiomEH<>(BuilderEquivalentObjectProperties::new)),
-    /** DISJOINT_OBJECT_PROPERTIES.         */  PARSER_DISJOINT_OBJECT_PROPERTIES          (DISJOINT_OBJECT_PROPERTIES          , ()->new OWLSetAxiomEH<>(BuilderDisjointObjectProperties::new)),
+    /** EQUIVALENT_OBJECT_PROPERTIES.       */  PARSER_EQUIVALENT_OBJECT_PROPERTIES        (EQUIVALENT_OBJECT_PROPERTIES        , OWLEquivalentObjectPropertiesAxiomEH::new),
+    /** DISJOINT_OBJECT_PROPERTIES.         */  PARSER_DISJOINT_OBJECT_PROPERTIES          (DISJOINT_OBJECT_PROPERTIES          , OWLDisjointObjectPropertiesAxiomEH::new),
     /** OBJECT_PROPERTY_DOMAIN.             */  PARSER_OBJECT_PROPERTY_DOMAIN              (OBJECT_PROPERTY_DOMAIN              , OWLObjectPropertyDomainEH::new),
     /** OBJECT_PROPERTY_RANGE.              */  PARSER_OBJECT_PROPERTY_RANGE               (OBJECT_PROPERTY_RANGE               , OWLObjectPropertyRangeAxiomEH::new),
     /** INVERSE_OBJECT_PROPERTIES.          */  PARSER_INVERSE_OBJECT_PROPERTIES           (INVERSE_OBJECT_PROPERTIES           , OWLInverseObjectPropertiesAxiomEH::new),
@@ -94,13 +92,13 @@
     /** IRREFLEXIVE_OBJECT_PROPERTY.        */  PARSER_IRREFLEXIVE_OBJECT_PROPERTY         (IRREFLEXIVE_OBJECT_PROPERTY         , ()->new AbstractOWLAxiomEH<>(BuilderIrreflexiveObjectProperty::new)),
     /** TRANSITIVE_OBJECT_PROPERTY.         */  PARSER_TRANSITIVE_OBJECT_PROPERTY          (TRANSITIVE_OBJECT_PROPERTY          , ()->new AbstractOWLAxiomEH<>(BuilderTransitiveObjectProperty::new)),
     /** SUB_DATA_PROPERTY_OF.               */  PARSER_SUB_DATA_PROPERTY_OF                (SUB_DATA_PROPERTY_OF                , OWLSubDataPropertyOfAxiomEH::new),
-    /** EQUIVALENT_DATA_PROPERTIES.         */  PARSER_EQUIVALENT_DATA_PROPERTIES          (EQUIVALENT_DATA_PROPERTIES          , ()->new OWLSetAxiomEH<>(BuilderEquivalentDataProperties::new)),
-    /** DISJOINT_DATA_PROPERTIES.           */  PARSER_DISJOINT_DATA_PROPERTIES            (DISJOINT_DATA_PROPERTIES            , ()->new OWLSetAxiomEH<>(BuilderDisjointDataProperties::new)),
+    /** EQUIVALENT_DATA_PROPERTIES.         */  PARSER_EQUIVALENT_DATA_PROPERTIES          (EQUIVALENT_DATA_PROPERTIES          , OWLEquivalentDataPropertiesAxiomEH::new),
+    /** DISJOINT_DATA_PROPERTIES.           */  PARSER_DISJOINT_DATA_PROPERTIES            (DISJOINT_DATA_PROPERTIES            , OWLDisjointDataPropertiesAxiomEH::new),
     /** DATA_PROPERTY_DOMAIN.               */  PARSER_DATA_PROPERTY_DOMAIN                (DATA_PROPERTY_DOMAIN                , OWLDataPropertyDomainAxiomEH::new),
     /** DATA_PROPERTY_RANGE.                */  PARSER_DATA_PROPERTY_RANGE                 (DATA_PROPERTY_RANGE                 , OWLDataPropertyRangeAxiomEH::new),
     /** FUNCTIONAL_DATA_PROPERTY.           */  PARSER_FUNCTIONAL_DATA_PROPERTY            (FUNCTIONAL_DATA_PROPERTY            , ()->new AbstractOWLAxiomEH<>(BuilderFunctionalDataProperty::new)),
-    /** SAME_INDIVIDUAL.                    */  PARSER_SAME_INDIVIDUAL                     (SAME_INDIVIDUAL                     , ()->new OWLSetAxiomEH<>(BuilderSameIndividual::new)),
-    /** DIFFERENT_INDIVIDUALS.              */  PARSER_DIFFERENT_INDIVIDUALS               (DIFFERENT_INDIVIDUALS               , ()->new OWLSetAxiomEH<>(BuilderDifferentIndividuals::new)),
+    /** SAME_INDIVIDUAL.                    */  PARSER_SAME_INDIVIDUAL                     (SAME_INDIVIDUAL                     , OWLSameIndividualsAxiomEH::new),
+    /** DIFFERENT_INDIVIDUALS.              */  PARSER_DIFFERENT_INDIVIDUALS               (DIFFERENT_INDIVIDUALS               , OWLDifferentIndividualsAxiomEH::new),
     /** CLASS_ASSERTION.                    */  PARSER_CLASS_ASSERTION                     (CLASS_ASSERTION                     , OWLClassAssertionAxiomEH::new),
     /** OBJECT_PROPERTY_ASSERTION.          */  PARSER_OBJECT_PROPERTY_ASSERTION           (OBJECT_PROPERTY_ASSERTION           , OWLObjectPropertyAssertionAxiomEH::new),
     /** DATA_PROPERTY_ASSERTION.            */  PARSER_DATA_PROPERTY_ASSERTION             (DATA_PROPERTY_ASSERTION             , OWLDataPropertyAssertionAxiomEH::new),
@@ -113,8 +111,8 @@
     /** ANNOTATION_PROPERTY_RANGE.          */  PARSER_ANNOTATION_PROPERTY_RANGE           (ANNOTATION_PROPERTY_RANGE           , OWLAnnotationPropertyRangeEH::new),
     /** SUB_ANNOTATION_PROPERTY_OF.         */  PARSER_SUB_ANNOTATION_PROPERTY_OF          (SUB_ANNOTATION_PROPERTY_OF          , OWLSubAnnotationPropertyOfEH::new),
     /** DATATYPE_DEFINITION.                */  PARSER_DATATYPE_DEFINITION                 (DATATYPE_DEFINITION                 , OWLDatatypeDefinitionEH::new),
-    /** IRI_ELEMENT.                        */  PARSER_IRI_ELEMENT                         (IRI_ELEMENT                         , ()->new AbstractIRIEH(false)),
-    /** ABBREVIATED_IRI_ELEMENT.            */  PARSER_ABBREVIATED_IRI_ELEMENT             (ABBREVIATED_IRI_ELEMENT             , ()->new AbstractIRIEH(true)),
+    /** IRI_ELEMENT.                        */  PARSER_IRI_ELEMENT                         (IRI_ELEMENT                         , IRIEH::new),
+    /** ABBREVIATED_IRI_ELEMENT.            */  PARSER_ABBREVIATED_IRI_ELEMENT             (ABBREVIATED_IRI_ELEMENT             , AbbreviatedIRIEH::new),
     /** NODE_ID.                            */  PARSER_NODE_ID                             (NODE_ID                             ),
     /** ANNOTATION_URI.                     */  PARSER_ANNOTATION_URI                      (ANNOTATION_URI                      ),
     /** LABEL.                              */  PARSER_LABEL                               (LABEL                               ),
@@ -196,7 +194,6 @@ public String getShortName() {
     OWLDataFactory df;
     Function<OWLDataFactory, B> provider;
     B builder;
-    HandleChild child;
 
     void setHandler(OWLXMLPH handler) {
         this.handler = handler;
@@ -214,6 +211,8 @@ void setHandler(OWLXMLPH handler) {
         return (T) getOWLObject();
     }
 
+    abstract void endElement();
+
     IRI getIRIFromAttribute(String localName, String value) {
         if (localName.equals(IRI_ATTRIBUTE.getShortForm())) {
             return handler.getIRI(value);
@@ -240,7 +239,7 @@ void setParentHandler(OWLEH<?, ?> handler) {
         parentHandler = handler;
     }
 
-    final OWLEH<?, ?> getParentHandler() {
+    OWLEH<?, ?> getParentHandler() {
         return verifyNotNull(parentHandler, "parentHandler cannot be null at this point");
     }
 
@@ -250,42 +249,15 @@ void startElement(String name) {
         elementName = name;
     }
 
-    final String getElementName() {
+    String getElementName() {
         return elementName;
     }
 
-    final void ensureNotNull(@Nullable Object element, String message) {
-        if (element == null) {
-            throw new OWLXMLParserElementNotFoundException(handler, message);
-        }
-    }
-
-    final void ensureAttributeNotNull(@Nullable Object element, String message) {
-        if (element == null) {
-            throw new OWLXMLParserAttributeNotFoundException(handler, message);
-        }
-    }
-
-    final void handleChars(char[] chars, int start, int length) {
-        if (isTextContentPossible()) {
-            sb.append(chars, start, length);
-        }
-    }
-
-    final String getText() {
-        return sb.toString();
-    }
+    void handleChild(AbstractOWLAxiomEH<? extends OWLAxiom, ?> h) {}
 
-    boolean isTextContentPossible() {
-        return false;
-    }
+    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {}
 
-    void handleChild(AbstractOWLAxiomEH<? extends OWLAxiom, ?> h) {
-        OWLAxiom axiom = h.getOWLObject();
-        if (!axiom.isAnnotationAxiom() || handler.getConfiguration().isLoadAnnotationAxioms()) {
-            handler.getOWLOntologyManager().applyChange(new AddAxiom(handler.getOntology(), axiom));
-        }
-    }
+    void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {}
 
     void handleChild(ObjectPropertyEH h) {
         if (builder instanceof SettableProperty) {
@@ -301,10 +273,6 @@ void handleChild(OWLDataPropertyEH h) {
         }
     }
 
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {}
-
-    void handleChild(DataRangeEH h) {}
-
     void handleChild(OWLIndividualEH h) {}
 
     void handleChild(OWLLiteralEH h) {}
@@ -332,37 +300,30 @@ void handleChild(SWRLAtomEH h) {}
 
     void handleChild(SWRLAtomListEH h) {}
 
-    void endElement() {
-        child.run(parentHandler, this);
-    }
-
-    enum HandleChild {
-        AbstractOWLAxiomEH((parent, _this) -> parent.handleChild((AbstractOWLAxiomEH) _this)),
-        AbstractClassExpressionEH((parent, _this) -> parent.handleChild((AbstractClassExpressionEH) _this)),
-        AbstractOWLDataRangeHandler((parent, _this) -> parent.handleChild((DataRangeEH) _this)),
-        ObjectPropertyEH((parent, _this) -> parent.handleChild((ObjectPropertyEH) _this)),
-        OWLDataPropertyEH((parent, _this) -> parent.handleChild((OWLDataPropertyEH) _this)),
-        OWLIndividualEH((parent, _this) -> parent.handleChild((OWLIndividualEH) _this)),
-        OWLLiteralEH((parent, _this) -> parent.handleChild((OWLLiteralEH) _this)),
-        OWLAnnotationEH((parent, _this) -> parent.handleChild((OWLAnnotationEH) _this)),
-        OWLSubObjectPropertyChainEH((parent, _this) -> parent.handleChild((OWLSubObjectPropertyChainEH) _this)),
-        OWLDatatypeFacetRestrictionEH((parent, _this) -> parent.handleChild((OWLDatatypeFacetRestrictionEH) _this)),
-        OWLAnnotationPropertyEH((parent, _this) -> parent.handleChild((OWLAnnotationPropertyEH) _this)),
-        OWLAnonymousIndividualEH((parent, _this) -> parent.handleChild((OWLAnonymousIndividualEH) _this)),
-        AbstractIRIEH((parent, _this) -> parent.handleChild((AbstractIRIEH) _this)),
-        SWRLVariableEH((parent, _this) -> parent.handleChild((SWRLVariableEH) _this)),
-        SWRLAtomEH((parent, _this) -> parent.handleChild((SWRLAtomEH) _this)),
-        SWRLAtomListEH((parent, _this) -> parent.handleChild((SWRLAtomListEH) _this));
-
-        private BiConsumer<OWLEH<?, ?>, OWLEH<?, ?>> consumer;
-
-        HandleChild(BiConsumer<OWLEH<?, ?>, OWLEH<?, ?>> c) {
-            consumer = c;
+    void ensureNotNull(@Nullable Object element, String message) {
+        if (element == null) {
+            throw new OWLXMLParserElementNotFoundException(handler, message);
         }
+    }
 
-        final void run(OWLEH<?, ?> parent, OWLEH<?, ?> _this) {
-            consumer.accept(parent, _this);
-        };
+    void ensureAttributeNotNull(@Nullable Object element, String message) {
+        if (element == null) {
+            throw new OWLXMLParserAttributeNotFoundException(handler, message);
+        }
+    }
+
+    void handleChars(char[] chars, int start, int length) {
+        if (isTextContentPossible()) {
+            sb.append(chars, start, length);
+        }
+    }
+
+    String getText() {
+        return sb.toString();
+    }
+
+    boolean isTextContentPossible() {
+        return false;
     }
 }
 
@@ -370,7 +331,11 @@ final void run(OWLEH<?, ?> parent, OWLEH<?, ?> _this) {
 
     public AbstractClassExpressionEH(Function<OWLDataFactory, B> b) {
         provider = b;
-        child = HandleChild.AbstractClassExpressionEH;
+    }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
     }
 }
 
@@ -382,32 +347,62 @@ public AbstractDataCardinalityRestrictionEH(Function<OWLDataFactory, B> b) {
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if ("cardinality".equals(localName)) {
             builder.withCardinality(Integer.parseInt(value));
         }
     }
 }
 
+abstract class AbstractIRIEH extends OWLEH<IRI, Builder<IRI>> {
+
+    IRI iri;
+
+    @Override
+        boolean isTextContentPossible() {
+        return true;
+    }
+
+    @Override
+    public IRI getOWLObject() {
+        return verifyNotNull(iri);
+    }
+
+    @Override
+        void endElement() {
+        iri = iri();
+        getParentHandler().handleChild(this);
+    }
+
+    abstract IRI iri();
+}
+
 class AbstractOWLAxiomEH<X extends OWLAxiom, B extends Builder<X>> extends OWLEH<X, B> {
 
     AbstractOWLAxiomEH(Function<OWLDataFactory, B> b) {
         provider = b;
-        child = HandleChild.AbstractOWLAxiomEH;
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         ((BaseBuilder<?, ?>) builder).withAnnotation(h.getOWLObject());
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
-abstract class AbstractOWLDataRangeHandler<X extends OWLDataRange, B extends Builder<X>> extends OWLEH<X, B> implements
-    DataRangeEH {
+abstract class AbstractOWLDataRangeHandler<X extends OWLDataRange, B extends Builder<X>> extends OWLEH<X, B> {
 
     public AbstractOWLDataRangeHandler(Function<OWLDataFactory, B> b) {
         provider = b;
-        child = HandleChild.AbstractOWLDataRangeHandler;
+    }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
     }
 }
 
@@ -419,7 +414,7 @@ public AbstractOWLObjectCardinalityEH(Function<OWLDataFactory, B> b) {
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if ("cardinality".equals(localName)) {
             builder.withCardinality(Integer.parseInt(value));
         }
@@ -433,18 +428,15 @@ void attribute(String localName, String value) {
     <T> T getOWLObject(Class<T> witness);
 }
 
-interface DataRangeEH {
-
-    <T> T getOWLObject();
-
-    <T> T getOWLObject(Class<T> witness);
-}
-
 class AbstractOWLObjectPropertyEH extends OWLEH<OWLObjectProperty, BuilderObjectProperty> implements ObjectPropertyEH {
 
     public AbstractOWLObjectPropertyEH() {
         provider = BuilderObjectProperty::new;
-        child = HandleChild.ObjectPropertyEH;
+    }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
     }
 }
 
@@ -456,13 +448,13 @@ public AbstractDataRestrictionEH(Function<OWLDataFactory, B> b) {
     }
 
     @Override
-    void startElement(String name) {
+        void startElement(String name) {
         super.startElement(name);
         builder.withRange(df.getTopDatatype());
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withRange(h.getOWLObject());
     }
 }
@@ -475,55 +467,43 @@ public AbstractObjectRestrictionEH(Function<OWLDataFactory, B> b) {
     }
 
     @Override
-    void startElement(String name) {
+        void startElement(String name) {
         super.startElement(name);
         builder.withRange(df.getOWLThing());
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withRange(h.getOWLObject());
     }
 }
 
-class AbstractIRIEH extends OWLEH<IRI, Builder<IRI>> {
-
-    Provider<IRI> p;
-
-    public AbstractIRIEH(boolean abbreviated) {
-        child = HandleChild.AbstractIRIEH;
-        p = abbreviated ? this::shortIri : this::longIri;
-    }
+class AbbreviatedIRIEH extends AbstractIRIEH {
 
     @Override
-    boolean isTextContentPossible() {
-        return true;
+        IRI iri() {
+        return handler.getAbbreviatedIRI(getText().trim());
     }
+}
 
-    @Override
-    public IRI getOWLObject() {
-        return p.get();
-    }
+class IRIEH extends AbstractIRIEH {
 
-    IRI longIri() {
+    @Override
+        IRI iri() {
         return handler.getIRI(getText().trim());
     }
-
-    IRI shortIri() {
-        return handler.getAbbreviatedIRI(getText().trim());
-    }
 }
 
 class OWLUnionOfEH extends OWLEH<OWLClassExpression, Builder<OWLClassExpression>> {
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         // We simply pass on to our parent, which MUST be an OWLDisjointUnionOf
         getParentHandler().handleChild(h);
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         // nothing to do here
     }
 
@@ -540,27 +520,27 @@ void endElement() {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withSubject(h.getOWLObject(OWLClassExpression.class).asOWLClass());
     }
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         builder.withSubject(h.getOWLObject(OWLDataPropertyExpression.class).asOWLDataProperty());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withSubject(h.getOWLObject(OWLAnonymousIndividual.class));
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         builder.withSubject(h.getOWLObject(OWLObjectPropertyExpression.class).asOWLObjectProperty());
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         if (builder.getSubject() == null) {
             super.handleChild(h);
         } else {
@@ -577,7 +557,7 @@ void handleChild(OWLAnnotationEH h) {
     }
 
     @Override
-    void handleChild(AbstractIRIEH h) {
+        void handleChild(AbstractIRIEH h) {
         internalSet(h.getOWLObject());
     }
 
@@ -590,12 +570,12 @@ void handleChild(AbstractIRIEH h) {
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         internalSet(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withValue(h.getOWLObject());
     }
 }
@@ -604,11 +584,15 @@ void handleChild(OWLLiteralEH h) {
 
     public OWLAnnotationEH() {
         provider = x -> new BuilderAnnotation(x);
-        child = HandleChild.OWLAnnotationEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
+
+    @Override
+        void attribute(String localName, String value) {
         super.attribute(localName, value);
         // Legacy Handling
         if (localName.equals(ANNOTATION_URI.getShortForm())) {
@@ -617,22 +601,22 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         builder.withAnnotation(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withValue(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withValue(h.getOWLObject());
     }
 
     @Override
-    void handleChild(AbstractIRIEH h) {
+        void handleChild(AbstractIRIEH h) {
         builder.withValue(h.getOWLObject());
     }
 }
@@ -645,7 +629,7 @@ void handleChild(AbstractIRIEH h) {
     }
 
     @Override
-    void handleChild(AbstractIRIEH h) {
+        void handleChild(AbstractIRIEH h) {
         builder.withDomain(h.getOWLObject());
     }
 }
@@ -654,13 +638,17 @@ void handleChild(AbstractIRIEH h) {
 
     public OWLAnnotationPropertyEH() {
         provider = x -> new BuilderAnnotationProperty(x);
-        child = HandleChild.OWLAnnotationPropertyEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class OWLAnnotationPropertyRangeEH extends
@@ -671,7 +659,7 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(AbstractIRIEH h) {
+        void handleChild(AbstractIRIEH h) {
         builder.withRange(h.getOWLObject());
     }
 }
@@ -684,17 +672,21 @@ public OWLAnonymousIndividualEH() {
 
     public OWLAnonymousIndividualEH(Function<OWLDataFactory, BuilderAnonymousIndividual> b) {
         provider = b;
-        child = HandleChild.OWLAnonymousIndividualEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if (localName.equals(NODE_ID.getShortForm())) {
             builder.withId(value.trim());
         } else {
             super.attribute(localName, value);
         }
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class OWLClassAssertionAxiomEH extends AbstractOWLAxiomEH<OWLClassAssertionAxiom, BuilderClassAssertion> {
@@ -704,17 +696,17 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withClass(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withIndividual(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withIndividual(h.getOWLObject());
     }
 }
@@ -726,7 +718,7 @@ public OWLClassEH() {
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
 }
@@ -738,7 +730,7 @@ public OWLDataComplementOfEH() {
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withRange(h.getOWLObject(OWLDataRange.class));
     }
 }
@@ -750,26 +742,31 @@ public OWLDataHasValueEH() {
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withLiteral(h.getOWLObject());
     }
 }
 
-class OWLSetEH<X extends OWLObject, Y extends OWLObject, B extends Builder<X> & SettableItem<Y, B>> extends OWLEH<X, B>
-    implements DataRangeEH {
+class OWLDataIntersectionOfEH extends AbstractOWLDataRangeHandler<OWLDataIntersectionOf, BuilderDataIntersectionOf> {
 
-    OWLSetEH(Function<OWLDataFactory, B> b, HandleChild c) {
-        provider = b;
-        child = c;
+    public OWLDataIntersectionOfEH() {
+        super(BuilderDataIntersectionOf::new);
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withItem(h.getOWLObject());
     }
+}
+
+class OWLDataOneOfEH extends AbstractOWLDataRangeHandler<OWLDataOneOf, BuilderDataOneOf> {
+
+    public OWLDataOneOfEH() {
+        super(BuilderDataOneOf::new);
+    }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -782,17 +779,17 @@ void handleChild(OWLLiteralEH h) {
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withSubject(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withSubject(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withValue(h.getOWLObject());
     }
 }
@@ -804,7 +801,7 @@ void handleChild(OWLLiteralEH h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withDomain(h.getOWLObject());
     }
 }
@@ -813,13 +810,17 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
 
     public OWLDataPropertyEH() {
         provider = x -> new BuilderDataProperty(x);
-        child = HandleChild.OWLDataPropertyEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class OWLDataPropertyRangeAxiomEH extends AbstractOWLAxiomEH<OWLDataPropertyRangeAxiom, BuilderDataPropertyRange> {
@@ -829,7 +830,7 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withRange(h.getOWLObject(OWLDataRange.class));
     }
 }
@@ -843,28 +844,28 @@ public OWLDataRestrictionEH() {
     }
 
     @Override
-    void setHandler(OWLXMLPH handler) {
+        void setHandler(OWLXMLPH handler) {
         super.setHandler(handler);
         oneRestriction = new BuilderFacetRestriction(df);
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withDatatype(h.getOWLObject(OWLDataRange.class).asOWLDatatype());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         oneRestriction.withLiteral(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLDatatypeFacetRestrictionEH h) {
+        void handleChild(OWLDatatypeFacetRestrictionEH h) {
         builder.withItem(h.getOWLObject());
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         super.attribute(localName, value);
         if ("facet".equals(localName)) {
             oneRestriction.withFacet(OWLFacet.getFacet(handler.getIRI(value)));
@@ -872,6 +873,18 @@ void attribute(String localName, String value) {
     }
 }
 
+class OWLDataUnionOfEH extends AbstractOWLDataRangeHandler<OWLDataUnionOf, BuilderDataUnionOf> {
+
+    public OWLDataUnionOfEH() {
+        super(BuilderDataUnionOf::new);
+    }
+
+    @Override
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
+        builder.withItem(h.getOWLObject());
+    }
+}
+
 class OWLDatatypeDefinitionEH extends AbstractOWLAxiomEH<OWLDatatypeDefinitionAxiom, BuilderDatatypeDefinition> {
 
     OWLDatatypeDefinitionEH() {
@@ -879,7 +892,7 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         OWLDataRange handledDataRange = h.getOWLObject();
         if (handledDataRange.isOWLDatatype() && builder.getType() == null) {
             builder.with(handledDataRange.asOWLDatatype());
@@ -896,7 +909,7 @@ public OWLDatatypeEH() {
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
 }
@@ -905,20 +918,24 @@ void attribute(String localName, String value) {
 
     public OWLDatatypeFacetRestrictionEH() {
         provider = BuilderFacetRestriction::new;
-        child = HandleChild.OWLDatatypeFacetRestrictionEH;
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withLiteral(h.getOWLObject());
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if ("facet".equals(localName)) {
             builder.withFacet(OWLFacet.getFacet(IRI.create(value)));
         }
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class OWLDatatypeRestrictionEH extends AbstractOWLDataRangeHandler<OWLDatatypeRestriction, BuilderDatatypeRestriction> {
@@ -928,7 +945,7 @@ public OWLDatatypeRestrictionEH() {
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         OWLDataRange dr = h.getOWLObject();
         if (dr.isOWLDatatype()) {
             builder.withDatatype(dr.asOWLDatatype());
@@ -936,7 +953,7 @@ void handleChild(DataRangeEH h) {
     }
 
     @Override
-    void handleChild(OWLDatatypeFacetRestrictionEH h) {
+        void handleChild(OWLDatatypeFacetRestrictionEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -948,37 +965,37 @@ void handleChild(OWLDatatypeFacetRestrictionEH h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withEntity(h.getOWLObject(OWLClassExpression.class).asOWLClass());
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         builder.withEntity(h.getOWLObject(OWLObjectPropertyExpression.class).asOWLObjectProperty());
     }
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         builder.withEntity(h.getOWLObject(OWLDataPropertyExpression.class).asOWLDataProperty());
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         builder.withEntity(h.getOWLObject(OWLDataRange.class).asOWLDatatype());
     }
 
     @Override
-    void handleChild(OWLAnnotationPropertyEH h) {
+        void handleChild(OWLAnnotationPropertyEH h) {
         builder.withEntity(h.getOWLObject(OWLAnnotationProperty.class).asOWLAnnotationProperty());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withEntity(h.getOWLObject(OWLIndividual.class).asOWLNamedIndividual());
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         if (builder.getEntity() == null) {
             super.handleChild(h);
         } else {
@@ -987,35 +1004,58 @@ void handleChild(OWLAnnotationEH h) {
     }
 }
 
-class OWLSetAxiomEH<X extends OWLAxiom, Y extends OWLObject, B extends Builder<X> & SettableItem<Y, B>> extends
-    AbstractOWLAxiomEH<X, B> {
+class OWLDifferentIndividualsAxiomEH extends
+    AbstractOWLAxiomEH<OWLDifferentIndividualsAxiom, BuilderDifferentIndividuals> {
 
-    OWLSetAxiomEH(Function<OWLDataFactory, B> b) {
-        super(b);
+    OWLDifferentIndividualsAxiomEH() {
+        super(BuilderDifferentIndividuals::new);
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withItem(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withItem(h.getOWLObject());
     }
+}
+
+class OWLDisjointClassesAxiomEH extends AbstractOWLAxiomEH<OWLDisjointClassesAxiom, BuilderDisjointClasses> {
+
+    OWLDisjointClassesAxiomEH() {
+        super(BuilderDisjointClasses::new);
+    }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withItem(h.getOWLObject());
     }
+}
+
+class OWLDisjointDataPropertiesAxiomEH extends
+    AbstractOWLAxiomEH<OWLDisjointDataPropertiesAxiom, BuilderDisjointDataProperties> {
+
+    OWLDisjointDataPropertiesAxiomEH() {
+        super(BuilderDisjointDataProperties::new);
+    }
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         builder.withItem(h.getOWLObject());
     }
+}
+
+class OWLDisjointObjectPropertiesAxiomEH extends
+    AbstractOWLAxiomEH<OWLDisjointObjectPropertiesAxiom, BuilderDisjointObjectProperties> {
+
+    OWLDisjointObjectPropertiesAxiomEH() {
+        super(BuilderDisjointObjectProperties::new);
+    }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -1027,7 +1067,7 @@ void handleChild(ObjectPropertyEH h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         if (builder.getClassExpression() == null) {
             builder.withClass(h.getOWLObject(OWLClassExpression.class).asOWLClass());
         } else {
@@ -1036,6 +1076,44 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
     }
 }
 
+class OWLEquivalentClassesAxiomEH extends AbstractOWLAxiomEH<OWLEquivalentClassesAxiom, BuilderEquivalentClasses> {
+
+    OWLEquivalentClassesAxiomEH() {
+        super(BuilderEquivalentClasses::new);
+    }
+
+    @Override
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        builder.withItem(h.getOWLObject());
+    }
+}
+
+class OWLEquivalentDataPropertiesAxiomEH extends
+    AbstractOWLAxiomEH<OWLEquivalentDataPropertiesAxiom, BuilderEquivalentDataProperties> {
+
+    OWLEquivalentDataPropertiesAxiomEH() {
+        super(BuilderEquivalentDataProperties::new);
+    }
+
+    @Override
+        void handleChild(OWLDataPropertyEH h) {
+        builder.withItem(h.getOWLObject());
+    }
+}
+
+class OWLEquivalentObjectPropertiesAxiomEH extends
+    AbstractOWLAxiomEH<OWLEquivalentObjectPropertiesAxiom, BuilderEquivalentObjectProperties> {
+
+    OWLEquivalentObjectPropertiesAxiomEH() {
+        super(BuilderEquivalentObjectProperties::new);
+    }
+
+    @Override
+        void handleChild(ObjectPropertyEH h) {
+        builder.withItem(h.getOWLObject());
+    }
+}
+
 class OWLHasKeyEH extends AbstractOWLAxiomEH<OWLHasKeyAxiom, BuilderHasKey> {
 
     OWLHasKeyEH() {
@@ -1043,17 +1121,17 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withClass(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         builder.withItem(h.getOWLObject());
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -1062,13 +1140,17 @@ void handleChild(ObjectPropertyEH h) {
 
     public OWLIndividualEH() {
         provider = BuilderNamedIndividual::new;
-        child = HandleChild.OWLIndividualEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class OWLInverseObjectPropertiesAxiomEH extends
@@ -1079,7 +1161,7 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         if (builder.getProperty() == null) {
             builder.withProperty(h.getOWLObject());
         } else {
@@ -1092,7 +1174,11 @@ void handleChild(ObjectPropertyEH h) {
 
     public OWLInverseObjectPropertyEH() {
         provider = BuilderObjectInverseOf::new;
-        child = HandleChild.ObjectPropertyEH;
+    }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
     }
 }
 
@@ -1100,11 +1186,10 @@ public OWLInverseObjectPropertyEH() {
 
     public OWLLiteralEH() {
         provider = BuilderLiteral::new;
-        child = HandleChild.OWLLiteralEH;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if (localName.equals(DATATYPE_IRI.getShortForm())) {
             IRI iri = handler.getIRI(value);
             OWLDatatype type = df.getOWLDatatype(iri);
@@ -1120,13 +1205,13 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         builder.withLiteralForm(getText());
         getParentHandler().handleChild(this);
     }
 
     @Override
-    boolean isTextContentPossible() {
+        boolean isTextContentPossible() {
         return true;
     }
 }
@@ -1139,17 +1224,17 @@ boolean isTextContentPossible() {
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withSubject(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withSubject(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         builder.withValue(h.getOWLObject());
     }
 }
@@ -1162,7 +1247,7 @@ void handleChild(OWLLiteralEH h) {
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         internalSet(h.getOWLObject());
     }
 
@@ -1175,7 +1260,7 @@ public void internalSet(OWLIndividual h) {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         internalSet(h.getOWLObject());
     }
 }
@@ -1187,7 +1272,7 @@ public OWLObjectComplementOfEH() {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withClass(h.getOWLObject());
     }
 }
@@ -1199,12 +1284,12 @@ public OWLObjectHasValueEH() {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withValue(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withValue(h.getOWLObject());
     }
 }
@@ -1217,7 +1302,7 @@ public OWLObjectIntersectionOfEH() {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -1229,7 +1314,7 @@ public OWLObjectOneOfEH() {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -1242,7 +1327,7 @@ void handleChild(OWLIndividualEH h) {
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         internalSet(h.getOWLObject());
     }
 
@@ -1255,7 +1340,7 @@ public void internalSet(OWLIndividual h) {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         internalSet(h.getOWLObject());
     }
 }
@@ -1267,7 +1352,7 @@ void handleChild(OWLIndividualEH h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withDomain(h.getOWLObject());
     }
 }
@@ -1275,7 +1360,7 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
 class OWLObjectPropertyEH extends AbstractOWLObjectPropertyEH {
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         builder.withIRI(getIRIFromAttribute(localName, value));
     }
 }
@@ -1288,7 +1373,7 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         builder.withRange(h.getOWLObject());
     }
 }
@@ -1300,7 +1385,24 @@ public OWLObjectUnionOfEH() {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        builder.withItem(h.getOWLObject());
+    }
+}
+
+class OWLSameIndividualsAxiomEH extends AbstractOWLAxiomEH<OWLSameIndividualAxiom, BuilderSameIndividual> {
+
+    OWLSameIndividualsAxiomEH() {
+        super(BuilderSameIndividual::new);
+    }
+
+    @Override
+        void handleChild(OWLIndividualEH h) {
+        builder.withItem(h.getOWLObject());
+    }
+
+    @Override
+        void handleChild(OWLAnonymousIndividualEH h) {
         builder.withItem(h.getOWLObject());
     }
 }
@@ -1313,7 +1415,7 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
     }
 
     @Override
-    void handleChild(OWLAnnotationPropertyEH h) {
+        void handleChild(OWLAnnotationPropertyEH h) {
         if (builder.getSub() == null) {
             builder.withSub(h.getOWLObject());
         } else if (builder.getSup() == null) {
@@ -1331,7 +1433,7 @@ void handleChild(OWLAnnotationPropertyEH h) {
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         if (builder.getSub() == null) {
             builder.withSub(h.getOWLObject());
         } else if (builder.getSup() == null) {
@@ -1347,7 +1449,7 @@ void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
     }
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         if (builder.getSub() == null) {
             builder.withSub(h.getOWLObject());
         } else if (builder.getSup() == null) {
@@ -1361,8 +1463,9 @@ void handleChild(OWLDataPropertyEH h) {
 
     final List<OWLObjectPropertyExpression> propertyList = new ArrayList<>();
 
-    public OWLSubObjectPropertyChainEH() {
-        child = HandleChild.OWLSubObjectPropertyChainEH;
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
     }
 
     @Override
@@ -1371,7 +1474,7 @@ public OWLSubObjectPropertyChainEH() {
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         propertyList.add(h.getOWLObject());
     }
 }
@@ -1385,13 +1488,13 @@ void handleChild(ObjectPropertyEH h) {
     }
 
     @Override
-    void setHandler(OWLXMLPH handler) {
+        void setHandler(OWLXMLPH handler) {
         super.setHandler(handler);
         chain = new BuilderPropertyChain(df);
     }
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         OWLObjectPropertyExpression prop = h.getOWLObject();
         if (builder.getSub() == null && chain.chainSize() == 0) {
             builder.withSub(prop);
@@ -1404,13 +1507,13 @@ void handleChild(ObjectPropertyEH h) {
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         super.handleChild(h);
         chain.withAnnotation(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLSubObjectPropertyChainEH h) {
+        void handleChild(OWLSubObjectPropertyChainEH h) {
         chain.withPropertiesInChain(h.getOWLObject());
     }
 
@@ -1427,10 +1530,6 @@ void handleChild(OWLSubObjectPropertyChainEH h) {
 
     SWRLAtom atom;
 
-    public SWRLAtomEH() {
-        child = HandleChild.SWRLAtomEH;
-    }
-
     void setAtom(SWRLAtom atom) {
         this.atom = atom;
     }
@@ -1445,12 +1544,8 @@ void setAtom(SWRLAtom atom) {
 
     final List<SWRLAtom> atoms = new ArrayList<>();
 
-    public SWRLAtomListEH() {
-        child = HandleChild.SWRLAtomListEH;
-    }
-
     @Override
-    void handleChild(SWRLAtomEH h) {
+        void handleChild(SWRLAtomEH h) {
         atoms.add(h.getOWLObject());
     }
 
@@ -1458,6 +1553,11 @@ void handleChild(SWRLAtomEH h) {
     public List<SWRLAtom> getOWLObject() {
         return atoms;
     }
+
+    @Override
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
 }
 
 class SWRLBuiltInAtomEH extends SWRLAtomEH {
@@ -1466,22 +1566,22 @@ void handleChild(SWRLAtomEH h) {
     final List<SWRLDArgument> args = new ArrayList<>();
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         iri = getIRIFromAttribute(localName, value);
     }
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         args.add(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         args.add(df.getSWRLLiteralArgument(h.getOWLObject()));
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLBuiltInAtom(verifyNotNull(iri), args));
         getParentHandler().handleChild(this);
     }
@@ -1493,22 +1593,22 @@ void endElement() {
     SWRLIArgument arg;
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         arg = h.getOWLObject();
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         ce = h.getOWLObject();
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         arg = df.getSWRLIndividualArgument(h.getOWLObject());
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLClassAtom(verifyNotNull(ce), verifyNotNull(arg)));
         getParentHandler().handleChild(this);
     }
@@ -1521,12 +1621,12 @@ void endElement() {
     SWRLDArgument arg1;
 
     @Override
-    void handleChild(OWLDataPropertyEH h) {
+        void handleChild(OWLDataPropertyEH h) {
         prop = h.getOWLObject();
     }
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         if (arg0 == null) {
             arg0 = h.getOWLObject();
         } else if (arg1 == null) {
@@ -1535,22 +1635,22 @@ void handleChild(SWRLVariableEH h) {
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         arg1 = df.getSWRLLiteralArgument(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         arg0 = df.getSWRLIndividualArgument(h.getOWLObject());
     }
 
     @Override
-    void handleChild(OWLAnonymousIndividualEH h) {
+        void handleChild(OWLAnonymousIndividualEH h) {
         arg0 = df.getSWRLIndividualArgument(h.getOWLObject());
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLDataPropertyAtom(verifyNotNull(prop), verifyNotNull(arg0), verifyNotNull(arg1)));
         getParentHandler().handleChild(this);
     }
@@ -1562,22 +1662,22 @@ void endElement() {
     SWRLDArgument arg1;
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         prop = h.getOWLObject();
     }
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         arg1 = h.getOWLObject();
     }
 
     @Override
-    void handleChild(OWLLiteralEH h) {
+        void handleChild(OWLLiteralEH h) {
         arg1 = df.getSWRLLiteralArgument(h.getOWLObject());
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLDataRangeAtom(verifyNotNull(prop), verifyNotNull(arg1)));
         getParentHandler().handleChild(this);
     }
@@ -1589,7 +1689,7 @@ void endElement() {
     SWRLIArgument arg1;
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         if (arg0 == null) {
             arg0 = h.getOWLObject();
         } else if (arg1 == null) {
@@ -1598,7 +1698,7 @@ void handleChild(SWRLVariableEH h) {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         if (arg0 == null) {
             arg0 = df.getSWRLIndividualArgument(h.getOWLObject());
         } else if (arg1 == null) {
@@ -1607,7 +1707,7 @@ void handleChild(OWLIndividualEH h) {
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLDifferentIndividualsAtom(verifyNotNull(arg0), verifyNotNull(arg1)));
         getParentHandler().handleChild(this);
     }
@@ -1620,12 +1720,12 @@ void endElement() {
     SWRLIArgument arg1;
 
     @Override
-    void handleChild(ObjectPropertyEH h) {
+        void handleChild(ObjectPropertyEH h) {
         prop = h.getOWLObject();
     }
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         if (arg0 == null) {
             arg0 = h.getOWLObject();
         } else if (arg1 == null) {
@@ -1634,7 +1734,7 @@ void handleChild(SWRLVariableEH h) {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         if (arg0 == null) {
             arg0 = df.getSWRLIndividualArgument(h.getOWLObject());
         } else if (arg1 == null) {
@@ -1643,7 +1743,7 @@ void handleChild(OWLIndividualEH h) {
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLObjectPropertyAtom(verifyNotNull(prop), verifyNotNull(arg0), verifyNotNull(arg1)));
         getParentHandler().handleChild(this);
     }
@@ -1656,7 +1756,7 @@ void endElement() {
     }
 
     @Override
-    void handleChild(SWRLAtomListEH h) {
+        void handleChild(SWRLAtomListEH h) {
         if (builder.bodySize() == 0) {
             builder.withBody(h.getOWLObject());
         } else if (builder.headSize() == 0) {
@@ -1671,7 +1771,7 @@ void handleChild(SWRLAtomListEH h) {
     SWRLIArgument arg1;
 
     @Override
-    void handleChild(SWRLVariableEH h) {
+        void handleChild(SWRLVariableEH h) {
         if (arg0 == null) {
             arg0 = h.getOWLObject();
         } else if (arg1 == null) {
@@ -1680,7 +1780,7 @@ void handleChild(SWRLVariableEH h) {
     }
 
     @Override
-    void handleChild(OWLIndividualEH h) {
+        void handleChild(OWLIndividualEH h) {
         if (arg0 == null) {
             arg0 = df.getSWRLIndividualArgument(h.getOWLObject());
         } else if (arg1 == null) {
@@ -1689,7 +1789,7 @@ void handleChild(OWLIndividualEH h) {
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         setAtom(df.getSWRLSameIndividualAtom(verifyNotNull(arg0), verifyNotNull(arg1)));
         getParentHandler().handleChild(this);
     }
@@ -1698,12 +1798,16 @@ void endElement() {
 class SWRLVariableEH extends OWLEH<SWRLVariable, BuilderSWRLVariable> {
 
     public SWRLVariableEH() {
-        child = HandleChild.SWRLVariableEH;
         provider = BuilderSWRLVariable::new;
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void endElement() {
+        getParentHandler().handleChild(this);
+    }
+
+    @Override
+        void attribute(String localName, String value) {
         builder.with(getIRIFromAttribute(localName, value));
     }
 }
@@ -1711,12 +1815,12 @@ void attribute(String localName, String value) {
 class OWLOntologyHandler extends OWLEH<OWLOntology, Builder<OWLOntology>> {
 
     @Override
-    void startElement(String name) {
+        void startElement(String name) {
         // nothing to do here
     }
 
     @Override
-    void attribute(String localName, String value) {
+        void attribute(String localName, String value) {
         if ("ontologyIRI".equals(localName)) {
             OWLOntologyID newID = new OWLOntologyID(optional(IRI.create(value)), handler.getOntology().getOntologyID()
                 .getVersionIRI());
@@ -1730,22 +1834,30 @@ void attribute(String localName, String value) {
     }
 
     @Override
-    void handleChild(DataRangeEH h) {
+        void handleChild(AbstractOWLAxiomEH<? extends OWLAxiom, ?> h) {
+        OWLAxiom axiom = h.getOWLObject();
+        if (!axiom.isAnnotationAxiom() || handler.getConfiguration().isLoadAnnotationAxioms()) {
+            handler.getOWLOntologyManager().applyChange(new AddAxiom(handler.getOntology(), axiom));
+        }
+    }
+
+    @Override
+        void handleChild(AbstractOWLDataRangeHandler<? extends OWLDataRange, ?> h) {
         // nothing to do here
     }
 
     @Override
-    void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
+        void handleChild(AbstractClassExpressionEH<? extends OWLClassExpression, ?> h) {
         // nothing to do here
     }
 
     @Override
-    void handleChild(OWLAnnotationEH h) {
+        void handleChild(OWLAnnotationEH h) {
         handler.getOWLOntologyManager().applyChange(new AddOntologyAnnotation(handler.getOntology(), h.getOWLObject()));
     }
 
     @Override
-    void endElement() {
+        void endElement() {
         // nothing to do here
     }
 
@@ -1755,7 +1867,7 @@ public OWLOntology getOWLObject() {
     }
 
     @Override
-    void setParentHandler(OWLEH<?, ?> handler) {
+        void setParentHandler(OWLEH<?, ?> handler) {
         // nothing to do here
     }
 }
@@ -1763,7 +1875,7 @@ void setParentHandler(OWLEH<?, ?> handler) {
 class OWLImportsHandler extends OWLEH<OWLOntology, Builder<OWLOntology>> {
 
     @Override
-    void endElement() {
+        void endElement() {
         IRI ontIRI = handler.getIRI(getText().trim());
         OWLImportsDeclaration decl = df.getOWLImportsDeclaration(ontIRI);
         handler.getOWLOntologyManager().applyChange(new AddImport(handler.getOntology(), decl));
@@ -1776,7 +1888,7 @@ public OWLOntology getOWLObject() {
     }
 
     @Override
-    boolean isTextContentPossible() {
+        boolean isTextContentPossible() {
         return true;
     }
 }
