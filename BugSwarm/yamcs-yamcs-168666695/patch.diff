diff --git a/yamcs-core/src/main/java/org/yamcs/archive/EventRecorder.java b/yamcs-core/src/main/java/org/yamcs/archive/EventRecorder.java
index 952597d3bc..5e613085ee 100755
--- a/yamcs-core/src/main/java/org/yamcs/archive/EventRecorder.java
+++ b/yamcs-core/src/main/java/org/yamcs/archive/EventRecorder.java
@@ -27,8 +27,6 @@
     static final public String REALTIME_EVENT_STREAM_NAME = "events_realtime";
     static final public String DUMP_EVENT_STREAM_NAME = "events_dump";
     final String yamcsInstance;
-    
-    StreamAdapter rtStreamAdapter, dumpStreamAdapter;
 
     public EventRecorder(String instance) throws StreamSqlException, ParseException, ActiveMQException, YamcsApiException {
         YarchDatabase ydb=YarchDatabase.getInstance(instance);
@@ -37,16 +35,12 @@ public EventRecorder(String instance) throws StreamSqlException, ParseException,
             ydb.execute("create table "+TABLE_NAME+"(gentime timestamp, source enum, seqNum int, body PROTOBUF('org.yamcs.protobuf.Yamcs$Event'), primary key(gentime, source, seqNum)) histogram(source)"
                     + " partition by time(gentime"+XtceTmRecorder.getTimePartitioningSchemaSql()+") table_format=compressed");
         }
-        eventTpdef=ydb.getTable("events").getTupleDefinition();
+        eventTpdef = ydb.getTable("events").getTupleDefinition();
         
         ydb.execute("insert into "+TABLE_NAME+" select * from "+REALTIME_EVENT_STREAM_NAME);
         ydb.execute("insert into "+TABLE_NAME+" select * from "+DUMP_EVENT_STREAM_NAME);
         
-        Stream realtimeEventStream=ydb.getStream(REALTIME_EVENT_STREAM_NAME);
-        rtStreamAdapter = new StreamAdapter(realtimeEventStream, new SimpleString(instance+".events_realtime"), new EventTupleTranslator());
-        
-        Stream dumpEventStream=ydb.getStream(DUMP_EVENT_STREAM_NAME);
-        dumpStreamAdapter = new StreamAdapter(dumpEventStream, new SimpleString(instance+".events_dump"), new EventTupleTranslator());
+      
     }
 
     @Override
@@ -58,9 +52,7 @@ protected void doStart() {
     protected void doStop() {
         YarchDatabase ydb=YarchDatabase.getInstance(yamcsInstance);
         Utils.closeTableWriters(ydb,  Arrays.asList(REALTIME_EVENT_STREAM_NAME, DUMP_EVENT_STREAM_NAME));
-        
-        rtStreamAdapter.quit();
-        dumpStreamAdapter.quit();
+      
         notifyStopped();
     }
 
diff --git a/yamcs-core/src/main/java/org/yamcs/archive/IndexServer.java b/yamcs-core/src/main/java/org/yamcs/archive/IndexServer.java
index 16aad59b31..b4905c8bce 100755
--- a/yamcs-core/src/main/java/org/yamcs/archive/IndexServer.java
+++ b/yamcs-core/src/main/java/org/yamcs/archive/IndexServer.java
@@ -41,82 +41,88 @@
     ThreadPoolExecutor executor=new ThreadPoolExecutor(10,10,10,TimeUnit.SECONDS,new ArrayBlockingQueue<>(10));
 
     final TagDb tagDb;
-    
+
     HornetQIndexServer hqIndexServer;
+    boolean startArtemisServer;
 
     /**
      * Maps instance names to archive directories
      */
     final HashSet<String> instances=new HashSet<>();
-    
+
     public IndexServer(String instance) throws IOException, YarchException {
         this(instance, null);
     }
-    
+
     public IndexServer(String yamcsInstance, Map<String, Object> config) throws YarchException, IOException {
-        boolean readonly=false;
-        this.yamcsInstance=yamcsInstance;
-        YConfiguration c=YConfiguration.getConfiguration("yamcs."+yamcsInstance);
-        
+        boolean readonly = false;
+        this.yamcsInstance = yamcsInstance;
+        YConfiguration c = YConfiguration.getConfiguration("yamcs."+yamcsInstance);
+
         if(c.containsKey("tmIndexer")) {
-            String icn=c.getString("tmIndexer");
+            String icn = c.getString("tmIndexer");
             tmIndexer = loadIndexerFromClass(icn, yamcsInstance, readonly);
         } else {
             tmIndexer = new CccsdsTmIndex(yamcsInstance, readonly);
         }
-        
+        startArtemisServer = c.getBoolean("startArtemisServer", false);
+
         if(!readonly) {
             StreamConfig sc = StreamConfig.getInstance(yamcsInstance);
-                if(config==null) {
-                    List<StreamConfigEntry> sceList = sc.getEntries(StandardStreamType.tm);
-                    for(StreamConfigEntry sce: sceList){
-                        subscribe(sce);
-                    }
-                } else {
-                    List<String> streamNames = YConfiguration.getList(config, "streams");
-                    for(String sn: streamNames) {
-                        StreamConfigEntry sce = sc.getEntry(StandardStreamType.tm, sn);
-                        if(sce==null) {
-                            throw new ConfigurationException("No stream config found for '"+sn+"'");
-                        }
-                        subscribe(sce);
+            if(config==null) {
+                List<StreamConfigEntry> sceList = sc.getEntries(StandardStreamType.tm);
+                for(StreamConfigEntry sce: sceList){
+                    subscribe(sce);
+                }
+            } else {
+                List<String> streamNames = YConfiguration.getList(config, "streams");
+                for(String sn: streamNames) {
+                    StreamConfigEntry sce = sc.getEntry(StandardStreamType.tm, sn);
+                    if(sce==null) {
+                        throw new ConfigurationException("No stream config found for '"+sn+"'");
                     }
+                    subscribe(sce);
                 }
+            }
         }
-        
+
         tagDb = YarchDatabase.getInstance(yamcsInstance).getDefaultStorageEngine().getTagDb();
         executor.allowCoreThreadTimeOut(true);
     }
-    
+
     @Override
     protected void doStart() {
         try {
-            hqIndexServer = new HornetQIndexServer(this, tagDb);
-            hqIndexServer.startAsync();
-            hqIndexServer.awaitRunning();
+            if(startArtemisServer) {
+                hqIndexServer = new HornetQIndexServer(this, tagDb);
+                hqIndexServer.startAsync();
+                hqIndexServer.awaitRunning();
+            }
             notifyStarted();
         } catch (Exception e) {
             notifyFailed(e);
         }
     }
-    
+
     @Override
     protected void doStop() {
         try {
-           hqIndexServer.stopAsync();
-           hqIndexServer.awaitTerminated();
-           tmIndexer.close();
-           tagDb.close();
+            if(hqIndexServer!=null) {
+                hqIndexServer.stopAsync();
+                hqIndexServer.awaitTerminated();
+            }
+            tmIndexer.close();
+            tagDb.close();
         } catch (IOException e) {
             log.error("failed to stop the indexer", e);
             notifyFailed(e);
         }
     }
-    
+
     public String getInstance() {
         return yamcsInstance;
     }
-    
+
     /**
      * Asynchronously submit an index request. When the request is processed the
      * provided listener will receive callbacks.
@@ -129,7 +135,7 @@ public void submitIndexRequest(IndexRequest req, IndexRequestListener listener)
         if(state!=State.RUNNING) {
             throw new YamcsException("The IndexServer service is not in state RUNNING but "+state);
         }
-        
+
         if(!YamcsServer.hasInstance(req.getInstance())) {
             throw new YamcsException("Invalid instance "+req.getInstance());
         }
@@ -143,7 +149,7 @@ private void subscribe(StreamConfigEntry sce) {
         if(tmStream==null) throw new ConfigurationException("There is no stream named "+sce.getName());
         tmStream.addSubscriber(tmIndexer);
     }
-    
+
     private static TmIndex loadIndexerFromClass(String icn, String instance, boolean readonly) throws IOException {
         try {
             Class<TmIndex> ic=(Class<TmIndex>)Class.forName(icn);
diff --git a/yamcs-core/src/main/java/org/yamcs/hornetq/AbstractHornetQTranslatorService.java b/yamcs-core/src/main/java/org/yamcs/hornetq/AbstractHornetQTranslatorService.java
index c25a1d0b4c..2b4ef264c1 100755
--- a/yamcs-core/src/main/java/org/yamcs/hornetq/AbstractHornetQTranslatorService.java
+++ b/yamcs-core/src/main/java/org/yamcs/hornetq/AbstractHornetQTranslatorService.java
@@ -4,6 +4,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,7 +32,9 @@
 
     List<Stream> streams = new ArrayList<Stream>();
     Map<Stream, StreamSubscriber> streamSubscribers = new HashMap<Stream, StreamSubscriber>();
-
+    static final public String UNIQUEID_HDR_NAME="_y_uniqueid";
+    static final public int UNIQUEID = new Random().nextInt();
+    
 
     Logger log=LoggerFactory.getLogger(this.getClass().getName());
     String instance;
@@ -87,7 +90,7 @@ public void onTuple(Stream stream, Tuple tuple) {
                     try {
                         
                         ClientMessage msg=translator.buildMessage(yamcsClient.get().getYamcsSession().createMessage(false), tuple);
-                        msg.putIntProperty(StreamAdapter.UNIQUEID_HDR_NAME, StreamAdapter.UNIQUEID);
+                        msg.putIntProperty(UNIQUEID_HDR_NAME, UNIQUEID);
                         yamcsClient.get().sendData(hornetAddress, msg);
                     } catch (IllegalArgumentException e) {
                         log.warn(e.getMessage());
diff --git a/yamcs-core/src/main/java/org/yamcs/hornetq/ArtemisEventDataLink.java b/yamcs-core/src/main/java/org/yamcs/hornetq/ArtemisEventDataLink.java
new file mode 100755
index 0000000000..2a696eb54c
--- /dev/null
+++ b/yamcs-core/src/main/java/org/yamcs/hornetq/ArtemisEventDataLink.java
@@ -0,0 +1,45 @@
+package org.yamcs.hornetq;
+
+import org.apache.activemq.artemis.api.core.SimpleString;
+import org.yamcs.archive.EventRecorder;
+import org.yamcs.yarch.Stream;
+import org.yamcs.yarch.YarchDatabase;
+
+import com.google.common.util.concurrent.AbstractService;
+
+/**
+ * Receives event data from Artemis queues and publishes into yamcs streams
+ * @author nm
+ *
+ */
+public class ArtemisEventDataLink extends AbstractService {
+    String instance;
+
+    StreamAdapter rtStreamAdapter, dumpStreamAdapter;
+
+    public ArtemisEventDataLink(String instance) {
+        this.instance = instance;
+    }
+    @Override
+    protected void doStart() {
+        try {
+            YarchDatabase ydb = YarchDatabase.getInstance(instance);
+            Stream realtimeEventStream=ydb.getStream(EventRecorder.REALTIME_EVENT_STREAM_NAME);
+            rtStreamAdapter = new StreamAdapter(realtimeEventStream, new SimpleString(instance+".events_realtime"), new EventTupleTranslator());
+
+            Stream dumpEventStream=ydb.getStream(EventRecorder.DUMP_EVENT_STREAM_NAME);
+            dumpStreamAdapter = new StreamAdapter(dumpEventStream, new SimpleString(instance+".events_dump"), new EventTupleTranslator());
+        } catch (Exception e){
+            notifyFailed(e);
+        }
+        notifyStarted();
+    }
+
+    @Override
+    protected void doStop() {
+        rtStreamAdapter.quit();
+        dumpStreamAdapter.quit();
+        notifyStopped();
+    }
+
+}
diff --git a/yamcs-core/src/main/java/org/yamcs/tctm/HornetQPpDataLink.java b/yamcs-core/src/main/java/org/yamcs/tctm/HornetQPpDataLink.java
index a95cfc6777..2b044ab633 100755
--- a/yamcs-core/src/main/java/org/yamcs/tctm/HornetQPpDataLink.java
+++ b/yamcs-core/src/main/java/org/yamcs/tctm/HornetQPpDataLink.java
@@ -11,7 +11,7 @@
 import org.yamcs.api.artemis.Protocol;
 import org.yamcs.api.artemis.YamcsClient;
 import org.yamcs.api.artemis.YamcsSession;
-import org.yamcs.hornetq.StreamAdapter;
+import org.yamcs.hornetq.AbstractHornetQTranslatorService;
 import org.yamcs.protobuf.Pvalue.ParameterData;
 import org.yamcs.xtce.XtceDb;
 import org.yamcs.xtceproc.XtceDbFactory;
@@ -42,7 +42,7 @@ public HornetQPpDataLink(String instance, String name, String hornetAddress) thr
         try {
             yamcsSession=YamcsSession.newBuilder().build();
             msgClient=yamcsSession.newClientBuilder().setDataProducer(false).setDataConsumer(new SimpleString(hornetAddress), queue).
-                    setFilter(new SimpleString(StreamAdapter.UNIQUEID_HDR_NAME+"<>"+StreamAdapter.UNIQUEID)).
+                    setFilter(new SimpleString(AbstractHornetQTranslatorService.UNIQUEID_HDR_NAME+"<>"+AbstractHornetQTranslatorService.UNIQUEID)).
                     build();
 
         } catch (Exception e) {
diff --git a/yamcs-core/src/main/java/org/yamcs/tctm/HornetQTmDataLink.java b/yamcs-core/src/main/java/org/yamcs/tctm/HornetQTmDataLink.java
index 0e21f87dc4..570f0d91b5 100755
--- a/yamcs-core/src/main/java/org/yamcs/tctm/HornetQTmDataLink.java
+++ b/yamcs-core/src/main/java/org/yamcs/tctm/HornetQTmDataLink.java
@@ -18,11 +18,11 @@
 
 import org.yamcs.protobuf.Yamcs.TmPacketData;
 import org.yamcs.time.TimeService;
-import org.yamcs.hornetq.StreamAdapter;
+import org.yamcs.hornetq.AbstractHornetQTranslatorService;
 
 
 /**
- * receives data from ActiveMQ and publishes it into a yamcs stream
+ * receives data from Artemis ActiveMQ and publishes it into a yamcs stream
  * 
  * @author nm
  *
@@ -30,7 +30,7 @@
 public class HornetQTmDataLink extends  AbstractService implements TmPacketDataLink, MessageHandler {
     protected volatile long packetcount = 0;
     protected volatile boolean disabled=false;
-
+   
     protected Logger log=LoggerFactory.getLogger(this.getClass().getName());
     private TmSink tmSink;
     YamcsSession yamcsSession; 
@@ -43,7 +43,7 @@ public HornetQTmDataLink(String instance, String name, String hornetAddress) thr
         try {
             yamcsSession=YamcsSession.newBuilder().build();
             msgClient=yamcsSession.newClientBuilder().setDataProducer(false).setDataConsumer(new SimpleString(hornetAddress), queue).
-                    setFilter(new SimpleString(StreamAdapter.UNIQUEID_HDR_NAME+"<>"+StreamAdapter.UNIQUEID)).
+                    setFilter(new SimpleString(AbstractHornetQTranslatorService.UNIQUEID_HDR_NAME+"<>"+AbstractHornetQTranslatorService.UNIQUEID)).
                     build();
 
         } catch (Exception e) {
diff --git a/yamcs-core/src/main/java/org/yamcs/utils/ByteArrayWrapper.java b/yamcs-core/src/main/java/org/yamcs/utils/ByteArrayWrapper.java
new file mode 100755
index 0000000000..e6a67f039c
--- /dev/null
+++ b/yamcs-core/src/main/java/org/yamcs/utils/ByteArrayWrapper.java
@@ -0,0 +1,33 @@
+package org.yamcs.utils;
+
+import java.util.Arrays;
+
+/**
+ * Wrapper around byte array that allows usage as hashmap keys
+ * @author nm
+ *
+ */
+public class ByteArrayWrapper {
+    private final byte[] data;
+
+    public ByteArrayWrapper(byte[] buf) {
+        this.data = buf;
+    }
+    
+    public byte[] getData() {
+        return data;
+    }
+    
+    @Override
+    public boolean equals(Object other) {
+        if (!(other instanceof ByteArrayWrapper)) {
+            return false;
+        }
+        return Arrays.equals(data, ((ByteArrayWrapper)other).data);
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.hashCode(data);
+    }
+}
diff --git a/yamcs-simulation/etc/yamcs.simulator.yaml b/yamcs-simulation/etc/yamcs.simulator.yaml
index 36c1ae886f..94ee48efaa 100755
--- a/yamcs-simulation/etc/yamcs.simulator.yaml
+++ b/yamcs-simulation/etc/yamcs.simulator.yaml
@@ -28,7 +28,6 @@ services:
          realtimeFiller: 
              enabled: true
              flushInterval: 60
-    - org.yamcs.hornetq.HornetQReplayServer
 
 #name of the class that is used for the TM index. If not specified, org.yamcs.archive.GenericCccsdsTmIndex is used
 #tmIndexer: 
