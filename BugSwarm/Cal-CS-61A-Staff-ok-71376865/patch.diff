diff --git a/server/app/api.py b/server/app/api.py
index d82b189ecf..d58d1c5355 100755
--- a/server/app/api.py
+++ b/server/app/api.py
@@ -2066,6 +2066,9 @@ def new_entity(self, attributes):
         if not subm:
             raise BadValueError('No such submission exists.')
 
+        if not subm.backup.get():
+            raise BadValueError('Submission backup is missing.')
+
         subm.mark_as_final()
         return subm.get_final()
 
diff --git a/server/tests/integration/test_api_final_submissions.py b/server/tests/integration/test_api_final_submissions.py
index 6239aa5430..9f0535869e 100755
--- a/server/tests/integration/test_api_final_submissions.py
+++ b/server/tests/integration/test_api_final_submissions.py
@@ -40,32 +40,31 @@ def setUp(self):
 		self._submission = make_fake_submission(self._backup)
 
 	def get_accounts(self):
-		return APITest().get_accounts()
+		return APITest().get_accounts()	
 
-	# test mark as final
+	# tests for mark as final
 
 	def test_mark_as_final(self):
 		""" Tests that marking works, at the basic level """
-		self.API().mark_backup(self.user, dict(backup=self._backup.key))
+		self.API().post(self.user2, dict(submission=self._submission.key))
 
 		assert models.FinalSubmission.query(
 			models.FinalSubmission.submission==self._submission.key
 		).get() is not None
 
-
 	def test_ERROR_mark_as_final_backup(self):
 		""" Tests that a missing backup raises the correct error. """
 		try:
 			key = self._backup.key
 			key.delete()
-			self.API().mark_backup(self.user, dict(backup=key))
+			self.API().post(self.user, dict(submission=self._submission.key))
 		except BadValueError as e:
-			self.assertEqual(str(e), 'No such backup exists.')
+			self.assertEqual(str(e), 'Submission backup is missing.')
 
 	def test_ERROR_mark_as_final_subm(self):
 		""" Tests that a missing submission raises the correct error. """
 		try:
 			self._submission.key.delete()
-			self.API().mark_backup(self.user, dict(backup=self._backup.key))
+			self.API().post(self.user, dict(submission=self._submission.key))
 		except BadValueError as e:
 			self.assertEqual(str(e), 'No such submission exists.')
\ No newline at end of file
diff --git a/server/tests/integration/test_api_submission.py b/server/tests/integration/test_api_submission.py
new file mode 100755
index 0000000000..4a8fbe6e29
--- /dev/null
+++ b/server/tests/integration/test_api_submission.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python
+# encoding: utf-8
+#pylint: disable=no-member, no-init, too-many-public-methods
+#pylint: disable=attribute-defined-outside-init
+# This disable is because the tests need to be name such that
+# you can understand what the test is doing from the method name.
+#pylint: disable=missing-docstring
+"""
+tests.py
+
+"""
+
+import datetime
+from test_base import APIBaseTestCase, unittest, api #pylint: disable=relative-import
+from test_base import make_fake_assignment, make_fake_course, make_fake_backup, make_fake_submission, make_fake_finalsubmission #pylint: disable=relative-import
+from google.appengine.ext import ndb
+from app import models, constants, utils
+from ddt import ddt, data, unpack
+from app.exceptions import *
+from integration.test_api_base import APITest
+
+
+class SubmissionAPITest(APIBaseTestCase):
+
+	API = api.SubmissionAPI
+
+	def setUp(self):
+		super(SubmissionAPITest, self).setUp()
+		self.user = self.accounts['dummy_admin']
+		self.user1 = self.accounts['dummy_student']
+		self.user2 = self.accounts['dummy_student2']
+		self.user3 = self.accounts['dummy_student3']
+		self.assignment_name = 'Hog Project'
+		self._course = make_fake_course(self.user)
+		self._course.put()
+		self._assign = make_fake_assignment(self._course, self.user)
+		self._assign.name = self._assign.display_name = self.assignment_name
+		self._assign.put()
+		self._backup = make_fake_backup(self._assign, self.user2)
+		self._submission = make_fake_submission(self._backup)
+
+	def get_accounts(self):
+		return APITest().get_accounts()
\ No newline at end of file
diff --git a/server/tests/integration/test_final_submissions.py b/server/tests/integration/test_final_submissions.py
index 4fffc81d97..36bab3cac1 100755
--- a/server/tests/integration/test_final_submissions.py
+++ b/server/tests/integration/test_final_submissions.py
@@ -264,9 +264,11 @@ def test_set_different_backup_as_final_submission(self):
         self.run_deferred()
 
         self.assertNumFinalSubmissions(1)
+        
+        subm = models.Submission(backup=self.backups['second'].key)
+        subm.put()
 
-        api.FinalSubmissionAPI().mark_backup(
-            self.user, dict(backup=self.backups['second'].key))
+        api.FinalSubmissionAPI().post(self.user, dict(submission=subm.key))
         self.assertFinalSubmission(self.user, self.backups['second'])
 
     def test_create_group(self):
