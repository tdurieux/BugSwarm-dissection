diff --git a/pychron/core/confirmation.py b/pychron/core/confirmation.py
index 085a3d56e4..07583b30ed 100755
--- a/pychron/core/confirmation.py
+++ b/pychron/core/confirmation.py
@@ -19,10 +19,6 @@
 # ============= local library imports  ==========================
 
 
-# ============= EOF =============================================
-
-
-
 def confirmation_dialog(msg, return_retval=False,
                         cancel=False, title='',
                         timeout=None, size=None,
@@ -75,3 +71,4 @@ def remember_confirmation_dialog(msg,
     from pyface.api import YES, OK
 
     return retval in (YES, OK), dlg.remember
+# ============= EOF =============================================
diff --git a/pychron/core/fuzzyfinder.py b/pychron/core/fuzzyfinder.py
index f29dd2f176..bf178ea2c9 100755
--- a/pychron/core/fuzzyfinder.py
+++ b/pychron/core/fuzzyfinder.py
@@ -28,7 +28,7 @@ def func(regex, item, attr):
     if attr:
         txt = getattr(item, attr)
 
-    match = regex.search(txt)
+    match = regex.search(str(txt))
     if match:
         return len(match.group()), match.start(), item
 
@@ -36,7 +36,10 @@ def func(regex, item, attr):
 def fuzzyfinder(user_input, collection, attr=None):
     # suggestions = []
     pattern = '.*'.join(user_input)  # Converts 'djm' to 'd.*?j.*?m'
-    regex = re.compile('%s' % pattern)  # Compiles a regex.
+    try:
+        regex = re.compile('%s' % pattern)  # Compiles a regex.
+    except re.error:
+        return []
     # for item in collection:
     #     match = regex.search(item)   # Checks if the current item matches the regex.
     #     if match:
diff --git a/pychron/core/helpers/logger_setup.py b/pychron/core/helpers/logger_setup.py
index 6c660c520f..25a1c59ef8 100755
--- a/pychron/core/helpers/logger_setup.py
+++ b/pychron/core/helpers/logger_setup.py
@@ -21,9 +21,8 @@
 import shutil
 from logging.handlers import RotatingFileHandler
 
-# =============local library imports  =========================
-from pychron.paths import paths
 from pychron.core.helpers.filetools import list_directory, unique_path2
+from pychron.paths import paths
 
 NAME_WIDTH = 40
 gFORMAT = '%(name)-{}s: %(asctime)s %(levelname)-9s (%(threadName)-10s) %(message)s'.format(NAME_WIDTH)
@@ -138,7 +137,7 @@ def logging_setup(name, use_archiver=True, root=None, use_file=True, **kw):
     handlers = [shandler]
     if use_file:
         rhandler = RotatingFileHandler(
-                logpath, maxBytes=1e7, backupCount=5)
+                logpath, maxBytes=1e7, backupCount=50)
         handlers.append(rhandler)
 
     for hi in handlers:
diff --git a/pychron/core/pdf/items.py b/pychron/core/pdf/items.py
index 081faffc87..daa72998a1 100755
--- a/pychron/core/pdf/items.py
+++ b/pychron/core/pdf/items.py
@@ -15,10 +15,10 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import HasTraits, List, Int, Str, Any, Either, Callable
-# ============= standard library imports ========================
-from reportlab.platypus.paragraph import Paragraph
 from reportlab.lib.styles import getSampleStyleSheet
+from reportlab.platypus.paragraph import Paragraph
+from traits.api import HasTraits, List, Int, Str, Any, Either, Callable
+
 # ============= local library imports  ==========================
 
 STYLES = getSampleStyleSheet()
@@ -61,7 +61,7 @@ def __getitem__(self, i):
 class BaseItem(HasTraits):
     value = Any
     fmt = Either(Str, Callable)
-    fontsize = Int(8)
+    fontsize = Int(10)
     fontname = Str#'Helvetica'
     italic = False
 
@@ -94,6 +94,8 @@ def _set_font(self, v, size, name):
                     frag.fontSize = size
         elif name:
             v = self._new_paragraph(u'<font size="{}" name="{}">{}</font>'.format(size, name, v))
+        else:
+            v = self._new_paragraph(u'<font size="{}">{}</font>'.format(size, v))
 
         return v
 
diff --git a/pychron/core/ui/qt/tabular_editor.py b/pychron/core/ui/qt/tabular_editor.py
index 5065c33fd8..ee630a009a 100755
--- a/pychron/core/ui/qt/tabular_editor.py
+++ b/pychron/core/ui/qt/tabular_editor.py
@@ -15,7 +15,10 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+from pickle import dumps
 
+from PySide import QtCore, QtGui
+from PySide.QtGui import QColor, QHeaderView, QApplication
 from traits.api import Bool, Str, List, Any, Instance, Property, Int, HasTraits, Color, Either, Callable
 from traits.trait_base import SequenceTypes
 from traitsui.api import View, Item, TabularEditor, Handler
@@ -23,11 +26,7 @@
 from traitsui.qt4.tabular_editor import TabularEditor as qtTabularEditor, \
     _TableView as TableView, HeaderEventFilter, _ItemDelegate
 from traitsui.qt4.tabular_model import TabularModel, alignment_map
-# ============= standard library imports ========================
-from PySide import QtCore, QtGui
-from PySide.QtGui import QColor, QHeaderView, QApplication
-from pickle import dumps
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.ctx_managers import no_update
 
 
@@ -50,6 +49,7 @@ class myTabularEditor(TabularEditor):
     bgcolor = Color
     row_height = Int
     mime_type = Str('pychron.tabular_item')
+
     # scroll_to_row_hint = 'top'
 
     def _get_klass(self):
@@ -199,9 +199,7 @@ def startDrag(self, actions):
         if self._editor.factory.drag_external:
             idxs = self.selectedIndexes()
             rows = sorted(list(set([idx.row() for idx in idxs])))
-            drag_object = [
-                (ri, self._editor.value[ri])
-                for ri in rows]
+            drag_object = [(ri, self._editor.value[ri]) for ri in rows]
 
             md = PyMimeData.coerce(drag_object)
 
@@ -289,8 +287,7 @@ def keyPressEvent(self, event):
             self._copy()
 
         elif event.matches(QtGui.QKeySequence.Cut):
-            self._cut_indices = [ci.row() for ci in
-                                 self.selectionModel().selectedRows()]
+            self._cut_indices = [ci.row() for ci in self.selectionModel().selectedRows()]
 
             # self._copy_cache = [self._editor.value[ci] for ci in self._cut_indices]
             # self._copy_cache = self._get_selection(self._cut_indices)
@@ -659,9 +656,9 @@ def my_init(self):
         QtCore.QObject.connect(control.horizontalHeader(), signal,
                                self._on_column_resize)
 
-    def dispose(self):
-        # self.control._should_consume = False
-        super(_TabularEditor, self).dispose()
+    # def dispose(self):
+    #     # self.control._should_consume = False
+    #     super(_TabularEditor, self).dispose()
 
     def refresh_editor(self):
         if self.control:
@@ -687,7 +684,7 @@ def _add_image(self, image_resource):
     def _on_column_resize(self, idx, old, new):
         control = self.control
         header = control.horizontalHeader()
-        cs = [header.sectionSize(i) for i in range(header.count())]
+        cs = [header.sectionSize(i) for i in xrange(header.count())]
         self.col_widths = cs
 
     def _multi_selected_rows_changed(self, selected_rows):
diff --git a/pychron/core/ui/qt/tree_editor.py b/pychron/core/ui/qt/tree_editor.py
index 220917adce..565d04df1d 100755
--- a/pychron/core/ui/qt/tree_editor.py
+++ b/pychron/core/ui/qt/tree_editor.py
@@ -125,50 +125,39 @@ class PipelineDelegate(QtGui.QStyledItemDelegate):
     def __init__(self, tree, show_icons, *args, **kwargs):
         self._tree = tree
         self._show_icons = show_icons
-        self.size_map = collections.defaultdict(lambda: QtCore.QSize(1, 21))
+        # self._size_map = {}
+        self._size_map = collections.defaultdict(lambda: QtCore.QSize(1, 21))
         super(PipelineDelegate, self).__init__(*args, **kwargs)
-        # QtGui.QStyledItemDelegate.__init__(self, *args, **kwargs)
 
     def sizeHint(self, option, index):
         """ returns area taken by the text. """
-        # try:
-        return self.size_map[self._tree.itemFromIndex(index)]
-        # except KeyboardInterrupt:
-        #     pass
+        # return self._size_map[self._tree.itemFromIndex(index)]
+        return QtCore.QSize(1, 30)
 
     def paint(self, painter, option, index):
-        # try:
-        # QtGui.QStyledItemDelegate.paint(self, painter, option, index)
-        super(PipelineDelegate, self).paint(painter, option, index)
-        # print idx.row(), option
-        # painter.begin()
-        # painter.draw(0,0,'Fasdfe'
-        # painter.setPen(QColor('white'))
         hint = painter.renderHints()
         painter.setRenderHints(hint | QtGui.QPainter.Antialiasing)
 
         painter.setBrush(QColor(100, 100, 100, 100))
         painter.setPen(QColor(100, 100, 100, 100))
-        rect = option.rect
-        painter.drawRoundedRect(rect, 5, 5)
+        # rect = option.rect
+        # top = rect.top()
+        # if index.row() > 0:
+        #     top += 6*index.row()
+
+        painter.drawRoundedRect(option.rect, 5, 5)
 
         item = self._tree.itemFromIndex(index)
-        # print index, self.editor._tree.model().rowCount()
-        # draw_line = index.row() != self._tree.model().rowCount() - 1
 
-        # expanded, node, object = self.editor._get_node_data(item)
-        expanded, node, object = item._py_data
-        text = node.get_label(object)
+        expanded, node, obj = item._py_data
+        text = node.get_label(obj)
 
         if self._show_icons:
             iconwidth = 24  # FIXME: get width from actual
         else:
             iconwidth = 0
 
-        offset = 20
-        r = 13  # rect.height() - 10
-        # r2 = r / 2.
-        status_color = node.get_status_color(object)
+        status_color = node.get_status_color(obj)
 
         c = status_color.darker()
         painter.setPen(c)
@@ -182,36 +171,40 @@ def paint(self, painter, option, index):
         #     painter.drawLine(x, y, x, y + rect.height())
 
         painter.setBrush(status_color)
-        painter.drawEllipse(rect.left() + 5, rect.bottom() - r - 4, r, r)
+
+        r = 15
+        x = option.rect.left() + 5
+        y = option.rect.top() + (option.rect.height() - r) / 2
+
+        painter.drawEllipse(x, y, r, r)
+        # painter.drawEllipse(rect.left() + 3, top+3.5, r, r)
 
         # draw text
         painter.setPen(Qt.black)
-        rect = painter.drawText(rect.left() + iconwidth + offset,
-                                rect.top() + rect.height() / 3.,
-                                rect.width() - iconwidth,
-                                rect.height(),
-                                QtCore.Qt.TextWordWrap, text)
-        if self.size_map[item] != rect.size():
-            size = rect.size()
-            size.setHeight(size.height() + 10)
-            self.size_map[item] = size
-            self.sizeHintChanged.emit(index)
-            # except KeyboardInterrupt:
-            #     pass
+        font = painter.font()
+        font.setPointSize(14)
+        painter.setFont(font)
+
+        painter.drawText(option.rect.left() + iconwidth,
+                         # option.rect.top(),
+                         option.rect.top() + option.rect.height() / 3,
+                         option.rect.width() - iconwidth,
+                         option.rect.height(),
+                         QtCore.Qt.TextWordWrap, text)
+        # Need to set the appropriate sizeHint of the item.
+        # if self._size_map[item] != rect.size():
+        #     self._size_map[item] = rect.size()
+        #     do_later(self.sizeHintChanged.emit, index)
 
 
 class _PipelineEditor(SimpleEditor):
-    # def __init__(self, *args, **kw):
-    #     super(_PipelineEditor, self).__init__(*args, **kw)
-    #     self._delegate =
-    #
     def init(self, parent):
         super(_PipelineEditor, self).init(parent)
         if self._tree:
             item = PipelineDelegate(self._tree, self.factory.show_icons)
             self._tree.setItemDelegate(item)
 
-    def _create_item(self, nid, node, object, index=None):
+    def _create_item(self, nid, node, obj, index=None):
         """ Create  a new TreeWidgetItem as per word_wrap policy.
 
         Index is the index of the new node in the parent:
@@ -223,13 +216,13 @@ def _create_item(self, nid, node, object, index=None):
             nid.insertChild(index, cnid)
 
         # cnid.setIcon(0, self._get_icon(node, object))
-        cnid.setToolTip(0, node.get_tooltip(object))
-        self._set_column_labels(cnid, node.get_column_labels(object))
+        cnid.setToolTip(0, node.get_tooltip(obj))
+        self._set_column_labels(cnid, node.get_column_labels(obj))
 
-        color = node.get_background(object)
+        color = node.get_background(obj)
         if color:
             cnid.setBackground(0, self._get_brush(color))
-        color = node.get_foreground(object)
+        color = node.get_foreground(obj)
         if color:
             cnid.setForeground(0, self._get_brush(color))
 
diff --git a/pychron/database/core/database_adapter.py b/pychron/database/core/database_adapter.py
index 80f1e1f0bb..0acdb6d9f0 100755
--- a/pychron/database/core/database_adapter.py
+++ b/pychron/database/core/database_adapter.py
@@ -105,14 +105,30 @@
 #                 # del self._sess
 
 class SessionCTX(object):
-    def __init__(self, parent):
+    def __init__(self, parent, use_parent_session=True):
+        self._use_parent_session = use_parent_session
         self._parent = parent
+        self._session = None
+        self._psession = None
 
     def __enter__(self):
-        self._parent.create_session()
+        if self._use_parent_session:
+            self._parent.create_session()
+        else:
+            self._psession = self._parent.session
+            self._session = self._parent.session_factory()
+            self._parent.session = self._session
+            return self._session
 
     def __exit__(self, exc_type, exc_val, exc_tb):
-        self._parent.close_session()
+        if self._session:
+            self._session.close()
+        else:
+            self._parent.close_session()
+
+        if self._psession:
+            self._parent.session = self._psession
+        self._psession = None
 
 
 class MockQuery:
@@ -217,14 +233,15 @@ def create_all(self, metadata):
 
     _session_cnt = 0
 
-    def session_ctx(self):
+    def session_ctx(self, use_parent_session=True):
         with self._session_lock:
-            return SessionCTX(self)
+            return SessionCTX(self, use_parent_session)
 
     def create_session(self):
         if self.connected:
             if self.session_factory:
                 if not self.session:
+                    self.debug('create new session {}'.format(id(self)))
                     self.session = self.session_factory()
                 self._session_cnt += 1
         else:
@@ -232,8 +249,11 @@ def create_session(self):
 
     def close_session(self):
         if self.session and not isinstance(self.session, MockSession):
+            self.session.flush()
+
             self._session_cnt -= 1
             if not self._session_cnt:
+                self.debug('close session {}'.format(id(self)))
                 self.session.close()
                 self.session = None
 
diff --git a/pychron/dvc/dvc.py b/pychron/dvc/dvc.py
index 9944fc3b79..ef5e4a7a9a 100755
--- a/pychron/dvc/dvc.py
+++ b/pychron/dvc/dvc.py
@@ -158,29 +158,29 @@ def synchronize(self, pull=True):
 
     def load_analysis_backend(self, ln, isotope_group):
         db = self.db
-
-        ip = db.get_identifier(ln)
-        dblevel = ip.level
-        irrad = dblevel.irradiation.name
-        level = dblevel.name
-        pos = ip.position
-
-        j, lambda_k = self.meta_repo.get_flux(irrad, level, pos)
-        prodname, prod = self.meta_repo.get_production(irrad, level)
-        cs = self.meta_repo.get_chronology(irrad)
-
-        x = datetime.now()
-        now = time.mktime(x.timetuple())
-        if lambda_k:
-            isotope_group.arar_constants.lambda_k = lambda_k
-
-        isotope_group.trait_set(j=j,
-                                # lambda_k=lambda_k,
-                                production_ratios=prod.to_dict(RATIO_KEYS),
-                                interference_corrections=prod.to_dict(INTERFERENCE_KEYS),
-                                chron_segments=cs.get_chron_segments(x),
-                                irradiation_time=cs.irradiation_time,
-                                timestamp=now)
+        with db.session_ctx():
+            ip = db.get_identifier(ln)
+            dblevel = ip.level
+            irrad = dblevel.irradiation.name
+            level = dblevel.name
+            pos = ip.position
+
+            j, lambda_k = self.meta_repo.get_flux(irrad, level, pos)
+            prodname, prod = self.meta_repo.get_production(irrad, level)
+            cs = self.meta_repo.get_chronology(irrad)
+
+            x = datetime.now()
+            now = time.mktime(x.timetuple())
+            if lambda_k:
+                isotope_group.arar_constants.lambda_k = lambda_k
+
+            isotope_group.trait_set(j=j,
+                                    # lambda_k=lambda_k,
+                                    production_ratios=prod.to_dict(RATIO_KEYS),
+                                    interference_corrections=prod.to_dict(INTERFERENCE_KEYS),
+                                    chron_segments=cs.get_chron_segments(x),
+                                    irradiation_time=cs.irradiation_time,
+                                    timestamp=now)
         return True
 
     def repository_db_sync(self, reponame):
@@ -273,8 +273,14 @@ def ai_gen():
                 for level, ais in groupby(sorted(ais, key=lkey), key=lkey):
                     p = self.get_level_path(irrad, level)
                     obj = dvc_load(p)
+                    if isinstance(obj, list):
+                        positions = obj
+                    else:
+                        positions = obj['positions']
+
                     for repo, ais in groupby(sorted(ais, key=rkey), key=rkey):
-                        yield repo, irrad, level, {ai.irradiation_position: obj[ai.irradiation_position] for ai in ais}
+                        yield repo, irrad, level, {ai.irradiation_position: positions[ai.irradiation_position] for ai in
+                                                   ais}
 
         added = []
 
@@ -438,10 +444,10 @@ def save_fits(self, ai, keys):
             self.info('Saving fits for {}'.format(ai))
             ai.dump_fits(keys, reviewed=True)
 
-    def save_j(self, irradiation, level, pos, identifier, j, e, decay, analyses, add=True):
+    def save_j(self, irradiation, level, pos, identifier, j, e, mj, me, decay, analyses, add=True):
         self.info('Saving j for {}{}:{} {}, j={} +/-{}'.format(irradiation, level,
                                                                pos, identifier, j, e))
-        self.meta_repo.update_flux(irradiation, level, pos, identifier, j, e, decay, analyses, add)
+        self.meta_repo.update_flux(irradiation, level, pos, identifier, j, e, mj, me, decay, analyses, add)
 
         db = self.db
         ip = db.get_identifier(identifier)
@@ -757,12 +763,12 @@ def add_project(self, name, pi=None):
             db.add_project(name, pi)
         return added
 
-    def add_sample(self, name, project, material, grainsize=None):
+    def add_sample(self, name, project, material, grainsize=None, note=None):
         added = False
         db = self.db
         if not db.get_sample(name, project, material, grainsize):
             added = True
-            db.add_sample(name, project, material, grainsize)
+            db.add_sample(name, project, material, grainsize, note=note)
         return added
 
     def add_principal_investigator(self, name):
@@ -1062,8 +1068,8 @@ def __getattr__(self, item):
             try:
                 return getattr(self.meta_repo, item)
             except AttributeError, e:
-                # print e, item
-                raise DVCException(item)
+                print e, item
+                # raise DVCException(item)
 
     # defaults
     def _db_default(self):
diff --git a/pychron/dvc/dvc_analysis.py b/pychron/dvc/dvc_analysis.py
index 7ac6cae70d..2c0a83b4b5 100755
--- a/pychron/dvc/dvc_analysis.py
+++ b/pychron/dvc/dvc_analysis.py
@@ -402,9 +402,18 @@ def _load_blanks(self, jd):
             if key in self.isotopes:
                 i = self.isotopes[key]
                 self._load_value_error(i.blank, v)
-                # i.blank.value = v['value']
-                # i.blank.error = v['error']
-                i.blank.fit = v['fit']
+                i.blank.fit = fit = v['fit']
+                if fit.lower() in ('previous', 'preceding'):
+                    refs = v.get('references')
+                    if refs:
+                        ref = refs[0]
+                        try:
+                            i.blank_source = ref['record_id']
+                        except KeyError:
+                            i.blank_source = ref.get('runid', '')
+                else:
+                    i.blank_source = fit
+
             elif key == 'reviewed':
                 self.blank_reviewed = v
 
diff --git a/pychron/dvc/dvc_database.py b/pychron/dvc/dvc_database.py
index 3e0d5c4823..9f074f9b84 100755
--- a/pychron/dvc/dvc_database.py
+++ b/pychron/dvc/dvc_database.py
@@ -236,6 +236,8 @@ def set_analysis_tag(self, uuid, tagname):
         self.commit()
 
     def find_references(self, ans, atypes, hours=10, exclude=None,
+                        mass_spectrometer=None,
+                        extract_device=None,
                         exclude_invalid=True):
         if isinstance(ans[0], datetime):
             timestamps = sorted((time.mktime(t.timetuple()) for t in ans))
@@ -256,6 +258,8 @@ def func(ti, prog, i, n):
             if prog:
                 prog.change_message('Searching {} - {}'.format(low, high))
             rs = self.get_analyses_by_date_range(low, high,
+                                                 mass_spectrometers=mass_spectrometer,
+                                                 extract_device=extract_device,
                                                  analysis_type=atypes,
                                                  exclude=[r.id for r in refs],
                                                  exclude_uuids=exclude,
@@ -396,17 +400,18 @@ def add_repository_association(self, reponame, analysis):
             self.debug('adding to repo={} instead')
 
     def add_material(self, name, grainsize=None):
-        a = self.get_material(name)
+        a = self.get_material(name, grainsize)
         if a is None:
             a = MaterialTbl(name=name, grainsize=grainsize)
             a = self._add_item(a)
         return a
 
-    def add_sample(self, name, project, material, grainsize=None):
+    def add_sample(self, name, project, material, grainsize=None, note=None):
         a = self.get_sample(name, project, material, grainsize)
         if a is None:
             self.debug('Adding sample {},{},{}'.format(name, project, material))
-            a = SampleTbl(name=name)
+            a = SampleTbl(name=name, note=note)
+            # a = SampleTbl(name=name)
             a.project = self.get_project(project)
             a.material = self.get_material(material, grainsize)
             a = self._add_item(a)
@@ -421,7 +426,7 @@ def add_mass_spectrometer(self, name, kind='Argus'):
         return self._add_item(a)
 
     def add_irradiation(self, name):
-        a = IrradiationTbl(name=name)
+        a = IrradiationTbl(name=name, create_date=datetime.now())
         return self._add_item(a)
 
     def add_irradiation_level(self, name, irradiation, holder, production_name,
@@ -446,7 +451,11 @@ def add_irradiation_level(self, name, irradiation, holder, production_name,
     def add_principal_investigator(self, name):
         pi = self.get_principal_investigator(name)
         if pi is None:
-            pi = PrincipalInvestigatorTbl(last_name=name)
+            if ',' in name:
+                last_name, fi = name.split(',')
+            else:
+                last_name, fi = name, ''
+            pi = PrincipalInvestigatorTbl(last_name=last_name.strip(), first_initial=fi.strip())
             pi = self._add_item(pi)
         return pi
 
@@ -635,18 +644,19 @@ def get_last_analysis(self, ln=None, aliquot=None, spectrometer=None,
             return 0
 
     def get_greatest_aliquot(self, identifier):
-        if identifier:
-            if not self.get_identifier(identifier):
-                return
+        with self.session_ctx(use_parent_session=False) as session:
+            if identifier:
+                if not self.get_identifier(identifier):
+                    return
 
-            q = self.session.query(AnalysisTbl.aliquot)
-            q = q.join(IrradiationPositionTbl)
+                q = session.query(AnalysisTbl.aliquot)
+                q = q.join(IrradiationPositionTbl)
 
-            q = q.filter(IrradiationPositionTbl.identifier == identifier)
-            q = q.order_by(AnalysisTbl.aliquot.desc())
-            result = self._query_one(q, verbose_query=True)
-            if result:
-                return int(result[0])
+                q = q.filter(IrradiationPositionTbl.identifier == identifier)
+                q = q.order_by(AnalysisTbl.aliquot.desc())
+                result = self._query_one(q, verbose_query=True)
+                if result:
+                    return int(result[0])
 
     def get_greatest_step(self, ln, aliquot):
         """
@@ -654,21 +664,22 @@ def get_greatest_step(self, ln, aliquot):
             return step as an integer. A=0, B=1...
         """
         if ln:
-            dbln = self.get_identifier(ln)
-            if not dbln:
-                return
-            q = self.session.query(AnalysisTbl.increment)
-            q = q.join(IrradiationPositionTbl)
+            with self.session_ctx(use_parent_session=False) as session:
+                dbln = self.get_identifier(ln)
+                if not dbln:
+                    return
+                q = session.query(AnalysisTbl.increment)
+                q = q.join(IrradiationPositionTbl)
 
-            q = q.filter(IrradiationPositionTbl.identifier == ln)
-            q = q.filter(AnalysisTbl.aliquot == aliquot)
-            # q = q.order_by(cast(meas_AnalysisTable.step, INTEGER(unsigned=True)).desc())
-            q = q.order_by(AnalysisTbl.increment.desc())
-            result = self._query_one(q)
-            if result:
-                increment = result[0]
-                return increment if increment is not None else -1
-                # return ALPHAS.index(step) if step else -1
+                q = q.filter(IrradiationPositionTbl.identifier == ln)
+                q = q.filter(AnalysisTbl.aliquot == aliquot)
+                # q = q.order_by(cast(meas_AnalysisTable.step, INTEGER(unsigned=True)).desc())
+                q = q.order_by(AnalysisTbl.increment.desc())
+                result = self._query_one(q)
+                if result:
+                    increment = result[0]
+                    return increment if increment is not None else -1
+                    # return ALPHAS.index(step) if step else -1
 
     def get_unique_analysis(self, ln, ai, step=None):
         #         sess = self.get_session()
@@ -963,7 +974,7 @@ def get_irradiation_levels(self, irradname):
         q = q.order_by(LevelTbl.name.asc())
         return self._query_all(q)
 
-    def get_labnumbers(self, principal_investigator=None,
+    def get_labnumbers(self, principal_investigators=None,
                        projects=None, repositories=None,
                        mass_spectrometers=None,
                        irradiation=None, level=None,
@@ -972,7 +983,7 @@ def get_labnumbers(self, principal_investigator=None,
                        low_post=None):
 
         self.debug('------- Get Labnumbers -------')
-        self.debug('------- principal_investigator: {}'.format(principal_investigator))
+        self.debug('------- principal_investigators: {}'.format(principal_investigators))
         self.debug('------- projects: {}'.format(projects))
         self.debug('------- experiments: {}'.format(repositories))
         self.debug('------- mass_spectrometers: {}'.format(mass_spectrometers))
@@ -995,7 +1006,7 @@ def get_labnumbers(self, principal_investigator=None,
         if projects:
             q = q.join(SampleTbl, ProjectTbl)
 
-        if principal_investigator:
+        if principal_investigators:
             q = q.join(PrincipalInvestigatorTbl)
 
         if mass_spectrometers and not at:
@@ -1018,9 +1029,11 @@ def get_labnumbers(self, principal_investigator=None,
         # filters
         if repositories:
             q = q.filter(RepositoryTbl.name.in_(repositories))
-        if principal_investigator:
-            q = principal_investigator_filter(q, principal_investigator)
-            # q = q.filter(PrincipalInvestigatorTbl.name == principal_investigator)
+
+        if principal_investigators:
+            for p in principal_investigators:
+                q = principal_investigator_filter(q, p)
+
         if projects:
             q = q.filter(ProjectTbl.name.in_(projects))
         if mass_spectrometers:
@@ -1105,6 +1118,9 @@ def get_irradiation_position(self, irrad, level, pos):
     def get_production(self, name):
         return self._retrieve_item(ProductionTbl, name)
 
+    def get_project_by_id(self, uid):
+        return self._retrieve_item(ProjectTbl, uid, key='id')
+
     def get_project(self, name, pi=None):
         if pi:
             q = self.session.query(ProjectTbl)
@@ -1112,7 +1128,7 @@ def get_project(self, name, pi=None):
 
             if pi:
                 pi = self.get_principal_investigator(pi)
-                q = q.filter(PrincipalInvestigatorTbl.principal_investigatorID == pi.id)
+                q = q.filter(PrincipalInvestigatorTbl.id == pi.id)
 
             return self._query_one(q)
         else:
@@ -1289,11 +1305,13 @@ def get_material_names(self):
 
     def get_project_pnames(self):
         q = self.session.query(ProjectTbl)
+        q = q.order_by(ProjectTbl.name.asc())
         ms = self._query_all(q)
         return [mi.pname for mi in ms]
 
     def get_material_gnames(self):
         q = self.session.query(MaterialTbl)
+        q = q.order_by(MaterialTbl.name.asc())
         ms = self._query_all(q)
         return [mi.gname for mi in ms]
 
@@ -1378,22 +1396,27 @@ def get_irradiations(self, names=None, order_func='desc',
 
         order = None
         if order_func:
-            order = getattr(IrradiationTbl.name, order_func)()
+            order = getattr(IrradiationTbl.create_date, order_func)()
 
         return self._retrieve_items(IrradiationTbl, order=order, **kw)
 
-    def get_projects(self, principal_investigator=None,
+    def get_last_project_id(self):
+        q = self.session.query(ProjectTbl.id)
+        q = q.order_by(ProjectTbl.id.desc())
+        return self._query_first(q)
+
+    def get_projects(self, principal_investigators=None,
                      irradiation=None, level=None,
                      mass_spectrometers=None, order=None):
 
         if order:
             order = getattr(ProjectTbl.name, order)()
 
-        if principal_investigator or irradiation or mass_spectrometers:
+        if principal_investigators or irradiation or mass_spectrometers:
             q = self.session.query(ProjectTbl)
 
             # joins
-            if principal_investigator:
+            if principal_investigators:
                 q = q.join(PrincipalInvestigatorTbl)
 
             if irradiation:
@@ -1405,17 +1428,18 @@ def get_projects(self, principal_investigator=None,
                 q = q.join(SampleTbl, IrradiationPositionTbl, AnalysisTbl)
 
             # filters
-            if principal_investigator:
-                q = principal_investigator_filter(q, principal_investigator)
-                # if ',' in principal_investigator:
-                #     try:
-                #         ln, fi = principal_investigator.split(',')
-                #         q = q.filter(PrincipalInvestigatorTbl.last_name == ln)
-                #         q = q.filter(PrincipalInvestigatorTbl.first_initial == fi)
-                #     except ValueError:
-                #         self.warning('invalid principal_investigator name "{}"'.format(principal_investigator))
-                # else:
-                #     q = q.filter(PrincipalInvestigatorTbl.last_name == principal_investigator)
+            if principal_investigators:
+                for p in principal_investigators:
+                    q = principal_investigator_filter(q, p)
+                    # if ',' in principal_investigator:
+                    #     try:
+                    #         ln, fi = principal_investigator.split(',')
+                    #         q = q.filter(PrincipalInvestigatorTbl.last_name == ln)
+                    #         q = q.filter(PrincipalInvestigatorTbl.first_initial == fi)
+                    #     except ValueError:
+                    #         self.warning('invalid principal_investigator name "{}"'.format(principal_investigator))
+                    # else:
+                    #     q = q.filter(PrincipalInvestigatorTbl.last_name == principal_investigator)
 
             if irradiation:
                 if level:
@@ -1430,7 +1454,7 @@ def get_projects(self, principal_investigator=None,
             if order is not None:
                 q = q.order_by(order)
 
-            ps = self._query_all(q)
+            ps = self._query_all(q, verbose_query=True)
         else:
             ps = self._retrieve_items(ProjectTbl, order=order)
         return ps
@@ -1451,6 +1475,17 @@ def get_mass_spectrometer_names(self):
         ms = self.get_mass_spectrometers()
         return [mi.name for mi in ms]
 
+    def get_active_mass_spectrometer_names(self):
+
+        # temporary workaround until MassSpectrometerTbl.active can be added
+        ms = self.get_mass_spectrometers()
+        return [mi.name for mi in ms if mi.name != 'obama']
+
+        # q = self.session.query(MassSpectrometerTbl)
+        # q = q.filter(MassSpectrometerTbl.active)
+        # ms = self._query_all(q)
+        # return [mi.name for mi in ms]
+
     def get_mass_spectrometers(self):
         return self._retrieve_items(MassSpectrometerTbl)
 
diff --git a/pychron/dvc/dvc_irradiationable.py b/pychron/dvc/dvc_irradiationable.py
index 431acb26f3..e4721f2eee 100755
--- a/pychron/dvc/dvc_irradiationable.py
+++ b/pychron/dvc/dvc_irradiationable.py
@@ -16,8 +16,7 @@
 
 # ============= enthought library imports =======================
 from traits.api import Str, Property, cached_property, Instance, Event, Any
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.loggable import Loggable
 
 
@@ -31,7 +30,6 @@ def get_database(self):
         else:
             db = self.iso_db_man.db
         return db
-    9
 
 
 class DVCIrradiationable(DVCAble):
@@ -64,23 +62,25 @@ def setup(self):
     def _get_irradiations(self):
         db = self.get_database()
         if db.connect():
-            irs = db.get_irradiations()
-            names = [i.name for i in irs]
-            if names:
-                self.irradiation = names[0]
-            return names
+            with db.session_ctx():
+                irs = db.get_irradiations()
+                names = [i.name for i in irs]
+                if names:
+                    self.irradiation = names[0]
+                return names
 
     @cached_property
     def _get_levels(self):
         db = self.get_database()
         if db.connect():
-            irrad = db.get_irradiation(self.irradiation)
-            if irrad:
-                names = sorted([li.name for li in irrad.levels])
-                if names:
-                    self.level = names[0]
-                return names
-            else:
-                return []
+            with db.session_ctx():
+                irrad = db.get_irradiation(self.irradiation)
+                if irrad:
+                    names = sorted([li.name for li in irrad.levels])
+                    if names:
+                        self.level = names[0]
+                    return names
+                else:
+                    return []
 
 # ============= EOF =============================================
diff --git a/pychron/dvc/dvc_orm.py b/pychron/dvc/dvc_orm.py
index 568e3146f6..86f8f48d8a 100755
--- a/pychron/dvc/dvc_orm.py
+++ b/pychron/dvc/dvc_orm.py
@@ -142,6 +142,7 @@ class AnalysisTbl(Base, BaseMixin):
     measured_position = relationship('MeasuredPositionTbl', uselist=False, backref='analysis')
     _record_view = None
     group_id = 0
+    frozen = False
 
     @property
     def is_plateau_step(self):
@@ -299,6 +300,7 @@ class SampleTbl(Base, NameMixin):
     materialID = Column(Integer, ForeignKey('MaterialTbl.id'))
     projectID = Column(Integer, ForeignKey('ProjectTbl.id'))
     positions = relationship('IrradiationPositionTbl', backref='sample')
+    note = stringcolumn(140)
 
 
 class ProductionTbl(Base, NameMixin):
@@ -321,6 +323,7 @@ class LevelTbl(Base, NameMixin):
 class IrradiationTbl(Base, NameMixin):
     id = primary_key()
     levels = relationship('LevelTbl', backref='irradiation')
+    create_date = Column(TIMESTAMP)
 
 
 class IrradiationPositionTbl(Base, BaseMixin):
@@ -354,6 +357,7 @@ class IrradiationPositionTbl(Base, BaseMixin):
 class MassSpectrometerTbl(Base, BaseMixin):
     name = Column(String(45), primary_key=True)
     kind = stringcolumn(45)
+    # active = Column(Bool)
 
 
 class ExtractDeviceTbl(Base, BaseMixin):
diff --git a/pychron/dvc/dvc_persister.py b/pychron/dvc/dvc_persister.py
index 2761c308e4..79c6729a57 100755
--- a/pychron/dvc/dvc_persister.py
+++ b/pychron/dvc/dvc_persister.py
@@ -15,16 +15,16 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Instance, Bool, Str
-# ============= standard library imports ========================
 import base64
 import hashlib
 import os
 import struct
 from datetime import datetime
-from uncertainties import std_dev, nominal_value
+
 from git.exc import GitCommandError
-# ============= local library imports  ==========================
+from traits.api import Instance, Bool, Str
+from uncertainties import std_dev, nominal_value
+
 from pychron.dvc import dvc_dump
 from pychron.dvc.dvc_analysis import META_ATTRS, EXTRACTION_ATTRS, analysis_path, PATH_MODIFIERS
 from pychron.experiment.automated_run.persistence import BasePersister
@@ -96,9 +96,9 @@ def pre_extraction_save(self):
 
     def post_extraction_save(self):
 
-        rblob = self.per_spec.response_blob
-        oblob = self.per_spec.output_blob
-        sblob = self.per_spec.setpoint_blob
+        rblob = self.per_spec.response_blob  # time vs measured response
+        oblob = self.per_spec.output_blob  # time vs %output
+        sblob = self.per_spec.setpoint_blob  # time vs requested
 
         if rblob:
             rblob = base64.b64encode(rblob)
@@ -107,7 +107,7 @@ def post_extraction_save(self):
         if sblob:
             sblob = base64.b64encode(sblob)
 
-        obj = {'request': rblob,
+        obj = {'request': rblob, # time vs
                'response': oblob,
                'sblob': sblob}
 
@@ -191,9 +191,6 @@ def post_measurement_save(self, commit=True, msg_prefix='Collection'):
 
         self._save_analysis(timestamp)
 
-        with self.dvc.session_ctx():
-            self._save_analysis_db(timestamp)
-
         # save monitor
         self._save_monitor()
 
@@ -233,6 +230,8 @@ def post_measurement_save(self, commit=True, msg_prefix='Collection'):
                                                     timeout=30):
                         ret = False
 
+        with self.dvc.session_ctx():
+            self._save_analysis_db(timestamp)
         self.debug('================= post measurement finished')
         return ret
 
@@ -341,7 +340,7 @@ def _save_analysis(self, timestamp):
                                     'value': float(nominal_value(iso.uvalue)),
                                     'error': float(std_dev(iso.uvalue))}
             blanks[iso.name] = {'fit': 'previous',
-                                'references': [{'runid': self.per_spec.previous_blank_runid,
+                                'references': [{'record_id': self.per_spec.previous_blank_runid,
                                                 'exclude': False}],
                                 'value': float(nominal_value(iso.blank.uvalue)),
                                 'error': float(std_dev(iso.blank.uvalue))}
diff --git a/pychron/dvc/meta_repo.py b/pychron/dvc/meta_repo.py
index 789d15e833..12100e5692 100755
--- a/pychron/dvc/meta_repo.py
+++ b/pychron/dvc/meta_repo.py
@@ -16,16 +16,14 @@
 
 # ============= enthought library imports =======================
 import json
-
-from traits.api import Bool
-
-# ============= standard library imports ========================
-from datetime import datetime
 import os
 import shutil
 import time
-# ============= local library imports  ==========================
+from datetime import datetime
+
+from traits.api import Bool
 from uncertainties import ufloat
+
 from pychron.canvas.utils import iter_geom
 from pychron.core.helpers.datetime_tools import ISO_FORMAT_STR
 from pychron.core.helpers.filetools import list_directory2, add_extension, \
@@ -406,8 +404,8 @@ def update_productions(self, irrad, level, production, add=True):
     def set_identifier(self, irradiation, level, pos, identifier):
         p = self.get_level_path(irradiation, level)
         jd = dvc_load(p)
-
-        d = next((p for p in jd if p['position'] != pos), None)
+        positions = self._get_level_positions(irradiation, level)
+        d = next((p for p in positions if p['position'] != pos), None)
         if d:
             d['identifier'] = identifier
 
@@ -419,7 +417,8 @@ def get_level_path(self, irrad, level):
 
     def add_level(self, irrad, level, add=True):
         p = self.get_level_path(irrad, level)
-        dvc_dump([], p)
+        l = dict(z=0, positions=[])
+        dvc_dump(l, p)
         if add:
             self.add(p, commit=False)
 
@@ -439,10 +438,16 @@ def add_irradiation(self, name):
     def add_position(self, irradiation, level, pos, add=True):
         p = self.get_level_path(irradiation, level)
         jd = dvc_load(p)
+        if isinstance(jd, list):
+            positions = jd
+            z = 0
+        else:
+            positions = jd['positions']
+            z = jd['z']
 
-        pd = next((p for p in jd if p['position'] == pos), None)
+        pd = next((p for p in positions if p['position'] == pos), None)
         if pd is None:
-            jd.append({'position': pos, 'decay_constants': {}})
+            positions.append({'position': pos, 'decay_constants': {}})
         # for pd in jd:
         #     if pd['position'] == pos:
 
@@ -454,7 +459,7 @@ def add_position(self, irradiation, level, pos, add=True):
         #                                                        'status': ai.is_omitted()}
         #                                                       for ai in analyses]} for ji in jd]
 
-        dvc_dump(jd, p)
+        dvc_dump({'z': z, 'positions': positions}, p)
         if add:
             self.add(p, commit=False)
 
@@ -491,17 +496,32 @@ def add_load_holder(self, name, path_or_txt, commit=False, add=True):
     def update_level_z(self, irradiation, level, z):
         p = self.get_level_path(irradiation, level)
         obj = dvc_load(p)
-        obj['z'] = z
+
+        try:
+            obj['z'] = z
+        except TypeError:
+            obj = {'z': z, 'positions': obj}
+
         dvc_dump(obj, p)
 
     def remove_irradiation_position(self, irradiation, level, hole):
         p = self.get_level_path(irradiation, level)
         jd = dvc_load(p)
-        njd = [ji for ji in jd if not ji['position'] == hole]
-        dvc_dump(njd, p)
+
+        if isinstance(jd, list):
+            positions = jd
+            z = 0
+        else:
+            positions = jd['positions']
+            z = jd['z']
+
+        # njd = [ji for ji in jd if not ji['position'] == hole]
+        npositions = [ji for ji in positions if not ji['position'] == hole]
+        obj = {'z': z, 'positions': npositions}
+        dvc_dump(obj, p)
         self.add(p, commit=False)
 
-    def update_flux(self, irradiation, level, pos, identifier, j, e, decay=None, analyses=None, add=True):
+    def update_flux(self, irradiation, level, pos, identifier, j, e, mj, me, decay=None, analyses=None, add=True):
         if decay is None:
             decay = {}
         if analyses is None:
@@ -509,23 +529,31 @@ def update_flux(self, irradiation, level, pos, identifier, j, e, decay=None, ana
 
         p = self.get_level_path(irradiation, level)
         jd = dvc_load(p)
+        if isinstance(jd, list):
+            positions = jd
+            z = 0
+        else:
+            positions = jd['positions']
+            z = jd['z']
+
         npos = {'position': pos, 'j': j, 'j_err': e,
+                'mean_j': mj, 'mean_j_err': me,
                 'decay_constants': decay,
                 'identifier': identifier,
                 'analyses': [{'uuid': ai.uuid,
                               'record_id': ai.record_id,
                               'status': ai.is_omitted()}
                              for ai in analyses]}
-        if jd:
-            added = any((ji['position'] == pos for ji in jd))
-            njd = [ji if ji['position'] != pos else npos for ji in jd]
+        if positions:
+            added = any((ji['position'] == pos for ji in positions))
+            npositions = [ji if ji['position'] != pos else npos for ji in positions]
             if not added:
-                njd.append(npos)
-
+                npositions.append(npos)
         else:
-            njd = [npos]
+            npositions = [npos]
 
-        dvc_dump(njd, p)
+        obj = {'z': z, 'positions': npositions}
+        dvc_dump(obj, p)
         if add:
             self.add(p, commit=False)
 
@@ -562,23 +590,24 @@ def get_default_productions(self):
     #     return prs
 
     def get_flux(self, irradiation, level, position):
-        path = os.path.join(paths.meta_root, irradiation, add_extension(level, '.json'))
-        j, e, lambda_k = 0, 0, None
-
-        if os.path.isfile(path):
-            with open(path) as rfile:
-                positions = json.load(rfile)
-            # if isinstance(positions, dict):
-            #     positions = positions['positions']
+        # path = os.path.join(paths.meta_root, irradiation, add_extension(level, '.json'))
+        j, je, lambda_k = 0, 0, None
 
+        positions = self._get_level_positions(irradiation, level)
+        if positions:
             pos = next((p for p in positions if p['position'] == position), None)
             if pos:
-                j, e = pos.get('j', 0), pos.get('j_err', 0)
+                j, je = pos.get('j', 0), pos.get('j_err', 0)
                 dc = pos.get('decay_constants')
                 if dc:
-                    lambda_k = ufloat(dc.get('lambda_k_total', 0), dc.get('lambda_k_total_error', 0))
+                    # this was a temporary fix and likely can be removed
+                    if isinstance(dc, float):
+                        v, e = dc, 0
+                    else:
+                        v, e = dc.get('lambda_k_total', 0), dc.get('lambda_k_total_error', 0)
+                    lambda_k = ufloat(v, e)
 
-        return ufloat(j or 0, e or 0), lambda_k
+        return ufloat(j, je), lambda_k
 
     def get_gains(self, name):
         g = self.get_gain_obj(name)
@@ -622,6 +651,15 @@ def get_load_holder_holes(self, name, **kw):
         return holder.holes
 
     # private
+    def _get_level_positions(self, irrad, level):
+        p = self.get_level_path(irrad, level)
+        obj = dvc_load(p)
+        if isinstance(obj, list):
+            positions = obj
+        else:
+            positions = obj['positions']
+        return positions
+
     def _chron_name(self, name):
         return os.path.join(paths.meta_root, name, 'chronology.txt')
 
diff --git a/pychron/entry/entry_views/sample_entry.py b/pychron/entry/entry_views/sample_entry.py
index 8d3a34999f..7ec703962c 100755
--- a/pychron/entry/entry_views/sample_entry.py
+++ b/pychron/entry/entry_views/sample_entry.py
@@ -14,52 +14,52 @@
 # limitations under the License.
 # ===============================================================================
 
-# ============= enthought library imports =======================
-from traits.api import List, Str
-from traitsui.api import Item, EnumEditor
-
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-# from pychron.database.isotope_database_manager import IsotopeDatabaseManager
-from pychron.entry.entry_views.entry import BaseEntry
-
-
-class SampleEntry(BaseEntry):
-    sample = Str
-    material = Str
-    materials = List
-    project = Str
-    projects = List
-
-    # def edit_sample(self, sample, project, material):
-    #     db = self.db
-    #     with db.session_ctx():
-    #         dbsam = db.get_sample(sample, project, material)
-    #         if dbsam:
-    #             print 'fffff', dbsam
-
-    def _add_item(self):
-        dvc = self.dvc
-        project = self.project
-        sample = self.sample
-        material = self.material
-        self.info('Attempting to add Sample="{}", '
-                  'Project="{}", Material="{}"'.format(sample, project, material))
-
-        dbsam = dvc.get_sample(sample, project)
-        if dbsam is None:
-            dvc.add_sample(sample, project, material)
-            return True
-        else:
-            self.warning('{}, Project={}, Material={} already exists'.format(sample,
-                                                                             project,
-                                                                             material))
-
-    def traits_view(self):
-        v = self._new_view(Item('sample'),
-                           Item('project', editor=EnumEditor(name='projects')),
-                           Item('material', editor=EnumEditor(name='materials')),
-                           title='New Sample')
-        return v
+# # ============= enthought library imports =======================
+# from traits.api import List, Str
+# from traitsui.api import Item, EnumEditor
+#
+# # ============= standard library imports ========================
+# # ============= local library imports  ==========================
+# # from pychron.database.isotope_database_manager import IsotopeDatabaseManager
+# from pychron.entry.entry_views.entry import BaseEntry
+#
+#
+# class SampleEntry(BaseEntry):
+#     sample = Str
+#     material = Str
+#     materials = List
+#     project = Str
+#     projects = List
+#
+#     # def edit_sample(self, sample, project, material):
+#     #     db = self.db
+#     #     with db.session_ctx():
+#     #         dbsam = db.get_sample(sample, project, material)
+#     #         if dbsam:
+#     #             print 'fffff', dbsam
+#
+#     def _add_item(self):
+#         dvc = self.dvc
+#         project = self.project
+#         sample = self.sample
+#         material = self.material
+#         self.info('Attempting to add Sample="{}", '
+#                   'Project="{}", Material="{}"'.format(sample, project, material))
+#
+#         dbsam = dvc.get_sample(sample, project)
+#         if dbsam is None:
+#             dvc.add_sample(sample, project, material)
+#             return True
+#         else:
+#             self.warning('{}, Project={}, Material={} already exists'.format(sample,
+#                                                                              project,
+#                                                                              material))
+#
+#     def traits_view(self):
+#         v = self._new_view(Item('sample'),
+#                            Item('project', editor=EnumEditor(name='projects')),
+#                            Item('material', editor=EnumEditor(name='materials')),
+#                            title='New Sample')
+#         return v
 
 # ============= EOF =============================================
diff --git a/pychron/entry/entry_views/user_entry.py b/pychron/entry/entry_views/user_entry.py
index ae91c9e709..17dae0db6c 100755
--- a/pychron/entry/entry_views/user_entry.py
+++ b/pychron/entry/entry_views/user_entry.py
@@ -18,8 +18,6 @@
 from traits.api import Str, List, Enum
 from traitsui.api import Item, VGroup, CheckListEditor
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.entry.entry_views.entry import BaseEntry
 from pychron.hardware.core.data_helper import make_bitarray
 
@@ -54,12 +52,13 @@ def edit(self, name):
         """
 
         db = self.get_database()
-        dbuser = db.get_user(name)
-        if dbuser:
-            self._edit_user(dbuser)
-        else:
-            self.user = name
-            self._add_item(db)
+        with db.session_ctx():
+            dbuser = db.get_user(name)
+            if dbuser:
+                self._edit_user(dbuser)
+            else:
+                self.user = name
+                self._add_item(db)
 
         return self.user
 
@@ -90,12 +89,13 @@ def _edit_user(self, dbuser):
                 self._add_item(self.db)
 
     def _add_user_db(self, db, name):
-        if not db.get_user(name):
-            c = make_categories(self.categories, self.available_categories)
-            db.add_user(name, email=self.email,
-                        category=c,
-                        affiliation=self.affiliation)
-            return True
+        with db.session_ctx():
+            if not db.get_user(name):
+                c = make_categories(self.categories, self.available_categories)
+                db.add_user(name, email=self.email,
+                            category=c,
+                            affiliation=self.affiliation)
+                return True
 
     def traits_view(self):
         g = VGroup(Item('user', style=self.user_style),
diff --git a/pychron/entry/export/mass_spec_irradiation_exporter.py b/pychron/entry/export/mass_spec_irradiation_exporter.py
index 0e204bc647..9c95d87599 100755
--- a/pychron/entry/export/mass_spec_irradiation_exporter.py
+++ b/pychron/entry/export/mass_spec_irradiation_exporter.py
@@ -15,17 +15,14 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import binascii
 import struct
 
 from traits.api import Instance
-
-# ============= standard library imports ========================
-import binascii
-# ============= local library imports  ==========================
 from uncertainties import std_dev, nominal_value
 
-from pychron.mass_spec.database.massspec_database_adapter import MassSpecDatabaseAdapter, PR_KEYS
 from pychron.entry.export.base_irradiation_exporter import BaseIrradiationExporter
+from pychron.mass_spec.database.massspec_database_adapter import MassSpecDatabaseAdapter, PR_KEYS
 
 SRC_PR_KEYS = ('Ca3637', 'Ca3637_err',
                'Ca3937', 'Ca3937_err',
@@ -93,14 +90,15 @@ def _export(self, dbirrad):
         action = 'Skipping'
 
         irradname = dbirrad.name
-        if not dest.get_irradiation_exists(irradname):
-            self._export_chronology(dbirrad)
-        else:
-            self.debug('Irradiation="{}" already exists. {}'.format(irradname, action))
+        with dest.session_ctx():
+            if not dest.get_irradiation_exists(irradname):
+                self._export_chronology(dbirrad)
+            else:
+                self.debug('Irradiation="{}" already exists. {}'.format(irradname, action))
 
-        for level in dbirrad.levels:
-            self._export_level(irradname, level)
-        dest.commit()
+            for level in dbirrad.levels:
+                self._export_level(irradname, level)
+            dest.commit()
 
     def _export_chronology(self, src_irr):
         self.info('Exporting chronology for "{}"'.format(src_irr.name))
@@ -188,7 +186,8 @@ def _export_position(self, dest, irrad, level, pos):
                     pname = pos.sample.project.name
                     proj = dest.get_project(pname)
                     if not proj:
-                        proj = dest.add_project(pname, PrincipalInvestigator=pos.sample.project.principal_investigator)
+                        proj = dest.add_project(pname,
+                                                PrincipalInvestigator=pos.sample.project.principal_investigator.name)
                 except AttributeError:
                     proj = None
 
diff --git a/pychron/entry/irradiated_position.py b/pychron/entry/irradiated_position.py
index f4d3670afd..70011ad793 100755
--- a/pychron/entry/irradiated_position.py
+++ b/pychron/entry/irradiated_position.py
@@ -27,6 +27,7 @@ class BaseIrradiatedPosition(HasTraits):
     identifier = Str
     material = Str
     sample = Str
+    grainsize = Str
     hole = Int
     alt_hole = Int
     project = Str
@@ -87,6 +88,7 @@ class IrradiatedPositionAdapter(TabularAdapter):
         ('PI', 'principal_investigator'),
         ('Project', 'project'),
         ('Material', 'material'),
+        ('Grainsize', 'grainsize'),
         #               ('Size', 'size'),
         ('Weight', 'weight'),
         ('J', 'j'),
@@ -98,17 +100,26 @@ class IrradiatedPositionAdapter(TabularAdapter):
     sample_width = Int(100)
     project_width = Int(150)
     material_width = Int(100)
+    grainsize_width = Int(70)
     size_width = Int(50)
     weight_width = Int(50)
     j_width = Int(75)
     j_err_width = Int(75)
 
+    j_text = Property
+    j_err_text = Property
+
     font = 'arial 10'
 
     #    hole_can_edit = False
 
     #    def _get_hole_width(self):
     #        return 35
+    def _get_j_text(self):
+        return '{:0.6E}'.format(self.item.j)
+
+    def _get_j_err_text(self):
+        return '{:0.6E}'.format(self.item.j_err)
 
     def get_bg_color(self, obj, trait, row, column):
         item = getattr(obj, trait)[row]
diff --git a/pychron/entry/irradiation_pdf_writer.py b/pychron/entry/irradiation_pdf_writer.py
index 2c2bf9cdac..ed2d960203 100755
--- a/pychron/entry/irradiation_pdf_writer.py
+++ b/pychron/entry/irradiation_pdf_writer.py
@@ -15,22 +15,20 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from reportlab.platypus import Paragraph
-from traits.api import Bool, Float
-from traitsui.api import View, VGroup, Tabbed, Item
-# ============= standard library imports ========================
 from reportlab.lib import colors
 from reportlab.lib.enums import TA_CENTER
 from reportlab.lib.units import inch
-# ============= local library imports  ==========================
+from reportlab.platypus import Paragraph
+from traits.api import Bool, Float
+from traitsui.api import View, VGroup, Tabbed, Item
+
 from pychron.canvas.canvas2D.irradiation_canvas import IrradiationCanvas
-# from pychron.entry.level import load_holder_canvas
+from pychron.core.pdf.base_table_pdf_writer import BasePDFTableWriter
+from pychron.core.pdf.items import Row
 from pychron.core.pdf.options import BasePDFOptions, dumpable
 from pychron.dvc.meta_repo import irradiation_holder_holes, irradiation_chronology
 from pychron.entry.editors.level_editor import load_holder_canvas
 from pychron.loading.component_flowable import ComponentFlowable
-from pychron.core.pdf.base_table_pdf_writer import BasePDFTableWriter
-from pychron.core.pdf.items import Row
 
 
 class RotatedParagraph(Paragraph):
@@ -194,7 +192,7 @@ def _make_row(self, pos, canvas):
             if sample.material:
                 material = sample.material.name[:15]
             project = sample.project.name
-            pi = sample.project.principal_investigator
+            pi = sample.project.principal_investigator.name
             sample = sample.name
             if sample == 'FC-2':
                 project, pi, material = '', '', ''
@@ -203,7 +201,7 @@ def _make_row(self, pos, canvas):
         r.add_item(value=pos.position)
         r.add_item(value=pos.identifier or '')
         r.add_item(value=sample or '')
-        r.add_item(value=material)
+        r.add_item(value=material, fontsize=8)
         r.add_item(value=project)
         r.add_item(value=pi)
         r.add_item(value='')
@@ -229,6 +227,7 @@ def _build(self, doc, irrads, progress=None, *args, **kw):
         flowables.extend(self._make_title_page(irrads))
 
         for irrad in irrads:
+            self.options.page_number_format = '{} {{page:d}} - {{total:d}}'.format(irrad.name)
             fs, _ = self._make_levels(irrad, progress)
             flowables.extend(self._make_summary(irrad))
 
diff --git a/pychron/entry/labnumber_entry.py b/pychron/entry/labnumber_entry.py
index d522037ec3..09dd9b69c2 100755
--- a/pychron/entry/labnumber_entry.py
+++ b/pychron/entry/labnumber_entry.py
@@ -17,12 +17,11 @@
 # ============= enthought library imports =======================
 import os
 
+import yaml
 from apptools.preferences.preference_binding import bind_preference
 from pyface.constant import YES, CANCEL
 from traits.api import Property, Str, cached_property, \
     List, Event, Button, Instance, Bool, on_trait_change, Float, HasTraits, Any
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from uncertainties import nominal_value
 from uncertainties import std_dev
 
@@ -34,13 +33,12 @@
 from pychron.dvc.dvc_irradiationable import DVCIrradiationable
 from pychron.entry.editors.irradiation_editor import IrradiationEditor
 from pychron.entry.editors.level_editor import LevelEditor, load_holder_canvas
-# from pychron.entry.loaders.irradiation_loader import XLSIrradiationLoader
+from pychron.entry.identifier_generator import IdentifierGenerator
+from pychron.entry.irradiated_position import IrradiatedPosition
 from pychron.entry.irradiation_pdf_writer import IrradiationPDFWriter, LabbookPDFWriter
 from pychron.entry.irradiation_table_view import IrradiationTableView
-from pychron.entry.identifier_generator import IdentifierGenerator
 from pychron.paths import paths
 from pychron.pychron_constants import PLUSMINUS
-from pychron.entry.irradiated_position import IrradiatedPosition
 
 
 class NeutronDose(HasTraits):
@@ -212,10 +210,14 @@ def set_selected_attr(self, v, attr):
             self.refresh_table = True
 
     def set_selected_attrs(self, vs, attrs):
+        self._backup()
+
         if self.selected:
             for si in self.selected:
                 for v, attr in zip(vs, attrs):
                     setattr(si, attr, v)
+
+            self._backup()
             self.refresh_table = True
 
     def import_sample_metadata(self, p):
@@ -266,9 +268,12 @@ def save_pdf(self, out):
                 w.build(out, irrad)
                 return True
 
-    def save(self):
+    def save(self, level=None, update=True):
+        if level is None:
+            level = self.level
+
         if self._validate_save():
-            self._save_to_db()
+            self._save_to_db(level, update)
             self._inform_save()
             return True
 
@@ -333,7 +338,40 @@ def push_changes(self):
                 self.dvc.meta_repo.push()
                 prog.close()
 
+    def recover(self):
+        irradiation = self.irradiation
+        level = self.level
+        if irradiation and level:
+            p = os.path.join(paths.hidden_dir, 'backup.{}.{}.yaml'.format(irradiation, level))
+            with open(p, 'r') as rfile:
+                self.irradiated_positions = [IrradiatedPosition(**pos) for pos in yaml.load(rfile)]
+        else:
+            self.information_dialog('No recover file for {}'.format(irradiation, level))
+
     # private
+    def _backup(self):
+        attrs = [
+            'identifier',
+            'material',
+            'sample',
+            'hole',
+            'alt_hole',
+            'project',
+            'principal_investigator',
+            'j',
+            'j_err',
+            'size',
+            'weight', 'note']
+
+        def func(pp):
+            return {a: getattr(pp, a) for a in attrs}
+
+        p = os.path.join(paths.hidden_dir, 'backup.{}.{}.yaml'.format(self.irradiation, self.level))
+        with open(p, 'w') as wfile:
+            obj = [func(pos) for pos in self.irradiated_positions]
+
+            yaml.dump(obj, wfile)
+
     def _load_canvas_analyses(self, db, level):
         poss = db.get_analyzed_positions(level)
         if poss:
@@ -389,7 +427,7 @@ def _validate_save(self):
     def _inform_save(self):
         self.information_dialog('Changes saved to Database')
 
-    def _save_to_db(self):
+    def _save_to_db(self, level, update):
         db = self.dvc.db
 
         if not self.dvc.meta_repo.smart_pull():
@@ -402,14 +440,14 @@ def _save_to_db(self):
             sam = ir.sample
 
             if not sam:
-                self.dvc.remove_irradiation_position(self.irradiation, self.level, ir.hole)
+                self.dvc.remove_irradiation_position(self.irradiation, level, ir.hole)
                 continue
 
             ln = ir.identifier
 
-            dbpos = db.get_irradiation_position(self.irradiation, self.level, ir.hole)
+            dbpos = db.get_irradiation_position(self.irradiation, level, ir.hole)
             if not dbpos:
-                dbpos = db.add_irradiation_position(self.irradiation, self.level, ir.hole)
+                dbpos = db.add_irradiation_position(self.irradiation, level, ir.hole)
 
             if ln:
                 dbpos2 = db.get_identifier(ln)
@@ -422,8 +460,8 @@ def _save_to_db(self):
                 else:
                     dbpos.identifier = ln
 
-            self.dvc.meta_repo.update_flux(self.irradiation, self.level,
-                                           ir.hole, ir.identifier, ir.j, ir.j_err)
+            self.dvc.meta_repo.update_flux(self.irradiation, level,
+                                           ir.hole, ir.identifier, ir.j, ir.j_err, 0, 0)
 
             dbpos.weight = float(ir.weight or 0)
             dbpos.note = ir.note
@@ -442,11 +480,15 @@ def _save_to_db(self):
                                     material=mat)
                 dbpos.sample = sam
 
-            prog.change_message('Saving {}{}{} identifier={}'.format(self.irradiation, self.level, ir.hole, ln))
+            prog.change_message('Saving {}{}{} identifier={}'.format(self.irradiation, level, ir.hole, ln))
             db.commit()
 
+        prog.close()
+
         self.dirty = False
-        self._level_changed(self.level)
+        if update:
+            self._level_changed(None, level)
+
         if self.dvc.meta_repo.has_staged():
             self.dvc.meta_commit('Labnumber Entry Save')
             self.dvc.meta_push()
@@ -598,6 +640,7 @@ def set_color(ii, value):
 
                 if dbpos.sample.material:
                     ir.material = v = dbpos.sample.material.name
+                    ir.grainsize = dbpos.sample.material.grainsize or ''
                     set_color(item, v)
 
                 if dbpos.sample.project:
@@ -605,8 +648,11 @@ def set_color(ii, value):
                     set_color(item, v)
                     if dbpos.sample.project.principal_investigator:
                         ir.principal_investigator = dbpos.sample.project.principal_investigator.name
+                v=''
+                if dbpos.identifier:
+                    v = str(dbpos.identifier)
 
-                ir.identifier = v = dbpos.identifier or ''
+                ir.identifier = v
                 if v:
                     set_color(item, v)
 
@@ -683,12 +729,22 @@ def _add_irradiation_button_fired(self):
         if new_irrad:
             pname = 'Irradiation-{}'.format(new_irrad)
             sname = self.monitor_name
-            if self.confirmation_dialog('Add default project ({}) and '
-                                        'flux monitor sample {{}} for this irradiation?'.format(pname, sname)):
+
+            def add_default():
                 # add irradiation project for flux monitors
                 self.dvc.add_project(pname, principal_investigator=self.default_principal_investigator)
-
                 self.dvc.add_sample(sname, pname, self.monitor_material)
+
+            if self.confirmation_dialog('Add default project ({}) and '
+                                        'flux monitor sample ({}) for this irradiation?'.format(pname, sname)):
+                add_default()
+            else:
+                msg = 'Are you sure you do not want to add a default project ({}) and flux monitor sample ({}) ' \
+                      'for this irradiation?\n\nPlease seek help if you are not sure what to do! Yes="Do not add", ' \
+                      'No="Add default"'.format(pname, sname)
+                if not self.confirmation_dialog(msg):
+                    add_default()
+
             self.updated = True
             self.irradiation = new_irrad
 
@@ -737,7 +793,12 @@ def _irradiation_changed(self):
             items = [NeutronDose(*args) for args in chron.get_doses()]
             self.chronology_items = items
 
-    def _level_changed(self, new):
+    def _level_changed(self, old, new):
+        if self.dirty:
+            if self.confirmation_dialog('You have unsaved changes. Do you want to save now?'):
+                self.save(level=old, update=False)
+            self.dirty = False
+
         self.debug('level changed "{}"'.format(new))
         self.irradiated_positions = []
         if new:
diff --git a/pychron/entry/tasks/actions.py b/pychron/entry/tasks/actions.py
index 4ec01dd55c..c5d5d3d863 100755
--- a/pychron/entry/tasks/actions.py
+++ b/pychron/entry/tasks/actions.py
@@ -81,6 +81,11 @@ class ClearSelectionAction(TaskAction):
     method = 'clear_selection'
 
 
+class RecoverAction(TaskAction):
+    name = 'Recover'
+    method = 'recover'
+
+
 class SavePDFAction(TaskAction):
     name = 'Save PDF'
     dname = 'Save PDF'
diff --git a/pychron/entry/tasks/entry_plugin.py b/pychron/entry/tasks/entry_plugin.py
index a93f550459..32e9a19ed3 100755
--- a/pychron/entry/tasks/entry_plugin.py
+++ b/pychron/entry/tasks/entry_plugin.py
@@ -20,19 +20,16 @@
 from pyface.tasks.action.schema import SMenu, SGroup
 from pyface.tasks.action.schema_addition import SchemaAddition
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-# from pychron.entry.editors.flux_monitor_editor import FluxMonitorEditor
 from pychron.entry.editors.flux_monitor_editor import FluxMonitorEditor
-from pychron.entry.tasks.ir.actions import IRAction
-from pychron.entry.tasks.labnumber.actions import LabnumberEntryAction
-from pychron.entry.tasks.preferences import LabnumberEntryPreferencesPane, SamplePrepPreferencesPane
+from pychron.entry.editors.molecular_weight_editor import MolecularWeightEditor
 from pychron.entry.tasks.actions import MakeIrradiationBookPDFAction, MakeIrradiationTemplateAction, \
     SensitivityEntryAction, AddMolecularWeightAction, AddFluxMonitorAction, \
     GenerateTrayAction, \
     ImportIrradiationHolderAction, ExportIrradiationAction, ImportIrradiationAction, \
     TransferJAction, ImportSamplesAction, ImportIrradiationFileAction, GetIGSNAction, GenerateIrradiationTableAction
-from pychron.entry.editors.molecular_weight_editor import MolecularWeightEditor
+from pychron.entry.tasks.labnumber.actions import LabnumberEntryAction
+from pychron.entry.tasks.preferences import LabnumberEntryPreferencesPane, SamplePrepPreferencesPane
+from pychron.entry.tasks.project.actions import ProjectAction
 from pychron.entry.tasks.sample.actions import SampleEntryAction, SampleEditAction
 from pychron.entry.tasks.sample_prep.actions import SamplePrepAction
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
@@ -66,7 +63,7 @@ def factory2():
             return e
 
         so1 = self.service_offer_factory(factory=factory,
-                                         protocol=MolecularWeightEditor,)
+                                         protocol=MolecularWeightEditor, )
         so2 = self.service_offer_factory(factory=factory2,
                                          protocol=FluxMonitorEditor)
         return [so1, so2]
@@ -86,11 +83,15 @@ def _task_extensions_default(self):
                     eflag = True
                     additions.append(SchemaAddition(id='entry_group', factory=lambda: SGroup(id='entry.group'),
                                                     path='MenuBar/entry.menu'))
+                    additions.append(SchemaAddition(id='entry_sample_group',
+                                                    absolute_position='first',
+                                                    factory=lambda: SGroup(id='entry.sample.group'),
+                                                    path='MenuBar/entry.menu'))
                 elif not eeflag and ai.id.startswith('pychron.entry2'):
                     eeflag = True
                     additions.append(SchemaAddition(id='entry_group2', factory=lambda: SGroup(id='entry.group2'),
                                                     after='entry_group',
-                                                    path='MenuBar/entry.menu'),)
+                                                    path='MenuBar/entry.menu'), )
 
         extensions.append(TaskExtension(actions=additions))
 
@@ -99,6 +100,7 @@ def _task_extensions_default(self):
     def _available_task_extensions_default(self):
         g2path = 'MenuBar/entry.menu/entry.group2'
         gpath = 'MenuBar/entry.menu/entry.group'
+        spath = 'MenuBar/entry.menu/entry.sample.group'
 
         return [('{}.entry2'.format(self.id),
                  'pychron.entry.irradiation.task',
@@ -114,15 +116,15 @@ def _available_task_extensions_default(self):
                   SchemaAddition(id='pychron.entry2.generate_tray', factory=GenerateTrayAction, path=g2path, ),
                   SchemaAddition(id='pychron.entry2.save_labbook', factory=MakeIrradiationBookPDFAction, path=g2path)]),
                 (self.id, '', 'Entry',
-                 [SchemaAddition(id='pychron.entry1.labnumber_entry', factory=LabnumberEntryAction,
-                                 path=gpath, absolute_position='first'),
-                  SchemaAddition(id='pychron.entry1.sample_entry', factory=SampleEntryAction,
-                                 path=gpath),
+                 [SchemaAddition(id='pychron.entry1.sample_entry', factory=SampleEntryAction,
+                                 path=spath, absolute_position='first'),
                   SchemaAddition(id='pychron.entry1.sample_edit', factory=SampleEditAction,
-                                 path=gpath),
+                                 path=spath, after='pychron.entry1.sample_entry'),
                   SchemaAddition(id='pychron.entry1.sample_prep', factory=SamplePrepAction,
-                                 path=gpath),
-                  SchemaAddition(id='pychron.entry1.ir', factory=IRAction,
+                                 path=spath, after='pychron.entry1.sample_edit'),
+                  SchemaAddition(id='pychron.entry1.labnumber_entry', factory=LabnumberEntryAction,
+                                 path=spath, after='pychron.entry1.sample_prep'),
+                  SchemaAddition(id='pychron.entry1.project', factory=ProjectAction,
                                  path=gpath),
                   SchemaAddition(id='pychron.entry2.make_template', factory=MakeIrradiationTemplateAction,
                                  path=g2path),
@@ -150,13 +152,13 @@ def _tasks_default(self):
                 TaskFactory(id='pychron.entry.sample.prep.task',
                             factory=self._sample_prep_task_factory,
                             include_view_menu=False),
-                TaskFactory(id='pychron.entry.ir.task',
-                            factory=self._ir_task_factory,
+                TaskFactory(id='pychron.entry.project.task',
+                            factory=self._project_task_factory,
                             include_view_menu=False)]
 
-    def _ir_task_factory(self):
-        from pychron.entry.tasks.ir.task import IRTask
-        return IRTask(application=self.application)
+    def _project_task_factory(self):
+        from pychron.entry.tasks.project.task import ProjectTask
+        return ProjectTask(application=self.application)
 
     def _sample_prep_task_factory(self):
         from pychron.entry.tasks.sample_prep.task import SamplePrepTask
@@ -181,61 +183,61 @@ def _preferences_panes_default(self):
         return [LabnumberEntryPreferencesPane,
                 SamplePrepPreferencesPane]
 
-# ============= EOF =============================================
-# def _task_extensions_default(self):
-# return [TaskExtension(task_id='pychron.entry.labnumber',
-# actions=[SchemaAddition(id='transfer_j',
-# factory=TransferJAction,
-# path='MenuBar/entry.menu/entry.group2'),
-# SchemaAddition(id='import_irradiation',
-# factory=ImportIrradiationAction,
-# path='MenuBar/entry.menu/entry.group2'),
-# SchemaAddition(id='export_irradiation',
-#                                                   factory=ExportIrradiationAction,
-#                                                   path='MenuBar/entry.menu/entry.group2'),
-#                                    # SchemaAddition(id='import_sample_metadata',
-#                                    # factory=ImportSampleMetadataAction,
-#                                    # path='MenuBar/tools.menu', ),
-#
-#                                    SchemaAddition(id='import_samples_from_file',
-#                                                   factory=ImportSamplesAction,
-#                                                   path='MenuBar/entry.menu/entry.group2', ),
-#
-#                                    SchemaAddition(id='generate_tray',
-#                                                   factory=GenerateTrayAction,
-#                                                   path='MenuBar/entry.menu/entry.group2', ),
-#                                    SchemaAddition(id='save_labbook',
-#                                                   factory=SaveLabbookPDFAction,
-#                                                   path='MenuBar/entry.menu/entry.group2'),
-#                                    SchemaAddition(id='make_template',
-#                                                   factory=MakeIrradiationTemplateAction,
-#                                                   path='MenuBar/entry.menu/entry.group2')]),
-#             TaskExtension(actions=[SchemaAddition(id='entry',
-#                                                   factory=lambda: SMenu(id='entry.menu', name='Entry'),
-#                                                   path='MenuBar',
-#                                                   before='tools.menu',
-#                                                   after='view.menu'),
-#                                    SchemaAddition(id='entry_group',
-#                                                   factory=lambda: SGroup(id='entry.group'),
-#                                                   path='MenuBar/entry.menu'),
-#                                    SchemaAddition(id='entry_group2',
-#                                                   factory=lambda: SGroup(id='entry.group2'),
-#                                                   path='MenuBar/entry.menu'),
-#                                    SchemaAddition(id='labnumber_entry',
-#                                                   factory=LabnumberEntryAction,
-#                                                   path='MenuBar/entry.menu/entry.group', absolute_position='first'),
-#                                    SchemaAddition(id='generate_irradiation_table',
-#                                                   factory=GenerateIrradiationTableAction,
-#                                                   path='MenuBar/entry.menu/entry.group'),
-#                                    SchemaAddition(id='import_irradiation_holder',
-#                                                   factory=ImportIrradiationHolderAction,
-#                                                   path='MenuBar/entry.menu/entry.group'),
-#                                    SchemaAddition(id='sensitivity_entry',
-#                                                   factory=SensitivityEntryAction,
-#                                                   path='MenuBar/entry.menu/entry.group'),
-#                                    SchemaAddition(id='molecular_weight_entry',
-#                                                   factory=AddMolecularWeightAction,
-#                                                   path='MenuBar/entry.menu/entry.group'),
-#                                    SchemaAddition(id='molecular_weight_entry',
-#                                                   factory=AddFluxMonitorAction,
-#                                                   path='MenuBar/entry.menu/entry.group')])]
\ No newline at end of file
+        # ============= EOF =============================================
+        # def _task_extensions_default(self):
+        # return [TaskExtension(task_id='pychron.entry.labnumber',
+        # actions=[SchemaAddition(id='transfer_j',
+        # factory=TransferJAction,
+        # path='MenuBar/entry.menu/entry.group2'),
+        # SchemaAddition(id='import_irradiation',
+        # factory=ImportIrradiationAction,
+        # path='MenuBar/entry.menu/entry.group2'),
+        # SchemaAddition(id='export_irradiation',
+        #                                                   factory=ExportIrradiationAction,
+        #                                                   path='MenuBar/entry.menu/entry.group2'),
+        #                                    # SchemaAddition(id='import_sample_metadata',
+        #                                    # factory=ImportSampleMetadataAction,
+        #                                    # path='MenuBar/tools.menu', ),
+        #
+        #                                    SchemaAddition(id='import_samples_from_file',
+        #                                                   factory=ImportSamplesAction,
+        #                                                   path='MenuBar/entry.menu/entry.group2', ),
+        #
+        #                                    SchemaAddition(id='generate_tray',
+        #                                                   factory=GenerateTrayAction,
+        #                                                   path='MenuBar/entry.menu/entry.group2', ),
+        #                                    SchemaAddition(id='save_labbook',
+        #                                                   factory=SaveLabbookPDFAction,
+        #                                                   path='MenuBar/entry.menu/entry.group2'),
+        #                                    SchemaAddition(id='make_template',
+        #                                                   factory=MakeIrradiationTemplateAction,
+        #                                                   path='MenuBar/entry.menu/entry.group2')]),
+        #             TaskExtension(actions=[SchemaAddition(id='entry',
+        #                                                   factory=lambda: SMenu(id='entry.menu', name='Entry'),
+        #                                                   path='MenuBar',
+        #                                                   before='tools.menu',
+        #                                                   after='view.menu'),
+        #                                    SchemaAddition(id='entry_group',
+        #                                                   factory=lambda: SGroup(id='entry.group'),
+        #                                                   path='MenuBar/entry.menu'),
+        #                                    SchemaAddition(id='entry_group2',
+        #                                                   factory=lambda: SGroup(id='entry.group2'),
+        #                                                   path='MenuBar/entry.menu'),
+        #                                    SchemaAddition(id='labnumber_entry',
+        #                                                   factory=LabnumberEntryAction,
+        #                                                   path='MenuBar/entry.menu/entry.group', absolute_position='first'),
+        #                                    SchemaAddition(id='generate_irradiation_table',
+        #                                                   factory=GenerateIrradiationTableAction,
+        #                                                   path='MenuBar/entry.menu/entry.group'),
+        #                                    SchemaAddition(id='import_irradiation_holder',
+        #                                                   factory=ImportIrradiationHolderAction,
+        #                                                   path='MenuBar/entry.menu/entry.group'),
+        #                                    SchemaAddition(id='sensitivity_entry',
+        #                                                   factory=SensitivityEntryAction,
+        #                                                   path='MenuBar/entry.menu/entry.group'),
+        #                                    SchemaAddition(id='molecular_weight_entry',
+        #                                                   factory=AddMolecularWeightAction,
+        #                                                   path='MenuBar/entry.menu/entry.group'),
+        #                                    SchemaAddition(id='molecular_weight_entry',
+        #                                                   factory=AddFluxMonitorAction,
+        #                                                   path='MenuBar/entry.menu/entry.group')])]
diff --git a/pychron/entry/tasks/ir/adder.py b/pychron/entry/tasks/ir/adder.py
deleted file mode 100755
index 5f32343493..0000000000
--- a/pychron/entry/tasks/ir/adder.py
+++ /dev/null
@@ -1,61 +0,0 @@
-# ===============================================================================
-# Copyright 2016 Jake Ross
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# ===============================================================================
-
-# ============= enthought library imports =======================
-from traits.api import HasTraits
-from traits.trait_types import BaseStr
-from traitsui.api import View, UItem, Item, VGroup
-
-
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-class LenStr(BaseStr):
-    def validate(self, obj, name, value):
-        if value and len(value) > self.n:
-            self.error(obj, name, value)
-        else:
-            return value
-
-
-def lenstr(n):
-    l = LenStr()
-    l.n = n
-    return l
-
-
-class AddIREntry(HasTraits):
-    ir = lenstr(32)
-    lab_contact = lenstr(45)
-    principal_investigator = lenstr(45)
-    institution = lenstr(140)
-
-    def traits_view(self):
-        v = View(VGroup(Item('name'),
-                        Item('fullname'),
-                        Item('phone'),
-                        Item('email'),
-                        VGroup(UItem('comment', style='custom'),
-                               show_border=True,
-                               label='Comment')),
-                 title='Add New Worker',
-                 kind='livemodal',
-                 resizable=True,
-                 buttons=['OK', 'Cancel'])
-        return v
-
-
-
-# ============= EOF =============================================
diff --git a/pychron/entry/tasks/ir/ir_database.py b/pychron/entry/tasks/ir/ir_database.py
deleted file mode 100755
index af6f3fa413..0000000000
--- a/pychron/entry/tasks/ir/ir_database.py
+++ /dev/null
@@ -1,82 +0,0 @@
-# ===============================================================================
-# Copyright 2016 ross
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-# ===============================================================================
-
-# ============= standard library imports ========================
-from traits.api import List, Str, Dict, Button, Int, String
-
-# ============= local library imports  ==========================
-from pychron.core.fuzzyfinder import fuzzyfinder
-from pychron.loggable import Loggable
-
-
-class IR(Loggable):
-    oitems = List
-    items = List
-
-    filter_str = Str(enter_set=True, auto_set=False)
-    filter_attrs = Dict({'ir': 'IR',
-                         'principal_investigator': 'Principal Investigator',
-                         'lab_contact': 'Lab Contact'})
-    filter_attr = Str
-
-    add_button = Button
-    ir = Str
-    institution = Str
-    comment = String
-    pi = Str
-    lab_contact = Str
-    pis = List
-    lab_contacts = List
-
-    scroll_to_row = Int
-
-    def activated(self):
-        self.dvc.create_session()
-        self.oitems = self.dvc.get_irs()
-        self._filter()
-
-        self.pis = self.dvc.get_principal_investigator_names()
-        self.lab_contacts = self.dvc.get_usernames()
-
-    def prepare_destroy(self):
-        self.dvc.close_session()
-
-    # private
-    def _add(self):
-        self.dvc.add_ir(self.pi, self.lab_contact,
-                        ir=self.ir,
-                        comment=self.comment,
-                        institution=self.institution)
-
-        self.oitems = self.dvc.get_irs()
-        self._filter()
-
-    def _filter(self):
-        if self.filter_str:
-            self.items = fuzzyfinder(self.filter_str, self.oitems, self.filter_attr)
-        else:
-            self.items = self.oitems
-        self.scroll_to_row = len(self.items) - 1
-
-    def _filter_str_changed(self):
-        self._filter()
-
-    def _filter_attr_changed(self):
-        self._filter()
-
-    def _add_button_fired(self):
-        self._add()
-# ============= EOF =============================================
diff --git a/pychron/entry/tasks/labnumber/panes.py b/pychron/entry/tasks/labnumber/panes.py
index 985f9b7833..1a42e91633 100755
--- a/pychron/entry/tasks/labnumber/panes.py
+++ b/pychron/entry/tasks/labnumber/panes.py
@@ -25,15 +25,13 @@
 from traitsui.menu import Action
 from traitsui.tabular_adapter import TabularAdapter
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.core.ui.combobox_editor import ComboboxEditor
 from pychron.core.ui.qt.tabular_editors import FilterTabularEditor
+from pychron.entry.irradiated_position import IrradiatedPositionAdapter
+from pychron.envisage.browser.adapters import SampleAdapter, BrowserAdapter
 from pychron.envisage.icon_button_editor import icon_button_editor
 from pychron.envisage.stylesheets import load_stylesheet
 from pychron.envisage.tasks.pane_helpers import spacer
-from pychron.entry.irradiated_position import IrradiatedPositionAdapter
-from pychron.envisage.browser.adapters import SampleAdapter, BrowserAdapter
 from pychron.pychron_constants import PLUSMINUS_ONE_SIGMA
 
 
@@ -84,13 +82,14 @@ class IrradiationEditorPane(TraitsDockPane):
 
     def traits_view(self):
         self.sample_tabular_adapter.columns = [('Sample', 'name'),
-                                               ('Material', 'material')]
+                                               ('Material', 'material'),
+                                               ('Note', 'note')]
 
         # tgrp = HGroup(icon_button_editor('clear_button', 'table_lightning',
         #                                  enabled_when='selected',
         #                                  tooltip='Clear contents of selected positions'))
         pi_grp = VGroup(UItem('principal_investigator',
-                              editor=EnumEditor(name='principal_investigators')),
+                              editor=EnumEditor(name='principal_investigator_names')),
                         show_border=True,
                         label='Principal Investigator')
         project_grp = VGroup(UItem('projects',
diff --git a/pychron/entry/tasks/labnumber/task.py b/pychron/entry/tasks/labnumber/task.py
index c6b41b1d73..d87d19cc06 100755
--- a/pychron/entry/tasks/labnumber/task.py
+++ b/pychron/entry/tasks/labnumber/task.py
@@ -19,17 +19,15 @@
 from pyface.tasks.task_layout import TaskLayout, PaneItem, Splitter, Tabbed
 from traits.api import on_trait_change, Button, Float, Str, Int, Bool, Event, HasTraits
 from traitsui.api import View, Item, VGroup, UItem, HGroup
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 
 from pychron.entry.graphic_generator import GraphicModel, GraphicGeneratorController
-from pychron.envisage.browser.record_views import SampleRecordView
-from pychron.envisage.browser.base_browser_model import BaseBrowserModel
 from pychron.entry.labnumber_entry import LabnumberEntry
 from pychron.entry.tasks.actions import SavePDFAction, DatabaseSaveAction, PreviewGenerateIdentifiersAction, \
-    GenerateIdentifiersAction, ClearSelectionAction
+    GenerateIdentifiersAction, ClearSelectionAction, RecoverAction
 from pychron.entry.tasks.labnumber.panes import LabnumbersPane, \
     IrradiationPane, IrradiationEditorPane, IrradiationCanvasPane, LevelInfoPane, ChronologyPane
+from pychron.envisage.browser.base_browser_model import BaseBrowserModel
+from pychron.envisage.browser.record_views import SampleRecordView
 from pychron.envisage.tasks.base_task import BaseManagerTask
 from pychron.globals import globalv
 
@@ -88,13 +86,16 @@ class LabnumberEntryTask(BaseManagerTask, BaseBrowserModel):
     refresh_needed = Event
     dclicked = Event
 
+    principal_investigator = Str
     tool_bars = [SToolBar(SavePDFAction(),
                           DatabaseSaveAction(),
                           image_size=(16, 16)),
                  SToolBar(GenerateIdentifiersAction(),
                           PreviewGenerateIdentifiersAction(),
                           image_size=(16, 16)),
-                 SToolBar(ClearSelectionAction())]
+                 SToolBar(ClearSelectionAction()),
+                 SToolBar(RecoverAction())
+                 ]
 
     invert_flag = Bool
     selection_freq = Int
@@ -122,6 +123,9 @@ def activated(self):
                 self.load_principal_investigators()
                 self.load_projects(include_recent=False)
 
+    def recover(self):
+        self.manager.recover()
+
     def clear_selection(self):
         cs = ClearSelectionView()
         info = cs.edit_traits()
@@ -339,8 +343,8 @@ def _selected_samples_changed(self, new):
         if new:
             ni = new[0]
             # self.manager.set_selected_attr(new.name, 'sample')
-            self.manager.set_selected_attrs((ni.name, ni.material, ni.project),
-                                            ('sample', 'material', 'project'))
+            self.manager.set_selected_attrs((ni.name, ni.material, ni.project, ni.principal_investigator),
+                                            ('sample', 'material', 'project', 'principal_investigator'))
 
     def _load_associated_samples(self, names=None):
         if names is None:
diff --git a/pychron/entry/tasks/ir/__init__.py b/pychron/entry/tasks/project/__init__.py
similarity index 100%
rename from pychron/entry/tasks/ir/__init__.py
rename to pychron/entry/tasks/project/__init__.py
diff --git a/pychron/entry/tasks/ir/actions.py b/pychron/entry/tasks/project/actions.py
similarity index 87%
rename from pychron/entry/tasks/ir/actions.py
rename to pychron/entry/tasks/project/actions.py
index 87f6da6a66..c031a1fa42 100755
--- a/pychron/entry/tasks/ir/actions.py
+++ b/pychron/entry/tasks/project/actions.py
@@ -22,13 +22,13 @@
 # ============= local library imports  ==========================
 
 
-class IRAction(Action):
-    name = 'IR Database'
-    dname = 'IR Database'
-    id = 'pychron.ir_database'
+class ProjectAction(Action):
+    name = 'Project Database'
+    dname = 'Project Database'
+    id = 'pychron.project_database'
 
     def perform(self, event):
-        pid = 'pychron.entry.ir.task'
+        pid = 'pychron.entry.project.task'
         app = event.task.window.application
         app.get_task(pid)
 
diff --git a/pychron/entry/tasks/ir/panes.py b/pychron/entry/tasks/project/panes.py
similarity index 66%
rename from pychron/entry/tasks/ir/panes.py
rename to pychron/entry/tasks/project/panes.py
index d2cd9460f3..8bb0907e67 100755
--- a/pychron/entry/tasks/ir/panes.py
+++ b/pychron/entry/tasks/project/panes.py
@@ -17,19 +17,18 @@
 # ============= enthought library imports =======================
 from pyface.tasks.traits_task_pane import TraitsTaskPane
 from traits.api import Property
-from traitsui.api import View, UItem, HGroup, VGroup, EnumEditor, VSplit, Item
+from traitsui.api import View, UItem, HGroup, VGroup, EnumEditor, VSplit, spring
 from traitsui.tabular_adapter import TabularAdapter
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.core.ui.tabular_editor import myTabularEditor
 from pychron.envisage.icon_button_editor import icon_button_editor
 
 
-class IRAdapter(TabularAdapter):
-    columns = [('IR', 'ir'),
+class ProjectAdapter(TabularAdapter):
+    columns = [('ProjectID', 'unique_id'),
+               ('Name', 'name'),
                ('Lab Contact', 'lab_contact'),
-               ('PI', 'principal_investigator_name'),
+               ('PI', 'principal_investigator'),
                ('Checkin', 'checkin_date'),
                ('Comment', 'comment')]
 
@@ -42,19 +41,21 @@ def _get_checkin_date_text(self):
         return str(ret)
 
 
-class IRPane(TraitsTaskPane):
+class ProjectPane(TraitsTaskPane):
     def traits_view(self):
         fgrp = HGroup(UItem('filter_attr', editor=EnumEditor(name='filter_attrs')), UItem('filter_str'))
-        add_grp = VGroup(HGroup(Item('ir'),
-                                Item('lab_contact', editor=EnumEditor(name='lab_contacts')),
-                                Item('pi', editor=EnumEditor(name='pis'))),
-                         Item('institution'),
-                         VGroup(UItem('comment', style='custom'), label='Comment', show_border=True),
-                         HGroup(icon_button_editor('add_button', 'add', enabled_when='ir')))
-        tgrp = VGroup(UItem('items', height=600, editor=myTabularEditor(adapter=IRAdapter(),
+        tgrp = VGroup(UItem('items', height=600, editor=myTabularEditor(adapter=ProjectAdapter(),
                                                                         editable=False,
+                                                                        selected='selected',
+                                                                        multi_select=True,
+                                                                        refresh='refresh',
                                                                         scroll_to_row='scroll_to_row')))
-        bgrp = VSplit(tgrp, add_grp)
+        edit_grp = VGroup(VGroup(UItem('comment', style='custom'),
+                                 enabled_when='selected',
+                                 label='Comment', show_border=True),
+                          HGroup(spring, icon_button_editor('save_button', 'database_save', tooltip='Save changes to '
+                                                                                                    'database')))
+        bgrp = VSplit(tgrp, edit_grp)
         g = VGroup(fgrp, bgrp)
         v = View(g)
         return v
diff --git a/pychron/entry/tasks/project/project_manager.py b/pychron/entry/tasks/project/project_manager.py
new file mode 100755
index 0000000000..841a988f09
--- /dev/null
+++ b/pychron/entry/tasks/project/project_manager.py
@@ -0,0 +1,109 @@
+# ===============================================================================
+# Copyright 2016 ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+
+# ============= standard library imports ========================
+from traits.api import List, Str, Dict, Button, Int, String, Event
+
+from pychron.core.fuzzyfinder import fuzzyfinder
+from pychron.envisage.browser.record_views import ProjectRecordView
+from pychron.loggable import Loggable
+
+
+class ProjectManager(Loggable):
+    oitems = List
+    items = List
+
+    filter_str = Str(enter_set=True, auto_set=False)
+    filter_attrs = Dict({'name': 'Name',
+                         'unique_id': 'UniqueID',
+                         'principal_investigator': 'Principal Investigator',
+                         'lab_contact': 'Lab Contact'})
+    filter_attr = Str
+
+    # add_button = Button
+    # ir = Str
+    # institution = Str
+    # comment = String
+    # pi = Str
+    # lab_contact = Str
+    # pis = List
+    # lab_contacts = List
+
+    scroll_to_row = Int
+    comment = String
+    selected = List
+    save_button = Button
+    refresh = Event
+
+    def activated(self):
+        with self.dvc.session_ctx(use_parent_session=False):
+            self.items = self.oitems = [ProjectRecordView(pr) for pr in self.dvc.get_projects()]
+
+            # self._filter()
+
+            # self.pis = self.dvc.get_principal_investigator_names()
+            # self.lab_contacts = self.dvc.get_usernames()
+
+    # def prepare_destroy(self):
+    #     self.dvc.close_session()
+
+    # private
+    # def _add(self):
+    #     self.dvc.add_ir(self.pi, self.lab_contact,
+    #                     ir=self.ir,
+    #                     comment=self.comment,
+    #                     institution=self.institution)
+    #
+    #     self.oitems = self.dvc.get_irs()
+    #     self._filter()
+    def _comment_changed(self, new):
+        if self.selected:
+            for i in self.selected:
+                i.comment = new
+                if new != i.db_comment:
+                    i.comment = new
+                    i.dirty = True
+                else:
+                    i.dirty = False
+            self.refresh = True
+
+    def _save_button_fired(self):
+        self.debug('Apply changes')
+        dvc = self.dvc
+        with dvc.session_ctx(use_parent_session=False):
+            for item in self.oitems:
+                if item.dirty:
+                    pr = dvc.get_project_by_id(item.unique_id)
+                    pr.comment = item.comment
+                    item.dirty = False
+
+    def _filter(self):
+        if self.filter_str:
+            self.items = fuzzyfinder(self.filter_str, self.oitems, self.filter_attr)
+        else:
+            self.items = self.oitems
+        self.scroll_to_row = len(self.items) - 1
+
+    def _filter_str_changed(self):
+        self._filter()
+
+    def _filter_attr_changed(self):
+        self._filter()
+
+        # def _add_button_fired(self):
+        #     self._add()
+
+# ============= EOF =============================================
diff --git a/pychron/entry/tasks/ir/task.py b/pychron/entry/tasks/project/task.py
similarity index 57%
rename from pychron/entry/tasks/ir/task.py
rename to pychron/entry/tasks/project/task.py
index 00423b9bf1..84407b8cba 100755
--- a/pychron/entry/tasks/ir/task.py
+++ b/pychron/entry/tasks/project/task.py
@@ -15,47 +15,27 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from pyface.tasks.action.task_action import TaskAction
 
 # ============= standard library imports ========================
 # ============= local library imports  ==========================
-from pychron.entry.tasks.ir.ir_database import IR
-from pychron.entry.tasks.ir.panes import IRPane
+from pychron.entry.tasks.project.panes import ProjectPane
+from pychron.entry.tasks.project.project_manager import ProjectManager
 from pychron.envisage.tasks.base_task import BaseManagerTask
 
 
-class LocateSampleAction(TaskAction):
-    name = 'Locate Sample'
-    method = 'locate_sample'
-
-
-class IRTask(BaseManagerTask):
-    name = 'IR Database'
-    id = 'pychron.entry.ir.task'
-
-    # tool_bars = [SToolBar()]
+class ProjectTask(BaseManagerTask):
+    name = 'Project Database'
+    id = 'pychron.entry.project.task'
 
     def activated(self):
         self.manager.activated()
 
-    def prepare_destroy(self):
-        self.manager.prepare_destroy()
-
     def create_central_pane(self):
-        return IRPane(model=self.manager)
-
-    # def create_dock_panes(self):
-    #     panes = [SamplePrepFilterPane(model=self.manager),
-    #              SamplePrepSessionPane(model=self.manager)]
-    #     return panes
+        return ProjectPane(model=self.manager)
 
     def _manager_default(self):
         dvc = self.application.get_service('pychron.dvc.dvc.DVC')
         dvc.connect()
-        return IR(application=self.application, dvc=dvc)
-
-    # def _default_layout_default(self):
-    #     return TaskLayout(left=VSplitter(PaneItem('pychron.entry.sample.session'),
-    #                                      PaneItem('pychron.entry.sample.filter')))
+        return ProjectManager(application=self.application, dvc=dvc)
 
 # ============= EOF =============================================
diff --git a/pychron/entry/tasks/sample/panes.py b/pychron/entry/tasks/sample/panes.py
index c2dbf9497d..16edc02470 100755
--- a/pychron/entry/tasks/sample/panes.py
+++ b/pychron/entry/tasks/sample/panes.py
@@ -21,9 +21,6 @@
 from traitsui.api import View, UItem, HGroup, VGroup, TabularEditor
 from traitsui.tabular_adapter import TabularAdapter
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-
 from pychron.core.ui.combobox_editor import ComboboxEditor
 from pychron.core.ui.custom_label_editor import CustomLabel
 from pychron.envisage.icon_button_editor import icon_button_editor
@@ -125,14 +122,17 @@ class SampleEditorPane(TraitsDockPane):
 '''
     def traits_view(self):
         pigrp = HGroup(UItem('principal_investigator',
-                             editor=ComboboxEditor(name='principal_investigators')),
+                             editor=ComboboxEditor(name='principal_investigators',
+                                                   use_filter=False)),
                        icon_button_editor('add_principal_investigator_button', 'add',
                                           enabled_when='principal_investigator',
                                           tooltip='Add a principal investigator'),
                        label='PrincipalInvestigator',
                        show_border=True)
 
-        prgrp = HGroup(UItem('project', editor=ComboboxEditor(name='projects')),
+        prgrp = HGroup(UItem('project', editor=ComboboxEditor(name='projects',
+                                                              use_filter=False)),
+                       UItem('generate_project_button', tooltip='Generate a default name for this project'),
                        icon_button_editor('add_project_button', 'add',
                                           enabled_when='project',
                                           tooltip='Add a project'),
@@ -140,18 +140,19 @@ def traits_view(self):
                        label='Project',
                        show_border=True)
 
-        mgrp = HGroup(UItem('material', editor=ComboboxEditor(name='materials')),
-                      UItem('grainsize', editor=ComboboxEditor(name='grainsizes')),
+        mgrp = HGroup(UItem('material', editor=ComboboxEditor(name='materials', use_filter=False)),
+                      UItem('grainsize', editor=ComboboxEditor(name='grainsizes', use_filter=False)),
                       icon_button_editor('add_material_button', 'add',
                                          enabled_when='material',
                                          tooltip='Add a material'),
                       label='Material',
                       show_border=True)
 
-        sgrp = HGroup(UItem('sample'),
+        sgrp = VGroup(HGroup(UItem('sample'),
                       icon_button_editor('add_sample_button', 'add',
                                          enabled_when='sample',
-                                         tooltip='Add a sample'),
+                                         tooltip='Add a sample')),
+                      VGroup(UItem('note', style='custom'), label='Note', show_border=True),
                       enabled_when='sample_enabled',
                       label='Sample',
                       show_border=True)
diff --git a/pychron/entry/tasks/sample/sample_edit_view.py b/pychron/entry/tasks/sample/sample_edit_view.py
index a301142255..380a7053eb 100755
--- a/pychron/entry/tasks/sample/sample_edit_view.py
+++ b/pychron/entry/tasks/sample/sample_edit_view.py
@@ -45,6 +45,7 @@ class SampleEditItem(HasTraits):
     material = Str
     grainsize = Str
     id = Long
+    note = Str
 
     _projects = List
     _materials = List
@@ -53,6 +54,7 @@ def __init__(self, rec, *args, **kw):
         super(SampleEditItem, self).__init__(*args, **kw)
         self.name = self._name = rec.name
         self.id = rec.id
+        self.note = self._note = rec.note or ''
 
         if rec.project:
             self.project = self._project = rec.project.pname
@@ -61,7 +63,8 @@ def __init__(self, rec, *args, **kw):
 
     @property
     def altered(self):
-        return self.name != self._name or self.project != self._project or self.material != self._material
+        attrs = 'name', 'project', 'material', 'note'
+        return any((getattr(self, attr) != getattr(self, '_{}'.format(attr)) for attr in attrs))
 
     @property
     def project_pi(self):
@@ -89,13 +92,14 @@ def save(self):
             if si.altered:
                 dbsam = db.get_sample_id(si.id)
                 dbsam.name = si.name
+                dbsam.note = si.note
 
                 dbproj = db.get_project(*extract_names(si.project))
                 if dbproj:
                     dbsam.projectID = dbproj.id
 
                 dbmat = db.get_material(*extract_names(si.material))
-                print dbmat, extract_names(si.material)
+                # print dbmat, extract_names(si.material)
                 if dbmat:
                     dbsam.materialID = dbmat.id
             db.commit()
@@ -114,21 +118,23 @@ def _sample_changed(self):
 class SampleEditView(Controller):
     dvc = Instance('pychron.dvc.dvc.DVC')
 
-    def closed( self, info, is_ok ):
+    def closed(self, info, is_ok):
         self.model.closed()
 
     def save(self, info):
         self.model.save()
 
     def traits_view(self):
-        vv = View(VGroup(Item('name'),
+        vv = View(VGroup(Item('name', label='Sample Name'),
                          Item('project', editor=EnumEditor(name='_projects')),
-                         Item('material', editor=EnumEditor(name='_materials'))))
+                         Item('material', editor=EnumEditor(name='_materials')),
+                         VGroup(UItem('note', style='custom'), show_border=True, label='Note')))
 
         cols = [ObjectColumn(name='id', editable=False, text_font='arial 10'),
                 ObjectColumn(name='name', editable=False, text_font='arial 10'),
                 ObjectColumn(name='project', editable=False, text_font='arial 10'),
-                ObjectColumn(name='material', editable=False, text_font='arial 10')]
+                ObjectColumn(name='material', editable=False, text_font='arial 10'),
+                ObjectColumn(name='note', editable=False, text_font='arial 10')]
 
         a = UItem('sample')
         b = UItem('samples', editor=TableEditor(columns=cols,
diff --git a/pychron/entry/tasks/sample/sample_entry.py b/pychron/entry/tasks/sample/sample_entry.py
index 4b9313f20b..ae56704f78 100755
--- a/pychron/entry/tasks/sample/sample_entry.py
+++ b/pychron/entry/tasks/sample/sample_entry.py
@@ -16,23 +16,22 @@
 
 # ============= enthought library imports =======================
 import os
+import re
 
 import yaml
 from traits.api import HasTraits, Str, Bool, Property, Event, cached_property, \
     Button, String, Instance, List
-# ============= standard library imports ========================
-import re
-# ============= local library imports  ==========================
+
 from pychron.dvc.dvc_irradiationable import DVCAble
 from pychron.paths import paths
 
-PI_REGEX = re.compile(r'^[A-Z]+\w+(,[A-Z]{1})*$')
+PI_REGEX = re.compile(r'^[A-Z]+\w+(, ?[A-Z]{1})*$')
 MATERIAL_REGEX = re.compile(r'^[A-Z]+[\w%/\+-_]+$')
 
 
 class PIStr(String):
     def validate(self, obj, name, value):
-        if not PI_REGEX.match(value) and name != 'NMGRL':
+        if not PI_REGEX.match(value) and value != 'NMGRL':
             return self.error(obj, name, value)
         else:
             return value
@@ -102,13 +101,16 @@ def fromdump(cls, d, ps):
 class SampleSpec(Spec):
     project = Instance(ProjectSpec)
     material = Instance(MaterialSpec)
+    note = Str
 
     def todump(self):
-        return {'name': str(self.name), 'project': self.project.todump(), 'material': self.material.todump()}
+        return {'name': str(self.name), 'project': self.project.todump(), 'material': self.material.todump(),
+                'note': self.note}
 
     @classmethod
     def fromdump(cls, d, pps, ms):
         obj = cls()
+        obj.note = d.get('note', '')
         obj.name = d['name']
         project = d['project']
         pname = project['name']
@@ -145,13 +147,14 @@ class SampleEntry(DVCAble):
     refresh_grainsizes = Event
 
     sample = Str
+    note = Str
 
     add_principal_investigator_button = Button
     add_project_button = Button
     add_sample_button = Button
     add_button = Button
     add_material_button = Button
-
+    generate_project_button = Button('Generate Name')
     project_enabled = Property(depends_on='principal_investigator')
     sample_enabled = Property(depends_on='principal_investigator, project, material')
 
@@ -161,15 +164,18 @@ class SampleEntry(DVCAble):
     _projects = List
     _materials = List
     _principal_investigators = List
+    _default_project_count = 0
 
     def activated(self):
         self.refresh_pis = True
         self.refresh_materials = True
         self.refresh_projects = True
         self.refresh_grainsizes = True
+        self.dvc.create_session()
 
     def prepare_destroy(self):
         self._backup()
+        self.dvc.close_session()
 
     def save(self):
         self._backup()
@@ -216,21 +222,41 @@ def _assemble(self):
     def _save(self):
         self.debug('saving sample info')
         dvc = self.dvc
-        for p in self._principal_investigators:
-            if dvc.add_principal_investigator(p.name):
-                p.added = True
+        with dvc.session_ctx(use_parent_session=False):
+            for p in self._principal_investigators:
+                if dvc.add_principal_investigator(p.name):
+                    p.added = True
+                    dvc.commit()
 
         for p in self._projects:
-            if dvc.add_project(p.name, p.principal_investigator.name):
-                p.added = True
+            with dvc.session_ctx(use_parent_session=False):
 
-        for m in self._materials:
-            if dvc.add_material(m.name, m.grainsize or None):
-                m.added = True
+                if p.name.startswith('?'):
+                    if dvc.add_project(p.name, p.principal_investigator.name):
+                        dbproject = dvc.get_project(p.name, p.principal_investigator.name)
+                        p.added = True
+                        dvc.commit()
 
-        for s in self._samples:
-            if dvc.add_sample(s.name, s.project.name, s.material.name, s.material.grainsize or None):
-                s.added = True
+                        dbproject.name = p.name = '{}{}'.format(p.name[1:-2], dbproject.id)
+                        dvc.commit()
+
+                else:
+                    if dvc.add_project(p.name, p.principal_investigator.name):
+                        p.added = True
+                        dvc.commit()
+
+        with dvc.session_ctx(use_parent_session=False):
+            for m in self._materials:
+                if dvc.add_material(m.name, m.grainsize or None):
+                    m.added = True
+                    dvc.commit()
+
+        with dvc.session_ctx(use_parent_session=False):
+            for s in self._samples:
+                if dvc.add_sample(s.name, s.project.name, s.material.name, s.material.grainsize or None,
+                                  note=s.note):
+                    s.added = True
+                    dvc.commit()
 
         self.refresh_table = True
 
@@ -324,6 +350,13 @@ def _add_principal_investigator_button_fired(self):
                 self._principal_investigators.append(PISpec(name=self.principal_investigator))
                 self._backup()
 
+    def _generate_project_button_fired(self):
+        piname = self.principal_investigator
+        if ',' in piname:
+            piname = piname.split(',')[0]
+        self.project = '?{}{:03n}'.format(piname, self._default_project_count)
+        self._default_project_count += 1
+
     @cached_property
     def _get_project_enabled(self):
         return bool(self.principal_investigator)
@@ -334,21 +367,25 @@ def _get_sample_enabled(self):
 
     @cached_property
     def _get_principal_investigators(self):
-        return self.dvc.get_principal_investigator_names()
+        with self.dvc.session_ctx():
+            return self.dvc.get_principal_investigator_names()
 
     @cached_property
     def _get_materials(self):
-        ms = self.dvc.get_material_names()
-        return ms
+        with self.dvc.session_ctx():
+            ms = self.dvc.get_material_names()
+            return ms
 
     @cached_property
     def _get_projects(self):
-        ps = self.dvc.get_project_names()
-        return ps
+        with self.dvc.session_ctx():
+            ps = self.dvc.get_project_names()
+            return ps
 
     @cached_property
     def _get_grainsizes(self):
-        gs = [''] + self.dvc.get_grainsizes()
-        return gs
+        with self.dvc.session_ctx():
+            gs = [''] + self.dvc.get_grainsizes()
+            return gs
 
 # ============= EOF =============================================
diff --git a/pychron/entry/tasks/sample/task.py b/pychron/entry/tasks/sample/task.py
index 8ee11dd14d..5b0dda8ab4 100755
--- a/pychron/entry/tasks/sample/task.py
+++ b/pychron/entry/tasks/sample/task.py
@@ -16,16 +16,15 @@
 
 # ============= enthought library imports =======================
 
+import os
+
 from pyface.tasks.action.schema import SToolBar
 from pyface.tasks.task_layout import TaskLayout, PaneItem
 
-# ============= standard library imports ========================
-import os
-# ============= local library imports  ==========================
-from pychron.entry.tasks.sample.sample_entry import SampleEntry
 from pychron.entry.tasks.sample.actions import DumpAction, LoadAction, RecoverAction
 from pychron.entry.tasks.sample.actions import SaveAction
 from pychron.entry.tasks.sample.panes import SampleEntryPane, SampleEditorPane
+from pychron.entry.tasks.sample.sample_entry import SampleEntry
 from pychron.envisage.tasks.base_task import BaseManagerTask
 from pychron.paths import paths
 
@@ -63,8 +62,8 @@ def recover(self):
             self.manager.load(p)
 
     def dump(self):
-        # p = self.save_file_dialog(default_directory=paths.sample_dir)
-        p = '/Users/ross/Sandbox/sample_entry.yaml'
+        p = self.save_file_dialog(default_directory=paths.sample_dir)
+        # p = '/Users/ross/Sandbox/sample_entry.yaml'
         if p:
             self.manager.dump(p)
 
diff --git a/pychron/envisage/browser/adapters.py b/pychron/envisage/browser/adapters.py
index 22775b97fe..29cebc9132 100755
--- a/pychron/envisage/browser/adapters.py
+++ b/pychron/envisage/browser/adapters.py
@@ -19,8 +19,7 @@
 from traits.api import Int, Property, Str
 from traitsui.menu import Action
 from traitsui.tabular_adapter import TabularAdapter
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.core.configurable_tabular_adapter import ConfigurableMixin
 from pychron.envisage.resources import icon
 
@@ -43,14 +42,20 @@ def get_menu(self, obj, trait, row, column):
         return MenuManager(Action(name='Unselect', action='unselect_projects'))
 
 
+class PrincipalInvestigatorAdapter(BrowserAdapter):
+    columns = [('Name', 'name')]
+
+
 class SampleAdapter(BrowserAdapter):
     columns = [('Sample', 'name'),
                ('Material', 'material'),
-               ('Project', 'project')]
+               ('Project', 'project'),
+               ]
 
     all_columns = [('Sample', 'name'),
                    ('Material', 'material'),
-                   ('Project', 'project')]
+                   ('Project', 'project'),
+                   ('Note', 'note')]
     #     material_text = Property
     odd_bg_color = 'lightgray'
 
@@ -161,7 +166,8 @@ def get_menu(self, obj, trait, row, column):
                    # Action(name='Replace', action='replace_items', enabled=e),
                    # Action(name='Append', action='append_items', enabled=e),
                    Action(name='Open', action='recall_items'),
-                   Action(name='Review Status Details', action='review_status_details')
+                   Action(name='Review Status Details', action='review_status_details'),
+                   Action(name='Toggle Freeze', action='toggle_freeze')
                    # Action(name='Open Copy', action='recall_copies'),
                    # Action(name='Find References', action='find_refs')
                    ]
@@ -171,11 +177,13 @@ def get_menu(self, obj, trait, row, column):
     def get_bg_color(self, obj, trait, row, column=0):
         color = 'white'
         item = getattr(obj, trait)[row]
-
-        if item.delta_time > 1440:  # 24 hours
-            color = '#76C1E2'
-        elif row % 2:
-            color = 'lightgray'
+        if item.frozen:
+            color = '#11BAF2'
+        else:
+            if item.delta_time > 1440:  # 24 hours
+                color = '#FAE900'
+            elif row % 2:
+                color = 'lightgray'
         return color
 
 
diff --git a/pychron/envisage/browser/analysis_table.py b/pychron/envisage/browser/analysis_table.py
index fc5f40a9d4..c2a404aa04 100755
--- a/pychron/envisage/browser/analysis_table.py
+++ b/pychron/envisage/browser/analysis_table.py
@@ -15,19 +15,19 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import List, Any, Str, Enum, Bool, Event, Property, cached_property, Instance, DelegatesTo, \
-    CStr, Int, Button
-# ============= standard library imports ========================
 import json
 import os
 from collections import OrderedDict
 from datetime import datetime
 from hashlib import md5
-# ============= local library imports  ==========================
+
+from traits.api import List, Any, Str, Enum, Bool, Event, Property, cached_property, Instance, DelegatesTo, \
+    CStr, Int, Button
+
 from pychron.column_sorter_mixin import ColumnSorterMixin
 from pychron.core.fuzzyfinder import fuzzyfinder
-from pychron.envisage.browser.adapters import AnalysisAdapter
 from pychron.core.ui.table_configurer import AnalysisTableConfigurer
+from pychron.envisage.browser.adapters import AnalysisAdapter
 from pychron.paths import paths
 
 
@@ -142,7 +142,13 @@ def set_analyses(self, ans, tc=None, page=None, reset_page=False, selected_ident
         else:
             aa = ans
 
-        self.oanalyses = self.analyses = sort_items(aa)
+        new_items = sort_items(aa)
+        items = [ai for ai in self.analyses if ai.frozen]
+
+        new_items = [ai for ai in new_items if ai not in items]
+        items.extend(new_items)
+
+        self.oanalyses = self.analyses = items
 
         self.calculate_dts(self.analyses)
 
@@ -169,8 +175,12 @@ def review_status_details(self):
         rsd = ReviewStatusDetailsView(model=m)
         rsd.edit_traits()
 
-    # handlers
+    def toggle_freeze(self):
+        for ai in self.get_selected_analyses():
+            ai.frozen = not ai.frozen
+        self.refresh_needed = True
 
+    # handlers
     def _add_analysis_set_button_fired(self):
         name = self.add_analysis_set()
         if name:
diff --git a/pychron/envisage/browser/base_browser_model.py b/pychron/envisage/browser/base_browser_model.py
index 84d763a5a8..eb9486f3e9 100755
--- a/pychron/envisage/browser/base_browser_model.py
+++ b/pychron/envisage/browser/base_browser_model.py
@@ -15,26 +15,27 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import cPickle as pickle
+import os
+import re
+from datetime import timedelta, datetime
+
 from traits.api import List, Str, Bool, Any, Enum, Button, \
     Int, Property, cached_property, DelegatesTo, Date, Instance, HasTraits, Event, Float
 from traits.trait_types import BaseStr
 from traitsui.tabular_adapter import TabularAdapter
-# ============= standard library imports ========================
-from datetime import timedelta, datetime
-import os
-import re
-import cPickle as pickle
-# ============= local library imports  ==========================
+
 from pychron.column_sorter_mixin import ColumnSorterMixin
 from pychron.core.codetools.inspection import caller
 from pychron.core.fuzzyfinder import fuzzyfinder
 from pychron.core.progress import progress_loader
+from pychron.core.ui.table_configurer import SampleTableConfigurer
 from pychron.envisage.browser.adapters import LabnumberAdapter
 from pychron.envisage.browser.date_selector import DateSelector
-from pychron.envisage.browser.record_views import ProjectRecordView, LabnumberRecordView
-from pychron.core.ui.table_configurer import SampleTableConfigurer
-from pychron.persistence_loggable import PersistenceLoggable
+from pychron.envisage.browser.record_views import ProjectRecordView, LabnumberRecordView, \
+    PrincipalInvestigatorRecordView
 from pychron.paths import paths
+from pychron.persistence_loggable import PersistenceLoggable
 
 
 class IdentifierStr(BaseStr):
@@ -94,8 +95,9 @@ def extract_mass_spectrometer_name(name):
 class BaseBrowserModel(PersistenceLoggable, ColumnSorterMixin):
     plot_selected = Event
 
-    principal_investigator = Str
+    selected_principal_investigators = Any
     principal_investigators = List
+    principal_investigator_names = List
 
     projects = List
     oprojects = List
@@ -107,7 +109,7 @@ class BaseBrowserModel(PersistenceLoggable, ColumnSorterMixin):
     include_recent = True
     project_enabled = Bool(True)
     repository_enabled = Bool(True)
-    principal_investigator_enabled = Bool(False)
+    principal_investigator_enabled = Bool(True)
 
     analysis_groups = List
 
@@ -118,7 +120,7 @@ class BaseBrowserModel(PersistenceLoggable, ColumnSorterMixin):
     date_configure_button = Button
 
     selected_projects = Any
-    selected_repositories = Any
+    # selected_repositories = Any
     selected_samples = List
     selected_analysis_groups = Any
 
@@ -175,6 +177,7 @@ class BaseBrowserModel(PersistenceLoggable, ColumnSorterMixin):
     use_fuzzy = True
     pattributes = ('project_enabled',
                    'repository_enabled',
+                   'principal_investigator_enabled',
                    'sample_view_active', 'use_low_post', 'use_high_post',
                    'use_named_date_range', 'named_date_range',
                    'low_post', 'high_post')
@@ -199,11 +202,11 @@ def load_browser_options(self):
     def load_browser_selection(self):
         obj = self._get_browser_persistence()
         if obj:
-            # self.debug('$$$$$$$$$$$$$$$$$$$$$ Loading browser selection')
+            self.debug('$$$$$$$$$$$$$$$$$$$$$ Loading browser selection')
             self._load_browser_selection(obj)
 
     def dump_browser_selection(self):
-        # self.debug('$$$$$$$$$$$$$$$$$$$$$ Dumping browser selection')
+        self.debug('$$$$$$$$$$$$$$$$$$$$$ Dumping browser selection')
 
         ps = []
         if self.selected_projects:
@@ -213,13 +216,18 @@ def dump_browser_selection(self):
         if self.selected_samples:
             ss = [p.identifier for p in self.selected_samples]
 
-        es = []
-        if self.selected_repositories:
-            es = [e.name for e in self.selected_repositories]
+        # es = []
+        # if self.selected_repositories:
+        #     es = [e.name for e in self.selected_repositories]
+
+        pis = []
+        if self.selected_principal_investigators:
+            pis = [p.name for p in self.selected_principal_investigators]
 
         obj = dict(projects=ps,
                    samples=ss,
-                   repositories=es,
+                   # repositories=es,
+                   principal_investigators=pis,
                    use_low_post=self.use_low_post,
                    use_high_post=self.use_high_post,
                    use_named_date_range=self.use_named_date_range,
@@ -257,7 +265,7 @@ def load_repositories(self):
         db = self.db
         es = db.get_repositories()
         if es:
-            es = [e.record_view for e in es]
+            es = sorted([e.record_view for e in es], key=lambda x: x.name)
 
             self.repositories = es
             self.orepositories = es
@@ -273,7 +281,8 @@ def load_principal_investigators(self):
         db = self.db
         ps = db.get_principal_investigators(order='asc', verbose_query=True)
         if ps:
-            self.principal_investigators = [p.name for p in ps]
+            self.principal_investigators = [PrincipalInvestigatorRecordView(p) for p in ps]
+            self.principal_investigator_names = [p.name for p in ps]
 
     def get_analysis_groups(self, names):
         if not isinstance(names[0], (str, unicode)):
@@ -310,17 +319,17 @@ def _load_repository_date_range(self, names):
         lp, hp = self.db.get_repository_date_range(names)
         if lp.date() == hp.date():
             hp += timedelta(days=1)
-        self._set_posts(lp, hp)
+        self._set_posts(lp, hp, enable=False)
 
     def _load_project_date_range(self, names):
         lp, hp = self.db.get_project_date_range(names)
         if lp.date() == hp.date():
             hp += timedelta(days=1)
-        self._set_posts(lp, hp)
+        self._set_posts(lp, hp, enable=False)
 
-    def _set_posts(self, lp, hp):
+    def _set_posts(self, lp, hp, enable=True):
         self.use_low_post, self.use_high_post = True, True
-        ol, oh = self.use_low_post, self.use_high_post
+        # ol, oh = self.use_low_post, self.use_high_post
         self.debug('set posts lp={} hp={}'.format(lp, hp))
         self.low_post, self.high_post = lp, hp
 
@@ -329,7 +338,8 @@ def _set_posts(self, lp, hp):
         self.trait_property_changed('high_post', None)
         self._suppress_post_update = False
 
-        self.use_low_post, self.use_high_post = ol, oh
+        self.use_low_post, self.use_high_post = enable, enable
+        # self.use_low_post, self.use_high_post = ol, oh
 
     def _load_associated_groups(self, names):
         """
@@ -375,8 +385,10 @@ def _retrieve_recent_labnumbers(self, recent_name):
         self.trait_property_changed('low_post', self._low_post)
         self._recent_mass_spectrometers.append(ms)
 
-        es = [e.name for e in self.selected_repositories] if self.selected_repositories else []
-        ls = db.get_labnumbers(repositories=es, mass_spectrometers=(ms,), low_post=lpost)
+        # es = [e.name for e in self.selected_repositories] if self.selected_repositories else []
+        ls = db.get_labnumbers(mass_spectrometers=(ms,),
+                               # repositories=es,
+                               low_post=lpost)
 
         sams = self._load_sample_record_views(ls)
 
@@ -476,17 +488,13 @@ def _make_project_records(self, ps, ms=None, include_recent=True, include_recent
 
         db = self.db
         if not ms:
-            ms = db.get_mass_spectrometers()
-            if ms:
-                ms = [mi.name for mi in ms]
-            else:
-                ms = []
+            ms = db.get_active_mass_spectrometer_names()
 
         recents = []
         if include_recent:
             recents = [ProjectRecordView('RECENT {}'.format(mi.upper())) for mi in ms]
 
-        pss = [ProjectRecordView(p) for p in ps]
+        pss = sorted([ProjectRecordView(p) for p in ps], key=lambda x: x.name)
 
         if include_recent:
             # move references project to after Recent
@@ -521,7 +529,11 @@ def _get_sample_filter_parameter(self):
     def _load_browser_selection(self, selection):
         def load(attr, values):
             def get(n):
-                return next((p for p in values if p.id == n), None)
+                try:
+                    return next((p for p in values if p.id == n), None)
+                except AttributeError, e:
+                    print e
+                    return
 
             try:
                 sel = selection[attr]
@@ -532,19 +544,22 @@ def get(n):
             vs = [pp for pp in vs if pp is not None]
             setattr(self, 'selected_{}'.format(attr), vs)
 
+        load('principal_investigators', self.principal_investigators)
         load('projects', self.projects)
-        load('experiments', self.repositories)
+        # load('experiments', self.repositories)
         load('samples', self.samples)
 
-    def _load_projects_for_principal_investigator(self):
+    def _load_projects_for_principal_investigators(self):
         ms = None
         if self.mass_spectrometers_enabled:
             ms = self.mass_spectrometer_includes
 
-        p_i = self.principal_investigator
-        self.debug('load projects for principal investigator= {}'.format(p_i))
+        pis = None
+        if self.principal_investigator_enabled and self.selected_principal_investigators:
+            pis = [p.name for p in self.selected_principal_investigators]
+            self.debug('load projects for principal investigator= {}'.format(pis))
         db = self.db
-        ps = db.get_projects(principal_investigator=p_i,
+        ps = db.get_projects(principal_investigators=pis,
                              mass_spectrometers=ms)
 
         ps = self._make_project_records(ps, include_recent_first=True,
@@ -569,11 +584,13 @@ def _load_analyses_for_group(self):
     def _selected_analysis_groups_changed(self):
         self._load_analyses_for_group()
 
-    def _principal_investigator_changed(self):
-        self._load_projects_for_principal_investigator()
+    def _selected_principal_investigators_changed(self, new):
+        if new and self.principal_investigator_enabled:
+            self._load_projects_for_principal_investigators()
+            self.dump_browser_selection()
 
     def _principal_investigator_enabled_changed(self):
-        self._load_projects_for_principal_investigator()
+        self._load_projects_for_principal_investigators()
 
     def _identifier_changed(self, new):
         db = self.db
@@ -601,12 +618,12 @@ def _get_identifiers(self, db, new):
     def _identifier_change_hook(self, db, new, lns):
         pass
 
-    def _selected_repositories_changed(self, old, new):
-        if new and self.repository_enabled:
-            names = [n.name for n in new]
-            self._load_repository_date_range(names)
-            self._load_associated_labnumbers()
-            self._selected_repositories_changed_hook(names)
+    # def _selected_repositories_changed(self, old, new):
+    #     if new and self.repository_enabled:
+    #         names = [n.name for n in new]
+    #         self._load_repository_date_range(names)
+    #         self._load_associated_labnumbers()
+    #         self._selected_repositories_changed_hook(names)
 
     def _selected_projects_changed(self, old, new):
 
diff --git a/pychron/envisage/browser/browser_model.py b/pychron/envisage/browser/browser_model.py
index e100c8220e..802297ea80 100755
--- a/pychron/envisage/browser/browser_model.py
+++ b/pychron/envisage/browser/browser_model.py
@@ -34,14 +34,11 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Str, Bool, Property, on_trait_change, Button, List
-# ============= standard library imports ========================
-from datetime import datetime, timedelta
 import re
+from datetime import datetime, timedelta
+
+from traits.api import Str, Bool, Property, on_trait_change, Button, List
 
-# ============= local library imports  ==========================
-# from pychron.processing.tasks.browser.browser_task import NCHARS
-# from pychron.database.records.isotope_record import GraphicalRecordView
 from pychron.core.codetools.inspection import caller
 from pychron.core.helpers.iterfuncs import partition
 from pychron.envisage.browser.base_browser_model import BaseBrowserModel, extract_mass_spectrometer_name
@@ -64,6 +61,7 @@ class BrowserModel(BaseBrowserModel):
     mass_spectrometer_visible = Property(depends_on='filter_focus')
     identifier_visible = Property(depends_on='filter_focus')
     project_visible = Property(depends_on='filter_focus')
+    principal_investigator_visible = Property(depends_on='filter_focus')
 
     filter_by_button = Button
     toggle_focus = Button
@@ -118,12 +116,12 @@ def select_project(self, name):
                 self.project_enabled = True
                 break
 
-    def select_repository(self, exp):
-        for e in self.repositories:
-            if e.name == exp:
-                self.selected_repositories = [e]
-                self.repository_enabled = True
-                break
+    # def select_repository(self, exp):
+    #     for e in self.repositories:
+    #         if e.name == exp:
+    #             self.selected_repositories = [e]
+    #             self.repository_enabled = True
+    #             break
 
     # handlers
     def _irradiation_enabled_changed(self, new):
@@ -223,12 +221,12 @@ def _get_manager(self):
             obj = self.manager
         return obj
 
-    def _selected_repositories_changed_hook(self, names):
-        self.irradiations = []
-        # get all irradiations contained within these experiments
-        irrads = self.db.get_irradiations_by_repositories(names)
-        if irrads:
-            self.irradiations = [i.name for i in irrads]
+    # def _selected_repositories_changed_hook(self, names):
+    #     self.irradiations = []
+    #     # get all irradiations contained within these experiments
+    #     irrads = self.db.get_irradiations_by_repositories(names)
+    #     if irrads:
+    #         self.irradiations = [i.name for i in irrads]
 
     # def _selected_projects_change_hook(self, names):
     #
@@ -253,13 +251,13 @@ def _retrieve_labnumbers(self):
             if self.mass_spectrometer_includes:
                 ms = self.mass_spectrometer_includes
 
-        principal_investigator = None
+        principal_investigators = None
         if self.principal_investigator_enabled:
-            principal_investigator = self.principal_investigator
+            principal_investigators = [p.name for p in self.selected_principal_investigators]
 
-        if self.repository_enabled:
-            if self.selected_repositories:
-                es = [e.name for e in self.selected_repositories]
+        # if self.repository_enabled:
+        #     if self.selected_repositories:
+        #         es = [e.name for e in self.selected_repositories]
         if self.project_enabled:
             if self.selected_projects:
                 rs, ps = partition([p.name for p in self.selected_projects], lambda x: x.startswith('RECENT'))
@@ -279,14 +277,18 @@ def _retrieve_labnumbers(self):
                             ms.append(mi)
                         self._recent_mass_spectrometers.append(mi)
 
-        ls = self.db.get_labnumbers(principal_investigator=principal_investigator,
-                                    projects=ps, repositories=es,
+        at = self.analysis_include_types if self.use_analysis_type_filtering else None
+        hp = self.high_post if self.use_high_post or self.use_named_date_range else None
+        lp = self.low_post if self.use_low_post or self.use_named_date_range else None
+        ls = self.db.get_labnumbers(principal_investigators=principal_investigators,
+                                    projects=ps,
+                                    # repositories=es,
                                     mass_spectrometers=ms,
                                     irradiation=self.irradiation if self.irradiation_enabled else None,
                                     level=self.level if self.irradiation_enabled else None,
-                                    analysis_types=self.analysis_include_types if self.use_analysis_type_filtering else None,
-                                    high_post=self.high_post if self.use_high_post else None,
-                                    low_post=self.low_post if self.use_low_post else None)
+                                    analysis_types=at,
+                                    high_post=hp,
+                                    low_post=lp)
         return ls
 
     def _identifier_change_hook(self, db, new, lns):
@@ -395,6 +397,9 @@ def _get_identifier_visible(self):
     def _get_project_visible(self):
         return self._get_visible(self.project_enabled)
 
+    def _get_principal_investigator_visible(self):
+        return self._get_visible(self.principal_investigator_enabled)
+
     def _get_visible(self, default):
         return True
 
diff --git a/pychron/envisage/browser/browser_task.py b/pychron/envisage/browser/browser_task.py
index eb5f2ce498..e7e6381322 100755
--- a/pychron/envisage/browser/browser_task.py
+++ b/pychron/envisage/browser/browser_task.py
@@ -85,7 +85,6 @@ def prepare_destroy(self):
         self.dvc.db.close_session()
 
     def activated(self):
-
         self.dvc = self.application.get_service('pychron.dvc.dvc.DVC')
         self.dvc.create_session()
 
@@ -156,6 +155,11 @@ def configure_recall(self):
             for e in self.get_recall_editors():
                 tc.set_fonts(e.analysis_view)
 
+    def configure_sample_table(self):
+        self.debug('configure sample table')
+        bm = self.browser_model
+        bm.configure_sample_table()
+
     def configure_analyses_table(self):
         self.debug('configure analyses table')
         at = self.browser_model.analysis_table
@@ -207,7 +211,7 @@ def extract_blob(blob):
     # private
     def _opened_hook(self):
         self.dvc.initialize()
-
+        self.dvc.create_session()
         if not self.browser_model.is_activated:
             self._setup_browser_model()
 
@@ -217,6 +221,8 @@ def _opened_hook(self):
             # self.browser_model.activated()
             # self._activate_sample_browser()
             # self.activate_workspace()
+    def _closed_hook(self):
+        self.dvc.close_session()
 
     def _find_refs(self, an):
         self.information_dialog('Finding references not currently implemented')
diff --git a/pychron/envisage/browser/record_views.py b/pychron/envisage/browser/record_views.py
index e5e621adf3..269de82416 100755
--- a/pychron/envisage/browser/record_views.py
+++ b/pychron/envisage/browser/record_views.py
@@ -15,9 +15,8 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import HasTraits, Str, Date, Long
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+from traits.api import HasTraits, Str, Date, Long, Bool
+
 from pychron.experiment.utilities.identifier import get_analysis_type
 
 
@@ -66,15 +65,19 @@ class SampleRecordView(RecordView):
     lithology = ''
     rock_type = ''
     identifier = ''
+    principal_investigator = ''
+    note = ''
 
     def _create(self, dbrecord):
         if dbrecord.material:
             self.material = dbrecord.material.name
         if dbrecord.project:
             self.project = dbrecord.project.name
+            if dbrecord.project.principal_investigator:
+                self.principal_investigator = dbrecord.project.principal_investigator.name
 
         for attr in ('name', 'lat', ('lon', 'long'),
-                     'elevation', 'lithology', 'location', 'igsn', 'rock_type'):
+                     'elevation', 'lithology', 'location', 'igsn', 'rock_type', 'note'):
             if isinstance(attr, tuple):
                 attr, dbattr = attr
             else:
@@ -184,12 +187,23 @@ def id(self):
 class ProjectRecordView(RecordView, NameView):
     name = Str
     principal_investigator = Str
+    lab_contact = Str
+    checkin_date = Date
+    unique_id = Long
+
+    comment = Str
+    db_comment = Str
+    dirty = Bool(False)
 
     def _create(self, dbrecord):
         if not isinstance(dbrecord, str):
             self.name = dbrecord.name
             if dbrecord.principal_investigator:
                 self.principal_investigator = dbrecord.principal_investigator.name
+            self.unique_id = dbrecord.id
+
+            # self.db_comment = self.comment = dbrecord.comment
+
         else:
             self.name = dbrecord
 
@@ -198,7 +212,6 @@ class RepositoryRecordView(NameView):
     principal_investigator = Str
 
 
-
 class AnalysisGroupRecordView(RecordView):
     name = Str
     create_date = Date
@@ -217,7 +230,7 @@ def _create(self, dbrecord):
             setattr(self, attr, getattr(dbrecord, attr))
 
 
-class PrincipalInvestigatorRecordView(RecordView):
+class PrincipalInvestigatorRecordView(RecordView, NameView):
     name = ''
     email = ''
     affiliation = ''
diff --git a/pychron/envisage/browser/sample_browser_model.py b/pychron/envisage/browser/sample_browser_model.py
index 118b140d17..042ef3686d 100755
--- a/pychron/envisage/browser/sample_browser_model.py
+++ b/pychron/envisage/browser/sample_browser_model.py
@@ -15,18 +15,15 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import re
+
 from apptools.preferences.preference_binding import bind_preference
 from traits.api import Button, Instance
-# ============= standard library imports ========================
-import re
-# ============= local library imports  ==========================
-# from pychron.processing.tasks.browser.browser_task import NCHARS
-# from pychron.database.records.isotope_record import GraphicalRecordView
+
 from pychron.dvc.func import get_review_status
+from pychron.envisage.browser.analysis_table import AnalysisTable
 from pychron.envisage.browser.browser_model import BrowserModel
 from pychron.envisage.browser.find_references_config import FindReferencesConfigModel, FindReferencesConfigView
-from pychron.envisage.browser.analysis_table import AnalysisTable
-# from pychron.processing.tasks.browser.time_view import TimeViewModel
 from pychron.envisage.browser.time_view import TimeViewModel
 from pychron.envisage.browser.util import get_pad
 
@@ -213,7 +210,8 @@ def _selected_samples_changed_hook(self, new):
                       include_invalid=not at.omit_invalid,
                       mass_spectrometers=self._recent_mass_spectrometers,
                       exclude_uuids=uuids,
-                      repositories=[e.name for e in self.selected_repositories] if self.selected_repositories else None)
+                      # repositories=[e.name for e in self.selected_repositories] if self.selected_repositories else None
+                      )
 
             lp, hp = self.low_post, self.high_post
             ans = self._retrieve_sample_analyses(new,
diff --git a/pychron/envisage/browser/sample_view.py b/pychron/envisage/browser/sample_view.py
index d210dc13d5..5344b054da 100755
--- a/pychron/envisage/browser/sample_view.py
+++ b/pychron/envisage/browser/sample_view.py
@@ -15,21 +15,49 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+from traits.api import Button
 from traitsui.api import View, UItem, VGroup, EnumEditor, \
-    HGroup, CheckListEditor, spring, Group
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+    HGroup, CheckListEditor, spring, Group, HSplit
+
 from pychron.core.ui.combobox_editor import ComboboxEditor
 from pychron.core.ui.qt.tabular_editors import FilterTabularEditor
 from pychron.core.ui.tabular_editor import myTabularEditor
-from pychron.envisage.browser.adapters import ProjectAdapter
-from pychron.envisage.icon_button_editor import icon_button_editor
+from pychron.envisage.browser.adapters import ProjectAdapter, PrincipalInvestigatorAdapter
 from pychron.envisage.browser.pane_model_view import PaneModelView
+from pychron.envisage.icon_button_editor import icon_button_editor
 
 
 # from pychron.envisage.browser.tableview import TableView
 
 class BaseBrowserSampleView(PaneModelView):
+    configure_date_filter_button = Button
+    configure_analysis_type_filter_button = Button
+    configure_mass_spectrometer_filter_button = Button
+
+    def _configure_date_filter_button_fired(self):
+        v = View(self._get_date_group(), resizable=True,
+                 height=150,
+                 kind='livemodal',
+                 buttons=['OK', 'Cancel'],
+                 title='Configure Date Filter')
+        self.edit_traits(view=v)
+
+    def _configure_analysis_type_filter_button_fired(self):
+        v = View(self._get_analysis_type_group(), resizable=True,
+                 height=150,
+                 kind='livemodal',
+                 buttons=['OK', 'Cancel'],
+                 title='Configure Analysis Type Filter')
+        self.edit_traits(view=v)
+
+    def _configure_mass_spectrometer_filter_button_fired(self):
+        v = View(self._get_mass_spectrometer_group(), resizable=True,
+                 height=150,
+                 kind='livemodal',
+                 buttons=['OK', 'Cancel'],
+                 title='Configure Mass Spectrometer Filter')
+        self.edit_traits(view=v)
+
     def _get_irrad_group(self):
         irrad_grp = VGroup(
             HGroup(UItem('irradiation_enabled',
@@ -61,21 +89,44 @@ def _get_project_group(self):
                             label='Projects')
         return project_grp
 
-    def _get_repositories_group(self):
-        exp_grp = Group(UItem('repositories',
-                              height=-150,
-                              editor=FilterTabularEditor(editable=False,
-                                                         use_fuzzy=True,
-                                                         enabled_cb='repository_enabled',
-                                                         refresh='refresh_needed',
-                                                         selected='selected_repositories',
-                                                         adapter=ProjectAdapter(),
-                                                         multi_select=True)),
-                        springy=False,
-                        visible_when='repository_visible',
-                        show_border=True,
-                        label='Repositories')
-        return exp_grp
+    # def _get_repositories_group(self):
+    #     exp_grp = Group(UItem('repositories',
+    #                           height=-150,
+    #                           editor=FilterTabularEditor(editable=False,
+    #                                                      use_fuzzy=True,
+    #                                                      enabled_cb='repository_enabled',
+    #                                                      refresh='refresh_needed',
+    #                                                      selected='selected_repositories',
+    #                                                      adapter=ProjectAdapter(),
+    #                                                      multi_select=True)),
+    #                     springy=False,
+    #                     visible_when='repository_visible',
+    #                     show_border=True,
+    #                     label='Repositories')
+    #     return exp_grp
+    def _get_simple_analysis_type_group(self):
+        grp = HGroup(UItem('use_analysis_type_filtering',
+                           tooltip='Enable Analysis Type filter'),
+                     icon_button_editor('controller.configure_analysis_type_filter_button',
+                                        'cog',
+                                        tooltip='Configure analysis type filtering',
+                                        enabled_when='use_analysis_type_filtering'),
+                     show_border=True, label='Analysis Types')
+        return grp
+
+    def _get_simple_date_group(self):
+        grp = HGroup(icon_button_editor('controller.configure_date_filter_button', 'cog',
+                                        tooltip='Configure date filtering'), show_border=True,
+                     label='Date')
+        return grp
+
+    def _get_simple_mass_spectrometer_group(self):
+        grp = HGroup(UItem('mass_spectrometers_enabled',
+                           tooltip='Enable Mass Spectrometer filter'),
+                     icon_button_editor('controller.configure_mass_spectrometer_filter_button', 'cog',
+                                        tooltip='Configure mass_spectrometer filtering'), show_border=True,
+                     label='Mass Spectrometer')
+        return grp
 
     def _get_analysis_type_group(self):
         analysis_type_group = HGroup(
@@ -127,21 +178,33 @@ def _get_identifier_group(self):
         return ln_grp
 
     def _get_pi_group(self):
-        pi_grp = HGroup(UItem('principal_investigator_enabled'),
-                        UItem('principal_investigator',
-                              enabled_when='principal_investigator_enabled',
-                              editor=ComboboxEditor(name='principal_investigators')),
-                        label='PIs', show_border=True)
-
+        pi_grp = Group(UItem('principal_investigators',
+                             height=-150,
+                             editor=FilterTabularEditor(editable=False,
+                                                        use_fuzzy=True,
+                                                        enabled_cb='principal_investigator_enabled',
+                                                        refresh='refresh_needed',
+                                                        selected='selected_principal_investigators',
+                                                        adapter=PrincipalInvestigatorAdapter(),
+                                                        multi_select=True)),
+                       springy=False,
+                       visible_when='principal_investigator_visible',
+                       show_border=True,
+                       label='PI')
         return pi_grp
 
     def _get_sample_group(self):
         irrad_grp = self._get_irrad_group()
         project_grp = self._get_project_group()
-        exp_grp = self._get_repositories_group()
-        analysis_type_group = self._get_analysis_type_group()
-        date_grp = self._get_date_group()
-        ms_grp = self._get_mass_spectrometer_group()
+
+        # analysis_type_group = self._get_analysis_type_group()
+        # date_grp = self._get_date_group()
+        # ms_grp = self._get_mass_spectrometer_group()
+
+        simple_analysis_type_grp = self._get_simple_analysis_type_group()
+        simple_date_grp = self._get_simple_date_group()
+        simple_mass_spectrometer_grp = self._get_simple_mass_spectrometer_group()
+
         ln_grp = self._get_identifier_group()
         pi_grp = self._get_pi_group()
 
@@ -150,12 +213,10 @@ def _get_sample_group(self):
             #             style='custom',
             #             width=-1.0,
             #             visible_when='not filter_focus'),
-            HGroup(pi_grp, ms_grp, ln_grp),
-            HGroup(project_grp, exp_grp, irrad_grp),
-            analysis_type_group,
-            date_grp)
-
-        # g1 = UItem('controller.tableview', style='custom')
+            HGroup(simple_mass_spectrometer_grp, simple_analysis_type_grp, simple_date_grp, ln_grp),
+            HGroup(pi_grp, project_grp, irrad_grp))
+        # analysis_type_group,
+        # date_grp)
 
         sample_tools = HGroup(UItem('sample_filter_parameter',
                                     width=-90, editor=EnumEditor(name='sample_filter_parameters')),
@@ -183,20 +244,14 @@ def _get_sample_group(self):
 
 
 class BrowserSampleView(BaseBrowserSampleView):
-    # tableview = Instance(TableView)
-
-    # def _tableview_default(self):
-    #     return TableView(model=self.model, pane=self.pane)
     def trait_context(self):
         ctx = super(BrowserSampleView, self).trait_context()
         ctx['analysis_table'] = self.model.analysis_table
         return ctx
 
     def traits_view(self):
-        # def make_name(name):
-        #     return 'object.analysis_table.{}'.format(name)
-
         analysis_tools = VGroup(HGroup(UItem('analysis_table.analysis_set',
+                                             width=-90,
                                              editor=EnumEditor(name='analysis_table.analysis_set_names')),
                                        icon_button_editor('analysis_table.add_analysis_set_button', 'add',
                                                           enabled_when='analysis_table.items',
@@ -208,30 +263,26 @@ def traits_view(self):
                                              width=-90,
                                              editor=EnumEditor(name='analysis_table.analysis_filter_parameters')),
                                        UItem('analysis_table.analysis_filter')))
-        # UItem(make_name('analysis_filter'),
-        #       editor=ComboboxEditor(name=make_name('analysis_filter_values'))))
-
-        agrp = VGroup(analysis_tools,
-                      UItem('analysis_table.analyses',
-                            width=0.4,
-                            editor=myTabularEditor(
-                                adapter=self.model.analysis_table.tabular_adapter,
-                                operations=['move', 'delete'],
-                                column_clicked='analysis_table.column_clicked',
-                                refresh='analysis_table.refresh_needed',
-                                selected='analysis_table.selected',
-                                dclicked='analysis_table.dclicked',
-                                multi_select=self.pane.multi_select,
-                                drag_external=True,
-                                scroll_to_row='analysis_table.scroll_to_row',
-                                stretch_last_section=False)),
-                      # HGroup(spring, Item(make_name('omit_invalid'))),
-                      defined_when=self.pane.analyses_defined,
-                      show_border=True,
-                      label='Analyses')
+        agrp = Group(VGroup(analysis_tools,
+                            UItem('analysis_table.analyses',
+                                  width=0.4,
+                                  editor=myTabularEditor(
+                                      adapter=self.model.analysis_table.tabular_adapter,
+                                      operations=['move', 'delete'],
+                                      column_clicked='analysis_table.column_clicked',
+                                      refresh='analysis_table.refresh_needed',
+                                      selected='analysis_table.selected',
+                                      dclicked='analysis_table.dclicked',
+                                      multi_select=self.pane.multi_select,
+                                      drag_external=True,
+                                      scroll_to_row='analysis_table.scroll_to_row',
+                                      stretch_last_section=False)),
+                            defined_when=self.pane.analyses_defined,
+                            show_border=True,
+                            label='Analyses'))
 
         sample_grp = self._get_sample_group()
-        return View(HGroup(sample_grp, agrp))
+        return View(HSplit(sample_grp, agrp))
 
     def unselect_projects(self, info, obj):
         obj.selected_projects = []
@@ -240,11 +291,9 @@ def unselect_analyses(self, info, obj):
         obj.selected = []
 
     def configure_sample_table(self, info, obj):
-        print 'asfdasdfsadf', obj
         obj.configure_sample_table()
 
     def configure_analysis_table(self, info, obj):
-        # self.model.analysis_table.configure_table()
         obj.configure_table()
 
     def recall_items(self, info, obj):
@@ -253,6 +302,9 @@ def recall_items(self, info, obj):
     def review_status_details(self, info, obj):
         obj.review_status_details()
 
+    def toggle_freeze(self, info, obj):
+        obj.toggle_freeze()
+
 
 class BrowserInterpretedAgeView(BaseBrowserSampleView):
     def trait_context(self):
diff --git a/pychron/envisage/browser/view.py b/pychron/envisage/browser/view.py
index 6393b4768f..e3a24b5948 100755
--- a/pychron/envisage/browser/view.py
+++ b/pychron/envisage/browser/view.py
@@ -18,8 +18,7 @@
 from traits.api import HasTraits, Str, Instance, Button
 from traitsui.api import View, UItem, HGroup, VGroup, Group, spring
 from traitsui.handler import Handler
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.core.ui.custom_label_editor import CustomLabel
 from pychron.envisage.browser.adapters import BrowserAdapter
 from pychron.envisage.browser.sample_view import BrowserSampleView, BrowserInterpretedAgeView
@@ -104,7 +103,8 @@ def traits_view(self):
                                          'arrow_switch',
                                          tooltip='Toggle between Sample and Time views'),
                       spring,
-                      CustomLabel('datasource_url', color='maroon'))
+                      CustomLabel('datasource_url', color='maroon'),
+                      show_border=True)
 
         v = View(VGroup(hgrp, main_grp),
                  buttons=['OK', 'Cancel'],
@@ -121,20 +121,21 @@ def traits_view(self):
         hgrp = HGroup(icon_button_editor('filter_by_button',
                                          'find',
                                          tooltip='Filter analyses using defined criteria'),
-                      icon_button_editor('load_view_button',
-                                         'table',
-                                         tooltip='Select analyses by load'),
+                      # icon_button_editor('load_view_button',
+                      #                    'table',
+                      #                    tooltip='Select analyses by load'),
                       # icon_button_editor('graphical_filter_button',
                       #                    'chart_curve_go',
                       #                    tooltip='Filter analyses graphically'),
                       icon_button_editor('find_references_button',
-                                         '',
+                                         '3d_glasses',
                                          tooltip='Find references associated with current selection'),
                       icon_button_editor('toggle_view',
                                          'arrow_switch',
                                          tooltip='Toggle between Sample and Time views'),
                       spring,
-                      CustomLabel('datasource_url', color='maroon'))
+                      CustomLabel('datasource_url', color='maroon'),
+                      show_border=True)
 
         v = View(VGroup(hgrp, main_grp))
 
diff --git a/pychron/envisage/tasks/base_task.py b/pychron/envisage/tasks/base_task.py
index 4c13c7fd00..21e3ea8132 100755
--- a/pychron/envisage/tasks/base_task.py
+++ b/pychron/envisage/tasks/base_task.py
@@ -15,6 +15,9 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+from itertools import groupby
+
 from envisage.ui.tasks.action.task_window_launch_group import TaskWindowLaunchAction
 from pyface.action.api import ActionItem, Group
 from pyface.confirmation_dialog import ConfirmationDialog
@@ -26,10 +29,7 @@
 from pyface.tasks.task_layout import TaskLayout
 from pyface.timer.do_later import do_later, do_after
 from traits.api import Any, on_trait_change, List, Unicode, Instance
-# ============= standard library imports ========================
-import os
-from itertools import groupby
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.filetools import add_extension, view_file
 from pychron.core.ui.gui import invoke_in_main_thread
 from pychron.envisage.preference_mixin import PreferenceMixin
@@ -139,10 +139,8 @@ def _activate_task(self, tid):
         if self.window:
             for task in self.window.tasks:
                 if task.id == tid:
-                    print 'found task'
                     break
             else:
-                print 'add task'
                 task = self.application.create_task(tid)
                 self.window.add_task(task)
 
@@ -327,6 +325,13 @@ def _on_open(self, event):
     def _opened_hook(self):
         pass
 
+    @on_trait_change('window:closed')
+    def _on_closed(self, event):
+        self._closed_hook()
+
+    def _closed_hook(self):
+        pass
+
     @on_trait_change('window:closing')
     def _on_close(self, event):
         """ Prompt the user to save when exiting.
diff --git a/pychron/experiment/automated_run/factory.py b/pychron/experiment/automated_run/factory.py
index 4b11f49389..bdad79aca7 100755
--- a/pychron/experiment/automated_run/factory.py
+++ b/pychron/experiment/automated_run/factory.py
@@ -15,135 +15,42 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+import pickle
+
+import yaml
 from apptools.preferences.preference_binding import bind_preference
 from traits.api import String, Str, Property, Any, Float, Instance, Int, List, \
     cached_property, on_trait_change, Bool, Button, Event, Enum, Dict
 from traits.trait_errors import TraitError
-# ============= standard library imports ========================
-import pickle
-import yaml
-import os
 from uncertainties import nominal_value, std_dev
-# ============= local library imports  ==========================
 
+from pychron.core.helpers.filetools import list_directory, add_extension, remove_extension
 from pychron.core.helpers.iterfuncs import partition
 from pychron.core.helpers.strtools import camel_case
+from pychron.core.ui.gui import invoke_in_main_thread
 from pychron.dvc.dvc_irradiationable import DVCAble
 from pychron.entry.entry_views.repository_entry import RepositoryIdentifierEntry
 from pychron.envisage.view_util import open_view
+from pychron.experiment.automated_run.factory_util import UpdateSelectedCTX, EKlass, increment_value, \
+    increment_position, generate_positions, get_run_blocks, remove_file_extension
+from pychron.experiment.automated_run.factory_view import FactoryView
+from pychron.experiment.automated_run.spec import AutomatedRunSpec
 from pychron.experiment.conditional.conditionals_edit_view import edit_conditionals
 from pychron.experiment.datahub import Datahub
+from pychron.experiment.queue.increment_heat_template import LaserIncrementalHeatTemplate, BaseIncrementalHeatTemplate
 from pychron.experiment.queue.run_block import RunBlock
+from pychron.experiment.script.script import Script, ScriptOptions
 from pychron.experiment.utilities.frequency_edit_view import FrequencyModel
-from pychron.persistence_loggable import PersistenceLoggable
-from pychron.experiment.utilities.position_regex import SLICE_REGEX, PSLICE_REGEX, \
-    SSLICE_REGEX, TRANSECT_REGEX, POSITION_REGEX, CSLICE_REGEX, XY_REGEX
-from pychron.pychron_constants import NULL_STR, SCRIPT_KEYS, SCRIPT_NAMES, LINE_STR
-from pychron.experiment.automated_run.factory_view import FactoryView
+from pychron.experiment.utilities.human_error_checker import HumanErrorChecker
 from pychron.experiment.utilities.identifier import convert_special_name, ANALYSIS_MAPPING, NON_EXTRACTABLE, \
     make_special_identifier, make_standard_identifier, SPECIAL_KEYS
-from pychron.experiment.automated_run.spec import AutomatedRunSpec
-from pychron.paths import paths
-from pychron.experiment.script.script import Script, ScriptOptions
-from pychron.experiment.queue.increment_heat_template import LaserIncrementalHeatTemplate, BaseIncrementalHeatTemplate
-from pychron.experiment.utilities.human_error_checker import HumanErrorChecker
-from pychron.core.helpers.filetools import list_directory, add_extension, list_directory2, remove_extension
+from pychron.experiment.utilities.position_regex import SLICE_REGEX, PSLICE_REGEX, \
+    SSLICE_REGEX, TRANSECT_REGEX, POSITION_REGEX, XY_REGEX
 from pychron.lasers.pattern.pattern_maker_view import PatternMakerView
-from pychron.core.ui.gui import invoke_in_main_thread
-
-
-class EditEvent(Event):
-    pass
-
-
-class UpdateSelectedCTX(object):
-    _factory = None
-
-    def __init__(self, factory):
-        self._factory = factory
-
-    def __enter__(self):
-        self._factory.set_labnumber = False
-        self._factory.set_position = False
-
-    def __exit__(self, exc_type, exc_val, exc_tb):
-        self._factory.set_labnumber = True
-        self._factory.set_position = True
-
-
-def EKlass(klass):
-    return klass(enter_set=True, auto_set=False)
-
-
-def increment_value(m, increment=1):
-    s = ','
-    if s not in m:
-        m = (m,)
-        s = ''
-    else:
-        m = m.split(s)
-
-    ms = []
-    for mi in m:
-        try:
-            ms.append(str(int(mi) + increment))
-        except ValueError:
-            return s.join(m)
-
-    return s.join(ms)
-
-
-def increment_position(pos):
-    for regex, sfunc, ifunc, _ in (SLICE_REGEX, SSLICE_REGEX,
-                                   PSLICE_REGEX, CSLICE_REGEX, TRANSECT_REGEX):
-        if regex.match(pos):
-            return ifunc(pos)
-    else:
-        m = map(int, pos.split(','))
-        ms = []
-        offset = max(m) - min(m)
-        inc = 1
-        for i, mi in enumerate(m):
-            try:
-                inc = m[i + 1] - mi
-            except IndexError:
-                pass
-            ms.append(mi + offset + inc)
-        return ','.join(map(str, ms))
-
-
-def generate_positions(pos):
-    for regex, func, ifunc, _ in (SLICE_REGEX, SSLICE_REGEX,
-                                  PSLICE_REGEX, CSLICE_REGEX, TRANSECT_REGEX):
-        if regex.match(pos):
-            return func(pos)
-    else:
-        return [pos]
-
-
-def get_run_blocks():
-    p = paths.run_block_dir
-    blocks = list_directory2(p, '.txt', remove_extension=True)
-    return ['RunBlock', LINE_STR] + blocks
-
-
-def get_comment_templates():
-    p = paths.comment_templates
-    templates = list_directory(p)
-    return templates
-
-
-def remove_file_extension(name, ext='.py'):
-    if not name:
-        return name
-
-    if name is NULL_STR:
-        return NULL_STR
-
-    if name.endswith('.py'):
-        name = name[:-3]
-
-    return name
+from pychron.paths import paths
+from pychron.persistence_loggable import PersistenceLoggable
+from pychron.pychron_constants import NULL_STR, SCRIPT_KEYS, SCRIPT_NAMES, LINE_STR
 
 
 class AutomatedRunFactory(DVCAble, PersistenceLoggable):
@@ -188,7 +95,6 @@ class AutomatedRunFactory(DVCAble, PersistenceLoggable):
     repository_identifier_dirty = Event
     set_repository_identifier_button = Event
 
-
     selected_irradiation = Str('Irradiation')
     irradiations = Property(depends_on='db, db_refresh_needed')
     selected_level = Str('Level')
@@ -224,10 +130,6 @@ class AutomatedRunFactory(DVCAble, PersistenceLoggable):
     # ===========================================================================
     # extract
     # ===========================================================================
-    # extract_value = Property(
-    # EKlass(Float),
-    # depends_on='_extract_value')
-    # _extract_value = Float
     extract_value = EKlass(Float)
     extract_units = Str(NULL_STR)
     extract_units_names = List(['', 'watts', 'temp', 'percent'])
@@ -354,27 +256,16 @@ def __init__(self, *args, **kw):
     def setup_files(self):
         self.load_templates()
         self.load_run_blocks()
-        # self.remote_patterns = self._get_patterns()
         self.load_patterns()
         self.load_conditionals()
-        # self.load_comment_templates()
 
     def activate(self, load_persistence):
-
-        # self.load_run_blocks()
         self.conditionals_path = NULL_STR
         if load_persistence:
             self.load()
 
         self.setup_files()
 
-        # db = self.db
-        # with db.session_ctx():
-        # ms = db.get_mass_spectrometer(self.mass_spectrometer)
-        # ed = db.get_extraction_device(self.extract_device)
-        #     self._mass_spectrometers = ms
-        #     self._extract_devices = ed
-
     def deactivate(self):
         self.dump(verbose=True)
 
@@ -400,9 +291,6 @@ def check_run_addition(self, runs, load_name):
 
         return True
 
-    # def load_comment_templates(self):
-    # self.comment_templates = self._get_comment_templates()
-
     def load_run_blocks(self):
         self.run_blocks = get_run_blocks()
 
@@ -453,9 +341,7 @@ def set_selected_runs(self, runs):
     def set_mass_spectrometer(self, new):
         new = new.lower()
         self.mass_spectrometer = new
-        # print SCRIPT_NAMES
         for s in self._iter_scripts():
-            # print s.kind, s, new
             s.mass_spectrometer = new
             s.refresh_lists = True
 
@@ -503,7 +389,6 @@ def refresh(self):
     def _auto_save(self):
         self.auto_save_needed = True
 
-    # def _new_runs(self, positions, extract_group_cnt=0):
     def _new_run_block(self):
         p = os.path.join(paths.run_block_dir, add_extension(self.run_block, '.txt'))
         block = RunBlock(extract_device=self.extract_device,
@@ -528,9 +413,7 @@ def _new_runs(self, exp_queue, positions):
     def _new_runs_by_position(self, exp_queue, pos, template=False):
         arvs = []
         positions = generate_positions(pos)
-        # print positions, 'fff'
         for i, p in enumerate(positions):
-            # if set_pos:
             p = str(p)
             if template:
                 arvs.extend(self._render_template(exp_queue, p, i))
@@ -662,9 +545,6 @@ def _clone_run(self, run, excludes=None, set_labnumber=True, set_position=True):
             except TraitError, e:
                 self.debug(e)
 
-                # if run.user_defined_aliquot:
-                # self.aliquot = int(run.aliquot)
-
         for si in SCRIPT_KEYS:
             skey = '{}_script'.format(si)
             if skey in excludes or si in excludes:
@@ -672,13 +552,8 @@ def _clone_run(self, run, excludes=None, set_labnumber=True, set_position=True):
 
             ms = getattr(self, skey)
             sname = getattr(run, skey)
-            # print sname
             ms.name = sname
-            # ss = self._script_factory(label=si, name=s)
-            # setattr(self, name, ss)
-            # setattr(self, name, Script(name=s,
-            # label=si,
-            #                            mass_spectrometer=self.mass_spectrometer))
+
         self.script_options.name = run.script_options
 
     def _new_pattern(self):
@@ -945,7 +820,6 @@ def _load_labnumber_meta(self, labnumber):
         if self.suppress_meta:
             return True
 
-        # self._aliquot = 0
         if labnumber in self._meta_cache:
             self.debug('using cached meta values for {}'.format(labnumber))
             d = self._meta_cache[labnumber]
@@ -964,58 +838,57 @@ def _load_labnumber_meta(self, labnumber):
             db = self.get_database()
             # convert labnumber (a, bg, or 10034 etc)
             self.debug('load meta for {}'.format(labnumber))
-            ip = db.get_identifier(labnumber)
-
-            if ip:
-                pos = ip.position
-                # set sample and irrad info
-                try:
-                    self.sample = ip.sample.name
-                    d['sample'] = self.sample
-
-                    project = ip.sample.project
-                    project_name = project.name
-                    if project_name == 'J-Curve':
-                        irrad = ip.level.irradiation.name
-                        self.repository_identifier = 'Irradiation-{}'.format(irrad)
-                    elif project_name != 'REFERENCES':
-                        repo = camel_case(project_name)
-                        self.repository_identifier = repo
-                        if not db.get_repository(repo):
-                            self.repository_identifier = ''
-                            if self.confirmation_dialog('Repository Identifier "{}" does not exist. Would you '
-                                                        'like to add it?'):
-                                # this will set self.repository_identifier
-                                self._add_repository_identifier_fired()
-
-                except AttributeError, e:
-                    print e
-
-                d['repository_identifier'] = self.repository_identifier
-
-                self._make_irrad_level(ip)
-                d['irradiation'] = self.selected_irradiation
-                d['irradiation_position'] = pos
-                d['irradiation_level'] = self.selected_level
-
-                d['display_irradiation'] = self.display_irradiation
-                if self.auto_fill_comment:
-                    self._set_auto_comment()
-                d['comment'] = self.comment
-                self._meta_cache[labnumber] = d
-                return True
-            else:
-                self.warning_dialog('{} does not exist.\n\n'
-                                    'Add using "Entry>>Labnumber"\n'
-                                    'or "Utilities>>Import"\n'
-                                    'or manually'.format(labnumber))
+            with db.session_ctx():
+                ip = db.get_identifier(labnumber)
+                if ip:
+                    pos = ip.position
+                    # set sample and irrad info
+                    try:
+                        self.sample = ip.sample.name
+                        d['sample'] = self.sample
+
+                        project = ip.sample.project
+                        project_name = project.name
+                        if project_name == 'J-Curve':
+                            irrad = ip.level.irradiation.name
+                            self.repository_identifier = 'Irradiation-{}'.format(irrad)
+                        elif project_name != 'REFERENCES':
+                            repo = camel_case(project_name)
+                            self.repository_identifier = repo
+                            if not db.get_repository(repo):
+                                self.repository_identifier = ''
+                                if self.confirmation_dialog('Repository Identifier "{}" does not exist. Would you '
+                                                            'like to add it?'.format(repo)):
+                                    # this will set self.repository_identifier
+                                    self._add_repository(repo)
+
+                    except AttributeError, e:
+                        print e
+
+                    d['repository_identifier'] = self.repository_identifier
+
+                    self._make_irrad_level(ip)
+                    d['irradiation'] = self.selected_irradiation
+                    d['irradiation_position'] = pos
+                    d['irradiation_level'] = self.selected_level
+
+                    d['display_irradiation'] = self.display_irradiation
+                    if self.auto_fill_comment:
+                        self._set_auto_comment()
+                    d['comment'] = self.comment
+                    self._meta_cache[labnumber] = d
+                    return True
+                else:
+                    self.warning_dialog('{} does not exist.\n\n'
+                                        'Add using "Entry>>Labnumber"\n'
+                                        'or "Utilities>>Import"\n'
+                                        'or manually'.format(labnumber))
 
     def _load_labnumber_defaults(self, old, labnumber, special):
         self.debug('load labnumber defaults {} {}'.format(labnumber, special))
         if special:
             ln = labnumber.split('-')[0]
             if ln == 'dg':
-                # self._load_extraction_defaults(ln)
                 self._load_defaults(ln, attrs=('extract_value', 'extract_units'))
             else:
                 self._load_defaults(ln, attrs=('cleanup', 'duration'), overwrite=False)
@@ -1028,9 +901,6 @@ def _load_labnumber_defaults(self, old, labnumber, special):
     # ===============================================================================
     # property get/set
     # ===============================================================================
-    # def _get_default_fits_enabled(self):
-    # return self.measurement_script.name not in ('None', '')
-
     def _get_edit_mode_label(self):
         return 'Editing' if self.edit_mode else ''
 
@@ -1044,9 +914,10 @@ def _get_extractable(self):
     @cached_property
     def _get_repository_identifiers(self):
         db = self.get_database()
-        ids = []
+        ids = ['']
         if db and db.connect():
-            ids = db.get_repository_identifiers()
+            with db.session_ctx():
+                ids.extend(db.get_repository_identifiers())
         return ids
 
     @cached_property
@@ -1054,8 +925,8 @@ def _get_irradiations(self):
         db = self.get_database()
         if db is None or not db.connect():
             return []
-
-        irradiations = db.get_irradiation_names()
+        with db.session_ctx():
+            irradiations = db.get_irradiation_names()
         return ['Irradiation', LINE_STR] + irradiations
 
     @cached_property
@@ -1066,24 +937,15 @@ def _get_levels(self):
             return []
 
         if self.selected_irradiation not in ('IRRADIATION', LINE_STR):
-            irrad = db.get_irradiation(self.selected_irradiation)
-            if irrad:
-                levels = sorted([li.name for li in irrad.levels])
+            with db.session_ctx():
+                irrad = db.get_irradiation(self.selected_irradiation)
+                if irrad:
+                    levels = sorted([li.name for li in irrad.levels])
         if levels:
             self.selected_level = levels[0] if levels else 'LEVEL'
 
         return ['Level', LINE_STR] + levels
 
-    # @cached_property
-    # def _get_projects(self):
-    #     db = self.get_database()
-    #     if db is None or not db.connect():
-    #         return dict()
-    #
-    #     keys = [(pi, pi.name) for pi in self.dvc.get_projects()]
-    #     keys = [(NULL_STR, NULL_STR)] + keys
-    #     return dict(keys)
-
     @cached_property
     def _get_labnumbers(self):
         lns = []
@@ -1092,7 +954,8 @@ def _get_labnumbers(self):
             return []
 
         if self.selected_level and self.selected_level not in ('Level', LINE_STR):
-            lns = db.get_level_identifiers(self.selected_irradiation, self.selected_level)
+            with db.session_ctx():
+                lns = db.get_level_identifiers(self.selected_irradiation, self.selected_level)
 
         return lns
 
@@ -1135,11 +998,6 @@ def _get_edit_template_label(self):
 
     def _get_patterns(self):
         return ['Pattern', LINE_STR] + self.remote_patterns
-        # p = paths.pattern_dir
-        # extension = '.lp'
-        # patterns = list_directory(p, extension)
-        # return ['Pattern', 'None', LINE_STR, 'Remote Patterns'] + self.remote_patterns + \
-        #        [LINE_STR, 'Local Patterns'] + patterns
 
     def _get_templates(self):
         p = paths.incremental_heat_template_dir
@@ -1220,8 +1078,6 @@ def _get_conditionals_str(self):
             r = '{}{}{}, {}'.format(self.trunc_attr, self.trunc_comp,
                                     self.trunc_crit, self.trunc_start)
         return r
-        # elif self.truncation_path:
-        #     return os.path.basename(self.truncation_path)
 
     @cached_property
     def _get_flux(self):
@@ -1286,6 +1142,21 @@ def _update_script_lists(self):
     def _iter_scripts(self):
         return (getattr(self, s) for s in SCRIPT_NAMES)
 
+    def _add_repository(self, name=None):
+        if self.dvc:
+            a = RepositoryIdentifierEntry(dvc=self.dvc)
+            if name:
+                a.value = name
+
+            a.available = self.dvc.get_repository_identifiers()
+            a.principal_investigators = self.dvc.get_principal_investigator_names()
+            if a.do():
+                self.repository_identifier_dirty = True
+                self.repository_identifier = a.name
+                return True
+        else:
+            self.warning_dialog('DVC Plugin not enabled')
+
     # ===============================================================================
     # handlers
     # ===============================================================================
@@ -1302,16 +1173,7 @@ def _set_repository_identifier_button_fired(self):
             self.refresh_table_needed = True
 
     def _add_repository_identifier_fired(self):
-        if self.dvc:
-            a = RepositoryIdentifierEntry(dvc=self.dvc)
-            a.available = self.dvc.get_repository_identifiers()
-            a.principal_investigators = self.dvc.get_principal_investigator_names()
-            if a.do():
-                self.repository_identifier_dirty = True
-                self.repository_identifier = a.name
-                return True
-        else:
-            self.warning_dialog('DVC Plugin not enabled')
+        self._add_repository()
 
     @on_trait_change('use_name_prefix, name_prefix')
     def _handle_prefix(self, name, new):
@@ -1423,12 +1285,9 @@ def _handle_conditionals(self, obj, name, old, new):
 position,
 weight, comment, skip, overlap, repository_identifier''')
     def _edit_handler(self, name, new):
-        # self._auto_save()
-
         if name == 'pattern':
             if not self._use_pattern():
                 new = ''
-                # print name, new, self._use_pattern()
         self._update_run_values(name, new)
 
     @on_trait_change('''measurement_script:name, 
@@ -1540,13 +1399,11 @@ def _edit_template_fired(self):
         temp.names = list_directory(paths.incremental_heat_template_dir, extension='.txt')
         temp.on_trait_change(self._template_closed, 'close_event')
         open_view(temp)
-        # self.open_view(temp)
 
     def _edit_pattern_fired(self):
         pat = self._new_pattern()
         pat.on_trait_change(self._pattern_closed, 'close_event')
         open_view(pat)
-        # self.open_view(pat)
 
     def _edit_mode_button_fired(self):
         self.edit_mode = not self.edit_mode
@@ -1558,18 +1415,14 @@ def _clear_conditionals_fired(self):
             self._set_conditionals('')
 
     def _aliquot_changed(self):
-        # print 'aliquot chhanged {} {}'.format(self.aliquot, self.suppress_update)
         if self.suppress_update:
             return
 
         if self.edit_mode:
             a = int(self.aliquot)
             for si in self._selected_runs:
-                # a = 0
-                # if si.aliquot != self.aliquot:
                 si.user_defined_aliquot = a
 
-            # self.update_info_needed = True
             self.refresh_table_needed = True
             self.changed = True
 
@@ -1581,12 +1434,6 @@ def _edit_mode_changed(self):
         self.aliquot = 0
         self.suppress_update = False
 
-    # @on_trait_change('mass_spectrometer, can_edit')
-    # def _update_value(self, name, new):
-    #     for si in SCRIPT_NAMES:
-    #         script = getattr(self, si)
-    #         setattr(script, name, new)
-
     # ===============================================================================
     # defaults
     # ================================================================================
@@ -1598,16 +1445,6 @@ def _script_factory(self, label, name=NULL_STR, kind='ExtractionLine'):
                    name=name,
                    kind=kind)
         return s
-        # if self.use_name_prefix:
-        #     if self.name_prefix:
-        #         prefix = self.name_prefix
-        #     else:
-        #         prefix = self.mass_spectrometer
-
-        # return Script(label=label,
-        #               name_prefix = prefix,
-        #               # mass_spectrometer=self.mass_spectrometer,
-        #               kind=kind)
 
     def _extraction_script_default(self):
         return self._script_factory('Extraction', 'extraction')
@@ -1648,127 +1485,4 @@ def run_block_enabled(self):
     def persistence_path(self):
         return os.path.join(paths.hidden_dir, 'run_factory')
 
-        # ============= EOF =============================================
-        # def _labnumber_changed(self, old, labnumber):
-        # def _load_labnumber_defaults(self, old, labnumber):
-        #     # self.debug('old={}, new={}. {}'.format(old, labnumber, not labnumber or labnumber == NULL_STR))
-        #     self.debug('load labnumber defaults L#={}'.format(labnumber))
-        #     if not labnumber or labnumber == NULL_STR:
-        #         return
-        #
-        #     db = self.db
-        #     if not db:
-        #         return
-        #     # self.update_labnumber = labnumber
-        #
-        #     special = False
-        #     try:
-        #         _ = int(labnumber)
-        #     except ValueError:
-        #         special = True
-        #
-        #     # if labnumber has a place holder load default script and return
-        #     if '##' in labnumber:
-        #         self._load_scripts(old, labnumber)
-        #         return
-        #
-        #     self.irradiation = ''
-        #     self.sample = ''
-        #
-        #     self._aliquot = 0
-        #     if labnumber:
-        #         with db.session_ctx():
-        #             # convert labnumber (a, bg, or 10034 etc)
-        #             ln = db.get_labnumber(labnumber)
-        #             if ln:
-        #                 # set sample and irrad info
-        #                 try:
-        #                     self.sample = ln.sample.name
-        #                 except AttributeError:
-        #                     pass
-        #
-        #                 try:
-        #                     a = int(ln.analyses[-1].aliquot + 1)
-        #                 except IndexError, e:
-        #                     a = 1
-        #
-        #                 self._aliquot = a
-        #
-        #                 self.irradiation = self._make_irrad_level(ln)
-        #
-        #                 if self.auto_fill_comment:
-        #                     self._set_auto_comment()
-        #
-        #                 self._load_scripts(old, labnumber)
-        #                 self._load_defaults(labnumber if special else 'u')
-        #             elif special:
-        #                 ln = labnumber[:2]
-        #                 if ln == 'dg':
-        #                     # self._load_extraction_defaults(ln)
-        #                     self._load_defaults(ln, attrs=('extract_value', 'extract_units'))
-        #
-        #                 if not (ln in ('pa', 'dg')):
-        #                     '''
-        #                         don't add pause or degas to database
-        #                     '''
-        #                     if self.confirmation_dialog(
-        #                             'Lab Identifer {} does not exist. Would you like to add it?'.format(labnumber)):
-        #                         db.add_labnumber(labnumber)
-        #                         self._aliquot = 1
-        #                         self._load_scripts(old, labnumber)
-        #                     else:
-        #                         self.labnumber = ''
-        #                 else:
-        #                     self._load_scripts(old, labnumber)
-        #             else:
-        #                 self.warning_dialog(
-        #                     '{} does not exist. Add using "Labnumber Entry" or "Utilities>>Import"'.format(labnumber))
-
-#
-# def _generate_positions(pos):
-# s = None
-# e = None
-# #(SLICE_REGEX, SSLICE_REGEX, PSLICE_REGEX,
-# #          TRANSECT_REGEX, POSITION_REGEX)
-#
-# if SLICE_REGEX.match(pos):
-# s, e = map(int, pos.split('-'))
-# elif SSLICE_REGEX.match(pos):
-# s, e, inc = map(int, pos.split(':'))
-# elif PSLICE_REGEX.match(pos):
-# s, e = map(int, pos.split(':'))[:2]
-# elif CSLICE_REGEX.match(pos):
-# args = pos.split(';')
-# positions = []
-#            for ai in args:
-#                if '-' in ai:
-#                    a, b = map(int, ai.split('-'))
-#                    inc = 1 if a < b else -1
-#                    positions.extend(range(a, b + inc, inc))
-#                else:
-#                    positions.append(ai)
-#
-#        elif TRANSECT_REGEX.match(pos):
-#            positions = [pos]
-#        #else:
-#        #    try:
-#        #        s = int(self.position)
-#        #        e = s
-#        #    except ValueError:
-#        #        pass
-#        #if e < s:
-#        #    self.warning_dialog('Endposition {} must greater than start position {}'.format(e, s))
-#        #    return
-#
-#        set_pos = True
-#        if s is not None and e is not None:
-#
-#            inc = 1 if s < e else -1
-#            positions = range(s, e + inc, inc)
-#            #else:
-#        #    if TRANSECT_REGEX.match(pos):
-#        #        positions = [pos]
-#        #    else:
-#        #        set_pos = False
-#        #        positions = [0]
-#        return positions, set_pos
+# ============= EOF =============================================
diff --git a/pychron/experiment/automated_run/factory_util.py b/pychron/experiment/automated_run/factory_util.py
new file mode 100755
index 0000000000..afa0629b79
--- /dev/null
+++ b/pychron/experiment/automated_run/factory_util.py
@@ -0,0 +1,118 @@
+# ===============================================================================
+# Copyright 2016 ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+
+from traits.trait_types import Event
+
+from pychron.core.helpers.filetools import list_directory2, list_directory
+from pychron.experiment.utilities.position_regex import SLICE_REGEX, SSLICE_REGEX, PSLICE_REGEX, CSLICE_REGEX, \
+    TRANSECT_REGEX
+from pychron.paths import paths
+from pychron.pychron_constants import LINE_STR, NULL_STR
+
+
+class EditEvent(Event):
+    pass
+
+
+class UpdateSelectedCTX(object):
+    _factory = None
+
+    def __init__(self, factory):
+        self._factory = factory
+
+    def __enter__(self):
+        self._factory.set_labnumber = False
+        self._factory.set_position = False
+
+    def __exit__(self, exc_type, exc_val, exc_tb):
+        self._factory.set_labnumber = True
+        self._factory.set_position = True
+
+
+def EKlass(klass):
+    return klass(enter_set=True, auto_set=False)
+
+
+def increment_value(m, increment=1):
+    s = ','
+    if s not in m:
+        m = (m,)
+        s = ''
+    else:
+        m = m.split(s)
+
+    ms = []
+    for mi in m:
+        try:
+            ms.append(str(int(mi) + increment))
+        except ValueError:
+            return s.join(m)
+
+    return s.join(ms)
+
+
+def increment_position(pos):
+    for regex, sfunc, ifunc, _ in (SLICE_REGEX, SSLICE_REGEX,
+                                   PSLICE_REGEX, CSLICE_REGEX, TRANSECT_REGEX):
+        if regex.match(pos):
+            return ifunc(pos)
+    else:
+        m = map(int, pos.split(','))
+        ms = []
+        offset = max(m) - min(m)
+        inc = 1
+        for i, mi in enumerate(m):
+            try:
+                inc = m[i + 1] - mi
+            except IndexError:
+                pass
+            ms.append(mi + offset + inc)
+        return ','.join(map(str, ms))
+
+
+def generate_positions(pos):
+    for regex, func, ifunc, _ in (SLICE_REGEX, SSLICE_REGEX,
+                                  PSLICE_REGEX, CSLICE_REGEX, TRANSECT_REGEX):
+        if regex.match(pos):
+            return func(pos)
+    else:
+        return [pos]
+
+
+def get_run_blocks():
+    p = paths.run_block_dir
+    blocks = list_directory2(p, '.txt', remove_extension=True)
+    return ['RunBlock', LINE_STR] + blocks
+
+
+def get_comment_templates():
+    p = paths.comment_templates
+    templates = list_directory(p)
+    return templates
+
+
+def remove_file_extension(name, ext='.py'):
+    if not name:
+        return name
+
+    if name is NULL_STR:
+        return NULL_STR
+
+    if name.endswith('.py'):
+        name = name[:-3]
+
+    return name
+# ============= EOF =============================================
diff --git a/pychron/experiment/datahub.py b/pychron/experiment/datahub.py
index 7ef86dbda3..0ae600dbbb 100755
--- a/pychron/experiment/datahub.py
+++ b/pychron/experiment/datahub.py
@@ -104,7 +104,7 @@ def prepare_destory(self):
     def get_db(self, key):
         try:
             store = self.stores[key]
-            store.create_session()
+            # store.create_session()
             return store.db
         except KeyError:
             pass
diff --git a/pychron/experiment/experiment_executor.py b/pychron/experiment/experiment_executor.py
index fb376ac0c8..0f03cbe845 100755
--- a/pychron/experiment/experiment_executor.py
+++ b/pychron/experiment/experiment_executor.py
@@ -15,6 +15,13 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+import time
+from datetime import datetime
+from itertools import groupby
+from threading import Thread, Event as Flag, Lock, currentThread
+
+import yaml
 from apptools.preferences.preference_binding import bind_preference
 from pyface.constant import CANCEL, YES, NO
 from pyface.timer.do_later import do_after
@@ -22,14 +29,6 @@
     on_trait_change, Long, Float, Str
 from traits.trait_errors import TraitError
 
-# ============= standard library imports ========================
-from threading import Thread, Event as Flag, Lock, currentThread
-from datetime import datetime
-from itertools import groupby
-import time
-import os
-import yaml
-# ============= local library imports  ==========================
 from pychron.consumer_mixin import consumable
 from pychron.core.codetools.memory_usage import mem_available
 from pychron.core.helpers.filetools import add_extension, get_path
@@ -50,9 +49,9 @@
 from pychron.experiment.utilities.conditionals import test_queue_conditionals_name, SYSTEM, QUEUE, RUN, \
     CONDITIONAL_GROUP_TAGS
 from pychron.experiment.utilities.conditionals_results import reset_conditional_results
+from pychron.experiment.utilities.identifier import convert_extract_device, is_special
 from pychron.experiment.utilities.repository_identifier import retroactive_repository_identifiers, \
     populate_repository_identifiers, get_curtag
-from pychron.experiment.utilities.identifier import convert_extract_device, is_special
 from pychron.extraction_line.ipyscript_runner import IPyScriptRunner
 from pychron.globals import globalv
 from pychron.paths import paths
@@ -1603,49 +1602,50 @@ def _check_repository_identifiers(self):
         db = self.datahub.mainstore.db
 
         cr = ConflictResolver()
-        for ei in self.experiment_queues:
-            identifiers = {ai.identifier for ai in ei.cleaned_automated_runs}
-            identifiers = [idn for idn in identifiers if not is_special(idn)]
-
-            repositories = {}
-            eas = db.get_associated_repositories(identifiers)
-            for idn, exps in groupby(eas, key=lambda x: x[1]):
-                repositories[idn] = [e[0] for e in exps]
-
-            conflicts = []
-            for ai in ei.cleaned_automated_runs:
-                identifier = ai.identifier
-                if not is_special(identifier):
-                    try:
-                        es = repositories[identifier]
-                        if ai.repository_identifier not in es:
-                            if ai.sample == self.monitor_name:
-                                ai.repository_identifier = 'Irradiation-{}'.format(ai.irradiation)
-
-                            else:
-
-                                self.debug('Experiment association conflict. '
-                                           'experimentID={} '
-                                           'previous_associations={}'.format(ai.repository_identifier,
-                                                                             ','.join(es)))
-                                conflicts.append((ai, es))
-                    except KeyError:
-                        pass
-
-            if conflicts:
-                self.debug('Experiment association warning')
-                cr.add_conflicts(ei.name, conflicts)
-
-        if cr.conflicts:
-            cr.available_ids = db.get_repository_identifiers()
-
-            info = cr.edit_traits(kind='livemodal')
-            if info.result:
-                cr.apply()
-                self.experiment_queue.refresh_table_needed = True
+        with db.session_ctx():
+            for ei in self.experiment_queues:
+                identifiers = {ai.identifier for ai in ei.cleaned_automated_runs}
+                identifiers = [idn for idn in identifiers if not is_special(idn)]
+
+                repositories = {}
+                eas = db.get_associated_repositories(identifiers)
+                for idn, exps in groupby(eas, key=lambda x: x[1]):
+                    repositories[idn] = [e[0] for e in exps]
+
+                conflicts = []
+                for ai in ei.cleaned_automated_runs:
+                    identifier = ai.identifier
+                    if not is_special(identifier):
+                        try:
+                            es = repositories[identifier]
+                            if ai.repository_identifier not in es:
+                                if ai.sample == self.monitor_name:
+                                    ai.repository_identifier = 'Irradiation-{}'.format(ai.irradiation)
+
+                                else:
+
+                                    self.debug('Experiment association conflict. '
+                                               'experimentID={} '
+                                               'previous_associations={}'.format(ai.repository_identifier,
+                                                                                 ','.join(es)))
+                                    conflicts.append((ai, es))
+                        except KeyError:
+                            pass
+
+                if conflicts:
+                    self.debug('Experiment association warning')
+                    cr.add_conflicts(ei.name, conflicts)
+
+            if cr.conflicts:
+                cr.available_ids = db.get_repository_identifiers()
+
+                info = cr.edit_traits(kind='livemodal')
+                if info.result:
+                    cr.apply()
+                    self.experiment_queue.refresh_table_needed = True
+                    return True
+            else:
                 return True
-        else:
-            return True
 
     def _sync_repositories(self, prog):
         experiment_ids = {a.repository_identifier for q in self.experiment_queues for a in q.cleaned_automated_runs}
@@ -2012,10 +2012,10 @@ def _get_blank(self, kind, ms, ed, last=False, repository=None):
         if dbr is None:
             selected = True
             from pychron.experiment.utilities.reference_analysis_selector import ReferenceAnalysisSelector
-            selector = ReferenceAnalysisSelector(title='Select Default Blank')
+            selector = ReferenceAnalysisSelector()
             info = selector.edit_traits(kind='livemodal')
             dbs = db.get_blanks(ms)
-            selector.init(dbs)
+            selector.init('Select Default Blank', dbs)
             if info.result:
                 dbr = selector.selected
         if dbr:
diff --git a/pychron/experiment/experimentor.py b/pychron/experiment/experimentor.py
index 0bcf1e62b4..12f0b5599c 100755
--- a/pychron/experiment/experimentor.py
+++ b/pychron/experiment/experimentor.py
@@ -15,15 +15,15 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Instance, List, on_trait_change, Bool, Event
-# ============= standard library imports ========================
 from itertools import groupby
-# ============= local library imports  ==========================
+
+from traits.api import Instance, List, on_trait_change, Bool, Event
+
 from pychron.dvc.dvc_irradiationable import DVCIrradiationable
-from pychron.experiment.queue.experiment_queue import ExperimentQueue
+from pychron.experiment.experiment_executor import ExperimentExecutor
 from pychron.experiment.factory import ExperimentFactory
+from pychron.experiment.queue.experiment_queue import ExperimentQueue
 from pychron.experiment.stats import StatsGroup
-from pychron.experiment.experiment_executor import ExperimentExecutor
 
 
 class Experimentor(DVCIrradiationable):
@@ -153,41 +153,37 @@ def _group_analyses(self, ans, exclude=None):
         return ((ln, group) for ln, group in groupby(sorted(ans, key=key), key)
                 if ln not in exclude)
 
-    def _get_analysis_info(self, li):
-        db = self.get_database()
-        return db.get_analysis_info(li)
-
     def _set_analysis_metadata(self):
         cache = dict()
 
         db = self.get_database()
         aruns = self._get_all_automated_runs()
-
-        for ai in aruns:
-            if ai.skip:
-                continue
-
-            ln = ai.labnumber
-            if ln == 'dg':
-                continue
-
-            # is run in cache
-            if ln not in cache:
-                info = self._get_analysis_info(ln)
-                self.debug('Info for {}={}'.format(ln, info))
-                if not info:
-                    cache[ln] = dict(identifier_error=True)
-                else:
-                    project, sample, material, irrad, level, pos = info
-
-                    cache[ln] = dict(project=project or '', sample=sample or '',
-                                     material=material or '',
-                                     irradiation=irrad or '',
-                                     irradiation_level=level or '',
-                                     irradiation_position=pos or '',
-                                     identifier_error=False)
-
-            ai.trait_set(**cache[ln])
+        with db.session_ctx():
+            for ai in aruns:
+                if ai.skip:
+                    continue
+
+                ln = ai.labnumber
+                if ln == 'dg':
+                    continue
+
+                # is run in cache
+                if ln not in cache:
+                    info = db.get_analysis_info(ln)
+                    self.debug('Info for {}={}'.format(ln, info))
+                    if not info:
+                        cache[ln] = dict(identifier_error=True)
+                    else:
+                        project, sample, material, irrad, level, pos = info
+
+                        cache[ln] = dict(project=project or '', sample=sample or '',
+                                         material=material or '',
+                                         irradiation=irrad or '',
+                                         irradiation_level=level or '',
+                                         irradiation_position=pos or '',
+                                         identifier_error=False)
+
+                ai.trait_set(**cache[ln])
 
     def execute_queues(self, queues):
         self.debug('<{}> setup executor'.format(id(self)))
@@ -213,9 +209,37 @@ def verify_database_connection(self, inform=True):
         elif inform:
             self.warning_dialog('No Database available')
 
-    def get_analysis(self, **kw):
+    def sync_queue(self, queue):
+        ms = queue.mass_spectrometer
+        ed = queue.extract_device
         db = self.get_database()
-        return db.get_analysis_by_attr(**kw)
+        with db.session_ctx():
+            for i, ai in enumerate(queue.automated_runs):
+
+                if ai.skip or ai.is_special():
+                    continue
+
+                kw = {'identifier': ai.identifier, 'position': ai.position,
+                      'mass_spectrometer': ms,
+                      'extract_device': ed}
+                if ai.is_step_heat():
+                    kw['aliquot'] = ai.aliquot
+                    kw['extract_value'] = ai.extract_value
+
+                self.debug('checking {}/{}. attr={}'.format(i, ai.runid, kw))
+
+                aa = db.get_analysis_by_attr(**kw)
+                if aa is None:
+                    self.debug('----- not found')
+                    break
+
+            if i:
+                if i == len(queue.automated_runs) - 1:
+                    self.information_dialog('All Analyses from this experiment have been run')
+                else:
+                    queue.automated_runs = queue.automated_runs[i:]
+            else:
+                self.information_dialog('No Analyses from this experiment have been run')
 
     # ===============================================================================
     # handlers
diff --git a/pychron/experiment/tasks/experiment_panes.py b/pychron/experiment/tasks/experiment_panes.py
index c165a8df68..a514773305 100755
--- a/pychron/experiment/tasks/experiment_panes.py
+++ b/pychron/experiment/tasks/experiment_panes.py
@@ -24,19 +24,17 @@
 from traitsui.table_column import ObjectColumn
 from traitsui.tabular_adapter import TabularAdapter
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.core.ui.combobox_editor import ComboboxEditor
+from pychron.core.ui.custom_label_editor import CustomLabel
 from pychron.core.ui.lcd_editor import LCDEditor
 from pychron.core.ui.led_editor import LEDEditor
 from pychron.envisage.icon_button_editor import icon_button_editor
 from pychron.envisage.stylesheets import load_stylesheet
+from pychron.experiment.plot_panel import PlotPanel
 from pychron.experiment.utilities.identifier import SPECIAL_NAMES
 from pychron.pychron_constants import MEASUREMENT_COLOR, EXTRACTION_COLOR, \
     NOT_EXECUTABLE_COLOR, SKIP_COLOR, SUCCESS_COLOR, CANCELED_COLOR, \
     TRUNCATED_COLOR, FAILED_COLOR, END_AFTER_COLOR
-from pychron.core.ui.custom_label_editor import CustomLabel
-from pychron.experiment.plot_panel import PlotPanel
 
 
 # ===============================================================================
@@ -183,21 +181,11 @@ def _get_info_group(self):
                            # run_factory_item('freq_after', label='After'),
                            spring),
 
-                    # HGroup(run_factory_item('labnumber',
-                    # tooltip='Enter a Labnumber',
-                    # width=100, ),
-                    # run_factory_item('_labnumber', show_label=False,
-                    # editor=CheckListEditor(name=run_factory_name('labnumbers')),
-                    # width=-20),
-                    # run_factory_item('aliquot',
-                    #                         width=50),
-                    #        spring),
-
                     HGroup(run_factory_item('labnumber',
                                             tooltip='Enter a Labnumber',
                                             width=100,
                                             enabled_when='object.run_factory.special_labnumber == "Special Labnumber"',
-                                            editor=ComboboxEditor(name=run_factory_name('labnumbers'))),
+                                            editor=EnumEditor(name=run_factory_name('labnumbers'))),
                            run_factory_item('aliquot',
                                             width=50),
                            spring),
@@ -218,9 +206,6 @@ def _get_info_group(self):
                            run_factory_item('auto_fill_comment',
                                             show_label=False,
                                             tooltip='Auto fill "Comment" with IrradiationLevel:Hole, e.g A:9'),
-                           # run_factory_item('comment_template',
-                           # editor=EnumEditor(name=run_factory_name('comment_templates')),
-                           # show_label=False),
                            icon_button_editor(run_factory_name('edit_comment_template'), 'cog',
                                               tooltip='Edit comment template')),
                     HGroup(run_factory_item('flux'),
@@ -239,9 +224,7 @@ def _get_truncate_group(self):
         grp = VGroup(HGroup(run_factory_item('use_simple_truncation', label='Use Simple'),
                             icon_button_editor(run_factory_name('clear_conditionals'),
                                                'delete',
-                                               tooltip='Clear Conditionals from selected runs'
-                                               # enabled_when=run_factory_name('edit_mode')
-                                               )),
+                                               tooltip='Clear Conditionals from selected runs')),
                      HGroup(run_factory_item('trunc_attr',
                                              editor=EnumEditor(name=run_factory_name('trunc_attrs')),
                                              show_label=False),
@@ -250,7 +233,6 @@ def _get_truncate_group(self):
                             spacer(-10),
                             run_factory_item('trunc_start', label='Start Count'),
                             show_border=True,
-                            # enabled_when = run_factory_name('use_simple_truncation'),
                             label='Simple'),
                      HGroup(run_factory_item('conditionals_path',
                                              editor=EnumEditor(name=run_factory_name('conditionals')),
diff --git a/pychron/experiment/tasks/experiment_task.py b/pychron/experiment/tasks/experiment_task.py
index 54f364b3b2..dddc3f37e3 100755
--- a/pychron/experiment/tasks/experiment_task.py
+++ b/pychron/experiment/tasks/experiment_task.py
@@ -15,36 +15,35 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+import shutil
+import time
+
+import xlrd
 from pyface.constant import CANCEL, NO
 from pyface.tasks.task_layout import PaneItem, TaskLayout, Splitter, Tabbed
 from pyface.timer.do_later import do_after
 from traits.api import Int, on_trait_change, Bool, Instance, Event, Color
 
-# ============= standard library imports ========================
-import shutil
-import time
-import os
-import xlrd
-# ============= local library imports  ==========================
 from pychron.core.helpers.filetools import add_extension, backup
 from pychron.core.ui.preference_binding import color_bind_preference, toTuple
 from pychron.envisage.tasks.editor_task import EditorTask
 from pychron.envisage.tasks.pane_helpers import ConsolePane
+from pychron.envisage.tasks.wait_pane import WaitPane
 from pychron.envisage.view_util import open_view
 from pychron.experiment.experiment_launch_history import update_launch_history
 from pychron.experiment.experimentor import Experimentor
 from pychron.experiment.queue.base_queue import extract_meta
 from pychron.experiment.tasks.experiment_editor import ExperimentEditor, UVExperimentEditor
-from pychron.experiment.utilities.save_dialog import ExperimentSaveDialog
+from pychron.experiment.tasks.experiment_panes import ExperimentFactoryPane, StatsPane, \
+    ControlsPane, IsotopeEvolutionPane, ConnectionStatusPane, LoggerPane, ExplanationPane
 from pychron.experiment.utilities.identifier import convert_extract_device, is_special
+from pychron.experiment.utilities.save_dialog import ExperimentSaveDialog
 from pychron.furnace.ifurnace_manager import IFurnaceManager
 from pychron.lasers.laser_managers.ilaser_manager import ILaserManager
 from pychron.paths import paths
 from pychron.pipeline.plot.editors.figure_editor import FigureEditor
 from pychron.pychron_constants import SPECTROMETER_PROTOCOL
-from pychron.experiment.tasks.experiment_panes import ExperimentFactoryPane, StatsPane, \
-    ControlsPane, IsotopeEvolutionPane, ConnectionStatusPane, LoggerPane, ExplanationPane
-from pychron.envisage.tasks.wait_pane import WaitPane
 
 
 class ExperimentEditorTask(EditorTask):
@@ -154,32 +153,7 @@ def sync_queue(self):
         if not self.has_active_editor():
             return
         queue = self.active_editor.queue
-        ms = queue.mass_spectrometer
-        ed = queue.extract_device
-        for i, ai in enumerate(queue.automated_runs):
-            if ai.skip or ai.is_special():
-                continue
-
-            kw = {'identifier': ai.identifier, 'position': ai.position,
-                  'mass_spectrometer': ms,
-                  'extract_device': ed}
-            if ai.is_step_heat():
-                kw['aliquot'] = ai.aliquot
-                kw['extract_value'] = ai.extract_value
-
-            self.debug('checking {}/{}. attr={}'.format(i, ai.runid, kw))
-            aa = self.manager.get_analysis(**kw)
-            if aa is None:
-                self.debug('----- not found')
-                break
-
-        if i:
-            if i == len(queue.automated_runs) - 1:
-                self.information_dialog('All Analyses from this experiment have been run')
-            else:
-                queue.automated_runs = queue.automated_runs[i:]
-        else:
-            self.information_dialog('No Analyses from this experiment have been run')
+        self.manager.sync_queue(queue)
 
     def _assemble_state_colors(self):
         colors = {}
@@ -263,7 +237,7 @@ def activated(self):
         self.bind_preferences()
         super(ExperimentEditorTask, self).activated()
 
-        self.manager.dvc.create_session()
+        # self.manager.dvc.create_session()
 
         manager = self.application.get_service(IFurnaceManager)
         if manager:
@@ -271,7 +245,7 @@ def activated(self):
 
     def prepare_destory(self):
         self.manager.prepare_destroy()
-        self.manager.dvc.close_session()
+        # self.manager.dvc.close_session()
 
     def create_dock_panes(self):
 
diff --git a/pychron/experiment/utilities/human_error_checker.py b/pychron/experiment/utilities/human_error_checker.py
index f1fb4412d9..31692c72ca 100755
--- a/pychron/experiment/utilities/human_error_checker.py
+++ b/pychron/experiment/utilities/human_error_checker.py
@@ -83,7 +83,7 @@ def check_run(self, run, inform=True, test=False):
     def _check_run_non_fatal(self, run):
         es = run.extraction_script
         ed = run.extract_device
-        if ed not in ('Extract Device', LINE_STR, 'No Extract Device') and es:
+        if run.analysis_type == 'unknown' and ed not in ('Extract Device', LINE_STR, 'No Extract Device') and es:
             ds = ed.split(' ')[1].lower()
             if ds != es:
                 return 'Extraction script "{}" does not match the default "{}"'.format(es, ds)
diff --git a/pychron/experiment/utilities/mass_spec_database_importer.py b/pychron/experiment/utilities/mass_spec_database_importer.py
index 2092907405..1121d7e89d 100755
--- a/pychron/experiment/utilities/mass_spec_database_importer.py
+++ b/pychron/experiment/utilities/mass_spec_database_importer.py
@@ -15,22 +15,22 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Instance, Int, Str, Bool, provides
-# ============= standard library imports ========================
-from datetime import datetime
+import os
 import struct
-from numpy import array
 import time
-import os
-# ============= local library imports  ==========================
+from datetime import datetime
+
+from numpy import array
+from traits.api import Instance, Int, Str, Bool, provides
 from uncertainties import nominal_value, std_dev
-from pychron.core.i_datastore import IDatastore
+
 from pychron.core.helpers.isotope_utils import sort_isotopes
+from pychron.core.i_datastore import IDatastore
 from pychron.experiment.utilities.identifier import make_runid
 from pychron.experiment.utilities.identifier_mapper import IdentifierMapper
+from pychron.experiment.utilities.info_blob import encode_infoblob
 from pychron.loggable import Loggable
 from pychron.mass_spec.database.massspec_database_adapter import MassSpecDatabaseAdapter
-from pychron.experiment.utilities.info_blob import encode_infoblob
 from pychron.pychron_constants import ALPHAS
 
 mkeys = ['l2 value', 'l1 value', 'ax value', 'h1 value', 'h2 value']
@@ -195,46 +195,48 @@ def add_irradiation_chronology(self, irrad, doses):
 
     def add_analysis(self, spec, commit=True):
         db = self.db
-        for i in range(3):
-            with self.db.session_ctx():
-                irradpos = spec.irradpos
-                rid = spec.runid
-                trid = rid.lower()
-                identifier = spec.labnumber
-
-                if trid.startswith('b'):
-                    runtype = 'Blank'
-                    irradpos = -1
-                elif trid.startswith('a'):
-                    runtype = 'Air'
-                    irradpos = -2
-                elif trid.startswith('c'):
-                    runtype = 'Unknown'
-                    identifier = irradpos = self.get_identifier(spec)
-                else:
-                    runtype = 'Unknown'
-
-                rid = make_runid(identifier, spec.aliquot, spec.step)
-
-                self._analysis = None
-                db.reraise = True
-                try:
-                    ret = self._add_analysis(db.session, spec, irradpos, rid, runtype)
-                    db.commit()
-                    return ret
-                except Exception, e:
-                    import traceback
-                    tb = traceback.format_exc()
-                    self.debug('Mass Spec save exception. {}\n {}'.format(e, tb))
-                    if i == 2:
-                        self.message('Could not save spec.runid={} rid={} '
-                                     'to Mass Spec database.\n {}'.format(spec.runid, rid, tb))
-                    else:
-                        self.debug('retry mass spec save')
-                    # if commit:
-                    db.rollback()
-                finally:
-                    self.db.reraise = True
+        # for i in range(3):
+        with db.session_ctx(use_parent_session=False) as session:
+            irradpos = spec.irradpos
+            rid = spec.runid
+            trid = rid.lower()
+            identifier = spec.labnumber
+
+            if trid.startswith('b'):
+                runtype = 'Blank'
+                irradpos = -1
+            elif trid.startswith('a'):
+                runtype = 'Air'
+                irradpos = -2
+            elif trid.startswith('c'):
+                runtype = 'Unknown'
+                identifier = irradpos = self.get_identifier(spec)
+            else:
+                runtype = 'Unknown'
+
+            rid = make_runid(identifier, spec.aliquot, spec.step)
+
+            self._analysis = None
+            db.reraise = True
+            try:
+                ret = self._add_analysis(session, spec, irradpos, rid, runtype)
+                db.commit()
+                return ret
+            except Exception, e:
+                import traceback
+                self.debug('Mass Spec save exception. {}'.format(e))
+                tb = traceback.format_exc()
+                self.debug(tb)
+                self.message('Could not save spec. runid={} rid={} to MassSpec DB.\n{}'.format(spec.runid, rid, tb))
+                # if i == 2:
+                #     self.message('Could not save spec.runid={} rid={} '
+                #                  'to Mass Spec database.\n {}'.format(spec.runid, rid, tb))
+                # else:
+                #     self.debug('retry mass spec save')
+                # # if commit:
+                # db.rollback()
+            finally:
+                self.db.reraise = True
 
     def _add_analysis(self, sess, spec, irradpos, rid, runtype):
 
@@ -321,7 +323,7 @@ def _add_analysis(self, sess, spec, irradpos, rid, runtype):
         analysis = db.add_analysis(rid, spec.aliquot, spec.step,
                                    irradpos,
                                    RUN_TYPE_DICT[runtype], **params)
-        sess.flush()
+        sess.commit()
         if spec.update_rundatetime:
             d = datetime.fromtimestamp(spec.timestamp)
             analysis.RunDateTime = d
diff --git a/pychron/external_pipette/tasks/external_pipette_plugin.py b/pychron/external_pipette/tasks/external_pipette_plugin.py
index 16248cf45e..5654b574f6 100755
--- a/pychron/external_pipette/tasks/external_pipette_plugin.py
+++ b/pychron/external_pipette/tasks/external_pipette_plugin.py
@@ -18,8 +18,6 @@
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import List
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.external_pipette.protocol import IPipetteManager
 from pychron.external_pipette.tasks.external_pipette_task import ExternalPipetteTask
@@ -64,7 +62,7 @@ def _tasks_default(self):
                             accelerator='Ctrl+Shift+0')]
 
     def _task_factory(self):
-        t = ExternalPipetteTask(manager=self._manager)
+        t = ExternalPipetteTask(manager=self._manager, application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/extraction_line/status_monitor.py b/pychron/extraction_line/status_monitor.py
index 403b4d7164..0fa4b71552 100755
--- a/pychron/extraction_line/status_monitor.py
+++ b/pychron/extraction_line/status_monitor.py
@@ -15,11 +15,11 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Int, List
-# ============= standard library imports ========================
 import time
-# ============= local library imports  ==========================
 from threading import Event, Thread
+
+from traits.api import Int, List
+
 from pychron.loggable import Loggable
 
 
@@ -40,6 +40,7 @@ class StatusMonitor(Loggable):
     #     self._clients = []
 
     def start(self, oid, vm):
+        self.debug('start {}'.format(oid))
         if not self._clients:
             p = self.update_period
             s, c, l, o = self.state_freq, self.checksum_freq, self.lock_freq, self.owner_freq
@@ -66,6 +67,7 @@ def isAlive(self):
             return not self._stop_evt.isSet()
 
     def stop(self, oid):
+        self.debug('stop {}'.format(oid))
         try:
             self._clients.remove(oid)
         except ValueError:
@@ -80,13 +82,14 @@ def stop(self, oid):
     def _run(self, vm):
         i = 0
         while 1:
+            time.sleep(self.update_period)
             if self._stop_evt.is_set():
                 break
 
-            if not self._iter(i, vm):
-                break
+            # if not self._iter(i, vm):
+            #     break
 
-            time.sleep(self.update_period)
+            self._iter(i, vm)
 
             if i > 100:
                 i = 0
@@ -96,6 +99,7 @@ def _run(self, vm):
     def _iter(self, i, vm):
         self.debug('status monitor iteration i={}'.format(i))
         if self._stop_evt.is_set():
+            self.debug('stop_event set. no more iterations')
             return
 
         if vm is None:
@@ -118,7 +122,7 @@ def _iter(self, i, vm):
             if not vm.state_checksum:
                 self.debug('State checksum failed')
 
-        return not self._stop_evt.is_set()
+        # return not self._stop_evt.is_set()
 
         # if i > 100:
         #     i = 0
diff --git a/pychron/extraction_line/tasks/extraction_line_plugin.py b/pychron/extraction_line/tasks/extraction_line_plugin.py
index c0326967f6..771a9abf39 100755
--- a/pychron/extraction_line/tasks/extraction_line_plugin.py
+++ b/pychron/extraction_line/tasks/extraction_line_plugin.py
@@ -15,29 +15,28 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+
 from envisage.extension_point import ExtensionPoint
 from envisage.ui.tasks.task_extension import TaskExtension
 from envisage.ui.tasks.task_factory import TaskFactory
 from pyface.tasks.action.schema import SMenu
 from pyface.tasks.action.schema_addition import SchemaAddition
 from traits.api import List, Dict
-# ============= standard library imports ========================
-import os
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.filetools import list_directory2
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.envisage.tasks.list_actions import ProcedureAction
 from pychron.extraction_line.extraction_line_manager import ExtractionLineManager
 from pychron.extraction_line.ipyscript_runner import IPyScriptRunner
 from pychron.extraction_line.pyscript_runner import PyScriptRunner
-from pychron.extraction_line.tasks.extraction_line_task import ExtractionLineTask
 from pychron.extraction_line.tasks.extraction_line_actions import RefreshCanvasAction
 from pychron.extraction_line.tasks.extraction_line_preferences import ExtractionLinePreferencesPane, \
     ConsolePreferencesPane
+from pychron.extraction_line.tasks.extraction_line_task import ExtractionLineTask
 from pychron.paths import paths
 
 
-
 def procedure_action(name, application):
     a = ProcedureAction(id='procedures.action.{}'.format(name),
                         name=name.capitalize(),
@@ -141,7 +140,7 @@ def _tasks_default(self):
 
     def _task_factory(self):
         elm = self.application.get_service(ExtractionLineManager)
-        t = ExtractionLineTask(manager=elm)
+        t = ExtractionLineTask(manager=elm, application=self.application)
         return t
 
     def _preferences_panes_default(self):
diff --git a/pychron/file_defaults.py b/pychron/file_defaults.py
index 71237448c7..8aacfac740 100755
--- a/pychron/file_defaults.py
+++ b/pychron/file_defaults.py
@@ -450,6 +450,9 @@ def make_presentation(**kw):
 """
 
 AUTO_IDEOGRAM = """- klass: ListenUnknownNode
+- klass: FilterNode
+  filters:
+   - age<0
 - klass: GroupingNode
   key: Identifier
 - klass: IdeogramNode
diff --git a/pychron/furnace/furnace_manager.py b/pychron/furnace/furnace_manager.py
index 23bcb36edb..20d1748057 100755
--- a/pychron/furnace/furnace_manager.py
+++ b/pychron/furnace/furnace_manager.py
@@ -15,16 +15,14 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
 import shutil
+import time
+from threading import Thread
 
 import yaml
 from traits.api import TraitError, Instance, Float, provides, Bool
 
-# ============= standard library imports ========================
-import os
-import time
-from threading import Thread
-# ============= local library imports  ==========================
 from pychron.canvas.canvas2D.dumper_canvas import DumperCanvas
 from pychron.canvas.canvas2D.video_canvas import VideoCanvas
 from pychron.core.helpers.filetools import pathtolist
@@ -437,7 +435,7 @@ def _load_sample_states(self):
                 states = yaml.load(rfile)
 
                 for si in states:
-                    hole = self.stage_map.get_hole(si)
+                    hole = self.stage_manager.stage_map.get_hole(si)
                     hole.analyzed = True
 
     def _dump_sample_states(self, states=None):
@@ -480,29 +478,37 @@ def _close_logic(self, name):
     def _update_scan(self):
         d = self.controller.get_summary(verbose=False)
         if d:
-            state = d['h2o_state']
+            state = d.get('h2o_state')
             if state in (0, 1):
                 self.water_flow_led.state = 2 if state else 0
             else:
                 self.water_flow_led.state = 1
 
-            response = d.get('response', 0) or 0
-            op = d.get('output', 0) or 0
+            response = d.get('response')
+            output = d.get('output')
+            if response is not None:
+                self.temperature_readback = response
+            if output is not None:
+                self.output_percent_readback = output
 
-            self.temperature_readback = response
-            self.output_percent_readback = op
-
-            self._update_scan_graph(response, op, d['setpoint'])
+            self._update_scan_graph(response, output, d['setpoint'])
 
     def _stop_update(self):
         self.debug('stop update')
         self._alive = False
 
     def _update_scan_graph(self, response, output, setpoint):
-        if response is not None and output is not None:
+        x = None
+        update = False
+        if response is not None:
             x = self.graph.record(response, series=1, track_y=False)
+            update = True
+
+        if output is not None:
             self.graph.record(output, x=x, series=0, plotid=1, track_y=False)
+            update = True
 
+        if update:
             ss = self.graph.get_data(plotid=0, axis=1)
             if len(ss) > 1:
                 xs = self.graph.get_data(plotid=0)
@@ -527,7 +533,7 @@ def _update_scan_graph(self, response, output, setpoint):
                 self.graph.set_y_limits(min_=mi, max_=ma, pad='0.1', plotid=0)
 
             if self._recording:
-                self.record_data_manager.write_to_frame((x, response, output))
+                self.record_data_manager.write_to_frame((x, response or 0, output or 0))
 
     def _start_recording(self):
         self._recording = True
diff --git a/pychron/furnace/stage_manager.py b/pychron/furnace/stage_manager.py
index eb21ca463a..f346403451 100755
--- a/pychron/furnace/stage_manager.py
+++ b/pychron/furnace/stage_manager.py
@@ -20,8 +20,7 @@
 from pyface.timer.do_later import do_after
 from traits.api import Instance
 from traitsui.api import View, Item, VGroup
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.canvas.canvas2D.furnace_canvas import FurnaceCanvas
 from pychron.hardware.linear_axis import LinearAxis
 from pychron.paths import paths
@@ -119,11 +118,25 @@ def _move_to_hole(self, key, correct_position=True):
         pos = self.stage_map.get_hole_pos(key)
 
         if pos:
+            do_hystersis = self.temp_position and self.temp_position>pos
+
             self.temp_hole = key
             self.temp_position = pos
 
             x, y = self.get_calibrated_position(pos, key=key)
             self.info('hole={}, position={}, calibrated_position={}'.format(key, pos, (x, y)))
+            if do_hystersis:
+                self.info('doing hystersis')
+                hx = x - 5
+                self.debug('hystersis position={}'.format(hx))
+                self.canvas.set_desired_position(hx, 0)
+                self.feeder._position = hx
+                self.feeder.move_absolute(hx, units='mm')
+
+                self._inprogress()
+
+                self.info('Hystersis correction complete')
+                self.update_axes()
 
             self.canvas.set_desired_position(x, 0)
             self.feeder._position = x
@@ -142,13 +155,18 @@ def _inprogress(self, timeout=120):
         moving = self.feeder.moving
         update = self._update_axes
 
+        cnt = 0
         while 1:
             if time.time() - st > timeout:
                 break
 
             update()
             if not moving():
-                break
+                cnt += 1
+                if cnt > 2:
+                    break
+            else:
+                cnt = 0
             time.sleep(0.5)
 
     def _update_axes(self):
diff --git a/pychron/furnace/tasks/furnace_plugin.py b/pychron/furnace/tasks/furnace_plugin.py
index 7d3b9093ef..a383fc91d9 100755
--- a/pychron/furnace/tasks/furnace_plugin.py
+++ b/pychron/furnace/tasks/furnace_plugin.py
@@ -17,8 +17,7 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import List
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.furnace.ifurnace_manager import IFurnaceManager
 from pychron.furnace.tasks.preferences import NMGRLFurnacePreferencesPane
@@ -44,7 +43,8 @@ def _manager_factory(self):
         return m
 
     def _task_factory(self):
-        return FurnaceTask(manager=self._get_manager())
+        return FurnaceTask(manager=self._get_manager(),
+                           application=self.application)
 
     def _get_manager(self):
         return self.application.get_service(IFurnaceManager, 'name=="{}"'.format(self.name))
diff --git a/pychron/git_archive/repo_manager.py b/pychron/git_archive/repo_manager.py
index 415e26c59d..ac1f56d4c5 100755
--- a/pychron/git_archive/repo_manager.py
+++ b/pychron/git_archive/repo_manager.py
@@ -15,30 +15,29 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Any, Str, List, Event
-# ============= standard library imports ========================
 import hashlib
-
-import subprocess
-import re
 import os
-import time
+import re
 import shutil
+import subprocess
+import time
 from cStringIO import StringIO
 from datetime import datetime
-from git.exc import GitCommandError
+
 from git import Repo, Diff, RemoteProgress
-# ============= local library imports  ==========================
+from git.exc import GitCommandError
+from traits.api import Any, Str, List, Event
+
 from pychron.core.codetools.inspection import caller
 from pychron.core.helpers.filetools import fileiter
 from pychron.core.progress import open_progress
 from pychron.envisage.view_util import open_view
+from pychron.git_archive.commit import Commit
 from pychron.git_archive.diff_view import DiffView, DiffModel
 from pychron.git_archive.merge_view import MergeModel, MergeView
 from pychron.git_archive.utils import get_head_commit
 from pychron.git_archive.views import NewBranchView
 from pychron.loggable import Loggable
-from pychron.git_archive.commit import Commit
 
 
 def get_repository_branch(path):
@@ -755,8 +754,20 @@ def _add_to_repo(self, p, msg, commit=True):
         if index:
             if not isinstance(p, list):
                 p = [p]
+            try:
+                index.add(p)
+            except IOError, e:
+                self.warning('Failed to add file. Error:"{}"'.format(e))
+
+                # an IOError has been caused in the past by "'...index.lock' could not be obtained"
+                os.remove(os.path.join(self.path, '.git', 'index.lock'))
+                try:
+                    self.warning('Retry after "Failed to add file"'.format(e))
+                    index.add(p)
+                except IOError, e:
+                    self.warning('Retry failed. Error:"{}"'.format(e))
+                    return
 
-            index.add(p)
             if commit:
                 index.commit(msg)
 
diff --git a/pychron/globals.py b/pychron/globals.py
index da7fcb8e1d..ab847424ec 100755
--- a/pychron/globals.py
+++ b/pychron/globals.py
@@ -71,6 +71,7 @@ class Globals(object):
     system_monitor_debug = False
     figure_debug = False
     browser_debug = False
+    auto_pipeline_debug = False
 
     load_valve_states = True
     load_soft_locks = True
@@ -123,6 +124,7 @@ def build(self, ip):
                            ('experiment_savedb', to_bool),
                            ('recall_debug', to_bool),
 
+                           ('auto_pipeline_debug', to_bool),
                            ('pipeline_debug', to_bool),
                            ('run_pipeline', to_bool),
                            ('select_default_data', to_bool),
diff --git a/pychron/graph/regression_graph.py b/pychron/graph/regression_graph.py
index b0113a888f..7e46a88d68 100755
--- a/pychron/graph/regression_graph.py
+++ b/pychron/graph/regression_graph.py
@@ -14,23 +14,20 @@
 # limitations under the License.
 # ===============================================================================
 # ============= enthought library imports =======================
-from traits.api import List, Any, Event, Callable, Dict
-# ============= standard library imports ========================
 from numpy import linspace
-# ============= local library imports  ==========================
+from traits.api import List, Any, Event, Callable, Dict
+
+from pychron.core.helpers.fits import convert_fit
+from pychron.core.regression.base_regressor import BaseRegressor
+from pychron.graph.context_menu_mixin import RegressionContextMenuMixin
+from pychron.graph.error_envelope_overlay import ErrorEnvelopeOverlay
 from pychron.graph.graph import Graph
+from pychron.graph.tools.point_inspector import PointInspector, \
+    PointInspectorOverlay
 from pychron.graph.tools.rect_selection_tool import RectSelectionTool, \
     RectSelectionOverlay
-from pychron.core.helpers.fits import convert_fit
-
-from pychron.graph.context_menu_mixin import RegressionContextMenuMixin
 from pychron.graph.tools.regression_inspector import RegressionInspectorTool, \
     RegressionInspectorOverlay
-from pychron.graph.tools.point_inspector import PointInspector, \
-    PointInspectorOverlay
-
-from pychron.core.regression.base_regressor import BaseRegressor
-from pychron.graph.error_envelope_overlay import ErrorEnvelopeOverlay
 
 
 class NoRegressionCTX(object):
@@ -103,6 +100,7 @@ def new_series(self, x=None, y=None,
                    marker_size=2,
                    add_tools=True,
                    add_inspector=True,
+                   add_point_inspector=True,
                    convert_index=None,
                    plotid=None, *args,
                    **kw):
@@ -118,7 +116,7 @@ def new_series(self, x=None, y=None,
                                                            plotid=plotid,
                                                            *args, **kw)
             if add_tools:
-                self.add_tools(p, s, None, convert_index, add_inspector)
+                self.add_tools(p, s, None, convert_index, add_inspector, add_point_inspector)
             return s, p
 
         scatter, si = self._new_scatter(kw, marker, marker_size,
@@ -159,12 +157,12 @@ def new_series(self, x=None, y=None,
 
         if add_tools:
             self.add_tools(plot, scatter, line,
-                           convert_index, add_inspector)
+                           convert_index, add_inspector, add_point_inspector)
 
         return plot, scatter, line
 
     def add_tools(self, plot, scatter, line=None,
-                  convert_index=None, add_inspector=True):
+                  convert_index=None, add_inspector=True, add_point_inspector=True):
 
         if add_inspector:
             # add a regression inspector tool to the line
@@ -175,6 +173,7 @@ def add_tools(self, plot, scatter, line=None,
                 line.tools.append(tool)
                 line.overlays.append(overlay)
 
+        if add_point_inspector:
             point_inspector = PointInspector(scatter,
                                              convert_index=convert_index or self.convert_index_func)
             pinspector_overlay = PointInspectorOverlay(component=scatter,
@@ -213,7 +212,7 @@ def set_fit(self, fi, plotid=0, series=0, redraw=True):
             # print key
             if scatter.fit != fi:
                 lkey = 'line{}'.format(series)
-                if plot.plots.has_key(lkey):
+                if lkey in plot.plots:
                     line = plot.plots[lkey][0]
                     line.regressor = None
 
diff --git a/pychron/graph/tools/analysis_inspector.py b/pychron/graph/tools/analysis_inspector.py
index 1b507c9d78..cec70abb21 100755
--- a/pychron/graph/tools/analysis_inspector.py
+++ b/pychron/graph/tools/analysis_inspector.py
@@ -16,12 +16,9 @@
 
 # ============= enthought library imports =======================
 from traits.api import List, Callable
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-from pychron.graph.tools.point_inspector import PointInspector
-
 from traitsui.menu import Action, Menu as MenuManager
 
+from pychron.graph.tools.point_inspector import PointInspector
 from pychron.pipeline.plot.inspector_item import AnalysisInspectorItem
 from pychron.pychron_constants import PLUSMINUS
 
@@ -42,6 +39,8 @@ def contextual_menu_contents(self):
                           on_perform=self._recall_analysis),
                    Action(name='Set tag',
                           on_perform=self._set_tag),
+                   Action(name='Set Omit',
+                          on_perform=self._set_omit),
                    Action(name='Set INVALID',
                           on_perform=self._set_invalid))
         # menu = MenuManager(name='recall', *actions)
@@ -65,6 +64,11 @@ def _set_tag(self):
         ans = [self.analyses[i] for i in self._selected_indices]
         ai.trigger_tag(ans)
 
+    def _set_omit(self):
+        ai = self.analyses[0]
+        ans = [self.analyses[i] for i in self._selected_indices]
+        ai.trigger_omit(ans)
+
     def _set_invalid(self):
         ai = self.analyses[0]
         ans = [self.analyses[i] for i in self._selected_indices]
diff --git a/pychron/graph/tools/point_inspector.py b/pychron/graph/tools/point_inspector.py
index 63dfab4c72..e76ea0c43f 100755
--- a/pychron/graph/tools/point_inspector.py
+++ b/pychron/graph/tools/point_inspector.py
@@ -15,10 +15,9 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Callable
-# ============= standard library imports ========================
 from numpy import where, vstack
-# ============= local library imports  ==========================
+from traits.api import Callable
+
 from pychron.core.helpers.formatting import floatfmt
 from pychron.graph.tools.info_inspector import InfoInspector, InfoOverlay
 from pychron.pychron_constants import PLUSMINUS
@@ -33,7 +32,7 @@ class PointInspector(InfoInspector):
     def get_selected_index(self):
         threshold = self.hittest_threshold
         if self.single_point:
-            idx = self.component.map_index(self.current_position, threshold=self.threshold)
+            idx = self.component.map_index(self.current_position, threshold=threshold)
             if idx is not None:
                 return [idx]
         else:
diff --git a/pychron/hardware/fusions/fusions_co2_logic_board.py b/pychron/hardware/fusions/fusions_co2_logic_board.py
index ffb55be2ab..d714baac4d 100755
--- a/pychron/hardware/fusions/fusions_co2_logic_board.py
+++ b/pychron/hardware/fusions/fusions_co2_logic_board.py
@@ -16,15 +16,14 @@
 
 
 # =============enthought library imports=======================
-from traits.api import Float, Property, TraitError
-# import apptools.sweet_pickle as pickle
-# =============standard library imports ========================
-import os
 import cPickle as pickle
-# =============local library imports  ==========================
+import os
+
+from traits.api import Float, Property, TraitError
+
 from fusions_logic_board import FusionsLogicBoard
-from pychron.paths import paths
 from pychron.hardware.meter_calibration import MeterCalibration
+from pychron.paths import paths
 
 
 class FusionsCO2LogicBoard(FusionsLogicBoard):
@@ -99,6 +98,15 @@ def read_power_meter(self, verbose=False, **kw):
 
         return r
 
+    def get_output(self):
+        pass
+
+    def get_response(self, **kw):
+        return self.internal_meter_response
+
+    def get_setpoint(self):
+        return self._request_power
+
     def _disable_laser(self):
         """
         """
diff --git a/pychron/lasers/laser_managers/base_lase_manager.py b/pychron/lasers/laser_managers/base_lase_manager.py
index 2c60972ee0..e5325b6ee1 100755
--- a/pychron/lasers/laser_managers/base_lase_manager.py
+++ b/pychron/lasers/laser_managers/base_lase_manager.py
@@ -15,16 +15,16 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Instance, Event, Bool, Any, Property, Str, Float, provides
-# ============= standard library imports ========================
 import os
 import time
-# ============= local library imports  ==========================
+
+from traits.api import Instance, Event, Bool, Any, Property, Str, Float, provides
+
+from pychron.core.helpers.filetools import list_directory
 from pychron.core.helpers.strtools import to_bool
 from pychron.hardware.meter_calibration import MeterCalibration
-from pychron.managers.manager import Manager
 from pychron.lasers.laser_managers.ilaser_manager import ILaserManager
-from pychron.core.helpers.filetools import list_directory
+from pychron.managers.manager import Manager
 from pychron.paths import paths
 
 
@@ -105,12 +105,6 @@ def set_motor(self, *args, **kw):
     def get_motor(self, name):
         pass
 
-    def get_response_blob(self):
-        return ''
-
-    def get_output_blob(self):
-        return ''
-
     def enable_device(self, **kw):
         return self.enable_laser(**kw)
 
diff --git a/pychron/lasers/laser_managers/fusions_co2_manager.py b/pychron/lasers/laser_managers/fusions_co2_manager.py
index 45795f77c0..359165e498 100755
--- a/pychron/lasers/laser_managers/fusions_co2_manager.py
+++ b/pychron/lasers/laser_managers/fusions_co2_manager.py
@@ -16,13 +16,11 @@
 
 # =============enthought library imports=======================
 from traits.api import Button, DelegatesTo
-# import apptools.sweet_pickle as pickle
-# =============standard library imports ========================
-# import os
-# =============local library imports  ==========================
+
+from fusions_laser_manager import FusionsLaserManager
 from pychron.hardware.fusions.fusions_co2_logic_board import FusionsCO2LogicBoard
 from pychron.monitors.fusions_co2_laser_monitor import FusionsCO2LaserMonitor
-from fusions_laser_manager import FusionsLaserManager
+from pychron.response_recorder import ResponseRecorder
 
 
 class FusionsCO2Manager(FusionsLaserManager):
@@ -85,6 +83,10 @@ def _stage_manager_default(self):
 
         return self._stage_manager_factory(args)
 
+    def _response_recorder_default(self):
+        r = ResponseRecorder(response_device=self.laser_controller,
+                             output_device=self.laser_controller)
+        return r
 
 if __name__ == '__main__':
     from pychron.core.helpers.logger_setup import logging_setup
diff --git a/pychron/lasers/laser_managers/fusions_diode_manager.py b/pychron/lasers/laser_managers/fusions_diode_manager.py
index 9d1be30105..69f10518ed 100755
--- a/pychron/lasers/laser_managers/fusions_diode_manager.py
+++ b/pychron/lasers/laser_managers/fusions_diode_manager.py
@@ -16,25 +16,20 @@
 
 # =============enthought library imports=======================
 
+from threading import Timer
+
 from traits.api import Instance, Button, Bool, Float
 from traitsui.api import VGroup, Item, InstanceEditor
 
-# =============standard library imports ========================
-from threading import Timer
-# =============local library imports  ==========================
-
+from fusions_laser_manager import FusionsLaserManager
 from pychron.hardware.fusions.fusions_diode_logic_board import FusionsDiodeLogicBoard
-# from pychron.hardware.fusions.vue_diode_control_module import VueDiodeControlModule
 from pychron.hardware.mikron_pyrometer import MikronGA140Pyrometer
-from pychron.hardware.watlow_ezzone import WatlowEZZone
-from pychron.hardware.temperature_monitor import DPi32TemperatureMonitor
 from pychron.hardware.pyrometer_temperature_monitor import PyrometerTemperatureMonitor
-
+from pychron.hardware.temperature_monitor import DPi32TemperatureMonitor
+from pychron.hardware.watlow_ezzone import WatlowEZZone
 from pychron.lasers.laser_managers.vue_metrix_manager import VueMetrixManager
-from pychron.response_recorder import ResponseRecorder
 from pychron.monitors.fusions_diode_laser_monitor import FusionsDiodeLaserMonitor
-
-from fusions_laser_manager import FusionsLaserManager
+from pychron.response_recorder import ResponseRecorder
 
 
 class FusionsDiodeManager(FusionsLaserManager):
@@ -49,7 +44,6 @@ class FusionsDiodeManager(FusionsLaserManager):
     pyrometer = Instance(MikronGA140Pyrometer)
     temperature_controller = Instance(WatlowEZZone)
     temperature_monitor = Instance(DPi32TemperatureMonitor)
-    response_recorder = Instance(ResponseRecorder)
 
     control_module_manager = Instance(VueMetrixManager)
 
@@ -126,23 +120,6 @@ def set_laser_temperature(self, temp, set_pid=True):
         return self._set_laser_power_hook(temp, mode='closed', set_pid=set_pid)
         # use_calibration=self.use_calibrated_temperature)
 
-    def get_response_blob(self):
-        return self.response_recorder.get_response_blob() if self.response_recorder else ''
-
-    def get_output_blob(self):
-        return self.response_recorder.get_output_blob() if self.response_recorder else ''
-
-    def set_response_recorder_period(self, p):
-        if self.response_recorder:
-            self.response_recorder.period = p
-
-    def start_response_recorder(self):
-        if self.response_recorder:
-            self.response_recorder.start()
-
-    def stop_response_recorder(self):
-        if self.response_recorder:
-            self.response_recorder.stop()
     # ===============================================================================
     # private
     # ===============================================================================
diff --git a/pychron/lasers/laser_managers/fusions_laser_manager.py b/pychron/lasers/laser_managers/fusions_laser_manager.py
index c0465f0f03..42454ac9f9 100755
--- a/pychron/lasers/laser_managers/fusions_laser_manager.py
+++ b/pychron/lasers/laser_managers/fusions_laser_manager.py
@@ -20,26 +20,14 @@
     on_trait_change, Event, Bool, Any
 from traitsui.api import VGroup, Item, HGroup, spring
 
-# =============standard library imports ========================
-# from threading import Thread, Timer as DoLaterTimer, Lock
-# import os
-# =============local library imports  ==========================
-# from pychron.graph.stream_graph import StreamGraph
-# from pychron.database.adapters.power_adapter import PowerAdapter
-# from pychron.managers.data_managers.h5_data_manager import H5DataManager
-# from pychron.database.data_warehouse import DataWarehouse
-# from pychron.core.helpers.timer import Timer
-from pychron.hardware.fusions.fusions_logic_board import FusionsLogicBoard
-from pychron.hardware.fiber_light import FiberLight
-# from pychron.core.helpers.paths import co2laser_db_root, co2laser_db, diodelaser_db
-# from pychron.progress_dialog import myProgressDialog
-# from pychron.lasers.power.power_calibration_manager import PowerCalibrationManager
-
 from laser_manager import LaserManager
-# from pychron.lasers.laser_managers.brightness_pid_manager import BrightnessPIDManager
-# from pychron.viewable import Viewable
 from pychron.core.helpers.strtools import to_bool
 from pychron.core.ui.thread import Thread
+from pychron.hardware.fiber_light import FiberLight
+from pychron.hardware.fusions.fusions_logic_board import FusionsLogicBoard
+from pychron.response_recorder import ResponseRecorder
+
+
 # from pychron.core.ui.gui import invoke_in_main_thread
 # from pychron.lasers.laser_managers.degas_manager import DegasManager
 
@@ -60,6 +48,8 @@ class FusionsLaserManager(LaserManager):
 
     laser_controller = Instance(FusionsLogicBoard)
     fiber_light = Instance(FiberLight)
+    response_recorder = Instance(ResponseRecorder)
+
     #    optics_view = Instance(OpticsView)
 
     #    beam = DelegatesTo('laser_controller')
@@ -336,6 +326,23 @@ def show_motion_controller_manager(self):
         m = factory(motion_controller=stage_controller)
         self.open_view(m)
 
+    def get_response_blob(self):
+        return self.response_recorder.get_response_blob() if self.response_recorder else ''
+
+    def get_output_blob(self):
+        return self.response_recorder.get_output_blob() if self.response_recorder else ''
+
+    def set_response_recorder_period(self, p):
+        if self.response_recorder:
+            self.response_recorder.period = p
+
+    def start_response_recorder(self):
+        if self.response_recorder:
+            self.response_recorder.start()
+
+    def stop_response_recorder(self):
+        if self.response_recorder:
+            self.response_recorder.stop()
     # ========================= views =========================
 
     def get_control_buttons(self):
diff --git a/pychron/lasers/tasks/plugins/chromium_co2.py b/pychron/lasers/tasks/plugins/chromium_co2.py
index d62d3d1d38..0ff615fc2e 100755
--- a/pychron/lasers/tasks/plugins/chromium_co2.py
+++ b/pychron/lasers/tasks/plugins/chromium_co2.py
@@ -17,8 +17,6 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.lasers.tasks.plugins.laser_plugin import BaseLaserPlugin
 
 
@@ -37,7 +35,7 @@ def test_communication(self):
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import ChromiumCO2Task
 
-        t = ChromiumCO2Task(manager=self._get_manager())
+        t = ChromiumCO2Task(manager=self._get_manager(), application=self.application)
         return t
 
     def _tasks_default(self):
diff --git a/pychron/lasers/tasks/plugins/co2.py b/pychron/lasers/tasks/plugins/co2.py
index 228c3cef6b..7ebc2a560c 100755
--- a/pychron/lasers/tasks/plugins/co2.py
+++ b/pychron/lasers/tasks/plugins/co2.py
@@ -15,12 +15,7 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from envisage.ui.tasks.task_extension import TaskExtension
-from pyface.action.group import Group
-from pyface.tasks.action.schema_addition import SchemaAddition
 
-from pychron.lasers.tasks.laser_actions import PowerMapAction, \
-    PowerCalibrationAction, ExecutePatternAction, ExecuteAndLasePatternAction
 from pychron.lasers.tasks.laser_preferences import FusionsCO2PreferencesPane
 from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
 
@@ -39,7 +34,7 @@ class FusionsCO2Plugin(FusionsPlugin):
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsCO2Task
 
-        t = FusionsCO2Task(manager=self._get_manager())
+        t = FusionsCO2Task(manager=self._get_manager(), application=self.application)
         return t
 
     def _preferences_panes_default(self):
diff --git a/pychron/lasers/tasks/plugins/diode.py b/pychron/lasers/tasks/plugins/diode.py
index 01e1502024..0e7c49ebdb 100755
--- a/pychron/lasers/tasks/plugins/diode.py
+++ b/pychron/lasers/tasks/plugins/diode.py
@@ -64,7 +64,7 @@ def _preferences_panes_default(self):
 
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsDiodeTask
-        t = FusionsDiodeTask(manager=self._get_manager())
+        t = FusionsDiodeTask(manager=self._get_manager(), application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/lasers/tasks/plugins/uv.py b/pychron/lasers/tasks/plugins/uv.py
index 0f42bf0d5b..e5cb093ac0 100755
--- a/pychron/lasers/tasks/plugins/uv.py
+++ b/pychron/lasers/tasks/plugins/uv.py
@@ -16,10 +16,9 @@
 
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_extension import TaskExtension
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
+
 from pychron.lasers.tasks.laser_preferences import FusionsUVPreferencesPane
+from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
 
 
 class FusionsUVPlugin(FusionsPlugin):
@@ -41,7 +40,7 @@ def _preferences_panes_default(self):
 
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsUVTask
-        t = FusionsUVTask(manager=self._get_manager())
+        t = FusionsUVTask(manager=self._get_manager(), application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/logger/tasks/logger_plugin.py b/pychron/logger/tasks/logger_plugin.py
index 2370bd8267..98eb6b4852 100755
--- a/pychron/logger/tasks/logger_plugin.py
+++ b/pychron/logger/tasks/logger_plugin.py
@@ -18,8 +18,7 @@
 from envisage.ui.tasks.task_extension import TaskExtension
 from envisage.ui.tasks.task_factory import TaskFactory
 from pyface.tasks.action.schema_addition import SchemaAddition
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.logger.tasks.actions import LogViewerAction, CurrentLogViewerAction
 from pychron.logger.tasks.logger_task import LoggerTask
@@ -35,7 +34,7 @@ def _tasks_default(self):
                             name='Logger')]
 
     def _task_factory(self):
-        return LoggerTask()
+        return LoggerTask(application=self.application)
 
     def _task_extensions_default(self):
         return [TaskExtension(actions=[SchemaAddition(factory=LogViewerAction,
diff --git a/pychron/mass_spec/database/massspec_database_adapter.py b/pychron/mass_spec/database/massspec_database_adapter.py
index c3d8ee37b7..4d7674a462 100755
--- a/pychron/mass_spec/database/massspec_database_adapter.py
+++ b/pychron/mass_spec/database/massspec_database_adapter.py
@@ -15,16 +15,16 @@
 # ===============================================================================
 
 # =============enthought library imports=======================
-from sqlalchemy.exc import InvalidRequestError
-from traits.api import provides
-# =============standard library imports ========================
 import binascii
 import math
 
+from sqlalchemy.exc import InvalidRequestError
 from sqlalchemy.sql.expression import func, distinct
+from traits.api import provides
 from uncertainties import std_dev, nominal_value
 
-# =============local library imports  ==========================
+from pychron.database.core.database_adapter import DatabaseAdapter
+from pychron.database.core.functions import delete_one
 from pychron.entry.iimport_source import IImportSource
 from pychron.mass_spec.database.massspec_orm import IsotopeResultsTable, \
     AnalysesChangeableItemsTable, BaselinesTable, DetectorTable, \
@@ -35,8 +35,6 @@
     BaselinesChangeableItemsTable, SampleLoadingTable, MachineTable, \
     AnalysisPositionTable, LoginSessionTable, RunScriptTable, \
     IrradiationChronologyTable, IrradiationLevelTable, IrradiationProductionTable, ProjectTable, MaterialTable, PDPTable
-from pychron.database.core.database_adapter import DatabaseAdapter
-from pychron.database.core.functions import delete_one
 from pychron.pychron_constants import INTERFERENCE_KEYS
 
 
@@ -698,9 +696,9 @@ def add_login_session(self, ms, **kw):
         self._add_item(drs, )
         return drs
 
-    def add_changeable_items(self, rid, drs_id):
+    def add_changeable_items(self, analysis, drs_id):
         item = AnalysesChangeableItemsTable()
-        analysis = self.get_analysis(rid, )
+        # analysis = self.get_analysis(rid, )
         if analysis is not None:
             # get the lastest preferencesetid
             #            sess = self.get_session()
@@ -719,7 +717,9 @@ def add_changeable_items(self, rid, drs_id):
 
             item.DataReductionSessionID = drs_id
             #            drs.changeable_items.append(item)
-            self._add_item(item, )
+            self._add_item(item)
+        else:
+            self.warning('Cannot save AnalysesChangeableItemsTable. Analysis is None')
 
         return item
 
diff --git a/pychron/mass_spec/mass_spec_recaller.py b/pychron/mass_spec/mass_spec_recaller.py
index cccdc59a07..f57f1487b1 100755
--- a/pychron/mass_spec/mass_spec_recaller.py
+++ b/pychron/mass_spec/mass_spec_recaller.py
@@ -17,10 +17,8 @@
 # ============= enthought library imports =======================
 from traits.api import Instance
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-from pychron.mass_spec.database.massspec_database_adapter import MassSpecDatabaseAdapter
 from pychron.loggable import Loggable
+from pychron.mass_spec.database.massspec_database_adapter import MassSpecDatabaseAdapter
 from pychron.mass_spec.mass_spec_analysis import MassSpecAnalysis, MassSpecBlank
 
 
@@ -36,42 +34,42 @@ def connect(self):
     def find_analysis(self, labnumber, aliquot, step):
 
         db = self.db
-
-        dbrec = db.get_analysis(labnumber, aliquot, step)
-        if dbrec:
-            # need to handle blanks differently
-            # labnumber in mass spec for blanks is -1
-            if labnumber == -1:
-                klass = MassSpecBlank
-            else:
-                klass = MassSpecAnalysis
-
-            rec = klass()
-            rec.sync(dbrec)
-            irradpos = db.get_irradiation_position(dbrec.IrradPosition)
-            r = irradpos.IrradiationLevel
-            n, l = r[:-1], r[-1:]
-
-            dbirrad = db.get_irradiation_level(n, l)
-
-            rec.sync_irradiation(dbirrad)
-            for iso in dbrec.isotopes:
-                det = iso.detector
-                c = db.get_baseline_changeable_item(iso.baseline.BslnID)
-                rec.sync_baselines(det.detector_type.Label, c.InfoBlob, c.PDPBlob)
-
-                c = db.get_pdp(iso.IsotopeID)
-                if c:
-                    rec.sync_fn(iso.Label, c.PDPBlob)
-
-                prefs = db.get_latest_preferences(iso.IsotopeID, iso.Label)
-
-                riso = rec.isotopes[iso.Label]
-                rec.sync_filtering(riso, prefs)
-
-                # prefs = db.get_latest_baseline_preferences(iso.baseline.BslnID)
-                # rec.sync_filtering(riso.baseline, prefs)
-
-            return rec
+        with db.session_ctx(use_parent_session=False):
+            dbrec = db.get_analysis(labnumber, aliquot, step)
+            if dbrec:
+                # need to handle blanks differently
+                # labnumber in mass spec for blanks is -1
+                if labnumber == -1:
+                    klass = MassSpecBlank
+                else:
+                    klass = MassSpecAnalysis
+
+                rec = klass()
+                rec.sync(dbrec)
+                irradpos = db.get_irradiation_position(dbrec.IrradPosition)
+                r = irradpos.IrradiationLevel
+                n, l = r[:-1], r[-1:]
+
+                dbirrad = db.get_irradiation_level(n, l)
+
+                rec.sync_irradiation(dbirrad)
+                for iso in dbrec.isotopes:
+                    det = iso.detector
+                    c = db.get_baseline_changeable_item(iso.baseline.BslnID)
+                    rec.sync_baselines(det.detector_type.Label, c.InfoBlob, c.PDPBlob)
+
+                    c = db.get_pdp(iso.IsotopeID)
+                    if c:
+                        rec.sync_fn(iso.Label, c.PDPBlob)
+
+                    prefs = db.get_latest_preferences(iso.IsotopeID, iso.Label)
+
+                    riso = rec.isotopes[iso.Label]
+                    rec.sync_filtering(riso, prefs)
+
+                    # prefs = db.get_latest_baseline_preferences(iso.baseline.BslnID)
+                    # rec.sync_filtering(riso.baseline, prefs)
+
+                return rec
 
 # ============= EOF =============================================
diff --git a/pychron/options/flux.py b/pychron/options/flux.py
index c1ce63fceb..814c397d87 100755
--- a/pychron/options/flux.py
+++ b/pychron/options/flux.py
@@ -16,10 +16,8 @@
 
 # ============= enthought library imports =======================
 from traits.api import List, Str, Int, Enum, Float, Property, Bool
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-from pychron.options.aux_plot import AuxPlot
 
+from pychron.options.aux_plot import AuxPlot
 from pychron.options.options import FigureOptions
 from pychron.pychron_constants import FLUX_CONSTANTS, ERROR_TYPES
 
@@ -30,7 +28,7 @@ class FluxOptions(FigureOptions):
     marker_size = Int(5)
     levels = Int(50, auto_set=False, enter_set=True)
 
-    error_kind = Str('SD')
+    error_kind = Enum(*ERROR_TYPES)
 
     selected_decay = Enum(FLUX_CONSTANTS.keys())
     monitor_age = Float(28.201)
diff --git a/pychron/options/flux_views.py b/pychron/options/flux_views.py
index ba63cc4cb3..e007a071e2 100755
--- a/pychron/options/flux_views.py
+++ b/pychron/options/flux_views.py
@@ -17,8 +17,7 @@
 # ============= enthought library imports =======================
 from chaco.default_colormaps import color_map_name_dict
 from traitsui.api import Item, HGroup, VGroup, Readonly, EnumEditor
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.options.options import SubOptions, AppearanceSubOptions
 
 
@@ -42,7 +41,8 @@ def traits_view(self):
                      Item('selected_decay', label='Decay Const.'),
                      Readonly('lambda_k', label=u'Total \u03BB K'),
                      Item('monitor_age'),
-                     Item('predicted_j_error_type', ),
+                     Item('error_kind', label='Mean J Error'),
+                     Item('predicted_j_error_type', label='Predicted J Error'),
                      Item('use_weighted_fit', ),
                      Item('monte_carlo_ntrials', ),
                      Item('use_monte_carlo', ),
diff --git a/pychron/pipeline/editors/diff_editor.py b/pychron/pipeline/editors/diff_editor.py
index bb77aa25e3..a094780d83 100755
--- a/pychron/pipeline/editors/diff_editor.py
+++ b/pychron/pipeline/editors/diff_editor.py
@@ -15,20 +15,20 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+
+import yaml
 from traits.api import Property, Instance, List, Either, Int, Float, HasTraits, \
     Str, Bool, Button
 from traitsui.api import View, Item, UItem, VGroup, HGroup, spring
 from traitsui.editors.check_list_editor import CheckListEditor
 from traitsui.tabular_adapter import TabularAdapter
-# ============= standard library imports ========================
-import os
-import yaml
 from uncertainties import nominal_value, std_dev
-# ============= local library imports  ==========================
+
+from pychron.core.helpers.formatting import floatfmt
 from pychron.core.ui.tabular_editor import myTabularEditor
 from pychron.envisage.icon_button_editor import icon_button_editor
 from pychron.envisage.tasks.base_editor import BaseTraitsEditor
-from pychron.core.helpers.formatting import floatfmt
 from pychron.mass_spec.mass_spec_recaller import MassSpecRecaller
 from pychron.paths import paths
 from pychron.pychron_constants import PLUSMINUS_ONE_SIGMA
@@ -144,7 +144,7 @@ def _get_rvalue_text(self):
         v = self.item.rvalue
         return self._get_value_text(v)
 
-    def _get_value_text(self, v, n=6):
+    def _get_value_text(self, v, n=8):
         if isinstance(v, float):
             v = floatfmt(v, n=n, s=5, use_scientific=True)
         return v
diff --git a/pychron/pipeline/editors/flux_results_editor.py b/pychron/pipeline/editors/flux_results_editor.py
index 34a7b0e2c6..b418e0a143 100755
--- a/pychron/pipeline/editors/flux_results_editor.py
+++ b/pychron/pipeline/editors/flux_results_editor.py
@@ -17,14 +17,13 @@
 # ============= enthought library imports =======================
 from itertools import groupby
 
+from numpy import array, zeros, vstack, linspace, meshgrid, arctan2, sin, cos
 from traits.api import HasTraits, Str, Int, Bool, Float, Property, List, Instance, Event, Button
 from traitsui.api import View, UItem, TableEditor, VGroup, HGroup, Item, spring, Tabbed
 from traitsui.extras.checkbox_column import CheckboxColumn
 from traitsui.table_column import ObjectColumn
-# ============= standard library imports ========================
-from numpy import array, zeros, vstack, linspace, meshgrid, arctan2, sin, cos
-# ============= local library imports  ==========================
 from uncertainties import nominal_value, std_dev
+
 from pychron.core.helpers.formatting import calc_percent_error, floatfmt
 from pychron.core.regression.flux_regressor import PlaneFluxRegressor, BowlFluxRegressor
 from pychron.envisage.icon_button_editor import icon_button_editor
@@ -111,6 +110,7 @@ class FluxPosition(HasTraits):
 
     mean_j = Float
     mean_jerr = Float
+    mean_j_mswd = Float
 
     n = Int
 
@@ -135,9 +135,10 @@ def set_mean_j(self):
         ans = [a for a in self.analyses if not a.is_omitted()]
 
         if ans:
-            j = mean_j(ans, self.error_kind, self.monitor_age, self.lambda_k)
+            j, mswd = mean_j(ans, self.error_kind, self.monitor_age, self.lambda_k)
             self.mean_j = nominal_value(j)
             self.mean_jerr = std_dev(j)
+            self.mean_j_mswd = mswd
 
         self.n = len(ans)
 
@@ -559,6 +560,9 @@ def traits_view(self):
         def column(klass=ObjectColumn, editable=False, **kw):
             return klass(text_font='arial 10', editable=editable, **kw)
 
+        def sciformat(x):
+            return '{:0.6E}'.format(x) if x else ''
+
         cols = [
             column(klass=CheckboxColumn, name='use', label='Use', editable=True, width=30),
             column(klass=CheckboxColumn, name='save', label='Save', editable=True, width=30),
@@ -572,24 +576,27 @@ def column(klass=ObjectColumn, editable=False, **kw):
 
             column(name='n', label='N'),
             column(name='saved_j', label='Saved J',
-                   format_func=lambda x: floatfmt(x, n=8, s=4)),
+                   format_func=sciformat),
             column(name='saved_jerr', label=PLUSMINUS_ONE_SIGMA,
-                   format_func=lambda x: floatfmt(x, n=8, s=4)),
+                   format_func=sciformat),
             column(name='percent_saved_error',
                    label='%',
                    format_func=lambda x: floatfmt(x, n=2)),
             column(name='mean_j', label='Mean J',
-                   format_func=lambda x: floatfmt(x, n=8, s=4) if x else ''),
+                   format_func=sciformat),
             column(name='mean_jerr', label=PLUSMINUS_ONE_SIGMA,
-                   format_func=lambda x: floatfmt(x, n=8, s=4) if x else ''),
+                   format_func=sciformat),
             column(name='percent_mean_error',
                    label='%',
                    format_func=lambda x: floatfmt(x, n=2) if x else ''),
+            column(name='mean_j_mswd',
+                   label='MSWD',
+                   format_func=lambda x: floatfmt(x, n=2)),
             column(name='j', label='Pred. J',
-                   format_func=lambda x: floatfmt(x, n=8, s=4),
+                   format_func=sciformat,
                    width=75),
             column(name='jerr',
-                   format_func=lambda x: floatfmt(x, n=10, s=4),
+                   format_func=sciformat,
                    label=PLUSMINUS_ONE_SIGMA,
                    width=75),
             column(name='percent_pred_error',
@@ -604,17 +611,17 @@ def column(klass=ObjectColumn, editable=False, **kw):
                     column(name='identifier', label='Identifier'),
                     column(name='sample', label='Sample', width=115),
                     column(name='saved_j', label='Saved J',
-                           format_func=lambda x: floatfmt(x, n=8, s=4)),
+                           format_func=sciformat),
                     column(name='saved_jerr', label=PLUSMINUS_ONE_SIGMA,
-                           format_func=lambda x: floatfmt(x, n=8, s=4)),
+                           format_func=sciformat),
                     column(name='percent_saved_error',
                            label='%',
                            format_func=lambda x: floatfmt(x, n=2)),
                     column(name='j', label='Pred. J',
-                           format_func=lambda x: floatfmt(x, n=8, s=4),
+                           format_func=sciformat,
                            width=75),
                     column(name='jerr',
-                           format_func=lambda x: floatfmt(x, n=10, s=5),
+                           format_func=sciformat,
                            label=PLUSMINUS_ONE_SIGMA,
                            width=75),
                     column(name='percent_pred_error',
diff --git a/pychron/pipeline/engine.py b/pychron/pipeline/engine.py
index da00a02063..0f66889124 100755
--- a/pychron/pipeline/engine.py
+++ b/pychron/pipeline/engine.py
@@ -15,20 +15,18 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
 import time
 
+import yaml
 from traits.api import HasTraits, Str, Instance, List, Event, on_trait_change, Any
 
-# ============= standard library imports ========================
-import os
-import yaml
-# ============= local library imports  ==========================
 from pychron.core.helpers.filetools import list_directory2, add_extension
+from pychron.loggable import Loggable
 from pychron.paths import paths
 from pychron.pipeline.nodes import FindReferencesNode
 from pychron.pipeline.nodes.base import BaseNode
 from pychron.pipeline.nodes.data import UnknownNode, ReferenceNode
-from pychron.loggable import Loggable
 from pychron.pipeline.nodes.figure import IdeogramNode, SpectrumNode, FigureNode, SeriesNode, NoAnalysesError
 from pychron.pipeline.nodes.filter import FilterNode
 from pychron.pipeline.nodes.fit import FitIsotopeEvolutionNode, FitBlanksNode, FitICFactorNode, FitFluxNode
@@ -50,6 +48,7 @@ def __enter__(self):
 
     def __exit__(self, exc_type, exc_val, exc_tb):
         self._node.active = False
+        self._node = None
 
 
 class Pipeline(HasTraits):
@@ -154,6 +153,7 @@ class PipelineEngine(Loggable):
     tag_event = Event
     invalid_event = Event
     recall_event = Event
+    omit_event = Event
 
     state = Instance(EngineState)
 
@@ -668,6 +668,7 @@ def _selected_changed(self, old, new):
         if old:
             old.on_trait_change(self._handle_tag, 'unknowns:tag_event,references:tag_event', remove=True)
             old.on_trait_change(self._handle_invalid, 'unknowns:invalid_event,references:invalid_event', remove=True)
+            old.on_trait_change(self._handle_omit, 'unknowns:omit_event,references:omit_event', remove=True)
             old.on_trait_change(self._handle_recall, 'unknowns:recall_event,references:recall_event', remove=True)
             old.on_trait_change(self._handle_len_unknowns, 'unknowns_items', remove=True)
             old.on_trait_change(self._handle_len_references, 'references_items', remove=True)
@@ -676,6 +677,7 @@ def _selected_changed(self, old, new):
         if new:
             new.on_trait_change(self._handle_tag, 'unknowns:tag_event,references:tag_event')
             new.on_trait_change(self._handle_invalid, 'unknowns:invalid_event,references:invalid_event')
+            new.on_trait_change(self._handle_omit, 'unknowns:omit_event,references:omit_event')
             new.on_trait_change(self._handle_recall, 'unknowns:recall_event,references:recall_event')
             new.on_trait_change(self._handle_status, 'unknowns:temp_status,references:temp_status')
             new.on_trait_change(self._handle_len_unknowns, 'unknowns_items')
@@ -777,13 +779,25 @@ def _handle_tag(self, new):
     def _handle_invalid(self, new):
         self.invalid_event = new
 
+    def _handle_omit(self, new):
+        self.omit_event = new
+
     def _dclicked_changed(self, new):
         self.configure(new)
         # self.update_needed = True
 
-    @on_trait_change('selected_editor:figure_model:panels:[figures:[inspector_event]]')
-    def _handle_inspector_event(self, obj, name, old, new):
-        self.active_inspector_item = new
+        # @on_trait_change('selected_editor:figure_model:panels:[figures:[inspector_event]]')
+        # def _handle_inspector_event(self, new):
+        #     self.active_inspector_item = new
+        #
+        # def _selected_editor_changed(self, old, new):
+        #     if new:
+        #         if hasattr(new, 'figure_model'):
+        #             new.on_trait_change(self._handle_inspector_event, 'figure_model:panels:[figures:[inspector_event]]')
+        #
+        #     if old:
+        #         new.on_trait_change(self._handle_inspector_event, 'figure_model:panels:[figures:[inspector_event]]',
+        #                             remove=True)
 
 # ============= EOF =============================================
 
diff --git a/pychron/pipeline/nodes/base.py b/pychron/pipeline/nodes/base.py
index 55e080a599..b27a4d9b6a 100755
--- a/pychron/pipeline/nodes/base.py
+++ b/pychron/pipeline/nodes/base.py
@@ -31,6 +31,8 @@ class BaseNode(HasTraits):
     options_klass = None
     options = Any
     auto_configure = Bool(True)
+    configurable = Bool(True)
+
     active = Bool(False)
     # metadata = Event
     _manual_configured = Bool(False)
@@ -104,16 +106,19 @@ def configure(self, pre_run=False, **kw):
         return self._configure(**kw)
 
     def _configure(self, obj=None, **kw):
-        if obj is None:
-            if self.options_klass:
-                obj = self.options
-            else:
-                obj = self
-
-        info = obj.edit_traits(kind='livemodal')
-        if info.result:
-            self.finish_configure()
-            self.refresh()
+        if self.configurable:
+            if obj is None:
+                if self.options_klass:
+                    obj = self.options
+                else:
+                    obj = self
+
+            info = obj.edit_traits(kind='livemodal')
+            if info.result:
+                self.finish_configure()
+                self.refresh()
+                return True
+        else:
             return True
 
     def finish_configure(self):
diff --git a/pychron/pipeline/nodes/data.py b/pychron/pipeline/nodes/data.py
index 89ffc8c8d0..9a447e84e6 100755
--- a/pychron/pipeline/nodes/data.py
+++ b/pychron/pipeline/nodes/data.py
@@ -16,16 +16,18 @@
 
 # ============= enthought library imports =======================
 
+import os
+import time
+from datetime import datetime, timedelta
+
 from pyface.constant import OK
 from pyface.file_dialog import FileDialog
 from pyface.message_dialog import information
 from pyface.timer.do_later import do_after
 from traits.api import Instance, Bool, Int, Str, List, Enum
 from traitsui.api import View, Item, EnumEditor
-# ============= standard library imports ========================
-import os
-from datetime import datetime, timedelta
-# ============= local library imports  ==========================
+
+from pychron.globals import globalv
 from pychron.pipeline.nodes.base import BaseNode
 
 
@@ -39,8 +41,6 @@ class InterpretedAgeNode(DVCNode):
     interpreted_ages = List
 
     def configure(self, pre_run=False, **kw):
-        # if pre_run and getattr(self, self.analysis_kind):
-        #     return True
         if not pre_run:
             self._manual_configured = True
 
@@ -168,7 +168,6 @@ class UnknownNode(DataNode):
     def set_last_n_analyses(self, n):
         db = self.dvc.db
         ans = db.get_last_n_analyses(n)
-        # ans = db.get_analyses_by_date_range(mi,ma)
         records = [ri for ai in ans for ri in ai.record_views]
         self.unknowns = self.dvc.make_analyses(records)
 
@@ -215,19 +214,15 @@ def pre_run(self, state):
         self.unknowns = state.unknowns
         refs = state.references
         if refs:
-            self.references.extend(refs)
+            if state.append_references:
+                self.references.extend(refs)
+            else:
+                self.references = refs
 
         if not self.references:
             self.configure(pre_run=True)
 
         return self.references
-        # items = getattr(state, self.analysis_kind)
-        # if state.has_references:
-        #     for ai in self.references:
-        #         ai.group_id = 0
-
-        # items.extend(self.references)
-        # self.references = items
 
     def run(self, state):
         pass
@@ -242,36 +237,39 @@ def run(self, state):
         items = getattr(state, self.analysis_kind)
         self.unknowns = items
 
-        # if not self.unknowns or state.has_flux_monitors:
-        #     self.unknowns = items
-        # else:
-        #     items.extend(self.unknowns)
-
-
-def debug_generator():
-    def f():
-        low = datetime.strptime('2014-10-25 04:32:25', '%Y-%m-%d %H:%M:%S')
-        for i in range(60):
-            high = low + timedelta(minutes=10 * i + 1)
-            yield low, high
-
-    return f()
 
 class ListenUnknownNode(UnknownNode):
-    hours = Int(10)
-    mass_spectrometer = Str()
+    name = 'Unknowns (Auto)'
+    hours = Int(2)
+    mass_spectrometer = Str
     available_spectrometers = List
     exclude_uuids = List
-    period = 5
+    period = Int(15)
     mode = Enum('Normal', 'Window')
     engine = None
     _alive = False
 
+    _cached_unknowns = None
+    _unks_ids = None
+    _updated = False
+
     def finish_load(self):
         self.available_spectrometers = self.dvc.get_mass_spectrometer_names()
         if self.available_spectrometers:
             self.mass_spectrometer = self.available_spectrometers[0]
 
+        if globalv.auto_pipeline_debug:
+            self.mass_spectrometer = 'jan'
+            self.period = 15
+            self.hours = 9
+
+            # from pympler.classtracker import ClassTracker
+            # self.tracker = ClassTracker()
+            # from pychron.dvc.dvc_orm import AnalysisTbl
+            # from pychron.database.records.isotope_record import DVCIsotopeRecordView
+            # self.tracker.track_class(DVCIsotopeRecordView)
+            # self.tracker.create_snapshot()
+
     def configure(self, pre_run=False, *args, **kw):
         if pre_run:
             return True
@@ -279,7 +277,7 @@ def configure(self, pre_run=False, *args, **kw):
         return BaseNode.configure(self, pre_run=pre_run, *args, **kw)
 
     def traits_view(self):
-        v = View(Item('mode', tooltip='Normal: get analyses between start of pipeline and start of pipeline - hours\n'
+        v = View(Item('mode', tooltip='Normal: get analyses between now and start of pipeline - hours\n'
                                       'Window: get analyses between now and now - hours'),
                  Item('hours'),
                  Item('period', label='Update Period (s)'),
@@ -290,34 +288,46 @@ def traits_view(self):
 
     def post_run(self, engine, state):
         if not self._alive:
-            self._gen = debug_generator()
-
             self.engine = engine
             self._start_listening()
 
+    def reset(self):
+        self._stop_listening()
+
     def _start_listening(self):
         self._low = datetime.now()
         self._alive = True
+        self._updated = False
         self._iter()
 
     def _stop_listening(self):
-        pass
+        self._alive = False
 
     def _iter(self):
         if self._alive:
-
             unks = self._load_unknowns()
-            if unks:
-                self.unknowns = unks
-                self.engine.rerun_with(unks, post_run=False)
-                self.engine.refresh_figure_editors()
-                # self.exclude_uuids = [u.uuid for u in unks]
-                # self.engine.refresh_unknowns(unks)
-                # # self.engine.
-                # self.engine.selected.unknowns = unks
-                # self.engine.run(state=self.engine.state)
-
-            do_after(self.period * 1000, self._iter)
+            # if globalv.auto_pipeline_debug:
+            #     self.tracker.stats.print_summary()
+
+            if self._alive:
+                if unks:
+                    unks_ids = [id(ai) for ai in unks]
+                    if self._unks_ids != unks_ids:
+                        # self.unknowns = unks
+                        self._unks_ids = unks_ids
+                        self.engine.rerun_with(unks, post_run=False)
+                        self.engine.refresh_figure_editors()
+
+                if self._alive:
+
+                    if self._updated:
+                        # if a new analysis was just found wait for at least 2mins before querying again
+                        period = 120
+                        self._updated = False
+                    else:
+                        period = self.period
+
+                    do_after(int(period * 1000), self._iter)
 
     def _load_unknowns(self):
         td = timedelta(hours=self.hours)
@@ -328,14 +338,38 @@ def _load_unknowns(self):
         else:
             low = high - td
 
-        # low = '2014-10-25 03:30:30'
-        # high = '2014-10-25 04:32:25'
-        low, high = self._gen.next()
-        unks = self.dvc.get_analyses_by_date_range(low, high,
-                                                   # exclude_uuids=self.exclude_uuids,
-                                                   analysis_type='unknown',
-                                                   mass_spectrometers=self.mass_spectrometer, verbose=True)
-        records = [ri for unk in unks for ri in unk.record_views]
-        return self.dvc.make_analyses(records)
+        with self.dvc.session_ctx(use_parent_session=False):
+            unks = self.dvc.get_analyses_by_date_range(low, high,
+                                                       analysis_type='unknown',
+                                                       mass_spectrometers=self.mass_spectrometer, verbose=True)
+            records = [ri for unk in unks for ri in unk.record_views]
+            if not self._cached_unknowns:
+                ans = self.dvc.make_analyses(records)
+            else:
+                ans = []
+                ais = []
+                for ri in records:
+                    ca = next((ci for ci in self._cached_unknowns if ci.record_id == ri.record_id), None)
+                    if ca is not None:
+                        ans.append(ca)
+                    else:
+                        ais.append(ri)
+
+                if ais:
+                    self._updated = True
+                    # the database may have updated but the repository not yet updated.
+                    # sleeping X seconds is a potential work around but a little dump.
+                    # better solution is to save to database after repository is updated
+                    try:
+                        ans.extend(self.dvc.make_analyses(ais))
+                    except BaseException:
+                        time.sleep(10)
+                        try:
+                            ans.extend(self.dvc.make_analyses(ais))
+                        except BaseException:
+                            pass
+
+        self._cached_unknowns = ans
+        return ans
 
 # ============= EOF =============================================
diff --git a/pychron/pipeline/nodes/filter.py b/pychron/pipeline/nodes/filter.py
index bc35275bbb..1947d665e2 100755
--- a/pychron/pipeline/nodes/filter.py
+++ b/pychron/pipeline/nodes/filter.py
@@ -15,23 +15,24 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import HasTraits, Str, Property, List, Enum, Button
-from traitsui.api import View, UItem, HGroup, EnumEditor, InstanceEditor
-# ============= standard library imports ========================
 import re
-# ============= local library imports  ==========================
+
+from traits.api import HasTraits, Str, Property, List, Enum, Button, Bool
+from traitsui.api import View, UItem, HGroup, EnumEditor, InstanceEditor, Item
 from traitsui.editors import ListEditor
+from uncertainties import std_dev, nominal_value
+
 from pychron.envisage.icon_button_editor import icon_button_editor
 from pychron.pipeline.nodes.base import BaseNode
 
-COMP_RE = re.compile(r'<=|>=|>|<|==')
+COMP_RE = re.compile(r'<=|>=|>|<|==|between|not between')
 
 
 class PipelineFilter(HasTraits):
     attribute = Str
-    comparator = Enum('<', '>', '<=', '>=', '!=')
+    comparator = Enum('<', '>', '<=', '>=', '!=', 'between', 'not between')
     criterion = Str
-    attributes = ('uage', 'aliquot', 'step')
+    attributes = ('age', 'age error', 'kca', 'kca error', 'aliquot', 'step')
 
     def __init__(self, txt=None, *args, **kw):
         super(PipelineFilter, self).__init__(*args, **kw)
@@ -42,8 +43,34 @@ def evaluate(self, item):
         attr = self.attribute
         comp = self.comparator
         crit = self.criterion
-        val = getattr(item, attr)
-        return eval('{}{}{}'.format(attr, comp, crit), {attr: val})
+        val = self._get_value(item, attr)
+        if comp in ('between', 'not between'):
+            try:
+                low, high = crit.split(',')
+            except ValueError:
+                return
+            if comp == 'between':
+                test = '{}<{}<{}'.format(low, attr, high)
+            else:
+                test = '{}>{} or {}>{}'.format(low, attr, attr, high)
+        else:
+            test = '{}{}{}'.format(attr, comp, crit)
+
+        result = eval(test, {attr: val})
+        return result
+
+    def _get_value(self, item, attr):
+        val = None
+        if attr in ('aliquot', 'step'):
+            val = getattr(item, attr)
+        elif attr in ('age', 'age error'):
+            val = getattr(item, 'uage')
+            val = nominal_value(val) if attr == 'age' else std_dev(val)
+        elif attr in ('kca', 'kca error'):
+            val = getattr(item, 'kca')
+            val = nominal_value(val) if attr == 'kca' else std_dev(val)
+
+        return val
 
     def traits_view(self):
         v = View(HGroup(UItem('attribute',
@@ -67,6 +94,7 @@ class FilterNode(BaseNode):
     analysis_kind = 'unknowns'
     filters = List
     add_filter_button = Button
+    remove = Bool(False)
 
     def load(self, nodedict):
         fs = [PipelineFilter(fi) for fi in nodedict['filters']]
@@ -84,15 +112,11 @@ def traits_view(self):
             UItem('filters', editor=ListEditor(mutable=False,
                                                style='custom',
                                                editor=InstanceEditor())),
+            Item('remove', label='Remove Analyses'),
             kind='livemodal',
             buttons=['OK', 'Cancel'])
         return v
 
-    # def configure(self):
-    #     info = self.edit_traits()
-    #     if info.result:
-    #         return True
-
     def _generate_filter(self):
         def func(item):
             for fi in self.filters:
@@ -104,8 +128,15 @@ def func(item):
         return func
 
     def run(self, state):
-        vs = filter(self._generate_filter(), getattr(state, self.analysis_kind))
-        setattr(state, self.analysis_kind, vs)
+        filterfunc = self._generate_filter()
+        if self.remove:
+            vs = filter(filterfunc, getattr(state, self.analysis_kind))
+            setattr(state, self.analysis_kind, vs)
+        else:
+            ans = getattr(state, self.analysis_kind)
+            for a in ans:
+                if not filterfunc(a):
+                    a.tag = 'omit'
 
     def add_filter(self, attr, comp, crit):
         self.filters.append(PipelineFilter(attribute=attr, comparator=comp, criterion=crit))
diff --git a/pychron/pipeline/nodes/find.py b/pychron/pipeline/nodes/find.py
index 0359bd14f2..8b142ea4e0 100755
--- a/pychron/pipeline/nodes/find.py
+++ b/pychron/pipeline/nodes/find.py
@@ -145,6 +145,14 @@ class FindReferencesNode(FindNode):
 
     analysis_type = Str
     analysis_types = List
+
+    extract_device = Str
+    # enable_extract_device = Bool
+    extract_devices = List
+
+    mass_spectrometer = Str
+    # enable_mass_spectrometer = Bool
+    mass_spectrometers = List
     # analysis_type_name = None
     name = 'Find References'
 
@@ -156,16 +164,34 @@ def load(self, nodedict):
         self.threshold = nodedict['threshold']
         self.analysis_type = nodedict['analysis_type']
 
+    def finish_load(self):
+        self.extract_devices = self.dvc.get_extraction_device_names()
+        self.mass_spectrometers = self.dvc.get_mass_spectrometer_names()
+
     # def dump(self, obj):
     #     obj['threshold'] = self.threshold
 
     def _analysis_type_changed(self, new):
+        if new == 'Blank Unknown':
+            new = 'Blank'
         self.name = 'Find {}s'.format(new)
 
-    def run(self, state):
+    def pre_run(self, state, configure=True):
         if not state.unknowns:
             return
 
+        eds = {ai.extract_device for ai in state.unknowns}
+        self.enable_extract_device = len(eds) > 1
+        self.extract_device = list(eds)[0]
+
+        ms = {ai.mass_spectrometer for ai in state.unknowns}
+        self.enable_mass_spectrometer = len(ms) > 1
+        self.mass_spectrometer = list(ms)[0]
+
+        return super(FindReferencesNode, self).pre_run(state, configure=configure)
+
+    def run(self, state):
+
         key = lambda x: x.group_id
         for gid, ans in groupby(sorted(state.unknowns, key=key), key=key):
             if self._run_group(state, gid, list(ans)):
@@ -190,7 +216,10 @@ def _run_group(self, state, gid, unknowns):
         times = sorted((ai.timestamp for ai in unknowns))
 
         atype = self.analysis_type.lower().replace(' ', '_')
-        refs = self.dvc.find_references(times, atype, hours=self.threshold, make_records=False)
+        refs = self.dvc.find_references(times, atype, hours=self.threshold,
+                                        extract_device=self.extract_device,
+                                        mass_spectrometer=self.mass_spectrometer,
+                                        make_records=False)
 
         if refs:
             unknowns.extend(refs)
@@ -211,8 +240,10 @@ def _run_group(self, state, gid, unknowns):
 
                 refs = self.dvc.make_analyses(refs)
                 if obj.is_append:
+                    state.append_references = True
                     state.references.extend(refs)
                 else:
+                    state.append_references = False
                     state.references = list(refs)
 
                 if unks is not None:
@@ -227,7 +258,14 @@ def traits_view(self):
                                     tooltip='Maximum difference between blank and unknowns in hours',
                                     label='Threshold (Hrs)'),
                                Item('analysis_type',
-                                    editor=EnumEditor(name='analysis_types')))
+                                    label='Analysis Type',
+                                    editor=EnumEditor(name='analysis_types')),
+
+                               Item('extract_device', editor=EnumEditor(name='extract_devices'),
+                                    label='Extract Device'),
+                               Item('mass_spectrometer',
+                                    label='Mass Spectrometer',
+                                    editor=EnumEditor(name='mass_spectrometers')))
 
         return v
 
diff --git a/pychron/pipeline/nodes/fit.py b/pychron/pipeline/nodes/fit.py
index 5b600197c5..d1f4ee9afe 100755
--- a/pychron/pipeline/nodes/fit.py
+++ b/pychron/pipeline/nodes/fit.py
@@ -28,11 +28,9 @@
 from pychron.pipeline.editors.flux_results_editor import FluxResultsEditor
 from pychron.pipeline.editors.results_editor import IsoEvolutionResultsEditor
 from pychron.pipeline.nodes.figure import FigureNode
+from pychron.pychron_constants import NULL_STR
 
 
-# from zobs.options.plotter_options_manager import IsotopeEvolutionOptionsManager, BlanksOptionsManager, \
-#     ICFactorOptionsManager, FluxOptionsManager
-
 class FitNode(FigureNode):
     use_save_node = Bool(True)
     has_save_node = False
@@ -86,6 +84,7 @@ def _configure_hook(self):
             unk = self.unknowns[0]
             names = unk.isotope_keys
             if names:
+                names = [NULL_STR] + names
                 pom.set_names(names)
                 # def _set_saveable(self, state):
                 #     super(FitBlanksNode, self)._set_saveable()
diff --git a/pychron/pipeline/nodes/persist.py b/pychron/pipeline/nodes/persist.py
index 2be8e818cd..b03245d527 100755
--- a/pychron/pipeline/nodes/persist.py
+++ b/pychron/pipeline/nodes/persist.py
@@ -22,6 +22,7 @@
 from traitsui.editors import DirectoryEditor
 from uncertainties import ufloat
 
+from pychron.core.confirmation import confirmation_dialog
 from pychron.core.helpers.filetools import add_extension
 from pychron.core.progress import progress_iterator
 from pychron.paths import paths
@@ -155,11 +156,6 @@ def run(self, state):
                                                               state.references)
         progress_iterator(state.unknowns, wrapper, threshold=1)
 
-        # for ai in state.unknowns:
-        #     self.dvc.save_icfactors(ai, state.saveable_keys,
-        #                             state.saveable_fits,
-        #                             state.references)
-
         msg = self.commit_message
         if not msg:
             f = ','.join('{}({})'.format(x, y) for x, y in zip(state.saveable_keys, state.saveable_fits))
@@ -182,6 +178,8 @@ def run(self, state):
         if state.saveable_irradiation_positions:
             xs = [x for x in state.saveable_irradiation_positions if x.save]
             if xs:
+                self.dvc.meta_repo.smart_pull()
+
                 progress_iterator(xs,
                                   lambda *args: self._save_j(state, *args),
                                   threshold=1)
@@ -190,13 +188,19 @@ def run(self, state):
                 self.dvc.meta_repo.add(p)
                 self.dvc.meta_commit('fit flux for {}'.format(state.irradiation, state.level))
 
+                if confirmation_dialog('Would you like to share your changes?'):
+                    self.dvc.meta_repo.smart_pull()
+                    self.dvc.meta_repo.push()
+
     def _save_j(self, state, irp, prog, i, n):
         if prog:
             prog.change_message('Save J for {} {}/{}'.format(irp.identifier, i, n))
 
         decay = state.decay_constants
         self.dvc.save_j(irp.irradiation, irp.level, irp.hole_id, irp.identifier,
-                        irp.j, irp.jerr, decay,
+                        irp.j, irp.jerr,
+                        irp.mean_j, irp.mean_jerr,
+                        decay,
                         analyses=irp.analyses,
                         add=False)
 
@@ -211,6 +215,7 @@ def _save_j(self, state, irp, prog, i, n):
 class XLSXTablePersistNode(BaseNode):
     name = 'Save Analysis Table'
     auto_configure = False
+    configurable = False
 
     def run(self, state):
         for table in state.tables:
diff --git a/pychron/pipeline/nodes/table.py b/pychron/pipeline/nodes/table.py
index 8bddaed9b8..ba1005dea1 100755
--- a/pychron/pipeline/nodes/table.py
+++ b/pychron/pipeline/nodes/table.py
@@ -19,7 +19,7 @@
 
 from pychron.pipeline.nodes.base import BaseNode
 from pychron.pipeline.tables.xlsx_table_writer import XLSXTableWriterOptions
-from pychron.processing.analyses.analysis_group import AnalysisGroup
+from pychron.processing.analyses.analysis_group import InterpretedAgeGroup
 
 
 class TableNode(BaseNode):
@@ -42,14 +42,25 @@ def _make_table(self, state):
         airs = (a for a in state.unknowns if a.analysis_type == 'air')
 
         key = lambda x: x.group_id
-        unk_group = [AnalysisGroup(analyses=list(analyses)) for _, analyses in groupby(sorted(unknowns, key=key),
-                                                                                       key=key)]
-        blank_group = [AnalysisGroup(analyses=list(analyses)) for _, analyses in groupby(sorted(blanks, key=key),
-                                                                                         key=key)]
-        air_group = [AnalysisGroup(analyses=list(analyses)) for _, analyses in groupby(sorted(airs, key=key),
-                                                                                       key=key)]
-
-        state.tables.append({'options': self.options,
+
+        options = self.options
+        if self.options.table_kind == 'Step Heat':
+            def factory(ans):
+                return InterpretedAgeGroup(analyses=list(ans),
+                                           plateau_nsteps=options.plateau_nsteps,
+                                           plateau_gas_fraction=options.plateau_gas_fraction,
+                                           fixed_step_low=options.fixed_step_low,
+                                           fixed_step_high=options.fixed_step_high)
+
+        else:
+            def factory(ans):
+                return InterpretedAgeGroup(analyses=list(ans))
+
+        unk_group = [factory(analyses) for _, analyses in groupby(sorted(unknowns, key=key), key=key)]
+        blank_group = [factory(analyses) for _, analyses in groupby(sorted(blanks, key=key), key=key)]
+        air_group = [factory(analyses) for _, analyses in groupby(sorted(airs, key=key), key=key)]
+
+        state.tables.append({'options': options,
                              'unknowns': unk_group,
                              'blanks': blank_group,
                              'airs': air_group})
diff --git a/pychron/pipeline/plot/editors/graph_editor.py b/pychron/pipeline/plot/editors/graph_editor.py
index 5361f93953..17542ede69 100755
--- a/pychron/pipeline/plot/editors/graph_editor.py
+++ b/pychron/pipeline/plot/editors/graph_editor.py
@@ -80,7 +80,7 @@ def set_items(self, ans, is_append=False, refresh=False, compress=True):
                 self.refresh_needed = True
 
     def _set_name(self):
-        na = list(set([ni.labnumber for ni in self.analyses]))
+        na = sorted(list(set([ni.labnumber for ni in self.analyses])))
         na = grouped_name(na)
         self.name = '{} {}'.format(na, self.basename)
 
diff --git a/pychron/pipeline/plot/panels/figure_panel.py b/pychron/pipeline/plot/panels/figure_panel.py
index 6d8a27e855..01efdc0122 100755
--- a/pychron/pipeline/plot/panels/figure_panel.py
+++ b/pychron/pipeline/plot/panels/figure_panel.py
@@ -16,14 +16,15 @@
 
 # ============= enthought library imports =======================
 
-from chaco.legend import Legend
-from traits.api import HasTraits, Any, List, Str
-# ============= standard library imports ========================
+import time
 from itertools import groupby
-from numpy import inf
 from math import isinf
-import time
-# ============= local library imports  ==========================
+
+from chaco.legend import Legend
+from numpy import inf
+from traits.api import HasTraits, Any, List, Str
+
+from pychron.core.codetools.inspection import caller
 from pychron.processing.analysis_graph import AnalysisStackedGraph
 
 
@@ -72,7 +73,7 @@ def _get_init_xlimits(self):
     def _make_graph_hook(self, g):
         pass
 
-    # @caller
+    @caller
     def make_graph(self):
 
         st = time.time()
@@ -139,7 +140,6 @@ def make_graph(self):
                     tmi, tma = plots[0].xlimits
                     if tmi != -inf and tma != inf:
                         mi, ma = tmi, tma
-                        print 'using previous limits', mi, ma
 
             for i, p in enumerate(plots):
                 if p.has_ylimits():
@@ -157,7 +157,6 @@ def make_graph(self):
                 mi, ma = 0, 100
 
             if not (isinf(mi) or isinf(ma)):
-                # print 'setting xlimits', mi, ma, fig.xpad, self.plot_options.xpadding
                 g.set_x_limits(mi, ma, pad=xpad or self.plot_options.xpadding)
 
             self.figures[0].post_make()
diff --git a/pychron/pipeline/plot/plotter/arar_figure.py b/pychron/pipeline/plot/plotter/arar_figure.py
index 727baf8043..fd6ed95b20 100755
--- a/pychron/pipeline/plot/plotter/arar_figure.py
+++ b/pychron/pipeline/plot/plotter/arar_figure.py
@@ -19,27 +19,25 @@
 from chaco.array_data_source import ArrayDataSource
 from chaco.tools.broadcaster import BroadcasterTool
 from chaco.tools.data_label_tool import DataLabelTool
+from numpy import Inf, vstack, zeros_like, ma
 from traits.api import HasTraits, Any, Int, Str, Property, \
     Event, Bool, cached_property, List, Float
-# ============= standard library imports ========================
-from numpy import Inf, vstack, zeros_like, ma
 from uncertainties import std_dev, nominal_value, ufloat
-# ============= local library imports  ==========================
+
 from pychron.core.filtering import filter_ufloats, sigma_filter
+from pychron.core.helpers.formatting import floatfmt, format_percent_error
 from pychron.graph.error_bar_overlay import ErrorBarOverlay
 from pychron.graph.ml_label import MPlotAxis
-from pychron.graph.tools.axis_tool import AxisTool
-from pychron.pipeline.plot.flow_label import FlowDataLabel
 from pychron.graph.ticks import SparseLogTicks
 from pychron.graph.ticks import SparseTicks
-from pychron.processing.analyses.analysis_group import AnalysisGroup
-from pychron.pipeline.plot.overlays.points_label_overlay import PointsLabelOverlay
-# from pychron.pipeline.plot import SparseLogTicks, SparseTicks
-from pychron.core.helpers.formatting import floatfmt, format_percent_error
-# from pychron.pipeline.plot import FlowDataLabel
+from pychron.graph.tools.analysis_inspector import AnalysisPointInspector
+from pychron.graph.tools.axis_tool import AxisTool
+from pychron.graph.tools.point_inspector import PointInspectorOverlay
 from pychron.graph.tools.rect_selection_tool import RectSelectionOverlay, \
     RectSelectionTool
-from pychron.graph.tools.analysis_inspector import AnalysisPointInspector
+from pychron.pipeline.plot.flow_label import FlowDataLabel
+from pychron.pipeline.plot.overlays.points_label_overlay import PointsLabelOverlay
+from pychron.processing.analyses.analysis_group import AnalysisGroup
 from pychron.pychron_constants import PLUSMINUS
 
 
@@ -494,7 +492,7 @@ def _plot_kca(self, po, plot, pid, **kw):
     def _plot_moles_k39(self, po, plot, pid, **kw):
         k = 'k39'
         ys, es = self._get_aux_plot_data(k)
-        return self._plot_aux('K39(fA)', k, ys, po, plot, pid, es, **kw)
+        return self._plot_aux('<sup>39</sup>Ar<sub>K</sub>(fA)', k, ys, po, plot, pid, es, **kw)
 
     def _get_aux_plot_data(self, k):
         vs = self._unpack_attr(k)
@@ -613,7 +611,7 @@ def _add_scatter_inspector(self,
                 if items is None:
                     items = self.sorted_analyses
                 inspector = AnalysisPointInspector(scatter,
-                                                   use_pane=True,
+                                                   use_pane=False,
                                                    analyses=items,
                                                    convert_index=convert_index,
                                                    index_tag=index_tag,
@@ -621,19 +619,23 @@ def _add_scatter_inspector(self,
                                                    value_format=value_format,
                                                    additional_info=additional_info)
 
-            if not isinstance(inspector, (list, tuple)):
-                inspector = (inspector,)
-
-            # pinspector_overlay = PointInspectorOverlay(component=scatter,
-            #                                            tool=point_inspector)
-            # print 'fff', inspector
-
-            event_queue = {}
-            for i in inspector:
-                i.event_queue = event_queue
-                i.on_trait_change(self._handle_inspection, 'inspector_item')
-                # scatter.overlays.append(pinspector_overlay)
-                broadcaster.tools.append(i)
+            pinspector_overlay = PointInspectorOverlay(component=scatter,
+                                                       tool=inspector)
+            scatter.overlays.append(pinspector_overlay)
+            broadcaster.tools.append(inspector)
+            # if not isinstance(inspector, (list, tuple)):
+            #     inspector = (inspector,)
+            #
+            # # pinspector_overlay = PointInspectorOverlay(component=scatter,
+            # #                                            tool=point_inspector)
+            # # print 'fff', inspector
+            #
+            # event_queue = {}
+            # for i in inspector:
+            #     i.event_queue = event_queue
+            #     i.on_trait_change(self._handle_inspection, 'inspector_item')
+            #     # scatter.overlays.append(pinspector_overlay)
+            #     broadcaster.tools.append(i)
 
             if update_meta_func is None:
                 update_meta_func = self.update_graph_metadata
diff --git a/pychron/pipeline/plot/plotter/iso_evo.py b/pychron/pipeline/plot/plotter/iso_evo.py
index f3b0385fa2..c76f39956f 100755
--- a/pychron/pipeline/plot/plotter/iso_evo.py
+++ b/pychron/pipeline/plot/plotter/iso_evo.py
@@ -71,7 +71,7 @@ def _plot(self, i, p):
                                                    fit=None,
                                                    add_inspector=False,
                                                    color='red')
-                psinspector = PointInspector(scatter, use_pane=True)
+                psinspector = PointInspector(scatter)
                 ymi, yma = min_max(ymi, yma, iso.sniff.ys)
                 xmi, xma = min_max(xmi, xma, iso.sniff.xs)
 
@@ -88,8 +88,8 @@ def _plot(self, i, p):
                                                         color='black',
                                                         add_inspector=False)
 
-            pinspector = PointInspector(scatter, use_pane=True)
-            linspector = RegressionInspectorTool(component=line, use_pane=True)
+            pinspector = PointInspector(scatter, use_pane=False)
+            linspector = RegressionInspectorTool(component=line, use_pane=False)
             if psinspector:
                 inspectors = [linspector, pinspector, psinspector]
             else:
@@ -120,7 +120,7 @@ def _plot_baseline(self, i, iso, p, xma, xmi, yma, ymi):
                                            add_tools=False,
                                            color='black')
 
-        pinspector = PointInspector(scatter, use_pane=True)
+        pinspector = PointInspector(scatter, use_pane=False)
 
         xmi, xma = min_max(xmi, xma, xs)
         ymi, yma = min_max(ymi, yma, ys)
diff --git a/pychron/pipeline/plot/plotter/references_series.py b/pychron/pipeline/plot/plotter/references_series.py
index 3f69727ae9..1db9636b31 100755
--- a/pychron/pipeline/plot/plotter/references_series.py
+++ b/pychron/pipeline/plot/plotter/references_series.py
@@ -15,15 +15,16 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+from math import isnan, isinf
+
 from chaco.array_data_source import ArrayDataSource
 from chaco.legend import Legend
 from enable.font_metrics_provider import font_metrics_provider
+from numpy import zeros_like, array, asarray
+from pyface.timer.do_later import do_later
 from traits.api import Property, on_trait_change, List, Array
-# ============= standard library imports ========================
-from math import isnan, isinf
 from uncertainties import nominal_value, std_dev
-from numpy import zeros_like, array, asarray
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.formatting import floatfmt
 from pychron.core.regression.base_regressor import BaseRegressor
 from pychron.core.regression.interpolation_regressor import InterpolationRegressor
@@ -229,7 +230,6 @@ def set_interpolated_values(self, iso, reg, fit):
         ans = self.sorted_analyses
 
         xs = [(ai.timestamp - ma) / self._normalization_factor for ai in ans]
-
         p_uys = reg.predict(xs)
         p_ues = reg.predict_error(xs)
         if any(map(isnan, p_ues)) or any(map(isinf, p_ues)):
@@ -242,10 +242,9 @@ def set_interpolated_values(self, iso, reg, fit):
         return asarray(p_uys), asarray(p_ues)
 
     def post_make(self):
-        self.graph.refresh()
+        do_later(self.graph.refresh)
 
     def plot(self, plots, legend):
-
         if plots:
             _, mx = self._get_min_max()
 
@@ -420,7 +419,9 @@ def _plot_references(self, pid, po):
         ymi, yma = self._calc_limits(r_ys, r_es)
 
         reg = None
-        kw = dict(add_tools=False, add_inspector=False, color='red',
+        kw = dict(add_tools=True, add_inspector=True,
+                  add_point_inspector=False,
+                  color='red',
                   plotid=pid,
                   selection_marker=po.marker,
                   marker=po.marker,
@@ -456,10 +457,9 @@ def af(i, x, y, analysis):
                                     add_selection=True,
                                     additional_info=af,
                                     items=self.sorted_references)
-        plot = self.graph.plots[pid]
+        plot = graph.plots[pid]
         plot.isotope = po.name
         plot.fit = ffit
-
         scatter.index.metadata['selections'] = [i for i, r in enumerate(self.sorted_references) if r.temp_selected]
         return reg, ymi, yma
 
diff --git a/pychron/pipeline/state.py b/pychron/pipeline/state.py
index 8b365487f0..5afd1625c3 100755
--- a/pychron/pipeline/state.py
+++ b/pychron/pipeline/state.py
@@ -33,6 +33,7 @@ class EngineState(HasTraits):
 
     tables = List
     editors = List
+    append_references = Bool
     has_references = Bool
     has_flux_monitors = Bool
     saveable_keys = List
diff --git a/pychron/pipeline/tables/xlsx_table_writer.py b/pychron/pipeline/tables/xlsx_table_writer.py
index be72fe5073..2761e533b6 100755
--- a/pychron/pipeline/tables/xlsx_table_writer.py
+++ b/pychron/pipeline/tables/xlsx_table_writer.py
@@ -19,8 +19,8 @@
 import xlsxwriter
 from pyface.confirmation_dialog import confirm
 from pyface.constant import YES
-from traits.api import Instance, Enum, Str, Bool
-from traitsui.api import View, VGroup, Item, UItem, Tabbed, HGroup
+from traits.api import Instance, Enum, Str, Bool, Int, Float, BaseStr
+from traitsui.api import View, VGroup, Item, UItem, Tabbed, HGroup, Label
 from uncertainties import nominal_value, std_dev, ufloat
 
 from pychron.core.helpers.filetools import add_extension, unique_path2, view_file
@@ -42,7 +42,17 @@
                          'X symbol preceding sample ID denotes analyses excluded from plateau age calculations.',)
 
 
+class SingleStr(BaseStr):
+    def validate(self, obj, name, value):
+        if value and len(value) > 1:
+            self.error(obj, name, value)
+        else:
+            return value
+
+
 class XLSXTableWriterOptions(BasePersistenceOptions):
+    table_kind = dumpable(Enum('Fusion', 'Step Heat'))
+
     power_units = dumpable(Enum('W', 'C'))
     age_units = dumpable(Enum('Ma', 'Ga', 'ka', 'a'))
     hide_gridlines = dumpable(Bool(False))
@@ -97,6 +107,11 @@ class XLSXTableWriterOptions(BasePersistenceOptions):
     include_summary_kca = dumpable(Bool(True))
     include_summary_comments = dumpable(Bool(True))
 
+    plateau_nsteps = dumpable(Int(3))
+    plateau_gas_fraction = dumpable(Float(50))
+    fixed_step_low = dumpable(SingleStr)
+    fixed_step_high = dumpable(SingleStr)
+
     _persistence_name = 'xlsx_table_options'
 
     @property
@@ -122,12 +137,14 @@ def traits_view(self):
                              VGroup(UItem('monitor_notes', style='custom'), show_border=True,
                                     label='Notes'), label='Monitors')
 
-        grp = VGroup(Item('name', label='Filename'),
+        grp = VGroup(Item('table_kind', label='Kind'),
+                     Item('name', label='Filename'),
                      Item('auto_view', label='Open in Excel'),
                      show_border=True)
 
         appearence_grp = VGroup(Item('hide_gridlines', label='Hide Gridlines'),
                                 Item('power_units', label='Power Units'),
+
                                 Item('age_units', label='Age Units'),
                                 Item('repeat_header', label='Repeat Header'),
                                 show_border=True, label='Appearance')
@@ -138,8 +155,9 @@ def traits_view(self):
                               Item('use_weighted_kca', label='K/Ca Weighted Mean', enabled_when='include_kca'),
                               Item('include_k2o', label='K2O wt. %'),
                               Item('include_production_ratios', label='Production Ratios'),
-                              Item('include_plateau_age', label='Plateau'),
-                              Item('include_integrated_age', label='Integrated'),
+                              Item('include_plateau_age', label='Plateau', visible_when='table_kind=="Step Heat"'),
+                              Item('include_integrated_age', label='Integrated', visible_when='table_kind=="Step '
+                                                                                              'Heat"'),
                               Item('include_isochron_age', label='Isochron'),
                               Item('include_isochron_ratios', label='Isochron Ratios'),
                               Item('include_time_delta', label='Time since Irradiation'),
@@ -175,7 +193,21 @@ def traits_view(self):
                                  show_border=True),
                              label='Summary')
 
-        v = View(Tabbed(g1, unknown_grp, blank_grp, air_grp, monitor_grp, summary_grp),
+        plat_grp = VGroup(Item('plateau_nsteps', label='Num. Steps', tooltip='Number of contiguous steps'),
+                          Item('plateau_gas_fraction', label='Min. Gas%',
+                               tooltip='Plateau must represent at least Min. Gas% release'),
+                          HGroup(UItem('fixed_step_low'),
+                                 Label('To'),
+                                 UItem('fixed_step_high'),
+                                 show_border=True,
+                                 label='Fixed Steps'),
+                          visible_when='table_kind=="Step Heat"',
+                          show_border=True,
+                          label='Plateau')
+
+        calc_grp = VGroup(plat_grp, label='Calc.')
+
+        v = View(Tabbed(g1, unknown_grp, calc_grp, blank_grp, air_grp, monitor_grp, summary_grp),
                  resizable=True,
                  width=750,
                  title='XLSX Analysis Table Options',
@@ -206,7 +238,11 @@ def build(self, path=None, unknowns=None, airs=None, blanks=None, monitors=None,
         self._subscript = self._workbook.add_format({'font_script': 2})
 
         if unknowns:
-            self._make_unknowns(unknowns)
+            # make a human optimized table
+            self._make_human_unknowns(unknowns)
+
+            # make a machine optimized table
+            self._make_machine_unknowns(unknowns)
 
         if airs:
             self._make_airs(airs)
@@ -236,6 +272,93 @@ def build(self, path=None, unknowns=None, airs=None, blanks=None, monitors=None,
     def _get_columns(self, name):
         options = self._options
 
+        ubit = name in ('Unknowns', 'Monitor')
+        bkbit = ubit and options.include_blanks
+        # ibit = options.include_intercepts
+
+        kcabit = ubit and options.include_kca
+        age_units = '({})'.format(options.age_units)
+        columns = [(True, '', '', 'status'),
+                   (True, 'N', '', 'aliquot_step_str'),
+                   (ubit, 'Power', options.power_units, 'extract_value'),
+
+                   (ubit, 'Age', age_units, 'age', value),
+                   (ubit, PLUSMINUS_ONE_SIGMA, age_units, 'age_err_wo_j', value),
+
+                   (kcabit, 'K/Ca', '', 'kca', value),
+                   (ubit, PLUSMINUS_ONE_SIGMA, '', 'kca', error),
+
+                   (ubit and options.include_radiogenic_yield,
+                    ('%', '<sup>40</sup>', 'Ar'), '(%)', 'rad40_percent', value),
+                   (ubit and options.include_F,
+                    ('<sup>40</sup>', 'Ar*/', '<sup>39</sup>', 'Ar', '<sub>K</sub>'), '', 'uF', value),
+                   (ubit and options.include_k2o, ('K', '<sub>2</sub>', 'O'), '(wt. %)', 'k2o'),
+                   (ubit and options.include_isochron_ratios, ('<sup>39</sup>', 'Ar/', '<sup>40</sup>', 'Ar'), '',
+                    'isochron3940',
+                    value),
+                   (ubit and options.include_isochron_ratios, ('<sup>36</sup>', 'Ar/', '<sup>40</sup>', 'Ar'), '',
+                    'isochron3640',
+                    value),
+                   # True, disc/ic corrected
+                   (True, ('<sup>40</sup>', 'Ar'), '(fA)', 'Ar40', iso_value('disc_ic_corrected')),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'Ar40', iso_value('disc_ic_corrected', ve='error')),
+                   (True, ('<sup>39</sup>', 'Ar'), '(fA)', 'Ar39', iso_value('disc_ic_corrected')),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'Ar39', iso_value('disc_ic_corrected', ve='error')),
+                   (True, ('<sup>38</sup>', 'Ar'), '(fA)', 'Ar38', iso_value('disc_ic_corrected')),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'Ar38', iso_value('disc_ic_corrected', ve='error')),
+                   (True, ('<sup>37</sup>', 'Ar'), '(fA)', 'Ar37', iso_value('disc_ic_corrected')),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'Ar37', iso_value('disc_ic_corrected', ve='error')),
+                   (True, ('<sup>36</sup>', 'Ar'), '(fA)', 'Ar36', iso_value('disc_ic_corrected')),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'Ar36', iso_value('disc_ic_corrected', ve='error')),
+
+                   # intercepts baseline corrected
+                   # (ibit, ('<sup>40</sup>', 'Ar'), '(fA)', 'Ar40', iso_value('intercept')),
+                   # (ibit, PLUSMINUS_ONE_SIGMA, '', 'Ar40', iso_value('intercept', ve='error')),
+                   # (ibit, ('<sup>39</sup>', 'Ar'), '(fA)', 'Ar39', iso_value('intercept')),
+                   # (ibit, PLUSMINUS_ONE_SIGMA, '', 'Ar39', iso_value('intercept', ve='error')),
+                   # (ibit, ('<sup>38</sup>', 'Ar'), '(fA)', 'Ar38', iso_value('intercept')),
+                   # (ibit, PLUSMINUS_ONE_SIGMA, '', 'Ar38', iso_value('intercept', ve='error')),
+                   # (ibit, ('<sup>37</sup>', 'Ar'), '(fA)', 'Ar37', iso_value('intercept')),
+                   # (ibit, PLUSMINUS_ONE_SIGMA, '', 'Ar37', iso_value('intercept', ve='error')),
+                   # (ibit, ('<sup>36</sup>', 'Ar'), '(fA)', 'Ar36', iso_value('intercept')),
+                   # (ibit, PLUSMINUS_ONE_SIGMA, '', 'Ar36', iso_value('intercept', ve='error')),
+
+                   # blanks
+                   (bkbit, ('<sup>40</sup>', 'Ar'), '(fA)', 'Ar40', iso_value('blank')),
+                   (bkbit, PLUSMINUS_ONE_SIGMA, '', 'Ar40', iso_value('blank', ve='error')),
+                   (bkbit, ('<sup>39</sup>', 'Ar'), '(fA)', 'Ar39', iso_value('blank')),
+                   (bkbit, PLUSMINUS_ONE_SIGMA, '', 'Ar39', iso_value('blank', ve='error')),
+                   (bkbit, ('<sup>38</sup>', 'Ar'), '(fA)', 'Ar38', iso_value('blank')),
+                   (bkbit, PLUSMINUS_ONE_SIGMA, '', 'Ar38', iso_value('blank', ve='error')),
+                   (bkbit, ('<sup>37</sup>', 'Ar'), '(fA)', 'Ar37', iso_value('blank')),
+                   (bkbit, PLUSMINUS_ONE_SIGMA, '', 'Ar37', iso_value('blank', ve='error')),
+                   (bkbit, ('<sup>36</sup>', 'Ar'), '(fA)', 'Ar36', iso_value('blank')),
+                   (bkbit, PLUSMINUS_ONE_SIGMA, '', 'Ar36', iso_value('blank', ve='error')),
+
+                   (True, 'Disc', '', 'discrimination', value),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'discrimination', error),
+                   (True, ('IC', '<sup>CDD</sup>'), '', 'CDD_ic_factor', icf_value),
+                   (True, PLUSMINUS_ONE_SIGMA, '', 'CDD_ic_factor', icf_error),
+
+                   (options.include_rundate, 'RunDate', '', 'rundate'),
+                   (options.include_time_delta, (u'\u0394t', '<sup>3</sup>'), '(days)', 'decay_days'),
+                   (ubit, 'J', '', 'j', value),
+                   (ubit, PLUSMINUS_ONE_SIGMA, '', 'j', error),
+                   (ubit, ('<sup>39</sup>', 'Ar Decay'), '', 'ar39decayfactor', value),
+                   (ubit, ('<sup>37</sup>', 'Ar Decay'), '', 'ar37decayfactor', value)]
+
+        if options.include_production_ratios:
+            pr = self._get_irradiation_columns(ubit)
+            columns.extend(pr)
+        else:
+            irr = [(ubit, 'Irradiation', '', 'irradiation_label')]
+            columns.extend(irr)
+
+        return [c for c in columns if c[0]]
+
+    def _get_machine_columns(self, name):
+        options = self._options
+
         ubit = name in ('Unknowns', 'Monitor')
         bkbit = ubit and options.include_blanks
         ibit = options.include_intercepts
@@ -243,6 +366,11 @@ def _get_columns(self, name):
         kcabit = ubit and options.include_kca
         age_units = '({})'.format(options.age_units)
         columns = [(True, '', '', 'status'),
+                   (True, 'Identifier', '', 'identifier'),
+                   (True, 'Sample', '', 'sample'),
+                   (True, 'Material', '', 'material'),
+                   (True, 'Project', '', 'project'),
+
                    (True, 'N', '', 'aliquot_step_str'),
                    (ubit, 'Power', options.power_units, 'extract_value'),
 
@@ -305,7 +433,7 @@ def _get_columns(self, name):
                    (True, PLUSMINUS_ONE_SIGMA, '', 'CDD_ic_factor', icf_error),
 
                    (options.include_rundate, 'RunDate', '', 'rundate'),
-                   (options.include_time_delta, (u'\u0394t', '<sup>3</sup>'), '(days)', 'decay_delta'),
+                   (options.include_time_delta, (u'\u0394t', '<sup>3</sup>'), '(days)', 'decay_days'),
                    (ubit, 'J', '', 'j', value),
                    (ubit, PLUSMINUS_ONE_SIGMA, '', 'j', error),
                    (ubit, ('<sup>39</sup>', 'Ar Decay'), '', 'ar39decayfactor', value),
@@ -349,29 +477,57 @@ def _get_irradiation_columns(self, ubit):
         return cols
 
     def _get_summary_columns(self):
+        def get_preferred_age_kind(ag, *args):
+            return ''
+
+        def get_preferred_age(ag, *args):
+            return nominal_value(ag.weighted_age)
+
+        def get_preferred_age_error(ag, *args):
+            return std_dev(ag.weighted_age)
 
         opt = self._options
+        is_step_heat = opt.table_kind == 'Step Heat'
         cols = [(opt.include_summary_sample, 'Sample', '', 'sample'),
                 (opt.include_summary_identifier, 'Identifier', '', 'identifier'),
                 (opt.include_summary_unit, 'Unit', '', 'unit'),
                 (opt.include_summary_location, 'Location', '', 'location'),
                 (opt.include_summary_irradiation, 'Irradiation', '', 'irradiation_label'),
                 (opt.include_summary_material, 'Material', '', 'material'),
-                (opt.include_summary_age, 'Age Type', '', 'preferred_age_kind'),
+
+                (opt.include_summary_age, 'Age Type', '', '', get_preferred_age_kind),
+                # (opt.include_summary_age, 'Age Type', '', 'preferred_age_kind'),
+
                 (opt.include_summary_n, 'N', '', 'nanalyses'),
                 (opt.include_summary_percent_ar39, ('%', '<sup>39</sup>', 'Ar'), '', 'percent_39Ar'),
                 (opt.include_summary_mswd, 'MSWD', '', 'mswd'),
                 (opt.include_summary_kca, 'K/Ca', '', 'weighted_kca', value),
                 (opt.include_summary_kca, PLUSMINUS_ONE_SIGMA, '', 'weighted_kca', error),
-                (opt.include_summary_age, 'Age', '', 'preferred_age', value),
-                (opt.include_summary_age, PLUSMINUS_ONE_SIGMA, '', 'preferred_age', error),
+
+                (opt.include_summary_age, 'Age', '', '', get_preferred_age),
+                (opt.include_summary_age, PLUSMINUS_ONE_SIGMA, '', '', get_preferred_age_error),
                 (opt.include_summary_comments, 'Comments', '', None),
+
+                # Hidden Cols
+                (True, 'WeightedMeanAge', '', 'weighted_age', value),
+                (True, PLUSMINUS_ONE_SIGMA, '', 'weighted_age', error),
+                (True, 'ArithmeticMeanAge', '', 'arith_age', value),
+                (True, PLUSMINUS_ONE_SIGMA, '', 'arith_age', error),
+                (True, 'IsochronAge', '', 'isochron_age', value),
+                (True, PLUSMINUS_ONE_SIGMA, '', 'isochron_age', error),
+                (is_step_heat, 'PlateauAge', '', 'plateau_age', value),
+                (is_step_heat, PLUSMINUS_ONE_SIGMA, '', 'plateau_age', error),
+                (is_step_heat, 'IntegratedAge', '', 'integrated_age', value),
+                (is_step_heat, PLUSMINUS_ONE_SIGMA, '', 'integrated_age', error),
                 ]
         return cols
 
-    def _make_unknowns(self, unks):
+    def _make_human_unknowns(self, unks):
         self._make_sheet(unks, 'Unknowns')
 
+    def _make_machine_unknowns(self, unks):
+        self._make_machine_sheet(unks, 'Unknowns (Machine)')
+
     def _make_airs(self, airs):
         self._make_sheet(airs, 'Airs')
 
@@ -384,6 +540,7 @@ def _make_monitors(self, monitors):
     def _make_summary_sheet(self, unks):
         self._current_row = 1
         sh = self._workbook.add_worksheet('Summary')
+        self._format_generic_worksheet(sh)
 
         cols = self._get_summary_columns()
         cols = [c for c in cols if c[0]]
@@ -394,24 +551,33 @@ def _make_summary_sheet(self, unks):
         self._current_row += 1
 
         idx = next((i for i, c in enumerate(cols) if c[1] == 'Age Type'), 6)
-        idx_e = next((i for i, c in enumerate(cols) if c[1] == 'Age'), 12)+1
+        idx_e = next((i for i, c in enumerate(cols) if c[1] == 'Age'), 12) + 1
         # sh.write_rich_string(self._current_row, idx, 'Preferred Age', border)
         sh.merge_range(self._current_row, idx, self._current_row, idx_e, 'Preferred Age', cell_format=fmt)
 
+        # hide extra age columns
+        for hidden in ('WeightedMeanAge', 'ArithmeticMeanAge', 'IsochronAge', 'PlateauAge', 'IntegratedAge'):
+            hc = next((i for i, c in enumerate(cols) if c[1] == hidden), None)
+            if hc is not None:
+                sh.set_column(hc, hc + 1, options={'hidden': True})
+
         self._current_row += 1
         sh.set_row(self._current_row, 5)
         self._current_row += 1
         self._write_header(sh, cols, include_units=False)
+        center = self._workbook.add_format({'align': 'center'})
         for ug in unks:
             for i, ci in enumerate(cols):
                 txt = self._get_txt(ug, ci)
-                sh.write(self._current_row, i, txt)
+                sh.write_rich_string(self._current_row, i, str(txt), center)
             self._current_row += 1
 
+        self._make_notes(sh, len(cols), 'summary')
+
     def _make_irradiations(self, unks):
         self._current_row = 1
         sh = self._workbook.add_worksheet('Irradiations')
-
+        self._format_generic_worksheet(sh)
         cols = [(True, 'Name', '', 'irradiation')]
         icols = self._get_irradiation_columns(True)
         cols.extend(icols)
@@ -456,10 +622,34 @@ def _make_sheet(self, groups, name):
         self._make_notes(worksheet, len(cols), name)
         self._current_row = 1
 
-    def _format_worksheet(self, sh, cols):
+    def _make_machine_sheet(self, groups, name):
+        self._current_row = 1
+        worksheet = self._workbook.add_worksheet(name)
+
+        cols = self._get_machine_columns(name)
+        self._format_worksheet(worksheet, cols)
+
+        self._make_title(worksheet, name, cols)
+
+        repeat_header = self._options.repeat_header
+
+        for i, group in enumerate(groups):
+            if repeat_header or i == 0:
+                self._make_column_header(worksheet, cols, i)
+
+            n = len(group.analyses) - 1
+            for i, item in enumerate(group.analyses):
+                self._make_analysis(worksheet, cols, item, i == n)
+            self._current_row += 1
+
+        self._current_row = 1
+
+    def _format_generic_worksheet(self, sh):
         if self._options.hide_gridlines:
             sh.hide_gridlines(2)
 
+    def _format_worksheet(self, sh, cols):
+        self._format_generic_worksheet(sh)
         if self._options.include_rundate:
             idx = next((i for i, c in enumerate(cols) if c[1] == 'RunDate'))
             sh.set_column(idx, idx, 12)
@@ -609,6 +799,7 @@ def _make_summary(self, sh, cols, group):
             sh.write(self._current_row, idx + 1, std_dev(group.plateau_age))
 
             self._current_row += 1
+
         if self._options.include_isochron_age:
             sh.write_rich_string(self._current_row, start_col, u'Isochron Age {}'.format(PLUSMINUS_ONE_SIGMA),
                                  fmt)
@@ -638,6 +829,20 @@ def _make_notes(self, sh, ncols, name):
         for i in xrange(0, ncols):
             sh.write_blank(self._current_row, i, 'Notes:', cell_format=top)
 
+    def _make_summary_notes(self, sh):
+        sh.write(self._current_row, 0, 'Plateau Criteria:')
+        self._current_row += 1
+
+        sh.write(self._current_row, 0, '\t\tN Steps= {}'.format(self._options.plateau_nsteps))
+        self._current_row += 1
+
+        sh.write(self._current_row, 0, '\t\tGas Fraction= {}'.format(self._options.plateau_gas_fraction))
+        self._current_row += 1
+        if self._options.fixed_step_low or self._options.fixed_step_high:
+            sh.write(self._current_row, 0, '\t\tFixed Steps= {},{}'.format(self._options.fixed_step_low,
+                                                                      self.fixed_step_high))
+            self._current_row += 1
+
     def _make_unknowns_notes(self, sh):
         monitor_age = 28.201
         decay_ref = u'Steiger and J\u00E4ger (1977)'
@@ -689,7 +894,10 @@ def _get_txt(self, item, col):
         else:
             getter = getattr
 
-        return getter(item, attr)
+        if getter is None:
+            return ''
+        else:
+            return getter(item, attr)
 
 
 if __name__ == '__main__':
@@ -724,6 +932,10 @@ def get_intensity(self):
 
     class A:
         def __init__(self, a):
+            self.identifier = 'Foo'
+            self.project = 'Bar'
+            self.material = 'Moo'
+            self.sample = 'Bat'
             self.aliquot_step_str = a
             self.isotopes = {'Ar40': Iso('Ar40'),
                              'Ar39': Iso('Ar39'),
@@ -746,7 +958,7 @@ def __init__(self, a):
             self.uF = ufloat(frand(10, 10), frand(10))
             self.rad40_percent = frand(3, 100)
             self.rundate = datetime.now()
-            self.decay_delta = frand(2, 200)
+            self.decay_days = frand(2, 200)
             self.k2o = frand(2)
             self.irradiation_label = 'NM-284 E9'
             self.irradiation = 'NM-284'
@@ -764,6 +976,7 @@ class G:
         material = 'Groundmass'
         identifier = '13234'
         analyses = [A('01'), A('02')]
+        arith_age = 132
         weighted_age = 10.01
         plateau_age = 123
         integrated_age = 1231
diff --git a/pychron/pipeline/tasks/actions.py b/pychron/pipeline/tasks/actions.py
index 86869665e4..baff5bfc3a 100755
--- a/pychron/pipeline/tasks/actions.py
+++ b/pychron/pipeline/tasks/actions.py
@@ -50,13 +50,13 @@ class ResumeAction(TaskAction):
 class RunFromAction(TaskAction):
     name = 'Run From'
     method = 'run_from'
+    image = icon('start')
 
 
 class ResetAction(TaskAction):
     name = 'Reset'
     method = 'reset'
-    image = icon('resume')
-    # enabled_name = 'resume_enabled'
+    image = icon('arrow_refresh')
 
 
 class ClearAction(TaskAction):
@@ -85,9 +85,17 @@ class ConfigureAnalysesTableAction(TaskAction):
     image = icon('cog')
 
 
+class ConfigureSampleTableAction(TaskAction):
+    name = 'Configure Sample Table'
+    dname = 'Configure Sample Table'
+    method = 'configure_sample_table'
+    image = icon('cog')
+
+
 class LoadReviewStatusAction(TaskAction):
     name = 'Review Status'
     method = 'load_review_status'
+    image = icon('check_boxes')
 
 
 class EditAnalysisAction(TaskAction):
@@ -118,12 +126,25 @@ def perform(self, event):
 
 
 class BrowserAction(Action):
+    _task_id = 'pychron.browser.task'
+
     def perform(self, event):
-        app = event.task.window.application
-        task = app.get_task('pychron.browser.task')
+        task = self._get_task(event)
         if hasattr(task, self.action):
             getattr(task, self.action)()
 
+    def _get_task(self, event):
+        app = event.task.window.application
+        task = app.get_task(self._task_id)
+        return task
+
+
+class RecallAction(BrowserAction):
+    name = 'Recall...'
+
+    def perform(self, event):
+        self._get_task(event)
+
 
 class TimeViewBrowserAction(BrowserAction):
     name = 'Time View Recall...'
@@ -170,6 +191,12 @@ class FreezeFlux(PipelineAction):
     action = 'freeze_flux'
 
 
+class AnalysisTableAction(PipelineAction):
+    name = 'Analysis Table'
+    dname = 'Analysis Table'
+    action = 'set_analysis_table_template'
+
+
 # ============= Plotting Actions =============================================
 class ResetFactoryDefaultsAction(Action):
     name = 'Reset Factory Defaults'
diff --git a/pychron/pipeline/tasks/browser_task.py b/pychron/pipeline/tasks/browser_task.py
index ed1e90ad4f..6039738fba 100755
--- a/pychron/pipeline/tasks/browser_task.py
+++ b/pychron/pipeline/tasks/browser_task.py
@@ -15,19 +15,18 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+from datetime import datetime, timedelta
+
 from pyface.tasks.action.schema import SToolBar
 from pyface.tasks.task_layout import TaskLayout, PaneItem, Tabbed
 from traits.api import Instance, Bool
-# ============= standard library imports ========================
-from datetime import datetime, timedelta
-# ============= local library imports  ==========================
+
 from pychron.envisage.browser.browser_task import BaseBrowserTask
 from pychron.envisage.browser.recall_editor import RecallEditor
 from pychron.envisage.browser.searcher import Searcher
-from pychron.envisage.tasks.actions import ToggleFullWindowAction
 from pychron.globals import globalv
 from pychron.pipeline.tasks.actions import ConfigureRecallAction, ConfigureAnalysesTableAction, \
-    LoadReviewStatusAction, EditAnalysisAction, DiffViewAction
+    LoadReviewStatusAction, EditAnalysisAction, DiffViewAction, ConfigureSampleTableAction
 from pychron.pipeline.tasks.analysis_range_selector import AnalysisRangeSelector
 from pychron.pipeline.tasks.panes import BrowserPane, SearcherPane, AnalysisGroupsPane
 
@@ -40,9 +39,9 @@ class BrowserTask(BaseBrowserTask):
     model = Instance('pychron.envisage.browser.browser_model.BrowserModel')
     tool_bars = [SToolBar(ConfigureRecallAction(),
                           ConfigureAnalysesTableAction(),
+                          ConfigureSampleTableAction(),
                           name='Configure'),
-                 SToolBar(ToggleFullWindowAction(),
-                          LoadReviewStatusAction(),
+                 SToolBar(LoadReviewStatusAction(),
                           DiffViewAction(),
                           name='View'),
                  SToolBar(EditAnalysisAction(),
diff --git a/pychron/pipeline/tasks/panes.py b/pychron/pipeline/tasks/panes.py
index e23f5d41ed..301e66e8af 100755
--- a/pychron/pipeline/tasks/panes.py
+++ b/pychron/pipeline/tasks/panes.py
@@ -17,15 +17,13 @@
 # ============= enthought library imports =======================
 from pyface.action.menu_manager import MenuManager
 from pyface.tasks.traits_dock_pane import TraitsDockPane
-from traits.api import Int, Property, List, Button
+from traits.api import Int, Property, Button
 from traitsui.api import View, UItem, VGroup, EnumEditor, InstanceEditor, HGroup, VSplit
 from traitsui.handler import Handler
 from traitsui.menu import Action
 from traitsui.tabular_adapter import TabularAdapter
-
-# ============= standard library imports ========================
 from uncertainties import nominal_value, std_dev
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.color_generators import colornames
 from pychron.core.helpers.formatting import floatfmt
 from pychron.core.ui.qt.tree_editor import PipelineEditor
@@ -33,7 +31,6 @@
 from pychron.envisage.browser.sample_view import BaseBrowserSampleView
 from pychron.envisage.browser.view import PaneBrowserView
 from pychron.envisage.icon_button_editor import icon_button_editor
-
 from pychron.pipeline.engine import Pipeline
 from pychron.pipeline.nodes import FindReferencesNode
 from pychron.pipeline.nodes.base import BaseNode
@@ -172,19 +169,18 @@ class PipelinePane(TraitsDockPane):
 
     def traits_view(self):
         def enable_disable_menu_factory():
-            return MenuManager(
-                Action(name='Enable',
-                       action='enable',
-                       visible_when='not object.enabled'),
-                Action(name='Disable',
-                       action='disable',
-                       visible_when='object.enabled'),
-                Action(name='Enable Permanent',
-                       action='enable_permanent',
-                       visible_when='not object.enabled'),
-                Action(name='Disable Permanent',
-                       action='disable_permanent',
-                       visible_when='object.enabled'))
+            return MenuManager(Action(name='Enable',
+                                      action='enable',
+                                      visible_when='not object.enabled'),
+                               Action(name='Disable',
+                                      action='disable',
+                                      visible_when='object.enabled'),
+                               Action(name='Enable Permanent',
+                                      action='enable_permanent',
+                                      visible_when='not object.enabled'),
+                               Action(name='Disable Permanent',
+                                      action='disable_permanent',
+                                      visible_when='object.enabled'))
 
         def menu_factory(*actions):
             return MenuManager(Action(name='Enable',
@@ -288,29 +284,24 @@ def ffind_menu_factory():
                  ReviewTreeNode(node_for=[ReviewNode], menu=enable_disable_menu_factory()),
                  PipelineTreeNode(node_for=[BaseNode], label='name')]
 
-        # editor = TreeEditor(nodes=nodes,
         editor = PipelineEditor(nodes=nodes,
                                 editable=False,
-                                # selection_mode='extended',
                                 selected='selected',
                                 dclick='dclicked',
                                 hide_root=True,
                                 lines_mode='off',
-                                # word_wrap=True,
                                 show_disabled=True,
                                 refresh_all_icons='refresh_all_needed',
                                 update='update_needed')
-        v = View(VGroup(
-            UItem('selected_pipeline_template',
-                  editor=EnumEditor(name='available_pipeline_templates')),
-            UItem('pipeline',
-                  editor=editor)), handler=PipelineHandler())
+        v = View(VGroup(UItem('selected_pipeline_template',
+                              editor=EnumEditor(name='available_pipeline_templates')),
+                        UItem('pipeline',
+                              editor=editor)), handler=PipelineHandler())
         return v
 
 
 class UnknownsAdapter(TabularAdapter):
     columns = [('Run ID', 'record_id'),
-               # ('Class','klass'),
                ('Sample', 'sample'),
                ('Age', 'age'),
                (PLUSMINUS_ONE_SIGMA, 'error'),
@@ -325,33 +316,23 @@ class UnknownsAdapter(TabularAdapter):
     tag_width = Int(50)
     graph_id_width = Int(30)
 
-    font = 'arial 10'
-    # record_id_text_color = Property
-    # tag_text_color = Property
     age_text = Property
     error_text = Property
-    colors = List(colornames)
 
-    # klass_text = Property
-    # def _get_klass_text(self):
-    # return self.item.__class__.__name__.split('.')[-1]
+    font = 'arial 10'
 
-    def get_menu(self, object, trait, row, column):
+    def __init__(self, *args, **kw):
+        super(UnknownsAdapter, self).__init__(*args, **kw)
+        self._ncolors = len(colornames)
+
+    def get_menu(self, obj, trait, row, column):
         return MenuManager(Action(name='Recall', action='recall_unknowns'),
                            Action(name='Group Selected', action='unknowns_group_by_selected'),
                            Action(name='Clear Group', action='unknowns_clear_grouping'),
-                           Action(name='Clear All Group', action='unknowns_clear_all_grouping'),
-                           )
-
-    # return MenuManager(Action(name='Group Selected', action='group_by_selected'),
-    # Action(name='Group by Labnumber', action='group_by_labnumber'),
-    # Action(name='Group by Aliquot', action='group_by_aliquot'),
-    # Action(name='Clear Grouping', action='clear_grouping'),
-    # Action(name='Unselect', action='unselect'))
+                           Action(name='Clear All Group', action='unknowns_clear_all_grouping'))
 
     def get_bg_color(self, obj, trait, row, column=0):
         c = 'white'
-        # if not isinstance(self.item, IsotopeRecordView):
         if self.item.tag == 'invalid':
             c = '#C9C5C5'
         elif self.item.is_omitted():
@@ -359,32 +340,21 @@ def get_bg_color(self, obj, trait, row, column=0):
         return c
 
     def _get_age_text(self):
-        r = ''
-        # print self.item,not isinstance(self.item, IsotopeRecordView)
-        # if not isinstance(self.item, IsotopeRecordView):
         r = floatfmt(nominal_value(self.item.uage), n=3)
         return r
 
     def _get_error_text(self):
-        r = ''
-        # if not isinstance(self.item, IsotopeRecordView):
-        # r = floatfmt(std_dev(self.item.uage_wo_j_err), n=4)
         r = floatfmt(std_dev(self.item.uage), n=4)
         return r
 
     def get_text_color(self, obj, trait, row, column=0):
         color = 'black'
-        # if obj.show_group_colors:
-        # n = len(colornames)
-        colors = self.colors
-        n = len(colors)
 
         gid = getattr(obj, trait)[row].group_id
-        # gid = obj.items[row].group_id
 
-        cid = gid % n if n else 0
+        cid = gid % self._ncolors if self._ncolors else 0
         try:
-            color = colors[cid]
+            color = colornames[cid]
         except IndexError:
             pass
 
@@ -392,8 +362,7 @@ def get_text_color(self, obj, trait, row, column=0):
 
 
 class ReferencesAdapter(TabularAdapter):
-    columns = [
-        ('Run ID', 'record_id'), ]
+    columns = [('Run ID', 'record_id'), ]
     font = 'arial 10'
 
     def get_menu(self, object, trait, row, column):
diff --git a/pychron/pipeline/tasks/plugin.py b/pychron/pipeline/tasks/plugin.py
index 2d783fbcea..5ba110b586 100755
--- a/pychron/pipeline/tasks/plugin.py
+++ b/pychron/pipeline/tasks/plugin.py
@@ -24,11 +24,11 @@
 from pychron.envisage.browser.sample_browser_model import SampleBrowserModel
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.paths import paths
-from pychron.pipeline.tasks.actions import ConfigureRecallAction, IdeogramAction, IsochronAction, SpectrumAction, \
-    SeriesAction, BlanksAction, ICFactorAction, ResetFactoryDefaultsAction, VerticalFluxAction, \
-    LastNAnalysesSeriesAction, \
+from pychron.pipeline.tasks.actions import ConfigureRecallAction, IdeogramAction, SpectrumAction, \
+    SeriesAction, BlanksAction, ICFactorAction, ResetFactoryDefaultsAction, LastNAnalysesSeriesAction, \
     LastNHoursSeriesAction, LastMonthSeriesAction, LastWeekSeriesAction, LastDaySeriesAction, TimeViewBrowserAction, \
-    FluxAction, FreezeProductionRatios, InverseIsochronAction, IsoEvolutionAction, ExtractionAction
+    FluxAction, FreezeProductionRatios, InverseIsochronAction, IsoEvolutionAction, ExtractionAction, RecallAction, \
+    AnalysisTableAction
 from pychron.pipeline.tasks.browser_task import BrowserTask
 from pychron.pipeline.tasks.preferences import PipelinePreferencesPane
 from pychron.pipeline.tasks.task import PipelineTask
@@ -101,10 +101,21 @@ def reduction_group():
         def quick_series_group():
             return SGroup(id='quick_series.group')
 
+        def recall_group():
+            return SGroup(id='recall.group')
+
         pg = 'MenuBar/data.menu/plot.group'
         rg = 'MenuBar/data.menu/reduction.group'
+        reg = 'MenuBar/data.menu/recall.group'
         qsg = 'MenuBar/data.menu/quick_series.group'
 
+        recall_actions = [SchemaAddition(factory=recall_group,
+                                         path='MenuBar/data.menu'),
+                          SchemaAddition(factory=RecallAction,
+                                         path=reg),
+                          SchemaAddition(factory=TimeViewBrowserAction,
+                                         path=reg)]
+
         plotting_actions = [SchemaAddition(factory=data_menu,
                                            path='MenuBar',
                                            before='tools.menu',
@@ -115,14 +126,14 @@ def quick_series_group():
                                            path=pg),
                             SchemaAddition(factory=SpectrumAction,
                                            path=pg),
-                            SchemaAddition(factory=IsochronAction,
-                                           path=pg),
+                            # SchemaAddition(factory=IsochronAction,
+                            #                path=pg),
                             SchemaAddition(factory=InverseIsochronAction,
                                            path=pg),
                             SchemaAddition(factory=SeriesAction,
                                            path=pg),
-                            SchemaAddition(factory=VerticalFluxAction,
-                                           path=pg),
+                            # SchemaAddition(factory=VerticalFluxAction,
+                            #                path=pg),
                             SchemaAddition(factory=ExtractionAction,
                                            path=pg)]
 
@@ -136,6 +147,8 @@ def quick_series_group():
                                             path=rg),
                              SchemaAddition(factory=FluxAction,
                                             path=rg),
+                             SchemaAddition(factory=AnalysisTableAction,
+                                            path=rg),
                              SchemaAddition(factory=FreezeProductionRatios,
                                             path=rg)]
 
@@ -158,12 +171,12 @@ def quick_series_group():
                                 SchemaAddition(factory=LastMonthSeriesAction,
                                                path=qsg), ]
 
-        actions = plotting_actions
+        actions = recall_actions
+        actions.extend(plotting_actions)
         actions.extend(reduction_actions)
         actions.extend(help_actions)
         actions.extend(quick_series_actions)
-        actions.append(SchemaAddition(factory=TimeViewBrowserAction,
-                                      path='MenuBar/data.menu'))
+
         return [TaskExtension(task_id='pychron.pipeline.task',
                               actions=[configure_recall]),
                 TaskExtension(task_id='pychron.browser.task',
diff --git a/pychron/pipeline/tasks/task.py b/pychron/pipeline/tasks/task.py
index 0e67eadfb8..c68fb4f125 100755
--- a/pychron/pipeline/tasks/task.py
+++ b/pychron/pipeline/tasks/task.py
@@ -28,7 +28,6 @@
 from pychron.dvc import dvc_dump
 from pychron.dvc.func import repository_has_staged
 from pychron.envisage.browser.browser_task import BaseBrowserTask
-from pychron.envisage.tasks.actions import ToggleFullWindowAction
 from pychron.globals import globalv
 from pychron.paths import paths
 from pychron.pipeline.engine import PipelineEngine
@@ -36,12 +35,12 @@
 from pychron.pipeline.plot.editors.interpreted_age_editor import InterpretedAgeEditor
 from pychron.pipeline.save_figure import SaveFigureView, SaveFigureModel
 from pychron.pipeline.state import EngineState
-from pychron.pipeline.tasks.actions import RunAction, SavePipelineTemplateAction, ResumeAction, ResetAction, \
-    ConfigureRecallAction, TagAction, SetInterpretedAgeAction, ClearAction, SavePDFAction, SaveFigureAction, \
-    SetInvalidAction, SetFilteringTagAction, TabularViewAction, EditAnalysisAction, RunFromAction
+from pychron.pipeline.tasks.actions import RunAction, ResumeAction, ResetAction, \
+    ConfigureRecallAction, TagAction, SetInterpretedAgeAction, ClearAction, SavePDFAction, SetInvalidAction, SetFilteringTagAction, \
+    EditAnalysisAction, RunFromAction
 from pychron.pipeline.tasks.interpreted_age_factory import InterpretedAgeFactoryView, \
     InterpretedAgeFactoryModel
-from pychron.pipeline.tasks.panes import PipelinePane, AnalysesPane, InspectorPane
+from pychron.pipeline.tasks.panes import PipelinePane, AnalysesPane
 from pychron.pipeline.tasks.select_repo import SelectExperimentIDView
 
 
@@ -61,17 +60,16 @@ def select_experiment_repo():
 class PipelineTask(BaseBrowserTask):
     name = 'Pipeline Processing'
     engine = Instance(PipelineEngine)
-    tool_bars = [SToolBar(ConfigureRecallAction(),
-                          ToggleFullWindowAction()),
+    tool_bars = [SToolBar(ConfigureRecallAction()),
                  SToolBar(RunAction(),
                           ResumeAction(),
                           RunFromAction(),
                           ResetAction(),
                           ClearAction(),
-                          SavePipelineTemplateAction(),
+                          # SavePipelineTemplateAction(),
                           name='Pipeline'),
                  SToolBar(SavePDFAction(),
-                          SaveFigureAction(),
+                          # SaveFigureAction(),
                           name='Save'),
                  SToolBar(EditAnalysisAction(),
                           name='Edit'),
@@ -80,7 +78,7 @@ class PipelineTask(BaseBrowserTask):
                           SetInvalidAction(),
                           SetFilteringTagAction(),
                           SetInterpretedAgeAction(),
-                          TabularViewAction(),
+                          # TabularViewAction(),
                           name='Misc')]
 
     state = Instance(EngineState)
@@ -113,12 +111,15 @@ def _debug(self):
 
     def prepare_destroy(self):
         self.interpreted_age_browser_model.dump_browser()
+        self.engine.reset()
+
         super(PipelineTask, self).prepare_destroy()
 
     def create_dock_panes(self):
         panes = [PipelinePane(model=self.engine),
                  AnalysesPane(model=self.engine),
-                 InspectorPane(model=self.engine)]
+                 # InspectorPane(model=self.engine)
+                 ]
         return panes
 
     # toolbar actions
@@ -372,6 +373,10 @@ def set_last_month_template(self):
         self.engine.selected_pipeline_template = 'Series'
         self._set_last_nhours(24 * 7 * 30.5)
 
+    def set_analysis_table_template(self):
+        self.engine.selected_pipeline_template = 'Analysis Table'
+        self.run()
+
     # private
     def _get_active_analyses(self):
         if self.active_editor:
@@ -403,7 +408,6 @@ def _make_save_figure_object(self, editor):
 
     def _add_interpreted_ages(self, ias):
         dvc = self.dvc
-        db = dvc.db
         for ia in ias:
             if ia.use:
                 dvc.add_interpreted_age(ia)
@@ -452,13 +456,16 @@ def _sa_factory(self, path, factory, **kw):
     def _set_invalid(self, items):
         self.set_tag(tag='invalid', items=items, warn=True)
 
+    def _set_omit(self, items):
+        self.set_tag(tag='omit', items=items, warn=True)
+
     # defaults
     def _default_layout_default(self):
         return TaskLayout(left=Splitter(Splitter(PaneItem('pychron.pipeline.pane',
                                                  width=200),
                                         PaneItem('pychron.pipeline.analyses',
                                                  width=200)),
-                                        PaneItem('pychron.pipeline.inspector'),
+                                        # PaneItem('pychron.pipeline.inspector'),
                                         orientation='vertical'))
 
     def _extra_actions_default(self):
@@ -490,12 +497,14 @@ def _active_editor_changed(self, new):
     # def _handle_save_needed(self):
     #     self.engine.run_persist(self._temp_state)
 
-    @on_trait_change('engine:[tag_event, invalid_event, recall_event]')
+    @on_trait_change('engine:[tag_event, invalid_event, recall_event, omit_event]')
     def _handle_analysis_tagging(self, name, new):
         if name == 'tag_event':
             self.set_tag(items=new)
         elif name == 'invalid_event':
             self._set_invalid(new)
+        elif name == 'omit_event':
+            self._set_omit(new)
         elif name == 'recall_event':
             self.recall(new)
 
diff --git a/pychron/pipeline/template.py b/pychron/pipeline/template.py
index 5b5c869ef7..1c928eea37 100755
--- a/pychron/pipeline/template.py
+++ b/pychron/pipeline/template.py
@@ -16,13 +16,11 @@
 
 # ============= enthought library imports =======================
 
+import yaml
 from traits.api import HasTraits
 
-# ============= standard library imports ========================
-import yaml
-# ============= local library imports  ==========================
+from pychron.pipeline.nodes.data import DataNode, UnknownNode, DVCNode, InterpretedAgeNode, ListenUnknownNode
 from pychron.pipeline.nodes.diff import DiffNode
-from pychron.pipeline.nodes.data import DataNode, UnknownNode, DVCNode, InterpretedAgeNode
 from pychron.pipeline.nodes.find import FindNode
 from pychron.pipeline.nodes.gain import GainCalibrationNode
 from pychron.pipeline.nodes.persist import PersistNode
@@ -42,7 +40,7 @@ def render(self, application, pipeline, bmodel, iabmodel, dvc, clear=False):
         datanode = None
         try:
             node = pipeline.nodes[0]
-            if isinstance(node, DataNode):
+            if isinstance(node, DataNode) and not isinstance(node, ListenUnknownNode):
                 datanode = node
                 datanode.visited = False
         except IndexError:
diff --git a/pychron/processing/analyses/analysis.py b/pychron/processing/analyses/analysis.py
index 532541be25..4b97f53d95 100755
--- a/pychron/processing/analyses/analysis.py
+++ b/pychron/processing/analyses/analysis.py
@@ -208,6 +208,7 @@ class Analysis(ArArAge):
     recall_event = Event
     tag_event = Event
     invalid_event = Event
+    omit_event = Event
 
     def get_baseline_corrected_signal_dict(self):
         get = lambda iso: iso.get_baseline_corrected_value()
@@ -271,6 +272,11 @@ def trigger_invalid(self, analyses=None):
             analyses = [self, ]
         self.invalid_event = analyses
 
+    def trigger_omit(self, analyses=None):
+        if analyses is None:
+            analyses = [self, ]
+        self.omit_event = analyses
+
     def is_omitted(self):
         return self.is_omitted_by_tag() or self.temp_selected
 
diff --git a/pychron/processing/analyses/analysis_group.py b/pychron/processing/analyses/analysis_group.py
index 928a782777..265b39da1d 100755
--- a/pychron/processing/analyses/analysis_group.py
+++ b/pychron/processing/analyses/analysis_group.py
@@ -17,16 +17,13 @@
 # ============= enthought library imports =======================
 import math
 
-from traits.api import HasTraits, List, Property, cached_property, Str, Bool, Int, Event, Tuple
-
-# ============= standard library imports ========================
 from numpy import array, nan
-# ============= local library imports  ==========================
+from traits.api import HasTraits, List, Property, cached_property, Str, Bool, Int, Event, Float
 from uncertainties import ufloat, nominal_value
-# from pychron.processing.analysis import Marker
+
+from pychron.core.stats.core import calculate_mswd, calculate_weighted_mean, validate_mswd
 from pychron.processing.argon_calculations import calculate_plateau_age, age_equation, calculate_isochron
 from pychron.pychron_constants import ALPHAS, AGE_MA_SCALARS
-from pychron.core.stats.core import calculate_mswd, calculate_weighted_mean, validate_mswd
 
 
 def AGProperty(*depends):
@@ -65,9 +62,12 @@ class AnalysisGroup(HasTraits):
     _repository_identifier = Str
 
     irradiation = Property
+    irradiation_label = Property
     sample = Property
     aliquot = Property
     material = Property
+    unit = Str
+    location = Str
 
     _sample = Str
     age_scalar = Property
@@ -77,6 +77,7 @@ class AnalysisGroup(HasTraits):
     include_j_error_in_mean = Bool(True)
     include_j_error_in_individual_analyses = Bool(False)
 
+    percent_39Ar = AGProperty()
     dirty = Event
 
     def get_mswd_tuple(self):
@@ -141,6 +142,10 @@ def _get_repository_identifier(self):
     def _set_repository_identifier(self, v):
         self._repository_identifier = v
 
+    @cached_property
+    def _get_irradiation_label(self):
+        return self.analyses[0].irradiation_label
+
     @cached_property
     def _get_irradiation(self):
         return self.analyses[0].irradiation
@@ -159,6 +164,10 @@ def _get_sample(self):
     def _set_sample(self, s):
         self._sample = s
 
+    @cached_property
+    def _get_percent_39Ar(self):
+        return 0
+
     # @cached_property
     def _get_weighted_age(self):
         attr = self.attribute
@@ -278,7 +287,11 @@ class StepHeatAnalysisGroup(AnalysisGroup):
 
     plateau_age_error_kind = Str
     nsteps = Int
-    calculate_fixed_plateau_steps = Tuple
+    fixed_step_low = Str
+    fixed_step_high = Str
+
+    plateau_nsteps = Int(3)
+    plateau_gas_fraction = Float(50)
 
     # def _get_nanalyses(self):
     #     if self.plateau_steps:
@@ -314,6 +327,18 @@ def _get_integrated_age(self):
     #
     #     return zip(*d)
 
+    @property
+    def fixed_steps(self):
+        l, h = '', ''
+        if self.fixed_step_low:
+            l = self.fixed_step_low
+
+        if self.fixed_step_high:
+            h = self.fixed_step_high
+
+        if not (l is None and h is None):
+            return l, h
+
     # @cached_property
     def _get_plateau_age(self):
         # ages, errors, k39 = self._get_steps()
@@ -322,9 +347,9 @@ def _get_plateau_age(self):
         errors = [ai.age_err for ai in self.analyses]
         k39 = [nominal_value(ai.get_computed_value('k39')) for ai in self.analyses]
 
-        options = {'nsteps': self.pc_nsteps,
-                   'gas_fraction': self.pc_gas_fraction,
-                   'force_steps': self.calculate_fixed_plateau_steps}
+        options = {'nsteps': self.plateau_nsteps,
+                   'gas_fraction': self.plateau_gas_fraction,
+                   'fixed_steps': self.fixed_steps}
 
         excludes = [i for i in enumerate(self.analyses) if ai.is_omitted()]
         args = calculate_plateau_age(ages, errors, k39, options=options, excludes=excludes)
diff --git a/pychron/processing/analyses/view/adapters.py b/pychron/processing/analyses/view/adapters.py
index e4e506f938..075c929867 100755
--- a/pychron/processing/analyses/view/adapters.py
+++ b/pychron/processing/analyses/view/adapters.py
@@ -18,15 +18,13 @@
 from pyface.action.menu_manager import MenuManager
 from traits.trait_types import Int, Str
 from traits.traits import Property
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from traitsui.menu import Action
 from traitsui.tabular_adapter import TabularAdapter
-from pychron.core.configurable_tabular_adapter import ConfigurableMixin
-from pychron.core.helpers.formatting import format_percent_error
 from uncertainties import nominal_value, std_dev
-from pychron.core.helpers.formatting import floatfmt
 
+from pychron.core.configurable_tabular_adapter import ConfigurableMixin
+from pychron.core.helpers.formatting import floatfmt
+from pychron.core.helpers.formatting import format_percent_error
 
 SIGMA_1 = u'\u00b11\u03c3'
 TABLE_FONT = 'arial 11'
@@ -307,6 +305,7 @@ class IsotopeTabularAdapter(BaseTabularAdapter, ConfigurableMixin):
                    ('Bk', 'blank_value'),
                    (sigmaf('Bk'), 'blank_error'),
                    ('%(Bk)', 'blank_percent_error'),
+                   ('Bk Source', 'blank_source'),
                    ('IC', 'ic_factor'),
                    (sigmaf('IC'), 'ic_factor_error'),
                    ('Disc', 'discrimination'),
@@ -325,6 +324,7 @@ class IsotopeTabularAdapter(BaseTabularAdapter, ConfigurableMixin):
                ('Bk', 'blank_value'),
                (sigmaf('Bk'), 'blank_error'),
                ('%(Bk)', 'blank_percent_error'),
+               ('Bk Source', 'blank_source'),
                ('IC', 'ic_factor')]
 
     value_tooltip = Str('Baseline, Blank, IC and/or Discrimination corrected')
diff --git a/pychron/processing/arar_age.py b/pychron/processing/arar_age.py
index 0999bd0588..b576da625b 100755
--- a/pychron/processing/arar_age.py
+++ b/pychron/processing/arar_age.py
@@ -70,6 +70,7 @@ class ArArAge(IsotopeGroup):
     uage = None
     # uage_wo_j_err =None
     uage_w_j_err = None
+    uage_wo_j_err = None
 
     age = None
     age_err = None
@@ -439,6 +440,7 @@ def _set_age_values(self, f, include_decay_error=False):
         self.age_err = std_dev(age)
         self.age_err_wo_j = float(age.std_dev)
         self.uage = ufloat(self.age, self.age_err)
+        self.uage_wo_j_err = ufloat(self.age, self.age_err_wo_j)
 
         # if self.j is not None:
         # j = copy(self.j)
diff --git a/pychron/processing/arar_constants.py b/pychron/processing/arar_constants.py
index 3386c7a04a..1f1236fdbe 100755
--- a/pychron/processing/arar_constants.py
+++ b/pychron/processing/arar_constants.py
@@ -115,9 +115,9 @@ def __init__(self, *args, **kw):
             bind_preference(self, 'lambda_Ar39_e', 'pychron.arar.constants.lambda_Ar39_error')
 
             bind_preference(self, 'atm4036_v', 'pychron.arar.constants.Ar40_Ar36_atm')
-            bind_preference(self, 'atm_4036_e', 'pychron.arar.constants.Ar40_Ar36_atm_error')
+            bind_preference(self, 'atm4036_e', 'pychron.arar.constants.Ar40_Ar36_atm_error')
             bind_preference(self, 'atm4038_v', 'pychron.arar.constants.Ar40_Ar38_atm')
-            bind_preference(self, 'atm_4038_e', 'pychron.arar.constants.Ar40_Ar38_atm_error')
+            bind_preference(self, 'atm4038_e', 'pychron.arar.constants.Ar40_Ar38_atm_error')
 
             bind_preference(self, 'k3739_mode', 'pychron.arar.constants.Ar37_Ar39_mode')
             bind_preference(self, 'k3739_v', 'pychron.arar.constants.Ar37_Ar39')
diff --git a/pychron/processing/argon_calculations.py b/pychron/processing/argon_calculations.py
index f1d20f9afe..8eba8a6ae6 100755
--- a/pychron/processing/argon_calculations.py
+++ b/pychron/processing/argon_calculations.py
@@ -23,10 +23,9 @@
 from numpy import asarray, average, array
 from uncertainties import ufloat, umath, nominal_value
 
-# ============= local library imports  ==========================
-from pychron.pychron_constants import ALPHAS
-from pychron.processing.arar_constants import ArArConstants
 from pychron.core.stats.core import calculate_weighted_mean
+from pychron.processing.arar_constants import ArArConstants
+from pychron.pychron_constants import ALPHAS
 
 
 # def calculate_F_ratio(m4039, m3739, m3639, pr):
@@ -139,9 +138,9 @@ def calculate_plateau_age(ages, errors, k39, kind='inverse_variance', method='fl
     errors = asarray(errors)
     k39 = asarray(k39)
 
-    force_steps = options.get('force_steps', False)
-    if force_steps:
-        sstep, estep = force_steps
+    fixed_steps = options.get('fixed_steps', False)
+    if fixed_steps:
+        sstep, estep = fixed_steps
         sstep, estep = sstep.upper(), estep.upper()
         if not sstep:
             sidx = 0
diff --git a/pychron/processing/flux/utilities.py b/pychron/processing/flux/utilities.py
index 21bc647d32..43ee20adfd 100755
--- a/pychron/processing/flux/utilities.py
+++ b/pychron/processing/flux/utilities.py
@@ -44,7 +44,8 @@ def mean_j(ans, error_kind, monitor_age, lambda_k):
     uf = (av, werr)
     j = calculate_flux(uf, monitor_age, lambda_k=lambda_k)
     # print age_equation(j, uf, lambda_k=lambda_k, scalar=1)
-    return j
+    mswd = calculate_mswd(fs, es)
+    return j, mswd
 
 # def calculate_flux(error_kind, monitor_age):
 #
diff --git a/pychron/processing/isotope.py b/pychron/processing/isotope.py
index db6a6f3d0e..357574f2db 100755
--- a/pychron/processing/isotope.py
+++ b/pychron/processing/isotope.py
@@ -26,7 +26,6 @@
 from numpy import array, Inf, polyfit
 from uncertainties import ufloat, nominal_value, std_dev
 
-# ============= local library imports  ==========================
 from pychron.core.helpers.fits import natural_name_fit, fit_to_degree
 from pychron.core.regression.mean_regressor import MeanRegressor
 
@@ -494,7 +493,7 @@ class Isotope(BaseIsotope):
     # background = Instance(Background)
     # sniff = Instance(Sniff)
     temporary_blank = None
-    ic_factor = None
+    ic_factor = 1.0
     correct_for_blank = True
     # ic_factor = Either(Variable, AffineScalarFunc)
 
@@ -505,6 +504,7 @@ class Isotope(BaseIsotope):
 
     discrimination = None
     interference_corrected_value = None
+    blank_source = ''
 
     def __init__(self, name, detector):
         BaseIsotope.__init__(self, name, detector)
diff --git a/pychron/pyscripts/pyscript.py b/pychron/pyscripts/pyscript.py
index 59ac8e5404..f6166e18d4 100755
--- a/pychron/pyscripts/pyscript.py
+++ b/pychron/pyscripts/pyscript.py
@@ -15,21 +15,21 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Str, Any, Bool, Property, Int, Dict
-# ============= standard library imports ========================
-from threading import Event, Thread, Lock
-from Queue import Empty, LifoQueue
 import hashlib
-import time
-import os
 import inspect
+import os
+import sys
+import time
 import traceback
+from Queue import Empty, LifoQueue
+from threading import Event, Thread, Lock
+
 import yaml
-import sys
-# ============= local library imports  ==========================
-from pychron.paths import paths
-from pychron.loggable import Loggable
+from traits.api import Str, Any, Bool, Property, Int, Dict
+
 from pychron.globals import globalv
+from pychron.loggable import Loggable
+from pychron.paths import paths
 from pychron.pyscripts.error import PyscriptError, IntervalError, GosubError, \
     KlassError, MainError
 
@@ -631,7 +631,7 @@ def complete_interval(self):
             return
 
         try:
-            _, f, n = self._interval_stack.get(timeout=0.01)
+            f, n = self._interval_stack.get(timeout=0.01)
         except Empty:
             raise IntervalError()
 
@@ -648,6 +648,8 @@ def complete_interval(self):
         if not self._cancel:
             f.clear()
 
+        self._interval_stack.task_done()
+
     @calculate_duration
     @command_register
     def begin_interval(self, duration, name=None, calc_time=False):
@@ -673,9 +675,11 @@ def wait(dur, flag, n):
             self.console_info('BEGIN INTERVAL {} waiting for {}'.format(name, duration))
             t = Thread(name=name,
                        target=wait, args=(duration, f, name))
-            t.start()
 
-        self._interval_stack.put((t, f, name))
+        self._interval_stack.put((f, name))
+        # only start the thread after item pushed onto stack
+        if t:
+            t.start()
 
     @count_verbose_skip
     @command_register
diff --git a/pychron/pyscripts/tasks/pyscript_plugin.py b/pychron/pyscripts/tasks/pyscript_plugin.py
index b16ab5859e..bf684a94a2 100755
--- a/pychron/pyscripts/tasks/pyscript_plugin.py
+++ b/pychron/pyscripts/tasks/pyscript_plugin.py
@@ -22,8 +22,6 @@
 from pyface.tasks.action.schema_addition import SchemaAddition
 from pyface.tasks.action.task_action import TaskAction
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.pyscripts.tasks.pyscript_actions import OpenPyScriptAction, \
     NewPyScriptAction, OpenHopsEditorAction, NewHopsEditorAction
@@ -89,12 +87,12 @@ def _tasks_default(self):
     def _visual_task_factory(self):
         from pychron.pyscripts.tasks.visual_el_programmer.visual_el_programmer_task import VisualElProgrammerTask
 
-        return VisualElProgrammerTask()
+        return VisualElProgrammerTask(application=self.application)
 
     def _task_factory(self):
         from pychron.pyscripts.tasks.pyscript_task import PyScriptTask
 
-        return PyScriptTask()
+        return PyScriptTask(application=self.application)
 
     def _preferences_panes_default(self):
         return [PyScriptPreferencesPane]
diff --git a/pychron/spectrometer/jobs/peak_center.py b/pychron/spectrometer/jobs/peak_center.py
index a243813d67..d06eed8e04 100755
--- a/pychron/spectrometer/jobs/peak_center.py
+++ b/pychron/spectrometer/jobs/peak_center.py
@@ -15,16 +15,17 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Float, Str, Int, List, Enum
-# ============= standard library imports ========================
 import time
+
 from numpy import max, argmax, vstack, linspace
 from scipy import interpolate
-# ============= local library imports  ==========================
+from traits.api import Float, Str, Int, List, Enum
+
 from magnet_sweep import MagnetSweep
-from pychron.graph.graph import Graph
+from pychron.core.helpers.color_generators import colornames
 from pychron.core.stats.peak_detection import calculate_peak_center, PeakCenterError
 from pychron.core.ui.gui import invoke_in_main_thread
+from pychron.graph.graph import Graph
 
 
 class PeakCenterResult:
@@ -172,7 +173,7 @@ def get_reference_intensity():
         self.info('Moving to starting dac {}'.format(start))
         spec.magnet.set_dac(start)
 
-        tol = cur_intensity * (1 - self.percent/100.)
+        tol = cur_intensity * (1 - self.percent / 100.)
         timeout = 10
         self.info('Wait until signal near baseline. tol= {}. timeout= {}'.format(tol, timeout))
         # spec.save_integration()
@@ -212,7 +213,7 @@ def get_reference_intensity():
                 dac_values = graph.get_data()
                 intensities = graph.get_data(axis=1)
 
-                result = self._calculate_peak_center(dac_values, intensities, update_plot=True)
+                result = self._calculate_peak_center(dac_values, intensities)
                 self.debug('result of _calculate_peak_center={}'.format(result))
                 self.result = result
                 if result is not None:
@@ -243,7 +244,7 @@ def _get_result(self, i, det):
             pts = vstack((xs, ys)).T
             result = PeakCenterResult(det, pts)
 
-            p = self._calculate_peak_center(xs, ys, False)
+            p = self._calculate_peak_center(xs, ys)
             if p:
                 [lx, cx, hx], [ly, cy, hy], mx, my = p
                 result.low_dac = lx
@@ -291,6 +292,14 @@ def _plot_center(self, xs, ys, mx, my, center):
         graph.set_data(xs, series=s1)
         graph.set_data(ys, series=s1, axis=1)
 
+        if self.use_interpolation:
+            for i, det in enumerate(self.active_detectors):
+                xs = graph.get_data(series=i)
+                ys = graph.get_data(series=i, axis=1)
+
+                x, y = self._interpolate(xs, ys)
+                graph.new_series(x, y, line_width=1, color=colornames[i])
+
         graph.set_data([mx], series=s1 + 1)
         graph.set_data([my], series=s1 + 1, axis=1)
 
@@ -302,15 +311,15 @@ def _plot_center(self, xs, ys, mx, my, center):
 
         graph.redraw()
 
-    def _calculate_peak_center(self, x, y, update_plot):
-        if self.use_interpolation:
-            f = interpolate.interp1d(x, y, kind=self.interpolation_kind)
-            x = linspace(x.min(), x.max(), 500)
-            y = f(x)
-            if update_plot:
-                self.graph.new_series(x, y, line_width=1)
-                self.graph.redraw()
+    def _interpolate(self, x, y):
+        f = interpolate.interp1d(x, y, kind=self.interpolation_kind)
+        x = linspace(x.min(), x.max(), 500)
+        y = f(x)
+        return x, y
 
+    def _calculate_peak_center(self, x, y):
+        if self.use_interpolation:
+            x, y = self._interpolate(x, y)
         if self.n_peaks > 1:
             self.warning('peak deconvolution disabled')
             # def res(p, y, x):
diff --git a/pychron/spectrometer/scan_manager.py b/pychron/spectrometer/scan_manager.py
index 6edffcaa7a..bad4bcff38 100755
--- a/pychron/spectrometer/scan_manager.py
+++ b/pychron/spectrometer/scan_manager.py
@@ -15,31 +15,29 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from pyface.timer.do_later import do_later
-from traits.api import Instance, Any, DelegatesTo, List, Property, \
-    Bool, Button, String, cached_property, \
-    Str
-# ============= standard library imports ========================
 import os
 import time
-from numpy import Inf, array
-from threading import Thread
 from Queue import Queue
+from threading import Thread
+
 import yaml
-# ============= local library imports  ==========================
+from pyface.timer.do_later import do_later
+from traits.api import Instance, Any, DelegatesTo, List, Property, \
+    Bool, Button, String, cached_property, \
+    Str
+
 from pychron.core.ui.preference_binding import bind_preference
+from pychron.graph.tools.data_tool import DataTool, DataToolOverlay
+from pychron.managers.data_managers.csv_data_manager import CSVDataManager
 from pychron.managers.stream_graph_manager import StreamGraphManager
+from pychron.paths import paths
+from pychron.pychron_constants import NULL_STR
+from pychron.spectrometer.base_detector import BaseDetector
 from pychron.spectrometer.graph.spectrometer_scan_graph import SpectrometerScanGraph
-from pychron.spectrometer.jobs.mass_scanner import MassScanner
 from pychron.spectrometer.jobs.dac_scanner import DACScanner
-from pychron.spectrometer.base_detector import BaseDetector
+from pychron.spectrometer.jobs.mass_scanner import MassScanner
 from pychron.spectrometer.jobs.rise_rate import RiseRate
-from pychron.paths import paths
-from pychron.managers.data_managers.csv_data_manager import CSVDataManager
-
-from pychron.pychron_constants import NULL_STR
 from pychron.spectrometer.readout_view import ReadoutView
-from pychron.graph.tools.data_tool import DataTool, DataToolOverlay
 
 
 class ScanManager(StreamGraphManager):
@@ -263,9 +261,9 @@ def _check_intensity_no_change(self, signals):
             self._prev_signals = None
             return True
 
-        if self._prev_signals is not None:
-            if signals is None:
-                self._no_intensity_change_cnt += 1
+        if signals is None:
+            self._no_intensity_change_cnt += 1
+        elif self._prev_signals is not None:
             if (signals == self._prev_signals).all():
                 self._no_intensity_change_cnt += 1
             else:
diff --git a/pychron/spectrometer/tasks/base_spectrometer_plugin.py b/pychron/spectrometer/tasks/base_spectrometer_plugin.py
index b79b910959..2237e736f0 100755
--- a/pychron/spectrometer/tasks/base_spectrometer_plugin.py
+++ b/pychron/spectrometer/tasks/base_spectrometer_plugin.py
@@ -17,8 +17,7 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import Any
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.spectrometer.base_spectrometer_manager import BaseSpectrometerManager
 from pychron.spectrometer.ion_optics.ion_optics_manager import IonOpticsManager
@@ -53,7 +52,8 @@ def _mass_cal_task_factory(self):
 
     def _task_factory(self):
         t = SpectrometerTask(manager=self.spectrometer_manager,
-                             scan_manager=self.scan_manager)
+                             scan_manager=self.scan_manager,
+                             application=self.application)
         return t
 
     def _factory_spectrometer(self):
diff --git a/pychron/test_suite.py b/pychron/test_suite.py
index ffa0614179..604979f32a 100755
--- a/pychron/test_suite.py
+++ b/pychron/test_suite.py
@@ -27,9 +27,9 @@ def suite():
 
     from pychron.stage.tests.stage_map import StageMapTestCase, \
         TransformTestCase
-    from pychron.entry.tests.sample_loader import SampleLoaderTestCase
+    # from pychron.entry.tests.sample_loader import SampleLoaderTestCase
     from pychron.core.helpers.tests.floatfmt import FloatfmtTestCase
-    from pychron.processing.tests.analysis_modifier import AnalysisModifierTestCase
+    # from pychron.processing.tests.analysis_modifier import AnalysisModifierTestCase
     from pychron.experiment.tests.backup import BackupTestCase
     from pychron.core.xml.tests.xml_parser import XMLParserTestCase
     from pychron.entry.tests.analysis_loader import XLSAnalysisLoaderTestCase
@@ -60,8 +60,8 @@ def suite():
              ExperimentIdentifierTestCase,
              StageMapTestCase,
              TransformTestCase,
-             SampleLoaderTestCase,
-             AnalysisModifierTestCase,
+             # SampleLoaderTestCase,
+             # AnalysisModifierTestCase,
              BackupTestCase,
              # MassSpecIrradExportTestCase,
              XMLParserTestCase,
diff --git a/resources/icons/3d_glasses.png b/resources/icons/3d_glasses.png
new file mode 100755
index 0000000000..be29f775f7
Binary files /dev/null and b/resources/icons/3d_glasses.png differ
diff --git a/resources/icons/check_boxes.png b/resources/icons/check_boxes.png
new file mode 100755
index 0000000000..14113459fc
Binary files /dev/null and b/resources/icons/check_boxes.png differ
diff --git a/test/experiment/positions.py b/test/experiment/positions.py
index 32cf372f68..c7bd171100 100755
--- a/test/experiment/positions.py
+++ b/test/experiment/positions.py
@@ -6,7 +6,7 @@
 #paths.build('_unittest')
 #build_directories(paths)
 #logging_setup('export_spec')
-from pychron.experiment.automated_run.factory import generate_positions, increment_position
+from pychron.experiment.automated_run.factory_util import increment_position, generate_positions
 
 import unittest
 
