diff --git a/src/main/java/sic/controller/ProductoController.java b/src/main/java/sic/controller/ProductoController.java
index 96d3727915..8697192769 100755
--- a/src/main/java/sic/controller/ProductoController.java
+++ b/src/main/java/sic/controller/ProductoController.java
@@ -133,13 +133,13 @@ public double calcularGanancia_Neto(@RequestParam double precioCosto,
     
     @GetMapping("/productos/ganancia-porcentaje")
     @ResponseStatus(HttpStatus.OK)
-    public double calcularGanancia_Porcentaje(@RequestParam(required = false) Double precioDeLista, 
-                                              @RequestParam(required = false) Double precioDeListaAnterior, 
+    public double calcularGanancia_Porcentaje(@RequestParam(required = false) boolean ascendente,
+                                              @RequestParam double precioCosto,
                                               @RequestParam double pvp, 
                                               @RequestParam(required = false) Double ivaPorcentaje, 
-                                              @RequestParam(required = false) Double impInternoPorcentaje,
-                                              @RequestParam double precioCosto,
-                                              @RequestParam(required = false) boolean ascendente){
+                                              @RequestParam(required = false) Double impInternoPorcentaje,                                              
+                                              @RequestParam(required = false) Double precioDeLista, 
+                                              @RequestParam(required = false) Double precioDeListaAnterior){
         return productoService.calcularGanancia_Porcentaje(precioDeLista, precioDeListaAnterior,
                                                            pvp, ivaPorcentaje, impInternoPorcentaje, 
                                                            precioCosto, ascendente);
diff --git a/src/main/java/sic/service/impl/ProductoServiceImpl.java b/src/main/java/sic/service/impl/ProductoServiceImpl.java
index 3ac828854d..7f028dd131 100755
--- a/src/main/java/sic/service/impl/ProductoServiceImpl.java
+++ b/src/main/java/sic/service/impl/ProductoServiceImpl.java
@@ -346,7 +346,7 @@ public double calcularGanancia_Porcentaje(Double precioDeListaNuevo,
         if (precioCosto == 0) {
             return 0;
         }
-        double resultado = 0;
+        double resultado;
         if (ascendente == false) {
             resultado = ((pvp - precioCosto) / precioCosto) * 100;
         } else if (precioDeListaAnterior == 0 || precioCosto == 0) {
diff --git a/src/test/java/sic/service/impl/FacturaServiceImplTest.java b/src/test/java/sic/service/impl/FacturaServiceImplTest.java
index ef3aacffa1..c0b302a6e4 100755
--- a/src/test/java/sic/service/impl/FacturaServiceImplTest.java
+++ b/src/test/java/sic/service/impl/FacturaServiceImplTest.java
@@ -256,28 +256,28 @@ public void shouldCalcularSubTotal() {
             importes[indice] = renglon.getImporte();
             indice++;
         }
-        double resultadoEsperado = 33.66;
+        double resultadoEsperado = 33.664;
         double resultadoObtenido = facturaService.calcularSubTotal(importes);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
 
     @Test
     public void shouldCacularDescuentoNeto() {
-        double resultadoEsperado = 11.77;
-        double resultadoObtenido = facturaService.calcularDescuento_neto(78.255, 15.045);
+        Double resultadoEsperado = 11.773464749999999;
+        Double resultadoObtenido = facturaService.calcularDescuento_neto(78.255, 15.045);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
 
     @Test
     public void shouldCalcularRecargoNeto() {
-        double resultadoEsperado = 12.110;
+        double resultadoEsperado = 12.11047244;
         double resultadoObtenido = facturaService.calcularRecargo_neto(78.122, 15.502);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
 
     @Test
     public void shouldCalcularSubTotal_neto() {
-        double resultadoEsperado = 220.47;
+        double resultadoEsperado = 220.477;
         double resultadoObtenido = facturaService.calcularSubTotal_neto(225.025, 10.454, 15.002);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
@@ -298,7 +298,7 @@ public void shouldCalcularIva_netoWhenLaFacturaEsA() {
         renglones.add(renglon2);
         renglones.add(renglon3);
         //El renglon3 no lo deberia tener en cuenta para el calculo ya que NO es 21% de IVA
-        double resultadoEsperado = 5.70;
+        double resultadoEsperado = 5.7066859857;
         double[] importes = new double[renglones.size()];
         double[] ivaPorcentaje = new double[renglones.size()];
         int i = 0;
@@ -362,14 +362,14 @@ public void shouldCalcularImpInterno_neto() {
             impuestoPorcentajes[indice] = renglon.getImpuesto_porcentaje();
             indice++;
         }
-        double resultadoEsperado = 3.31;
+        double resultadoEsperado = 3.3197328185647996;
         double resultadoObtenido = facturaService.calcularImpInterno_neto("Factura A", 9.104, 22.008, importes, impuestoPorcentajes);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
 
     @Test
     public void shouldCalcularTotal() {
-        double resultadoEsperado = 460.88;
+        double resultadoEsperado = 460.8830000000001;
         double resultadoObtenido = facturaService.calcularTotal(350.451, 10.753, 25.159, 1.451, 84.525, 10.050);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
@@ -406,7 +406,7 @@ public void shouldCalcularTotalFacturadoCompra() {
         facturasDeCompra.add(factura1);
         facturasDeCompra.add(factura2);
         facturasDeCompra.add(factura3);
-        double resultadoEsperado = 25573.35;
+        double resultadoEsperado = 25573.352;
         double resultadoObtenido = facturaService.calcularTotalFacturadoCompra(facturasDeCompra);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
diff --git a/src/test/java/sic/service/impl/ProductoServiceImplTest.java b/src/test/java/sic/service/impl/ProductoServiceImplTest.java
index 72682dda48..b351bd6ff4 100755
--- a/src/test/java/sic/service/impl/ProductoServiceImplTest.java
+++ b/src/test/java/sic/service/impl/ProductoServiceImplTest.java
@@ -5,7 +5,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
 import org.springframework.test.context.junit4.SpringRunner;
-import sic.util.Utilidades;
 
 @RunWith(SpringRunner.class)
 public class ProductoServiceImplTest {
@@ -17,8 +16,8 @@
     public void shouldcalcularGanancia_Porcentaje() {
         double precioCosto = 12.34;
         double pvp = 23.45;
-        double resultadoEsperado = 90.03;
-        double resultadoObtenido = Utilidades.truncarDecimal(productoService.calcularGanancia_Porcentaje(0.0 ,0.0, 0.0, 0.0,precioCosto, pvp, false), 2);
+        double resultadoEsperado = 90.03241491085899;
+        double resultadoObtenido = productoService.calcularGanancia_Porcentaje(null ,null, pvp, null, null, precioCosto, false);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
     
@@ -44,8 +43,8 @@ public void shouldcalcularCalcularPVP() {
     public void shouldcalcularCalcularIVA_Neto() {
         double pvp = 24.68;
         double ivaPorcentaje = 21;
-        double resultadoEsperado = 5.18;
-        double resultadoObtenido = Utilidades.truncarDecimal(productoService.calcularIVA_Neto(pvp, ivaPorcentaje), 2);
+        double resultadoEsperado = 5.182799999999999;
+        double resultadoObtenido = productoService.calcularIVA_Neto(pvp, ivaPorcentaje);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
     
@@ -63,8 +62,8 @@ public void shouldCalcularPrecioLista() {
         double pvp = 24.68;
         double ivaPorcentaje = 21;
         double impuestoInternoPorcentaje = 10;
-        double resultadoEsperado = 32.33;
-        double resultadoObtenido = Utilidades.truncarDecimal(productoService.calcularPrecioLista(pvp, ivaPorcentaje, impuestoInternoPorcentaje), 2);
+        double resultadoEsperado = 32.330799999999996;
+        double resultadoObtenido = productoService.calcularPrecioLista(pvp, ivaPorcentaje, impuestoInternoPorcentaje);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
     
@@ -76,9 +75,9 @@ public void shouldCalcularGananciaEnBaseAlPrecioDeLista() {
         double ImpInternoPorcentaje = 10;
         double precioDeListaAnterior = 124.00546;
         double precioDeListaNuevo = 125;
-        double resultadoEsperado = 20.98;
-        double resultadoObtenido = Utilidades.truncarDecimal(productoService.calcularGananciaPorcentajeSegunPrecioDeLista(precioDeListaNuevo,
-                precioDeListaAnterior, pvp, ivaPorcentaje, ImpInternoPorcentaje, precioDeCosto), 2);
+        double resultadoEsperado = 20.982379265780374;
+        double resultadoObtenido = productoService.calcularGananciaPorcentajeSegunPrecioDeLista(precioDeListaNuevo,
+                precioDeListaAnterior, pvp, ivaPorcentaje, ImpInternoPorcentaje, precioDeCosto);
         assertEquals(resultadoEsperado, resultadoObtenido, 0);
     }
     
