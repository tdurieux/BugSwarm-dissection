// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/custom_options.proto
package com.squareup.wire.protos.custom_options;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Extension;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoEnum;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;

public final class FooBar extends ExtendableMessage<FooBar> {

  public static final Integer DEFAULT_FOO = 0;
  public static final String DEFAULT_BAR = "";
  public static final Long DEFAULT_QUX = 0L;
  public static final List<Float> DEFAULT_FRED = Collections.emptyList();
  public static final Double DEFAULT_DAISY = 0D;
  public static final List<FooBar> DEFAULT_NESTED = Collections.emptyList();

  @ProtoField(tag = 1, type = INT32)
  public final Integer foo;

  @ProtoField(tag = 2, type = STRING)
  public final String bar;

  @ProtoField(tag = 3)
  public final Nested baz;

  @ProtoField(tag = 4, type = UINT64)
  public final Long qux;

  @ProtoField(tag = 5, type = FLOAT, label = REPEATED)
  public final List<Float> fred;

  @ProtoField(tag = 6, type = DOUBLE)
  public final Double daisy;

  @ProtoField(tag = 7, label = REPEATED, messageType = FooBar.class)
  public final List<FooBar> nested;

  public FooBar(Integer foo, String bar, Nested baz, Long qux, List<Float> fred, Double daisy, List<FooBar> nested) {
    this.foo = foo;
    this.bar = bar;
    this.baz = baz;
    this.qux = qux;
    this.fred = immutableCopyOf(fred);
    this.daisy = daisy;
    this.nested = immutableCopyOf(nested);
  }

  private FooBar(Builder builder) {
    this(builder.foo, builder.bar, builder.baz, builder.qux, builder.fred, builder.daisy, builder.nested);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FooBar)) return false;
    FooBar o = (FooBar) other;
    if (!extensionsEqual(o)) return false;
    return equals(foo, o.foo)
        && equals(bar, o.bar)
        && equals(baz, o.baz)
        && equals(qux, o.qux)
        && equals(fred, o.fred)
        && equals(daisy, o.daisy)
        && equals(nested, o.nested);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = extensionsHashCode();
      result = result * 37 + (foo != null ? foo.hashCode() : 0);
      result = result * 37 + (bar != null ? bar.hashCode() : 0);
      result = result * 37 + (baz != null ? baz.hashCode() : 0);
      result = result * 37 + (qux != null ? qux.hashCode() : 0);
      result = result * 37 + (fred != null ? fred.hashCode() : 1);
      result = result * 37 + (daisy != null ? daisy.hashCode() : 0);
      result = result * 37 + (nested != null ? nested.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends ExtendableBuilder<FooBar> {

    public Integer foo;
    public String bar;
    public Nested baz;
    public Long qux;
    public List<Float> fred;
    public Double daisy;
    public List<FooBar> nested;

    public Builder() {
    }

    public Builder(FooBar message) {
      super(message);
      if (message == null) return;
      this.foo = message.foo;
      this.bar = message.bar;
      this.baz = message.baz;
      this.qux = message.qux;
      this.fred = copyOf(message.fred);
      this.daisy = message.daisy;
      this.nested = copyOf(message.nested);
    }

    public Builder foo(Integer foo) {
      this.foo = foo;
      return this;
    }

    public Builder bar(String bar) {
      this.bar = bar;
      return this;
    }

    public Builder baz(Nested baz) {
      this.baz = baz;
      return this;
    }

    public Builder qux(Long qux) {
      this.qux = qux;
      return this;
    }

    public Builder fred(List<Float> fred) {
      this.fred = checkForNulls(fred);
      return this;
    }

    public Builder daisy(Double daisy) {
      this.daisy = daisy;
      return this;
    }

    public Builder nested(List<FooBar> nested) {
      this.nested = checkForNulls(nested);
      return this;
    }

    @Override
    public <E> Builder setExtension(Extension<FooBar, E> extension, E value) {
      super.setExtension(extension, value);
      return this;
    }

    @Override
    public FooBar build() {
      return new FooBar(this);
    }
  }

  public static final class Nested extends Message {

    public static final FooBarBazEnum DEFAULT_VALUE = FooBarBazEnum.FOO;

    @ProtoField(tag = 1, type = ENUM)
    public final FooBarBazEnum value;

    public Nested(FooBarBazEnum value) {
      this.value = value;
    }

    private Nested(Builder builder) {
      this(builder.value);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Nested)) return false;
      return equals(value, ((Nested) other).value);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      return result != 0 ? result : (hashCode = value != null ? value.hashCode() : 0);
    }

    public static final class Builder extends Message.Builder<Nested> {

      public FooBarBazEnum value;

      public Builder() {
      }

      public Builder(Nested message) {
        super(message);
        if (message == null) return;
        this.value = message.value;
      }

      public Builder value(FooBarBazEnum value) {
        this.value = value;
        return this;
      }

      @Override
      public Nested build() {
        return new Nested(this);
      }
    }
  }

  public static final class More extends Message {

    public static final List<Integer> DEFAULT_SERIAL = Collections.emptyList();

    @ProtoField(tag = 1, type = INT32, label = REPEATED)
    public final List<Integer> serial;

    public More(List<Integer> serial) {
      this.serial = immutableCopyOf(serial);
    }

    private More(Builder builder) {
      this(builder.serial);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof More)) return false;
      return equals(serial, ((More) other).serial);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      return result != 0 ? result : (hashCode = serial != null ? serial.hashCode() : 1);
    }

    public static final class Builder extends Message.Builder<More> {

      public List<Integer> serial;

      public Builder() {
      }

      public Builder(More message) {
        super(message);
        if (message == null) return;
        this.serial = copyOf(message.serial);
      }

      public Builder serial(List<Integer> serial) {
        this.serial = checkForNulls(serial);
        return this;
      }

      @Override
      public More build() {
        return new More(this);
      }
    }
  }

  public enum FooBarBazEnum
      implements ProtoEnum {
    FOO(1, 17),
    BAR(2, null),
    BAZ(3, 18);

    private final int value;
    public final Integer enum_value_option;

    private FooBarBazEnum(int value, Integer enum_value_option) {
      this.value = value;
      this.enum_value_option = enum_value_option;
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}
