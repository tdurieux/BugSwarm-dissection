diff --git a/BaragonCore/src/main/java/com/hubspot/baragon/models/BaragonGroup.java b/BaragonCore/src/main/java/com/hubspot/baragon/models/BaragonGroup.java
index 3378cd90e7..d4cc976576 100755
--- a/BaragonCore/src/main/java/com/hubspot/baragon/models/BaragonGroup.java
+++ b/BaragonCore/src/main/java/com/hubspot/baragon/models/BaragonGroup.java
@@ -38,9 +38,9 @@ public BaragonGroup(@JsonProperty("name") String name,
     if (trafficSources == null && sources != null) {
       this.trafficSources = sources.stream()
           .map(source -> new TrafficSource(source, TrafficSourceType.CLASSIC))
-          .collect(Collectors.toSet());
+          .collect(Collectors.<TrafficSource>toSet());
     } else {
-      this.trafficSources = MoreObjects.firstNonNull(trafficSources, Collections.emptySet());
+      this.trafficSources = MoreObjects.<Set<TrafficSource>>firstNonNull(trafficSources, Collections.<TrafficSource>emptySet());
     }
   }
 
diff --git a/BaragonService/src/main/java/com/hubspot/baragon/service/elb/ApplicationLoadBalancer.java b/BaragonService/src/main/java/com/hubspot/baragon/service/elb/ApplicationLoadBalancer.java
index 9708f0ed0e..8ad4441c95 100755
--- a/BaragonService/src/main/java/com/hubspot/baragon/service/elb/ApplicationLoadBalancer.java
+++ b/BaragonService/src/main/java/com/hubspot/baragon/service/elb/ApplicationLoadBalancer.java
@@ -16,6 +16,7 @@
 import com.amazonaws.services.elasticloadbalancingv2.model.AvailabilityZone;
 import com.amazonaws.services.elasticloadbalancingv2.model.CreateListenerRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.CreateRuleRequest;
+import com.amazonaws.services.elasticloadbalancingv2.model.CreateTargetGroupRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.DeleteListenerRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.DeleteRuleRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.DeregisterTargetsRequest;
@@ -34,6 +35,7 @@
 import com.amazonaws.services.elasticloadbalancingv2.model.LoadBalancerNotFoundException;
 import com.amazonaws.services.elasticloadbalancingv2.model.ModifyListenerRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.ModifyRuleRequest;
+import com.amazonaws.services.elasticloadbalancingv2.model.ModifyTargetGroupRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.RegisterTargetsRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.Rule;
 import com.amazonaws.services.elasticloadbalancingv2.model.SetSubnetsRequest;
@@ -314,7 +316,7 @@ public void syncAll(Collection<BaragonGroup> baragonGroups) {
     if (maybeLoadBalancer.isPresent()) {
       Collection<Listener> listeners = new HashSet<>();
       DescribeListenersRequest listenersRequest = new DescribeListenersRequest()
-          .withListenerArns(maybeLoadBalancer.get().getLoadBalancerArn());
+          .withLoadBalancerArn(maybeLoadBalancer.get().getLoadBalancerArn());
       DescribeListenersResult result = elbClient.describeListeners(listenersRequest);
       String nextMarker = result.getNextMarker();
       listeners.addAll(result.getListeners());
@@ -385,6 +387,20 @@ public void deleteRule(String ruleArn) {
     elbClient.deleteRule(deleteRuleRequest);
   }
 
+  public TargetGroup createTargetGroup(CreateTargetGroupRequest targetGroupRequest) {
+    return elbClient
+        .createTargetGroup(targetGroupRequest)
+        .getTargetGroups()
+        .get(0);
+  }
+
+  public TargetGroup modifyTargetGroup(ModifyTargetGroupRequest modifyTargetGroupRequest) {
+    return elbClient
+        .modifyTargetGroup(modifyTargetGroupRequest)
+        .getTargetGroups()
+        .get(0);
+  }
+
   /**
    * @param targetGroup Target group to check
    * @return the instance IDs of the targets in the given target group
diff --git a/BaragonService/src/main/java/com/hubspot/baragon/service/resources/AlbResource.java b/BaragonService/src/main/java/com/hubspot/baragon/service/resources/AlbResource.java
index 7c29830557..0b130392de 100755
--- a/BaragonService/src/main/java/com/hubspot/baragon/service/resources/AlbResource.java
+++ b/BaragonService/src/main/java/com/hubspot/baragon/service/resources/AlbResource.java
@@ -2,6 +2,7 @@
 
 import java.util.Collection;
 
+import javax.validation.Valid;
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -9,22 +10,27 @@
 import javax.ws.rs.PathParam;
 import javax.ws.rs.Produces;
 import javax.ws.rs.QueryParam;
+import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.Status;
 
 import com.amazonaws.AmazonClientException;
 import com.amazonaws.services.elasticloadbalancingv2.model.CreateListenerRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.CreateRuleRequest;
+import com.amazonaws.services.elasticloadbalancingv2.model.CreateTargetGroupRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.DeregisterTargetsResult;
 import com.amazonaws.services.elasticloadbalancingv2.model.Listener;
 import com.amazonaws.services.elasticloadbalancingv2.model.ListenerNotFoundException;
 import com.amazonaws.services.elasticloadbalancingv2.model.LoadBalancer;
 import com.amazonaws.services.elasticloadbalancingv2.model.ModifyListenerRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.ModifyRuleRequest;
+import com.amazonaws.services.elasticloadbalancingv2.model.ModifyTargetGroupRequest;
 import com.amazonaws.services.elasticloadbalancingv2.model.Rule;
 import com.amazonaws.services.elasticloadbalancingv2.model.RuleNotFoundException;
 import com.amazonaws.services.elasticloadbalancingv2.model.TargetDescription;
 import com.amazonaws.services.elasticloadbalancingv2.model.TargetGroup;
+import com.amazonaws.services.elasticloadbalancingv2.model.TargetGroupNotFoundException;
 import com.google.common.base.Optional;
 import com.google.inject.Inject;
 import com.hubspot.baragon.auth.NoAuth;
@@ -67,7 +73,7 @@ public LoadBalancer getLoadBalancer(@PathParam("elbName") String elbName) {
         if (maybeLoadBalancer.isPresent()) {
           return maybeLoadBalancer.get();
         } else {
-          throw new BaragonWebException(String.format("ALB with name %s not found", elbName));
+          throw new WebApplicationException(String.format("ELB %s not found", elbName), Status.NOT_FOUND);
         }
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS client exception %s", exn));
@@ -95,7 +101,7 @@ public LoadBalancer getLoadBalancer(@PathParam("elbName") String elbName) {
   @POST
   @Path("/load-balancers/{elbName}/listeners")
   public Listener createListeners(@PathParam("elbName") String elbName,
-                                  CreateListenerRequest createListenerRequest) {
+                                  @Valid CreateListenerRequest createListenerRequest) {
     if (config.isPresent()) {
         Optional<LoadBalancer> maybeLoadBalancer = applicationLoadBalancer
             .getLoadBalancer(elbName);
@@ -104,7 +110,7 @@ public Listener createListeners(@PathParam("elbName") String elbName,
               .createListener(createListenerRequest
                   .withLoadBalancerArn(maybeLoadBalancer.get().getLoadBalancerArn()));
         } else {
-          throw new BaragonWebException(String.format("Could not find an elb with name %s", elbName));
+          throw new WebApplicationException(String.format("Could not find an elb with name %s", elbName), Status.NOT_FOUND);
         }
     } else {
       throw new BaragonWebException("ElbSync and related actions are not currently enabled");
@@ -112,16 +118,16 @@ public Listener createListeners(@PathParam("elbName") String elbName,
   }
 
   @POST
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}")
+  @Path("/listeners/{listenerArn}")
   public Listener updateListener(@PathParam("elbName") String elbName,
                                  @PathParam("listenerArn") String listenerArn,
-                                 ModifyListenerRequest modifyListenerRequest) {
+                                 @Valid ModifyListenerRequest modifyListenerRequest) {
     if (config.isPresent()) {
       try {
         return applicationLoadBalancer
             .modifyListener(modifyListenerRequest.withListenerArn(listenerArn));
       } catch (ListenerNotFoundException notFound) {
-        throw new BaragonWebException(String.format("No listener with ARN %s found", listenerArn));
+        throw new WebApplicationException(String.format("No listener with ARN %s found", listenerArn), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS client exception %s", exn));
       }
@@ -131,7 +137,7 @@ public Listener updateListener(@PathParam("elbName") String elbName,
   }
 
   @DELETE
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}")
+  @Path("/listeners/{listenerArn}")
   public Response removeListener(@PathParam("elbName") String elbName,
                                  @PathParam("listenerArn") String listenerArn) {
     if (config.isPresent()) {
@@ -139,7 +145,7 @@ public Response removeListener(@PathParam("elbName") String elbName,
         applicationLoadBalancer.deleteListener(listenerArn);
         return Response.noContent().build();
       } catch (ListenerNotFoundException notFound) {
-        throw new BaragonWebException(String.format("No listener with ARN %s found", listenerArn));
+        throw new WebApplicationException(String.format("No listener with ARN %s found", listenerArn), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS client exception %s", exn));
       }
@@ -150,11 +156,14 @@ public Response removeListener(@PathParam("elbName") String elbName,
 
   @GET
   @NoAuth
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}/rules")
-  public Collection<Rule> getRules(@PathParam("elbName") String elbName, @PathParam("listenerArn") String listenerArn) {
+  @Path("/listeners/{listenerArn}/rules")
+  public Collection<Rule> getRules(@PathParam("elbName") String elbName,
+                                   @PathParam("listenerArn") String listenerArn) {
     if (config.isPresent()) {
       try {
         return applicationLoadBalancer.getRulesByListener(listenerArn);
+      } catch (ListenerNotFoundException notFound) {
+        throw new WebApplicationException(String.format("Listener with ARN %s not found", listenerArn), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS client exception %s", exn));
       }
@@ -164,31 +173,37 @@ public Response removeListener(@PathParam("elbName") String elbName,
   }
 
   @POST
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}/rules")
+  @Path("/listeners/{listenerArn}/rules")
   public Rule createRule(@PathParam("elbName") String elbName,
                          @PathParam("listenerArn") String listenerArn,
-                         CreateRuleRequest createRuleRequest) {
+                         @Valid CreateRuleRequest createRuleRequest) {
     if (config.isPresent()) {
-      return applicationLoadBalancer
-          .createRule(createRuleRequest
-              .withListenerArn(listenerArn));
+      try {
+        return applicationLoadBalancer
+            .createRule(createRuleRequest
+                .withListenerArn(listenerArn));
+      } catch (ListenerNotFoundException notFound) {
+        throw new WebApplicationException(String.format("Listener with ARN %s not found", listenerArn), Status.NOT_FOUND);
+      } catch (AmazonClientException exn) {
+        throw new BaragonWebException(String.format("AWS client exception %s", exn));
+      }
     } else {
       throw new BaragonWebException("ElbSync and related actions are not currently enabled");
     }
   }
 
   @POST
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}/rules/{ruleArn}")
+  @Path("/rules/{ruleArn}")
   public Rule updateRule(@PathParam("elbName") String elbName,
                          @PathParam("listenerArn") String listenerArn,
                          @PathParam("ruleArn") String ruleArn,
-                         ModifyRuleRequest modifyRuleRequest) {
+                         @Valid ModifyRuleRequest modifyRuleRequest) {
     if (config.isPresent()) {
       try {
         return applicationLoadBalancer
             .modifyRule(modifyRuleRequest.withRuleArn(ruleArn));
       } catch (RuleNotFoundException notFound) {
-        throw new BaragonWebException(String.format("Rule with ARN %s found", ruleArn));
+        throw new WebApplicationException(String.format("Rule with ARN %s found", ruleArn), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS client exception %s", exn));
       }
@@ -198,7 +213,7 @@ public Rule updateRule(@PathParam("elbName") String elbName,
   }
 
   @DELETE
-  @Path("/load-balancers/{elbName}/listeners/{listenerArn}/rules/{ruleArn}")
+  @Path("/rules/{ruleArn}")
   public Response deleteRule(@PathParam("elbName") String elbName,
                              @PathParam("listenerArn") String listenerArn,
                              @PathParam("ruleArn") String ruleArn) {
@@ -207,7 +222,7 @@ public Response deleteRule(@PathParam("elbName") String elbName,
         applicationLoadBalancer.deleteRule(ruleArn);
         return Response.noContent().build();
       } catch (RuleNotFoundException notFound) {
-        throw new BaragonWebException(String.format("Rule with ARN %s not found", ruleArn));
+        throw new WebApplicationException(String.format("Rule with ARN %s not found", ruleArn), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("Amazon client exception %s", exn));
       }
@@ -227,6 +242,20 @@ public Response deleteRule(@PathParam("elbName") String elbName,
     }
   }
 
+  @POST
+  @PathParam("/target-groups")
+  public TargetGroup createTargetGroup(@Valid CreateTargetGroupRequest createTargetGroupRequest) {
+    if (config.isPresent()) {
+      try {
+        return applicationLoadBalancer.createTargetGroup(createTargetGroupRequest);
+      } catch (AmazonClientException exn) {
+        throw new BaragonWebException(String.format("AWS client exception %s", exn));
+      }
+    } else {
+      throw new BaragonWebException("ElbSync and related actions are not currently enabled");
+    }
+  }
+
   @GET
   @NoAuth
   @Path("/target-groups/{targetGroup}")
@@ -237,7 +266,7 @@ public TargetGroup getTargetGroup(@PathParam("targetGroup") String targetGroup)
         if (maybeTargetGroup.isPresent()) {
           return maybeTargetGroup.get();
         } else {
-          throw new BaragonWebException(String.format("TargetGroup with name %s not found", targetGroup));
+          throw new WebApplicationException(String.format("TargetGroup with name %s not found", targetGroup), Status.NOT_FOUND);
         }
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS Client exception %s", exn));
@@ -247,6 +276,24 @@ public TargetGroup getTargetGroup(@PathParam("targetGroup") String targetGroup)
     }
   }
 
+  @POST
+  @Path("/target-groups/{targetGroup}")
+  public TargetGroup modifyTargetGroup(@PathParam("targetGroup") String targetGroup,
+                                       @Valid ModifyTargetGroupRequest modifyTargetGroupRequest) {
+    if (config.isPresent()) {
+      try {
+        return applicationLoadBalancer
+            .modifyTargetGroup(modifyTargetGroupRequest);
+      } catch (TargetGroupNotFoundException notFound) {
+        throw new WebApplicationException(String.format("Target group %s not found", targetGroup), Status.NOT_FOUND);
+      } catch (AmazonClientException exn) {
+        throw new BaragonWebException(String.format("AWS client exception %s", exn));
+      }
+    } else {
+      throw new BaragonWebException("ElbSync and related actions are not currently enabled");
+    }
+  }
+
   @GET
   @NoAuth
   @Path("/target-groups/{targetGroup}/targets")
@@ -257,7 +304,7 @@ public TargetGroup getTargetGroup(@PathParam("targetGroup") String targetGroup)
         if (maybeTargetGroup.isPresent()) {
           return applicationLoadBalancer.getTargetsOn(maybeTargetGroup.get());
         } else {
-          throw new BaragonWebException(String.format("TargetGroup with name %s not found", targetGroup));
+          throw new WebApplicationException(String.format("TargetGroup with name %s not found", targetGroup), Status.NOT_FOUND);
         }
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("AWS Client exception %s", exn));
@@ -268,9 +315,9 @@ public TargetGroup getTargetGroup(@PathParam("targetGroup") String targetGroup)
   }
 
   @DELETE
-  @Path("/target-groups/{targetGroup}/update")
+  @Path("/target-groups/{targetGroup}/targets/{instanceId}")
   public DeregisterTargetsResult removeFromTargetGroup(@PathParam("targetGroup") String targetGroup,
-                                                       @QueryParam("instanceId") String instanceId) {
+                                                       @PathParam("instanceId") String instanceId) {
     if (instanceId == null) {
       throw new BaragonWebException("Must provide instance ID to remove target from group");
     } else if (config.isPresent()) {
@@ -278,7 +325,7 @@ public DeregisterTargetsResult removeFromTargetGroup(@PathParam("targetGroup") S
       if (maybeResult.isPresent()) {
         return maybeResult.get();
       } else {
-        throw new BaragonWebException(String.format("No instance with ID %s could be found", instanceId));
+        throw new WebApplicationException(String.format("No instance with ID %s could be found", instanceId), Status.NOT_FOUND);
       }
     } else {
       throw new BaragonWebException("ElbSync and related actions not currently enabled");
@@ -286,7 +333,7 @@ public DeregisterTargetsResult removeFromTargetGroup(@PathParam("targetGroup") S
   }
 
   @POST
-  @Path("/target-group/{targetGroup}/update")
+  @Path("/target-group/{targetGroup}/targets")
   public RegisterInstanceResult addToTargetGroup(@PathParam("targetGroup") String targetGroup,
                                                  @QueryParam("instanceId") String instanceId) {
     if (instanceId == null) {
@@ -294,6 +341,8 @@ public RegisterInstanceResult addToTargetGroup(@PathParam("targetGroup") String
     } else if (config.isPresent()) {
       try {
         return applicationLoadBalancer.registerInstance(instanceId, targetGroup);
+      } catch (TargetGroupNotFoundException notFound) {
+        throw new WebApplicationException(String.format("Target group %s not found", targetGroup), Status.NOT_FOUND);
       } catch (AmazonClientException exn) {
         throw new BaragonWebException(String.format("Failed to add instance %s to target group %s", instanceId, targetGroup));
       }
