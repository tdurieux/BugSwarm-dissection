diff --git a/setup.py b/setup.py
index 10fe297dee..05de0f5109 100755
--- a/setup.py
+++ b/setup.py
@@ -50,7 +50,6 @@
         'Flask-Markdown',
         'psycopg2',
         'sqlalchemy',
-        'records', # TODO: https://github.com/kennethreitz/records
         'PyYAML',
         'gevent',
         'docopt',
diff --git a/src/chill/api.py b/src/chill/api.py
index 1c9f53d0d7..a604609fd4 100755
--- a/src/chill/api.py
+++ b/src/chill/api.py
@@ -60,31 +60,34 @@ def _query(_node_id, value=None, **kw):
         return value
     #current_app.logger.debug("queries kw: %s", kw)
     #current_app.logger.debug("queries value: %s", value)
-    #current_app.logger.debug("queries: %s", query_result)
+    current_app.logger.debug("queries: %s", query_result)
     if query_result:
         values = []
         for query_name in [x['name'] for x in query_result]:
             if query_name:
-                #result = []
-                #try:
-                #current_app.logger.debug("query_name: %s", query_name)
-                #current_app.logger.debug("kw: %s", kw)
-                # Query string can be insert or select here
-                result = db.execute(text(fetch_query_string(query_name)), **kw)
-                current_app.logger.debug("result query: %s", result.keys())
-                #except (DatabaseError, StatementError) as err:
-                    #current_app.logger.error("DatabaseError (%s) %s: %s", query_name, kw, err)
-                if result.returns_rows:
-                    values.append((result.fetchall(), result.keys()))
-                    #if len(result) == 0:
-                    #    values.append(([], []))
-                    #else:
-                    #    current_app.logger.debug("result: %s", result)
-                    #    # There may be more results, but only interested in the
-                    #    # first one. Use the older rowify method for now.
-                    #    # TODO: use case for rowify?
-                    #    values.append(rowify(result, [(x, None) for x in result.keys()]))
-                    #    #current_app.logger.debug("fetchone: %s", values)
+                result = []
+                try:
+                    current_app.logger.debug("query_name: %s", query_name)
+                    #current_app.logger.debug("kw: %s", kw)
+                    # Query string can be insert or select here
+                    result = db.execute(text(fetch_query_string(query_name)), **kw)
+                    current_app.logger.debug("result query: %s", result.keys())
+                except (DatabaseError, StatementError) as err:
+                    current_app.logger.error("DatabaseError (%s) %s: %s", query_name, kw, err)
+                if result and result.returns_rows:
+                    result = result.fetchall()
+                    #values.append(([[dict(zip(result.keys(), x)) for x in result]], result.keys()))
+                    #values.append((result.fetchall(), result.keys()))
+                    #current_app.logger.debug("fetchall: %s", values)
+                    if len(result) == 0:
+                        values.append(([], []))
+                    else:
+                        current_app.logger.debug("result: %s", result)
+                        # There may be more results, but only interested in the
+                        # first one. Use the older rowify method for now.
+                        # TODO: use case for rowify?
+                        values.append(rowify(result, [(x, None) for x in result[0].keys()]))
+                        #current_app.logger.debug("fetchone: %s", values)
         value = values
     #current_app.logger.debug("value: %s", value)
     return value
diff --git a/src/chill/app.py b/src/chill/app.py
index 0a162a364d..9ba81aeaf5 100755
--- a/src/chill/app.py
+++ b/src/chill/app.py
@@ -46,7 +46,6 @@ def connect_to_database():
     Return the engine. Echo all sql statements if in DEBUG mode.
     """
     return create_engine(current_app.config['CHILL_DATABASE_URI'], echo=current_app.config['DEBUG'])
-    #return records.Database(current_app.config['CHILL_DATABASE_URI'])
 
 
 def get_db():
diff --git a/src/chill/database.py b/src/chill/database.py
index 27e00c3814..bdd194e926 100755
--- a/src/chill/database.py
+++ b/src/chill/database.py
@@ -28,12 +28,6 @@ def init_db():
             db.execute(text(fetch_query_string(filename)))
 
 def rowify(l, description):
-    # TODO: this is still needed in api _query
-    # replace with
-    # if len(result) == 0:
-    #     values.append(([], []))
-    # else:
-    #     values.append( (result.as_dict(), result.first().keys()) )
     d = []
     col_names = []
     if l != None and description != None:
diff --git a/src/chill/public.py b/src/chill/public.py
index bde6075df5..e8c8b53a8a 100755
--- a/src/chill/public.py
+++ b/src/chill/public.py
@@ -140,7 +140,7 @@ def get(self, uri=''):
         noderequest.pop('name')
         noderequest.pop('value')
 
-        #current_app.logger.debug("get kw: %s", values)
+        current_app.logger.debug("get kw: %s", values)
         rendered = render_node(node['id'], noderequest=noderequest, **values)
         current_app.logger.debug("rendered: %s", rendered)
         if rendered:
@@ -169,7 +169,7 @@ def post(self, uri=''):
         values['method'] = request.method
 
         # Execute the sql query with the data
-        _query(node.get('id'), **values)
+        _query(node['id'], **values)
 
         response = make_response('ok', 201)
         return response
@@ -190,7 +190,7 @@ def put(self, uri=''):
         values['method'] = request.method
 
         # Execute the sql query with the data
-        _query(node.get('id'), **values)
+        _query(node['id'], **values)
 
         response = make_response('ok', 201)
         return response
@@ -211,7 +211,7 @@ def patch(self, uri=''):
         values['method'] = request.method
 
         # Execute the sql query with the data
-        _query(node.get('id'), **values)
+        _query(node['id'], **values)
 
         response = make_response('ok', 201)
         return response
@@ -232,7 +232,7 @@ def delete(self, uri=''):
         values['method'] = request.method
 
         # Execute the sql query with the data
-        _query(node.get('id'), **values)
+        _query(node['id'], **values)
 
         response = make_response('ok', 204)
         return response
diff --git a/src/chill/tests.py b/src/chill/tests.py
index 1c3ec03875..a2166ae600 100755
--- a/src/chill/tests.py
+++ b/src/chill/tests.py
@@ -23,6 +23,7 @@
 class ChillTestCase(unittest.TestCase):
 
     def setUp(self):
+        self.debug=False
         self.tmp_template_dir = tempfile.mkdtemp()
         self.tmp_db = tempfile.NamedTemporaryFile(delete=False)
         self.app = make_app(CHILL_DATABASE_URI='sqlite:///' + self.tmp_db.name,
@@ -31,9 +32,8 @@ def setUp(self):
                 MEDIA_FOLDER=self.tmp_template_dir,
                 DOCUMENT_FOLDER=self.tmp_template_dir,
                 CACHE_NO_NULL_WARNING=True,
-                DEBUG=True)
-        #self.app.logger.setLevel(logging.CRITICAL)
-        self.app.logger.setLevel(logging.DEBUG)
+                DEBUG=self.debug)
+        self.app.logger.setLevel(logging.DEBUG if self.debug else logging.CRITICAL)
 
     def tearDown(self):
         """Get rid of the database and templates after each test."""
@@ -209,17 +209,15 @@ def test_insert_one_node(self):
         """
         with self.app.app_context():
             init_db()
-            trans = db.transaction()
-            result = db.db.execute(fetch_query_string('insert_node.sql'), {'name': 'a', 'value':'apple'})
+            result = db.execute(text(fetch_query_string('insert_node.sql')), name='a', value='apple')
             a = result.lastrowid
-            trans.commit()
 
-            result = db.query('select * from Node where id = :id;', fetchall=True, **{'id':a})
+            result = db.execute(text('select * from Node where id = :id;'), id=a).fetchall()
             assert len(result) == 1
-            r = result.first()
-            assert a == r.get('id')
-            assert 'a' == r.get('name')
-            assert 'apple' == r.get('value')
+            r = result[0]
+            assert a == r['id']
+            assert 'a' == r['name']
+            assert 'apple' == r['value']
 
     def test_insert_one_node_with_unicode(self):
         """
@@ -227,17 +225,15 @@ def test_insert_one_node_with_unicode(self):
         """
         with self.app.app_context():
             init_db()
-            trans = db.transaction()
-            result = db.db.execute(fetch_query_string('insert_node.sql'), {'name': 'a', 'value':u'Àрpĺè'})
+            result = db.execute(text(fetch_query_string('insert_node.sql')), name='a', value=u'Àрpĺè')
             a = result.lastrowid
-            trans.commit()
 
-            result = db.query('select * from Node where id = :id;', fetchall=True, **{'id':a})
+            result = db.execute(text('select * from Node where id = :id;'), id=a).fetchall()
             assert len(result) == 1
-            r = result.first()
-            assert a == r.get('id')
-            assert 'a' == r.get('name')
-            assert u'Àрpĺè' == r.get('value')
+            r = result[0]
+            assert a == r['id']
+            assert 'a' == r['name']
+            assert u'Àрpĺè' == r['value']
 
     def test_link(self):
         """
@@ -256,14 +252,14 @@ def test_link(self):
             insert_node_node(node_id=a_id, target_node_id=d_id)
             insert_node_node(node_id=b_id, target_node_id=c_id)
 
-            result = db.query(fetch_query_string('select_link_node_from_node.sql'), fetchall=True, **{'node_id': a_id})
-            result = [x.get('node_id', None) for x in result]
+            result = db.execute(text(fetch_query_string('select_link_node_from_node.sql')), node_id=a_id)
+            result = [x['node_id'] for x in result]
             assert c_id in result
             assert d_id in result
             assert a_id not in result
 
-            result = db.query(fetch_query_string('select_link_node_from_node.sql'), fetchall=True, **{'node_id': b_id})
-            result = [x.get('node_id', None) for x in result]
+            result = db.execute(text(fetch_query_string('select_link_node_from_node.sql')), node_id=b_id)
+            result = [x['node_id'] for x in result]
             assert c_id in result
             assert d_id not in result
             assert a_id not in result
@@ -596,17 +592,14 @@ def test_rules(self):
         with self.app.app_context():
             with self.app.test_client() as c:
                 init_db()
-                trans = db.transaction()
-                db.query("""
+                db.execute(text("""
                 create table PromoAttr (
                   node_id integer,
                   abc integer,
                   title varchar(255),
                   description text
                   );
-                """)
-                trans.commit()
-
+                """))
 
                 page_id = insert_node(name='page1', value=None)
                 insert_route(path='/page1/', node_id=page_id)
@@ -629,9 +622,7 @@ def test_rules(self):
 
                 for a in range(0,100):
                     a_id = insert_node(name='promo', value=None)
-                    trans = db.transaction()
-                    db.query(fetch_query_string('insert_promoattr.sql'), **{'node_id':a_id, 'title':'promo %i' % a, 'description': 'a'*a})
-                    trans.commit()
+                    db.execute(text(fetch_query_string('insert_promoattr.sql')), **{'node_id':a_id, 'title':'promo %i' % a, 'description': 'a'*a})
                     # wire the promo to it's attr
                     insert_query(name='select_promoattr.sql', node_id=a_id)
 
@@ -1036,13 +1027,13 @@ def test_a(self):
         with self.app.app_context():
             with self.app.test_client() as c:
                 init_db()
-                db.db.execute("""
+                db.execute(text("""
                 create table Llama (
                   llama_name varchar(255),
                   location varchar(255),
                   description text
                   );
-                """)
+                """))
 
                 llamas_id = insert_node(name='llamas', value=None)
                 insert_route(path='/api/llamas/', node_id=llamas_id, weight=1, method="POST")
@@ -1097,13 +1088,13 @@ def test_a(self):
         with self.app.app_context():
             with self.app.test_client() as c:
                 init_db()
-                db.db.execute("""
+                db.execute(text("""
                 create table Llama (
                   llama_name varchar(255),
                   location varchar(255),
                   description text
                   );
-                """)
+                """))
 
                 llamas_id = insert_node(name='llamas', value=None)
                 insert_route(path='/api/llamas/name/<llama_name>/', node_id=llamas_id, weight=1, method="PUT")
@@ -1145,17 +1136,17 @@ def test_a(self):
         with self.app.app_context():
             with self.app.test_client() as c:
                 init_db()
-                db.db.execute("""
+                db.execute(text("""
                 create table Llama (
                   llama_name varchar(255),
                   location varchar(255),
                   description text
                   );
-                """)
+                """))
 
-                db.db.execute("""
+                db.execute(text("""
                   insert into Llama (llama_name) values ('Pocky');
-                """)
+                """))
 
                 llamas_id = insert_node(name='llamas', value=None)
                 insert_route(path='/api/llamas/name/<llama_name>/', node_id=llamas_id, weight=1, method="PATCH")
@@ -1197,17 +1188,17 @@ def test_a(self):
         with self.app.app_context():
             with self.app.test_client() as c:
                 init_db()
-                db.db.execute("""
+                db.execute(text("""
                 create table Llama (
                   llama_name varchar(255),
                   location varchar(255),
                   description text
                   );
-                """)
+                """))
 
-                db.db.execute("""
+                db.execute(text("""
                   insert into Llama (llama_name, location, description) values ('Docky', 'somewhere', 'damaged');
-                """)
+                """))
 
                 select_llama = insert_node(name='llamas', value=None)
                 insert_route(path='/api/llamas/name/<llama_name>/', node_id=select_llama, weight=1)
