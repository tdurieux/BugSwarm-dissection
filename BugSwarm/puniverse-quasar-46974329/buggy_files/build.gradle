buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.6.3-SNAPSHOT"
    status              = "integration"
    description         = "lightweight threads and actors for the JVM."
    ext.url             = "http://puniverse.github.com/quasar"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/quasar"
    ext.scmConnection   = "https://github.com/puniverse/quasar.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    ext.baselib         = "${rootProject.projectDir}/baselib"
    ext.quasarJar       = "${rootProject.projectDir}/quasar-core/build/libs/quasar-core-${version}.jar" // project(':quasar-core').jar.archivePath

    ext.asmVer = '5.0.3'
    
    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }

    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }
    
    repositories {
        flatDir {
            dirs baselib
        }
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "https://oss.sonatype.org/content/repositories/releases" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
            maven { url "http://download.oracle.com/maven/" }
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    configurations {
        compileOnly
        provided
        markdownDoclet
    }

    dependencies {
        compile("com.codahale.metrics:metrics-core:3.0.2") {
            exclude group: 'org.slf4j', module: '*'
        }
        provided "org.apache.ant:ant:1.9.4"
        compile "com.google.guava:guava:18.0"
        testCompile 'junit:junit:4.12'
        testCompile('org.truth0:truth:0.23') {
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'junit', module: 'junit'
        }
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile("org.mockito:mockito-all:1.10.19") {
            exclude group: "org.ow2.asm", module: '*'
        }
        testCompile "org.ow2.asm:asm:$asmVer"
        testCompile 'org.openjdk.jmh:jmh-core:1.4'
        testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.4'
        compileOnly 'org.kohsuke.metainf-services:metainf-services:1.5'
        // compileOnly 'com.google.auto.service:auto-service:1.0-rc1' // same as metainf-services
        markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }

    sourceSets {
        main.compileClasspath += configurations.compileOnly
        test.compileClasspath += configurations.compileOnly

        main.compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }

    //    tasks.withType(JavaCompile) {
    //        // options.compilerArgs << "-Xlint:unchecked"
    //        // options.compilerArgs << "-Xlint:deprecation"
    //    }
    
    compileJava.dependsOn processResources
    compileJava {
        doLast {
            ant.taskdef(
                name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner',
                classpath: "build/classes/main:build/resources/main:" + configurations.compile.asPath)
            ant.scanSuspendables(
                auto: false,
                supersFile:"$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                append: false) {
                fileset(dir: sourceSets.main.output.classesDir)
            }

            ant.taskdef(name:'instrumentation', classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: "build/resources/main:build/classes/main:" + configurations.compile.asPath)
            ant.instrumentation(verbose:'true', check:'true', debug:'true') {
                fileset(dir: sourceSets.main.output.classesDir) {
                    exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
                }
            }
        }
    }
    
    test.dependsOn jar

    test {
        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }
    
    tasks.withType(Test) {
        useJUnit()
        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'

	// systemProperty "java.util.logging.config.file", "jul.properties"
        systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
        // systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"

        // systemProperty 'co.paralleluniverse.debugMode', 'true'
        systemProperty 'co.paralleluniverse.monitoring.flightRecorderLevel', '5'
        systemProperty 'co.paralleluniverse.globalFlightRecorder', 'true'
        systemProperty 'co.paralleluniverse.flightRecorderDumpFile', 'quasar.log'
        systemProperty 'co.paralleluniverse.monitoring.flightRecorderSize', '200000'

        jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)
        jvmArgs "-Xmx2048m"
        doLast() {
            println "file://" + getReports().getHtml().getDestination() + "/index.html"
        }
    }

    task run(type: JavaExec, dependsOn:[testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if(project.hasProperty('mainClass')){
            main = project.mainClass
        }
        if(project.hasProperty('args')){
            args project.args.split('\\s+')
        }

        jvmArgs '-Xmx2048m'

        systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
        systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
        jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath
    }


    //    tasks.withType(Debug) {
    //        classpath = sourceSets.test.runtimeClasspath
    //    }

    configure (javadoc) {
        options {
            docletpath = configurations.markdownDoclet.files.asType(List)
            doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            addStringOption("parse-timeout", "10")
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
            links = [
        "http://docs.oracle.com/javase/7/docs/api/",
        "http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/"
            ]
        }
        excludes = [
        "co/paralleluniverse/common/logging/**",
        "co/paralleluniverse/common/monitoring/**",
        "co/paralleluniverse/common/util/**",
        ]
    }

    defaultTasks 'build'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    // remove embedded jars from pom
    configure(install.repositories.mavenInstaller) {
        pom.whenConfigured {
            it.dependencies.removeAll { dep ->
                dep.artifactId.startsWith('jsr166e') ||
                dep.artifactId.startsWith('high-scale-lib') ||
                dep.artifactId.startsWith('HdrHistogram') ||
                (dep.groupId == 'co.paralleluniverse' && dep.artifactId.startsWith('quasar-core'))
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ?
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
                }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    }
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'pron'
                            name 'Ron Pressler'
                        }
                    }
                }
            }
        }
    }
}

project (':quasar-core') {
    apply plugin: 'com.github.johnrengelman.shadow'
    
    dependencies {
        compile ":jsr166e"
        compile ":high-scale-lib"
        compile ":HdrHistogram"
        compile "org.ow2.asm:asm:$asmVer"
        compile "org.ow2.asm:asm-analysis:$asmVer"
        compile "org.ow2.asm:asm-commons:$asmVer"
        compile "org.ow2.asm:asm-util:$asmVer"
        compile "com.lmax:disruptor:3.3.0"
        compile("com.esotericsoftware.kryo:kryo:2.24.0") {
            exclude group: "org.ow2.asm", module: '*'
        }
        compile("de.javakaffee:kryo-serializers:0.27") {
            exclude group: "com.esotericsoftware.kryo", module: '*'
        }
    }

    jar {
        from zipTree("${baselib}/jsr166e.jar")  // include non-Maven jars
        from zipTree("${baselib}/high-scale-lib.jar")  // include non-Maven jars
        from zipTree("${baselib}/HdrHistogram.jar")  // include non-Maven jars
        manifest {
            attributes(
	            "Built-By"                  :   System.getProperty("user.name"),
	            "Implementation-Title"      :   project.name,
	            "Implementation-Version"    :   version,
	            "Implementation-Vendor"     :   vendor,
	            "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                   "Agent-Class"               :   "co.paralleluniverse.fibers.instrument.JavaAgent",
	            "Can-Retransform-Classes"   :   "true",
                    "Can-Redefine-Classes"      :   "true",
                //  "Class-Path"                :   configurations.runtime.collect { "lib/"+it.getName() }.join(',')
            )
        }
    }
    
    shadowJar {
        outputs.upToDateWhen { false }
        
        // artifactAttached = false
        classifier = 'shadow'
        destinationDir = file("$buildDir/libs")

        dependencies {
            include(dependency('org.ow2.asm:.*:.*'))
            include(dependency(':jsr166e'))
            include(dependency(':high-scale-lib'))
            include(dependency(':HdrHistogram'))
        }

        relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'
        
        doLast {
            logger.info("$buildDir/libs/${project.name}-${project.version}-${classifier}.jar -> $buildDir/libs/${project.name}-${project.version}.jar")
            file("$buildDir/libs/${project.name}-${version}-${classifier}.jar").renameTo(file("$buildDir/libs/${project.name}-${project.version}.jar"))
        }
    }
    
    shadowJar.dependsOn jar
    build.dependsOn shadowJar
    install.dependsOn shadowJar
    signArchives.dependsOn shadowJar
    uploadArchives.dependsOn shadowJar

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured {
        it.dependencies.removeAll { dep ->
            dep.artifactId.startsWith('jsr166e') ||
            dep.artifactId.startsWith('high-scale-lib') ||
            dep.artifactId.startsWith('HdrHistogram') ||
            dep.groupId == 'org.ow2.asm' ||
            (dep.groupId == 'co.paralleluniverse' && dep.artifactId.startsWith('quasar-core'))
        }
    }
    
    if (System.properties['java.version'].startsWith('1.8') ) {
        artifacts {
            archives jar
            archives project(':quasar-core-jdk8').jar
            archives sourcesJar
            archives javadocJar
        }

        uploadArchives.dependsOn ':quasar-core-jdk8:jar'
    }
}

project (':quasar-actors') {
    //project.evaluationDependsOn(':quasar-core')

    dependencies {
        compile project(':quasar-core')
        // compile 'org.mutabilitydetector:MutabilityDetector:0.9.2'
        compile "org.slf4j:slf4j-api:1.7.10"
        compile ("cglib:cglib:3.1") {
            exclude group: "org.ow2.asm", module: '*'
        }
        //  runtime "org.slf4j:slf4j-jdk14:1.7.10"
        testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:2.1") {
            exclude group: "org.slf4j", module: '*'
        }
        testRuntime "org.apache.logging.log4j:log4j-api:2.1"
        testRuntime "org.apache.logging.log4j:log4j-core:2.1"
        testRuntime "com.lmax:disruptor:3.3.0" // required for log4j
    }
}

project (':quasar-galaxy') {
    dependencies {
        compile project(':quasar-core')
        compile project(':quasar-actors')

        compile ("co.paralleluniverse:galaxy:1.4")  {
            exclude group: 'com.lmax', module: 'disruptor'
            exclude group: 'de.javakaffee', module: 'kryo-serializers'
            exclude group: 'com.google.guava', module: 'guava'
        }

        testCompile ('org.gridkit.lab:telecontrol-ssh:0.7.24'){
            exclude group: 'org.ow2.asm', module: '*'
            exclude group: 'org.slf4j', module: '*'
        }
        testRuntime files(jar.archivePath)
    }


    tasks.withType(Test) {
        systemProperty "co.paralleluniverse.quasarJar", "${quasarJar}"
        systemProperty "jgroups.bind_addr", "127.0.0.1"
        systemProperty "galaxy.multicast.address", "225.0.0.1"
        systemProperty "galaxy.multicast.port", "7050"
        systemProperty "co.paralleluniverse.galaxy.configFile", "${sourceSets.main.output.resourcesDir}/config/peer.xml"
        systemProperty "co.paralleluniverse.galaxy.autoGoOnline", "true"
    }

    tasks.withType(JavaExec) {
        main = mainClass
        systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
        systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
        // systemProperty "co.paralleluniverse.io.useJDKSerialization", "true"
        jvmArgs "-javaagent:${quasarJar}" // =v, =d
        jvmArgs "-ea", "-XX:MaxDirectMemorySize=100M"
        systemProperty "jgroups.bind_addr", "127.0.0.1"
        systemProperty "galaxy.multicast.address", "225.0.0.1"
        systemProperty "galaxy.multicast.port", "7050"
        systemProperty "co.paralleluniverse.galaxy.configFile", "${sourceSets.main.output.resourcesDir}/config/peer.xml"
        systemProperty "co.paralleluniverse.galaxy.autoGoOnline", "true"
    }
}

task javadoc(type: Javadoc, dependsOn: subprojects.javadoc) {
    title = "Quasar ${project(':quasar-core').version}"
    destinationDir = file("docs/javadoc")
    source = project(':quasar-core').sourceSets.main.allJava + project(':quasar-actors').sourceSets.main.allJava
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        docletpath = project(':quasar-core').configurations.markdownDoclet.files.asType(List)
        doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
        links = [
        "http://docs.oracle.com/javase/7/docs/api/",
        "http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc/"
        ]
    }
    excludes = [
        "co/paralleluniverse/actors/spi/**",
        "co/paralleluniverse/actors/ActorMonitor.java",
        "co/paralleluniverse/actors/GlobalRegistry.java",
        "co/paralleluniverse/actors/JMXActorMonitor.java",
        "co/paralleluniverse/actors/LifecycleListener.java",
        "co/paralleluniverse/actors/LifecycleListenerProxy.java",
        "co/paralleluniverse/actors/MutabilityTester.java",
        "co/paralleluniverse/actors/RemoteActorProxyFactoryService.java",
        "co/paralleluniverse/actors/RemoteActorRef.java",
        "co/paralleluniverse/actors/RemoteActorProxyFactory.java",
        "co/paralleluniverse/common/benchmark/**",
        "co/paralleluniverse/common/classloader/**",
        "co/paralleluniverse/common/logging/**",
        "co/paralleluniverse/common/monitoring/**",
        "co/paralleluniverse/common/reflection/**",
        "co/paralleluniverse/common/util/**",
        "co/paralleluniverse/concurrent/forkjoin/**",
        "co/paralleluniverse/concurrent/util/**",
        "co/paralleluniverse/data/record/DynamicGeneratedRecord.java",
        "co/paralleluniverse/data/record/DynamicRecord.java",
        "co/paralleluniverse/fibers/DefaultFiberPool.java",
        "co/paralleluniverse/fibers/FibersMonitor.java",
        "co/paralleluniverse/fibers/FiberTimedScheduler.java",
        "co/paralleluniverse/fibers/Instrumented.java",
        "co/paralleluniverse/fibers/NoopFibersMonitor.java",
        "co/paralleluniverse/fibers/instrument/**",
        "co/paralleluniverse/io/serialization/**",
        "co/paralleluniverse/remote/**",
        "co/paralleluniverse/strands/channels/SelectActionImpl.java",
        "co/paralleluniverse/strands/channels/disruptor/**", // not ready
        "co/paralleluniverse/strands/queues/**",
    ]
}

task clean(dependsOn: subprojects.clean) << {
    delete 'docs/javadoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

