diff --git a/src/main/java/de/is24/deadcode4j/Utils.java b/src/main/java/de/is24/deadcode4j/Utils.java
index 3fc504d197..7a4f1a0501 100755
--- a/src/main/java/de/is24/deadcode4j/Utils.java
+++ b/src/main/java/de/is24/deadcode4j/Utils.java
@@ -140,13 +140,13 @@ public static boolean isEmpty(Collection<?> collection) {
     }
 
     /**
-     * Indicates if a <code>String</code> is either <code>null</code>, empty or consists of whitespace only.
+     * Indicates if a <code>String</code> is neither <code>null</code>, empty, nor consists of whitespace only.
      *
      * @since 2.2.0
      */
-    public static boolean isBlank(@Nullable String string) {
+    public static boolean isNotBlank(@Nullable String string) {
         // we simply delegate this - but we have it in one place
-        return StringUtils.isBlank(string);
+        return StringUtils.isNotBlank(string);
     }
 
 }
diff --git a/src/main/java/de/is24/deadcode4j/analyzer/ExtendedXmlAnalyzer.java b/src/main/java/de/is24/deadcode4j/analyzer/ExtendedXmlAnalyzer.java
index 16ca73bb36..4c573aca1e 100755
--- a/src/main/java/de/is24/deadcode4j/analyzer/ExtendedXmlAnalyzer.java
+++ b/src/main/java/de/is24/deadcode4j/analyzer/ExtendedXmlAnalyzer.java
@@ -16,7 +16,7 @@
 import static com.google.common.collect.Iterables.getLast;
 import static com.google.common.collect.Maps.newHashMapWithExpectedSize;
 import static de.is24.deadcode4j.Utils.checkNotNull;
-import static de.is24.deadcode4j.Utils.isBlank;
+import static de.is24.deadcode4j.Utils.isNotBlank;
 import static java.util.Collections.emptyMap;
 
 /**
@@ -226,7 +226,7 @@ public String toString() {
         }
 
         Element(@Nonnull String name) {
-            checkArgument(isBlank(name), "The Element's [name] must be set!");
+            checkArgument(isNotBlank(name), "The Element's [name] must be set!");
             this.name = Optional.of(name);
             attributeRestrictions = emptyMap();
         }
diff --git a/src/main/java/de/is24/deadcode4j/analyzer/SimpleXmlAnalyzer.java b/src/main/java/de/is24/deadcode4j/analyzer/SimpleXmlAnalyzer.java
index 4d370c5ee3..d055b2788d 100755
--- a/src/main/java/de/is24/deadcode4j/analyzer/SimpleXmlAnalyzer.java
+++ b/src/main/java/de/is24/deadcode4j/analyzer/SimpleXmlAnalyzer.java
@@ -16,7 +16,7 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Maps.newHashMap;
 import static com.google.common.collect.Sets.newHashSet;
-import static de.is24.deadcode4j.Utils.isBlank;
+import static de.is24.deadcode4j.Utils.isNotBlank;
 
 /**
  * Serves as simple base class with which to analyze XML files by defining which element nodes' text or attributes
@@ -105,7 +105,7 @@ protected Element registerClassAttribute(@Nonnull String elementName, @Nonnull S
         private String attributeToReportAsClass;
 
         public Element(@Nonnull String name) {
-            checkArgument(isBlank(name), "The element's [name] must be set!");
+            checkArgument(isNotBlank(name), "The element's [name] must be set!");
             this.name = name;
         }
 
@@ -115,8 +115,8 @@ public Element(@Nonnull String name) {
          * @since 1.5
          */
         public Element withAttributeValue(@Nonnull String attributeName, @Nonnull String requiredValue) {
-            checkArgument(isBlank(attributeName), "[attributeName] must be given!");
-            checkArgument(isBlank(requiredValue), "[requiredValue] must be given!");
+            checkArgument(isNotBlank(attributeName), "[attributeName] must be given!");
+            checkArgument(isNotBlank(requiredValue), "[requiredValue] must be given!");
             this.requiredAttributeValues.put(attributeName, requiredValue);
             return this;
         }
@@ -134,7 +134,7 @@ String getAttributeToReportAsClass() {
         }
 
         void setAttributeToReportAsClass(@Nonnull String attributeName) {
-            checkArgument(isBlank(attributeName), "[attributeName] must be given!");
+            checkArgument(isNotBlank(attributeName), "[attributeName] must be given!");
             checkState(this.attributeToReportAsClass == null,
                     "Already registered [" + this.attributeToReportAsClass + "] as attribute to report as class!");
             this.attributeToReportAsClass = attributeName;
diff --git a/src/main/java/de/is24/deadcode4j/analyzer/XmlAnalyzer.java b/src/main/java/de/is24/deadcode4j/analyzer/XmlAnalyzer.java
index 27060e6727..136f054406 100755
--- a/src/main/java/de/is24/deadcode4j/analyzer/XmlAnalyzer.java
+++ b/src/main/java/de/is24/deadcode4j/analyzer/XmlAnalyzer.java
@@ -13,7 +13,7 @@
 import java.io.InputStream;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static de.is24.deadcode4j.Utils.isBlank;
+import static de.is24.deadcode4j.Utils.isNotBlank;
 
 /**
  * Serves as a base class with which to analyze XML files.
@@ -40,7 +40,7 @@ protected XmlAnalyzer(@Nonnull String endOfFileName) {
         } catch (Exception e) {
             throw new RuntimeException("Failed to set up XML parser!", e);
         }
-        checkArgument(isBlank(endOfFileName), "[endOfFileName] must be set!");
+        checkArgument(isNotBlank(endOfFileName), "[endOfFileName] must be set!");
         this.endOfFileName = endOfFileName;
     }
 
