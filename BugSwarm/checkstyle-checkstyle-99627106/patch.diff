diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 68f975ad62..7708dbeed5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -29,6 +29,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
+import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -142,16 +143,17 @@ else if (!sourceAlias.isEmpty()) {
     /**
      * Checks for a suppression of a check with the given source name and
      * location in the last file processed.
-     * @param sourceName the source name of the check
-     * @param line the line number of the check
-     * @param column the column number of the check
+     * @param event audit event.
      * @return whether the check with the given name is suppressed at the given
      *         source location
      */
-    public static boolean isSuppressed(String sourceName, int line,
-        int column) {
+    public static boolean isSuppressed(AuditEvent event) {
         final List<Entry> entries = ENTRIES.get();
+        final String sourceName = event.getSourceName();
         final String checkAlias = getAlias(sourceName);
+        final int line = event.getLine();
+        final int column = event.getColumn();
+        boolean suppressed = false;
         for (Entry entry : entries) {
             final boolean afterStart =
                 entry.getFirstLine() < line
@@ -164,11 +166,13 @@ public static boolean isSuppressed(String sourceName, int line,
             final boolean nameMatches =
                 ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())
                     || entry.getCheckName().equalsIgnoreCase(checkAlias);
-            if (afterStart && beforeEnd && nameMatches) {
-                return true;
+            final boolean idMatches = event.getModuleId() != null
+                && event.getModuleId().equals(entry.getCheckName());
+            if (afterStart && beforeEnd && (nameMatches || idMatches)) {
+                suppressed = true;
             }
         }
-        return false;
+        return suppressed;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
index c67ab317d1..3c6d761ec5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
@@ -75,6 +75,11 @@
      */
     public static final String MSG_KEY = "multiple.statements.line";
 
+    /**
+     * Counts number of semicolons in nested lambdas.
+     */
+    private final Deque<Integer> countOfSemiInLambda = new ArrayDeque<>();
+
     /**
      * Hold the line-number where the last statement ended.
      */
@@ -100,11 +105,6 @@
      */
     private int lambdaStatementEnd = -1;
 
-    /**
-     * Counts number of semicolons in nested lambdas.
-     */
-    private final Deque<Integer> countOfSemiInLambda = new ArrayDeque<>();
-
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
@@ -137,28 +137,7 @@ public void beginTree(DetailAST rootAST) {
     public void visitToken(DetailAST ast) {
         switch (ast.getType()) {
             case TokenTypes.SEMI:
-                DetailAST currentStatement = ast;
-                final boolean hasResourcesPrevSibling =
-                        currentStatement.getPreviousSibling() != null
-                        && currentStatement.getPreviousSibling().getType() == TokenTypes.RESOURCES;
-                if (!hasResourcesPrevSibling && isMultilineStatement(currentStatement)) {
-                    currentStatement = ast.getPreviousSibling();
-                }
-                if (isInLambda) {
-                    int countOfSemiInCurrentLambda = countOfSemiInLambda.pop();
-                    countOfSemiInCurrentLambda++;
-                    countOfSemiInLambda.push(countOfSemiInCurrentLambda);
-                    if (!inForHeader && countOfSemiInCurrentLambda > 1
-                            && isOnTheSameLine(currentStatement,
-                                lastStatementEnd, forStatementEnd,
-                                lambdaStatementEnd) ) {
-                        log(ast, MSG_KEY);
-                    }
-                }
-                else if (!inForHeader  && isOnTheSameLine(currentStatement, lastStatementEnd,
-                        forStatementEnd, lambdaStatementEnd)) {
-                    log(ast, MSG_KEY);
-                }
+                checkIfSemicolonIsInDifferentLineThanPrevious(ast);
                 break;
             case TokenTypes.FOR_ITERATOR:
                 forStatementEnd = ast.getLineNo();
@@ -196,6 +175,35 @@ public void leaveToken(DetailAST ast) {
         }
     }
 
+    /**
+     * Checks if given semicolon is in different line than previous.
+     * @param ast semicolon to check
+     */
+    private void checkIfSemicolonIsInDifferentLineThanPrevious(DetailAST ast) {
+        DetailAST currentStatement = ast;
+        final boolean hasResourcesPrevSibling =
+                currentStatement.getPreviousSibling() != null
+                        && currentStatement.getPreviousSibling().getType() == TokenTypes.RESOURCES;
+        if (!hasResourcesPrevSibling && isMultilineStatement(currentStatement)) {
+            currentStatement = ast.getPreviousSibling();
+        }
+        if (isInLambda) {
+            int countOfSemiInCurrentLambda = countOfSemiInLambda.pop();
+            countOfSemiInCurrentLambda++;
+            countOfSemiInLambda.push(countOfSemiInCurrentLambda);
+            if (!inForHeader && countOfSemiInCurrentLambda > 1
+                    && isOnTheSameLine(currentStatement,
+                    lastStatementEnd, forStatementEnd,
+                    lambdaStatementEnd)) {
+                log(ast, MSG_KEY);
+            }
+        }
+        else if (!inForHeader && isOnTheSameLine(currentStatement, lastStatementEnd,
+                forStatementEnd, lambdaStatementEnd)) {
+            log(ast, MSG_KEY);
+        }
+    }
+
     /**
      * Checks whether two statements are on the same line.
      * @param ast token for the current statement.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 3da0db307b..06323e9abd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -38,7 +38,9 @@
  * That is references to instance variables and methods of the present
  * object are explicitly of the form &quot;this.varName&quot; or
  * &quot;this.methodName(args)&quot;.
- *</p>
+ * </p>
+ *
+ * <p>Warning: the Check is very controversial and not that actual nowadays.</p>
  *
  * <p>Examples of use:
  * <pre>
@@ -53,6 +55,19 @@
  * &lt;/module&gt;
  * </pre>
  *
+ * <p>Rationale:</p>
+ * <ol>
+ *   <li>
+ *     The same notation/habit for C++ and Java (C++ have global methods, so having
+ *     &quot;this.&quot; do make sense in it to distinguish call of method of class
+ *     instead of global).
+ *   </li>
+ *   <li>
+ *     Non-IDE development (ease of refactoring, some clearness to distinguish
+ *     static and non-static methods).
+ *   </li>
+ * </ol>
+ *
  * <p>Limitations: Nothing is currently done about static variables
  * or catch-blocks.  Static methods invoked on a class name seem to be OK;
  * both the class name and the method name have a DOT parent.
@@ -374,7 +389,8 @@ private AbstractFrame checkField(DetailAST ast) {
     private AbstractFrame checkMethod(DetailAST ast) {
         final AbstractFrame frame = findFrame(ast, true);
         if (frame != null
-                && ((ClassFrame) frame).hasInstanceMethod(ast)) {
+            && ((ClassFrame) frame).hasInstanceMethod(ast)
+            && !((ClassFrame) frame).hasStaticMethod(ast)) {
             return frame;
         }
         return null;
@@ -478,12 +494,12 @@ protected String getFrameName() {
             return frameName;
         }
 
-        /** Check whether the frame contains a given name.
+        /** Check whether the frame contains a field or a variable with the given name.
          * @param nameToFind the IDENT ast of the name we're looking for
          * @return whether it was found
          */
-        boolean contains(DetailAST nameToFind) {
-            return containsName(varIdents, nameToFind);
+        boolean containsFieldOrVariable(DetailAST nameToFind) {
+            return containsFieldOrVariableDef(varIdents, nameToFind);
         }
 
         /** Check whether the frame contains a given name.
@@ -495,7 +511,7 @@ protected AbstractFrame getIfContains(DetailAST nameToFind, boolean lookForMetho
             AbstractFrame frame;
 
             if (!lookForMethod
-                && contains(nameToFind)) {
+                && containsFieldOrVariable(nameToFind)) {
                 frame = this;
             }
             else {
@@ -512,7 +528,7 @@ protected AbstractFrame getIfContains(DetailAST nameToFind, boolean lookForMetho
          * @return true if the set contains a declaration with the text of the specified
          *         IDENT ast and it is declared in a proper position.
          */
-        protected boolean containsName(Set<DetailAST> set, DetailAST ident) {
+        protected boolean containsFieldOrVariableDef(Set<DetailAST> set, DetailAST ident) {
             boolean result = false;
             for (DetailAST ast: set) {
                 if (isProperDefinition(ident, ast)) {
@@ -642,25 +658,33 @@ public void addInstanceMethod(final DetailAST ident) {
          *         instance member of the class
          */
         public boolean hasInstanceMember(final DetailAST ident) {
-            return containsName(instanceMembers, ident);
+            return containsFieldOrVariableDef(instanceMembers, ident);
         }
 
         /**
          * Checks if a given name is a known instance method of the class.
-         * @param ident the IDENT ast of the name to check
-         * @return true is the given name is a name of a known
+         * @param ident the IDENT ast of the method call to check
+         * @return true if the given ast is correspondent to a known
          *         instance method of the class
          */
         public boolean hasInstanceMethod(final DetailAST ident) {
-            return containsName(instanceMethods, ident);
+            return containsMethodDef(instanceMethods, ident);
+        }
+
+        /**
+         * Checks if a given name is a known static method of the class.
+         * @param ident the IDENT ast of the method call to check
+         * @return true is the given ast is correspondent to a known
+         *         instance method of the class
+         */
+        public boolean hasStaticMethod(final DetailAST ident) {
+            return containsMethodDef(staticMethods, ident);
         }
 
         @Override
-        boolean contains(DetailAST nameToFind) {
-            return containsName(instanceMembers, nameToFind)
-                    || containsName(instanceMethods, nameToFind)
-                    || containsName(staticMembers, nameToFind)
-                    || containsName(staticMethods, nameToFind);
+        boolean containsFieldOrVariable(DetailAST nameToFind) {
+            return containsFieldOrVariableDef(instanceMembers, nameToFind)
+                    || containsFieldOrVariableDef(staticMembers, nameToFind);
         }
 
         @Override
@@ -673,7 +697,8 @@ protected boolean isProperDefinition(DetailAST ident, DetailAST ast) {
         protected AbstractFrame getIfContains(DetailAST nameToFind, boolean lookForMethod) {
             AbstractFrame frame = null;
 
-            if (contains(nameToFind)) {
+            if (lookForMethod && containsMethod(nameToFind)
+                || containsFieldOrVariable(nameToFind)) {
                 frame = this;
             }
             else if (getParent() != null) {
@@ -681,6 +706,54 @@ else if (getParent() != null) {
             }
             return frame;
         }
+
+        /**
+         * Check whether the frame contains a given method.
+         * @param methodToFind the AST of the method to find.
+         * @return true, if a method with the same name and number of parameters is found.
+         */
+        private boolean containsMethod(DetailAST methodToFind) {
+            return containsMethodDef(instanceMethods, methodToFind)
+                || containsMethodDef(staticMethods, methodToFind);
+        }
+
+        /**
+         * Whether the set contains a method definition with the
+         *     same name and number of parameters.
+         * @param set the set of definitions.
+         * @param ident the specified method call IDENT ast.
+         * @return true if the set contains a definition with the
+         *     same name and number of parameters.
+         */
+        private boolean containsMethodDef(Set<DetailAST> set, DetailAST ident) {
+            boolean result = false;
+            for (DetailAST ast: set) {
+                if (isSimilarSignature(ident, ast)) {
+                    result = true;
+                    break;
+                }
+            }
+            return result;
+        }
+
+        /**
+         * Whether the method definition has the same name and number of parameters.
+         * @param ident the specified method call IDENT ast.
+         * @param ast the ast of a method definition to compare with.
+         * @return true if a method definition has the same name and number of parameters
+         *     as the method call.
+         */
+        private boolean isSimilarSignature(DetailAST ident, DetailAST ast) {
+            boolean result = false;
+            if (ident.getText().equals(ast.getText())) {
+                final int paramsNumber = ast.getParent().findFirstToken(TokenTypes.PARAMETERS)
+                    .getChildCount();
+                final int argsNumber = ident.getParent().findFirstToken(TokenTypes.ELIST)
+                    .getChildCount();
+                result = paramsNumber == argsNumber;
+            }
+            return result;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilter.java
index 9bc042817f..ddbf90e9a1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilter.java
@@ -34,7 +34,6 @@
     implements Filter {
     @Override
     public boolean accept(AuditEvent event) {
-        return !SuppressWarningsHolder.isSuppressed(event.getSourceName(),
-            event.getLine(), event.getColumn());
+        return !SuppressWarningsHolder.isSuppressed(event);
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 66068a7c1c..9125ce1e11 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -415,7 +415,13 @@ public boolean isMatch(AuditEvent event) {
                 if (tagMatcher.find()) {
                     match = true;
                 }
-                else if (tagMessageRegexp != null) {
+                else if (tagMessageRegexp == null) {
+                    if (event.getModuleId() != null) {
+                        final Matcher idMatcher = tagCheckRegexp.matcher(event.getModuleId());
+                        match = idMatcher.find();
+                    }
+                }
+                else {
                     final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());
                     match = messageMatcher.find();
                 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index 20b5d4123e..f0defcf297 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -451,6 +451,10 @@ public boolean isMatch(AuditEvent event) {
                     match = messageMatcher.find();
                 }
             }
+            else if (event.getModuleId() != null) {
+                final Matcher idMatcher = tagCheckRegexp.matcher(event.getModuleId());
+                match = idMatcher.find();
+            }
             return match;
         }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
index 734fcb9199..480851e4ec 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
@@ -44,9 +44,13 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.Checker;
+import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
+import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+import com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ SuppressWarningsHolder.class, SuppressWarningsHolderTest.class })
@@ -140,7 +144,12 @@ public void testIsSuppressed() throws Exception {
         entries.setAccessible(true);
         entries.set(holder, threadLocal);
 
-        assertFalse(SuppressWarningsHolder.isSuppressed("SourceName", 100, 10));
+        final Checker source = new Checker();
+        final LocalizedMessage message =
+            new LocalizedMessage(100, 10, null, null, null, "id", MemberNameCheck.class, "message");
+        final AuditEvent event = new AuditEvent(source, "fileName", message);
+
+        assertFalse(SuppressWarningsHolder.isSuppressed(event));
     }
 
     @Test
@@ -164,11 +173,24 @@ public void testIsSuppressedWithAllArgument() throws Exception {
         entries.setAccessible(true);
         entries.set(holder, threadLocal);
 
-        assertFalse(SuppressWarningsHolder.isSuppressed("SourceName", 100, 10));
-
-        assertTrue(SuppressWarningsHolder.isSuppressed("SourceName", 100, 150));
-
-        assertTrue(SuppressWarningsHolder.isSuppressed("SourceName", 200, 1));
+        final Checker source = new Checker();
+        final LocalizedMessage firstMessageForTest =
+            new LocalizedMessage(100, 10, null, null, null, "id", MemberNameCheck.class, "msg");
+        final AuditEvent firstEventForTest =
+            new AuditEvent(source, "fileName", firstMessageForTest);
+        assertFalse(SuppressWarningsHolder.isSuppressed(firstEventForTest));
+
+        final LocalizedMessage secondMessageForTest =
+            new LocalizedMessage(100, 150, null, null, null, "id", MemberNameCheck.class, "msg");
+        final AuditEvent secondEventForTest =
+            new AuditEvent(source, "fileName", secondMessageForTest);
+        assertTrue(SuppressWarningsHolder.isSuppressed(secondEventForTest));
+
+        final LocalizedMessage thirdMessageForTest =
+            new LocalizedMessage(200, 1, null, null, null, "id", MemberNameCheck.class, "msg");
+        final AuditEvent thirdEventForTest =
+            new AuditEvent(source, "fileName", thirdMessageForTest);
+        assertTrue(SuppressWarningsHolder.isSuppressed(thirdEventForTest));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java
index c27d4b4146..4576fb0fc6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java
@@ -58,6 +58,7 @@ public void testIt() throws Exception {
             "115:9: " + getCheckMessage(MSG_METHOD, "instanceMethod", ""),
             "121:13: " + getCheckMessage(MSG_METHOD, "instanceMethod", "Issue2240."),
             "122:13: " + getCheckMessage(MSG_VARIABLE, "i", "Issue2240."),
+            "134:9: " + getCheckMessage(MSG_METHOD, "foo", ""),
         };
         verify(checkConfig,
                getPath("InputRequireThis.java"),
@@ -73,6 +74,7 @@ public void testMethodsOnly() throws Exception {
             "17:9: " + getCheckMessage(MSG_METHOD, "method1", ""),
             "115:9: " + getCheckMessage(MSG_METHOD, "instanceMethod", ""),
             "121:13: " + getCheckMessage(MSG_METHOD, "instanceMethod", "Issue2240."),
+            "134:9: " + getCheckMessage(MSG_METHOD, "foo", ""),
         };
         verify(checkConfig,
                getPath("InputRequireThis.java"),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
index d7c65ed4a2..5ab0e0d28e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
@@ -125,11 +125,19 @@ public Checker createChecker(Configuration checkConfig)
             "com.puppycrawl.tools.checkstyle.checks.sizes."
                 + "ParameterNumberCheck=paramnum");
         checksConfig.addChild(holderConfig);
-        checksConfig.addChild(createCheckConfig(MemberNameCheck.class));
-        checksConfig.addChild(createCheckConfig(ConstantNameCheck.class));
+        final DefaultConfiguration memberNameCheckConfig = createCheckConfig(MemberNameCheck.class);
+        memberNameCheckConfig.addAttribute("id", "ignore");
+        checksConfig.addChild(memberNameCheckConfig);
+        final DefaultConfiguration constantNameCheckConfig =
+            createCheckConfig(ConstantNameCheck.class);
+        constantNameCheckConfig.addAttribute("id", "");
+        checksConfig.addChild(constantNameCheckConfig);
         checksConfig.addChild(createCheckConfig(ParameterNumberCheck.class));
         checksConfig.addChild(createCheckConfig(IllegalCatchCheck.class));
-        checksConfig.addChild(createCheckConfig(UncommentedMainCheck.class));
+        final DefaultConfiguration uncommentedMainCheckConfig =
+            createCheckConfig(UncommentedMainCheck.class);
+        uncommentedMainCheckConfig.addAttribute("id", "ignore");
+        checksConfig.addChild(uncommentedMainCheckConfig);
         checksConfig.addChild(createCheckConfig(JavadocTypeCheck.class));
         checkerConfig.addChild(checksConfig);
         if (checkConfig != null) {
@@ -152,4 +160,23 @@ public Checker createChecker(Configuration checkConfig)
         coll.removeAll(Arrays.asList(remove));
         return coll.toArray(new String[coll.size()]);
     }
+
+    @Test
+    public void testSuppressById() throws Exception {
+        final DefaultConfiguration filterConfig =
+            createFilterConfig(SuppressWarningsFilter.class);
+        final String[] suppressedViolationMessages = {
+            "6:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "8: Uncommented main method found.",
+        };
+        final String[] expectedViolationMessages = {
+            "3: Missing a Javadoc comment.",
+            "6:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "8: Uncommented main method found.",
+        };
+
+        verify(createChecker(filterConfig),
+            getPath("InputSuppressByIdWithWarningsFilter.java"),
+            removeSuppressed(expectedViolationMessages, suppressedViolationMessages));
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index b6efa5e38f..662d464141 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -217,8 +217,13 @@ public Checker createChecker(Configuration checkConfig)
             new DefaultConfiguration("configuration");
         final DefaultConfiguration checksConfig = createCheckConfig(TreeWalker.class);
         checksConfig.addChild(createCheckConfig(FileContentsHolder.class));
-        checksConfig.addChild(createCheckConfig(MemberNameCheck.class));
-        checksConfig.addChild(createCheckConfig(ConstantNameCheck.class));
+        final DefaultConfiguration memberNameCheckConfig = createCheckConfig(MemberNameCheck.class);
+        memberNameCheckConfig.addAttribute("id", "ignore");
+        checksConfig.addChild(memberNameCheckConfig);
+        final DefaultConfiguration constantNameCheckConfig =
+            createCheckConfig(ConstantNameCheck.class);
+        constantNameCheckConfig.addAttribute("id", null);
+        checksConfig.addChild(constantNameCheckConfig);
         checksConfig.addChild(createCheckConfig(IllegalCatchCheck.class));
         checkerConfig.addChild(checksConfig);
         if (checkConfig != null) {
@@ -311,4 +316,27 @@ public void testUsingTagMessageRegexp() throws Exception {
         final String[] suppressed = ArrayUtils.EMPTY_STRING_ARRAY;
         verifySuppressed(filterConfig, suppressed);
     }
+
+    @Test
+    public void testSuppressById() throws Exception {
+        final DefaultConfiguration filterConfig =
+            createFilterConfig(SuppressWithNearbyCommentFilter.class);
+        filterConfig.addAttribute("commentFormat", "@cs-: (\\w+) \\(\\w+\\)");
+        filterConfig.addAttribute("checkFormat", "$1");
+        filterConfig.addAttribute("influenceFormat", "0");
+        final String[] suppressedViolationMessages = {
+            "5:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "9:9: Name 'line_length' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+        };
+        final String[] expectedViolationMessages = {
+            "5:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "7:30: Name 'abc' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.",
+            "9:9: Name 'line_length' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "11:18: Name 'ID' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+        };
+
+        verify(createChecker(filterConfig),
+            getPath("InputSuppressByIdWithNearbyCommentFilter.java"),
+            removeSuppressed(expectedViolationMessages, suppressedViolationMessages));
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index 0a2fb0a1ab..a52a7127d7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -217,8 +217,13 @@ public Checker createChecker(Configuration checkConfig)
             new DefaultConfiguration("configuration");
         final DefaultConfiguration checksConfig = createCheckConfig(TreeWalker.class);
         checksConfig.addChild(createCheckConfig(FileContentsHolder.class));
-        checksConfig.addChild(createCheckConfig(MemberNameCheck.class));
-        checksConfig.addChild(createCheckConfig(ConstantNameCheck.class));
+        final DefaultConfiguration memberNameCheckConfig = createCheckConfig(MemberNameCheck.class);
+        memberNameCheckConfig.addAttribute("id", "ignore");
+        checksConfig.addChild(memberNameCheckConfig);
+        final DefaultConfiguration constantNameCheckConfig =
+            createCheckConfig(ConstantNameCheck.class);
+        constantNameCheckConfig.addAttribute("id", null);
+        checksConfig.addChild(constantNameCheckConfig);
         checksConfig.addChild(createCheckConfig(IllegalCatchCheck.class));
         checkerConfig.addChild(checksConfig);
         if (checkConfig != null) {
@@ -307,4 +312,27 @@ public void testAcceptNullFileContents() {
         final SuppressionCommentFilter filter = new SuppressionCommentFilter();
         Assert.assertTrue(filter.accept(auditEvent));
     }
+
+    @Test
+    public void testSuppressById() throws Exception {
+        final DefaultConfiguration filterConfig =
+            createFilterConfig(SuppressionCommentFilter.class);
+        filterConfig.addAttribute("offCommentFormat", "CSOFF (\\w+) \\(\\w+\\)");
+        filterConfig.addAttribute("onCommentFormat", "CSON (\\w+)");
+        filterConfig.addAttribute("checkFormat", "$1");
+        final String[] suppressedViolationMessages = {
+            "6:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "12:9: Name 'line_length' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            };
+        final String[] expectedViolationMessages = {
+            "6:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "9:30: Name 'abc' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.",
+            "12:9: Name 'line_length' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "15:18: Name 'ID' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            };
+
+        verify(createChecker(filterConfig),
+            getPath("InputSuppressByIdWithCommentFilter.java"),
+            removeSuppressed(expectedViolationMessages, suppressedViolationMessages));
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
index 0fa0b8ad4a..0c6d45597d 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
@@ -123,3 +123,14 @@ void bar() {
         }
     }
 }
+
+class Issue2539{
+    void foo(int i) {}
+    static void foo(double i) {}
+    void foo() {}
+
+    void bar() {
+        foo(1);
+        foo();
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithCommentFilter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithCommentFilter.java
new file mode 100755
index 0000000000..748d1574ec
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithCommentFilter.java
@@ -0,0 +1,16 @@
+package com.puppycrawl.tools.checkstyle.filters;
+
+public class InputSuppressByIdWithCommentFilter {
+
+    //CSOFF ignore (reason)
+    private int A1;
+
+    // @cs-: ignore (No NPE here)
+    private static final int abc = 5;
+
+
+    int line_length = 100;
+    //CSON ignore
+
+    private long ID = 1;
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithNearbyCommentFilter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithNearbyCommentFilter.java
new file mode 100755
index 0000000000..5586a21f0c
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithNearbyCommentFilter.java
@@ -0,0 +1,12 @@
+package com.puppycrawl.tools.checkstyle.filters;
+
+public class InputSuppressByIdWithNearbyCommentFilter {
+
+    private int A1; // @cs-: ignore (reason)
+
+    private static final int abc = 5; // @cs-: violation (No NPE here)
+
+    int line_length = 100; // Suppression @cs-: ignore (reason)
+
+    private long ID = 1; // Suppression @cs-:
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithWarningsFilter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithWarningsFilter.java
new file mode 100755
index 0000000000..f889466e78
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressByIdWithWarningsFilter.java
@@ -0,0 +1,13 @@
+package com.puppycrawl.tools.checkstyle.filters;
+
+public class InputSuppressByIdWithWarningsFilter {
+
+    @SuppressWarnings("checkstyle:ignore")
+    private int A1 = 1;
+
+    @SuppressWarnings("checkstyle:ignore")
+    public static void main(String[] args) {
+
+    }
+
+}
diff --git a/src/xdocs/config_coding.xml b/src/xdocs/config_coding.xml
index df4254a3bb..d04c76c47e 100755
--- a/src/xdocs/config_coding.xml
+++ b/src/xdocs/config_coding.xml
@@ -2773,6 +2773,25 @@ public void foo(int i, String s) {}
           &quot;this.methodName(args)&quot; and that those references don't
           rely on the default behavior when &quot;this.&quot; is absent.
         </p>
+
+        <p>
+          Warning: the Check is very controversial and not that actual nowadays.
+        </p>
+
+        <p>
+          Rationale:
+        </p>
+        <ol>
+          <li>
+            The same notation/habit for C++ and Java (C++ have global methods, so having
+            &quot;this.&quot; do make sense in it to distinguish call of method of class
+            instead of global).
+          </li>
+          <li>
+            Non-IDE development (ease of refactoring, some clearness to distinguish
+            static and non-static methods).
+          </li>
+        </ol>
       </subsection>
 
       <subsection name="Properties">
diff --git a/src/xdocs/config_filters.xml b/src/xdocs/config_filters.xml
index 70b15bb3e3..18563a2467 100755
--- a/src/xdocs/config_filters.xml
+++ b/src/xdocs/config_filters.xml
@@ -317,6 +317,53 @@ HashSet hashSet; // Warning here: Declaring variables, return values or paramete
 //resume
 ...
           </source>
+          <p>
+            It is possible to specify an ID of checks, so that it can be leveraged by the
+            SuppressionCommentFilter to skip validations. The following examples show how to skip
+            validations near code that is surrounded with <code>// CSOFF &lt;ID> (reason)</code>
+            and <code>// CSON &lt;ID></code>, where ID is the ID of checks you want to suppress.
+          </p>
+          <p>
+            Examples of Checkstyle checks configuration:
+          </p>
+          <source>
+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;
+  &lt;property name=&quot;id&quot; value=&quot;ignore&quot;/&gt;
+  &lt;property name="format" value="^.*@Ignore\s*$"/&gt;
+  &lt;property name="message" value="@Ignore should have a reason."/&gt;
+&lt;/module&gt;
+
+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;
+  &lt;property name=&quot;id&quot; value=&quot;systemout&quot;/&gt;
+  &lt;property name="format" value="^.*System\.(out|err).*$"/&gt;
+  &lt;property name="message" value="Don't use System.out/err, use SLF4J instead."/&gt;
+&lt;/module&gt;
+          </source>
+          <p>
+            Example of SuppressionCommentFilter configuration (checkFormat which is set to '$1'
+            points that ID of the checks is in the first group of offCommentFormat and
+            onCommentFormat regular expressions):
+          </p>
+          <source>
+&lt;module name="SuppressionCommentFilter&quot;&gt;
+  &lt;property name="offCommentFormat" value="CSOFF (\w+) \(\w+\)"/&gt;
+  &lt;property name="onCommentFormat" value="CSON (\w+)"/&gt;
+  &lt;property name="checkFormat" value="$1"/&gt;
+&lt;/module&gt;
+          </source>
+          <source>
+// CSOFF ignore (test has not been emplemented yet)
+@Ignore // should NOT fail RegexpSinglelineJava
+@Test
+public void testMethod() { }
+// CSON ignore
+
+// CSOFF systemout (debug)
+public static void foo() {
+    System.out.println("Debug info."); // should NOT fail RegexpSinglelineJava
+}
+// CSON systemout
+          </source>
       </subsection>
       <subsection name="Example of Usage">
         <ul>
@@ -599,6 +646,45 @@ private int J; // should NOT fail MemberNameCheck
 @SuppressWarnings({"NoWhitespaceAfter"})
 private int [] ARRAY; // should NOT fail MemberNameCheck and NoWhitespaceAfterCheck
           </source>
+          <p>
+            It is possible to specify an ID of checks, so that it can be leveraged by the
+            SuppressWarningsFilter to skip validations. The following examples show how to skip
+            validations near code that has  <code>@SuppressWarnings("checkstyle:&lt;ID>")</code> or
+            just <code>@SuppressWarnings("&lt;ID>")</code> annotation, where ID is the ID of checks
+            you want to suppress.
+          </p>
+          <p>
+            Example of Checkstyle check configuration:
+          </p>
+          <source>
+&lt;module name="RegexpSinglelineJava&quot;&gt;
+  &lt;property name="id" value="systemout"/&gt;
+  &lt;property name="format" value=&quot;^.*System\.(out|err).*$&quot;/&gt;
+  &lt;property name="message" value="Don't use System.out/err, use SLF4J instead."/&gt;
+&lt;/module&gt;
+          </source>
+          <p>
+            To make the annotations available to the filter.
+          </p>
+          <source>
+&lt;module name=&quot;TreeWalker&quot;&gt;
+  ...
+  &lt;module name=&quot;SuppressWarningsHolder&quot; /&gt;
+  ...
+&lt;/module&gt;
+          </source>
+          <p>
+            To configure filter to suppress audit events for annotations add:
+          </p>
+          <source>
+&lt;module name=&quot;SuppressWarningsFilter&quot; /&gt;
+          </source>
+          <source>
+@SuppressWarnings("checkstyle:systemout")
+public static void foo() {
+  System.out.println("Debug info."); // should NOT fail RegexpSinglelineJava
+}
+          </source>
       </subsection>
       <subsection name="Example of Usage">
         <ul>
@@ -790,6 +876,50 @@ private int D2;
             <source>
 public static final int [] array; // @cs.suppress ConstantName | NoWhitespaceAfter
             </source>
+            <p>
+              It is possible to specify an ID of checks, so that it can be leveraged by the
+              SuppressWithNearbyCommentFilter to skip validations. The following examples
+              show how to skip validations near code that has comment like
+              <code>// @cs-: &lt;ID/> (reason)</code>, where ID is the ID of checks you want to
+              suppress.
+            </p>
+            <p>
+              Examples of Checkstyle checks configuration:
+            </p>
+            <source>
+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;
+  &lt;property name=&quot;id&quot; value=&quot;ignore&quot;/&gt;
+  &lt;property name="format" value="^.*@Ignore\s*$"/&gt;
+  &lt;property name="message" value="@Ignore should have a reason."/&gt;
+&lt;/module&gt;
+
+&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;
+  &lt;property name=&quot;id&quot; value=&quot;systemout&quot;/&gt;
+  &lt;property name="format" value="^.*System\.(out|err).*$"/&gt;
+  &lt;property name="message" value="Don't use System.out/err, use SLF4J instead."/&gt;
+&lt;/module&gt;
+            </source>
+            <p>
+              Example of SuppressWithNearbyCommentFilter configuration (checkFormat which
+              is set to '$1' points that ID of the checks is in the first group of
+              commentFormat regular expressions):
+            </p>
+            <source>
+&lt;module name=&quot;SuppressWithNearbyCommentFilter&quot;&gt;
+  &lt;property name=&quot;commentFormat&quot; value=&quot;@cs-: (\w+) \(\w+\)"/&gt;
+  &lt;property name=&quot;checkFormat&quot; value=&quot;$1&quot;/&gt;
+  &lt;property name=&quot;influenceFormat&quot; value=&quot;0&quot;/&gt;
+&lt;/module&gt;
+            </source>
+            <source>
+@Ignore // @cs-: ignore (test has not been implemented yet)
+@Test
+public void testMethod() { }
+
+public static void foo() {
+  System.out.println("Debug info."); // @cs-: systemout (should not fail RegexpSinglelineJava)
+}
+            </source>
         </subsection>
         <subsection name="Example of Usage">
         <ul>
diff --git a/src/xdocs/index.xml.vm b/src/xdocs/index.xml.vm
index 752f27137a..e9a08e87e1 100755
--- a/src/xdocs/index.xml.vm
+++ b/src/xdocs/index.xml.vm
@@ -273,6 +273,12 @@
                   <td><a href="http://www.jarchitect.com/">JArchitect Home Page</a></td>
                   <td>Imports XML result files from CheckStyle.</td>
               </tr>
+              <tr>
+                  <td><a href="http://www.scala-sbt.org/">SBT</a></td>
+                  <td>Andrew Johnson</td>
+                  <td><a href="https://github.com/etsy/sbt-checkstyle-plugin">sbt-checkstyle-plugin Project Page</a></td>
+                  <td>SBT plugin for running Checkstyle on Java source files in an SBT project</td>
+              </tr>
           </table>
       </subsection>
 
