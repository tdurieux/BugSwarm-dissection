diff --git a/pom.xml b/pom.xml
index 4ce6fe0ef1..3f5a66c4dc 100755
--- a/pom.xml
+++ b/pom.xml
@@ -55,7 +55,7 @@
 		<profile>
 			<id>hibernate-5</id>
 			<properties>
-				<hibernate>5.0.0.Beta2</hibernate>
+				<hibernate>5.0.0.CR1</hibernate>
 			</properties>
 		</profile>
 		<profile>
diff --git a/src/main/java/org/springframework/data/jpa/repository/JpaContext.java b/src/main/java/org/springframework/data/jpa/repository/JpaContext.java
new file mode 100755
index 0000000000..465708418b
--- /dev/null
+++ b/src/main/java/org/springframework/data/jpa/repository/JpaContext.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.data.jpa.repository;
+
+import javax.persistence.EntityManager;
+
+/**
+ * Interface for components to provide useful information about the current JPA setup within the current
+ * {@link org.springframework.context.ApplicationContext}.
+ * 
+ * @author Oliver Gierke
+ * @soundtrack Marcus Miller - Water Dancer (Afrodeezia)
+ * @since 1.9
+ */
+public interface JpaContext {
+
+	/**
+	 * Returns the {@link EntityManager} managing the given domain type.
+	 * 
+	 * @param managedType must not be {@literal null}.
+	 * @return the {@link EntityManager} that manages the given type, will never be {@literal null}.
+	 * @throws IllegalArgumentException if the given type is not a JPA managed one no unique {@link EntityManager} managing this type can be resolved.
+	 */
+	EntityManager getEntityManagerByManagedType(Class<?> managedType);
+}
diff --git a/src/main/java/org/springframework/data/jpa/repository/config/BeanDefinitionNames.java b/src/main/java/org/springframework/data/jpa/repository/config/BeanDefinitionNames.java
index 765657a954..0d6a478f28 100755
--- a/src/main/java/org/springframework/data/jpa/repository/config/BeanDefinitionNames.java
+++ b/src/main/java/org/springframework/data/jpa/repository/config/BeanDefinitionNames.java
@@ -24,4 +24,5 @@
 interface BeanDefinitionNames {
 
 	public static final String JPA_MAPPING_CONTEXT_BEAN_NAME = "jpaMappingContext";
+	public static final String JPA_CONTEXT_BEAN_NAME = "jpaContext";
 }
diff --git a/src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java b/src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java
index 48c3659328..f3c0734951 100755
--- a/src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java
+++ b/src/main/java/org/springframework/data/jpa/repository/config/JpaRepositoryConfigExtension.java
@@ -37,6 +37,7 @@
 import org.springframework.dao.DataAccessException;
 import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.support.DefaultJpaContext;
 import org.springframework.data.jpa.repository.support.EntityManagerBeanDefinitionRegistrarPostProcessor;
 import org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;
 import org.springframework.data.repository.config.AnnotationRepositoryConfigurationSource;
@@ -170,6 +171,13 @@ public void registerBeansForRoot(BeanDefinitionRegistry registry, RepositoryConf
 
 		registerIfNotAlreadyRegistered(new RootBeanDefinition(PAB_POST_PROCESSOR), registry,
 				AnnotationConfigUtils.PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME, source);
+
+		// Register bean definition for DefaultJpaContext
+
+		RootBeanDefinition contextDefinition = new RootBeanDefinition(DefaultJpaContext.class);
+		contextDefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR);
+
+		registerIfNotAlreadyRegistered(contextDefinition, registry, JPA_CONTEXT_BEAN_NAME, source);
 	}
 
 	/**
diff --git a/src/main/java/org/springframework/data/jpa/repository/query/AbstractJpaQuery.java b/src/main/java/org/springframework/data/jpa/repository/query/AbstractJpaQuery.java
index e2f74c1bce..3c19048156 100755
--- a/src/main/java/org/springframework/data/jpa/repository/query/AbstractJpaQuery.java
+++ b/src/main/java/org/springframework/data/jpa/repository/query/AbstractJpaQuery.java
@@ -31,6 +31,8 @@
 import org.springframework.data.jpa.repository.query.JpaQueryExecution.SingleEntityExecution;
 import org.springframework.data.jpa.repository.query.JpaQueryExecution.SlicedExecution;
 import org.springframework.data.jpa.repository.query.JpaQueryExecution.StreamExecution;
+import org.springframework.data.jpa.repository.support.JpaEntityInformation;
+import org.springframework.data.jpa.repository.support.JpaEntityInformationSupport;
 import org.springframework.data.repository.augment.QueryAugmentationEngine;
 import org.springframework.data.repository.augment.QueryAugmentationEngineAware;
 import org.springframework.data.repository.query.RepositoryQuery;
@@ -48,12 +50,13 @@
 	private final EntityManager em;
 
 	private QueryAugmentationEngine augmentationEngine = QueryAugmentationEngine.NONE;
+	private JpaEntityInformation<?, ?> entityInformation;
 
 	/**
 	 * Creates a new {@link AbstractJpaQuery} from the given {@link JpaQueryMethod}.
 	 * 
-	 * @param method
-	 * @param em
+	 * @param method must not be {@literal null}.
+	 * @param em must not be {@literal null}.
 	 */
 	public AbstractJpaQuery(JpaQueryMethod method, EntityManager em) {
 
@@ -74,23 +77,36 @@ public void setQueryAugmentationEngine(QueryAugmentationEngine engine) {
 
 	/*
 	 * (non-Javadoc)
-	 * 
-	 * @see
-	 * org.springframework.data.repository.query.RepositoryQuery#getQueryMethod
-	 * ()
+	 * @see org.springframework.data.repository.query.RepositoryQuery#getQueryMethod()
 	 */
 	public JpaQueryMethod getQueryMethod() {
-
 		return method;
 	}
 
 	/**
-	 * @return the em
+	 * Returns the EntityManager to be used with the query.
+	 * 
+	 * @return will never be {@literal null}.
 	 */
 	protected EntityManager getEntityManager() {
 		return em;
 	}
 
+	/**
+	 * Returns the {@link JpaEntityInformation} for the query domain type.
+	 * 
+	 * @return will never be {@literal null}.
+	 */
+	protected JpaEntityInformation<?, ?> getEntityInformation() {
+
+		if (entityInformation == null) {
+			this.entityInformation = JpaEntityInformationSupport
+					.getEntityInformation(method.getEntityInformation().getJavaType(), em);
+		}
+
+		return entityInformation;
+	}
+
 	/**
 	 * @return the augmentationEngine
 	 */
@@ -100,10 +116,7 @@ public QueryAugmentationEngine getAugmentationEngine() {
 
 	/*
 	 * (non-Javadoc)
-	 * 
-	 * @see
-	 * org.springframework.data.repository.query.RepositoryQuery#execute(java
-	 * .lang.Object[])
+	 * @see org.springframework.data.repository.query.RepositoryQuery#execute(java.lang.Object[])
 	 */
 	public Object execute(Object[] parameters) {
 		return doExecute(getExecution(), parameters);
@@ -200,7 +213,8 @@ private Query applyEntityGraphConfiguration(Query query, JpaQueryMethod method)
 		Assert.notNull(query, "Query must not be null!");
 		Assert.notNull(method, "JpaQueryMethod must not be null!");
 
-		Map<String, Object> hints = Jpa21Utils.tryGetFetchGraphHints(em, method.getEntityGraph(), getQueryMethod().getEntityInformation().getJavaType());
+		Map<String, Object> hints = Jpa21Utils.tryGetFetchGraphHints(em, method.getEntityGraph(),
+				getQueryMethod().getEntityInformation().getJavaType());
 
 		for (Map.Entry<String, Object> hint : hints.entrySet()) {
 			query.setHint(hint.getKey(), hint.getValue());
@@ -209,8 +223,8 @@ private Query applyEntityGraphConfiguration(Query query, JpaQueryMethod method)
 		return query;
 	}
 
-	protected TypedQuery<Long> createCountQuery(Object[] values) {
-		TypedQuery<Long> countQuery = doCreateCountQuery(values);
+	protected Query createCountQuery(Object[] values) {
+		Query countQuery = doCreateCountQuery(values);
 		return method.applyHintsToCountQuery() ? applyHints(countQuery, method) : countQuery;
 	}
 
@@ -228,5 +242,5 @@ private Query applyEntityGraphConfiguration(Query query, JpaQueryMethod method)
 	 * @param values must not be {@literal null}.
 	 * @return
 	 */
-	protected abstract TypedQuery<Long> doCreateCountQuery(Object[] values);
+	protected abstract Query doCreateCountQuery(Object[] values);
 }
diff --git a/src/main/java/org/springframework/data/jpa/repository/query/AbstractStringBasedJpaQuery.java b/src/main/java/org/springframework/data/jpa/repository/query/AbstractStringBasedJpaQuery.java
index d710135b9b..5d0de5c1c7 100755
--- a/src/main/java/org/springframework/data/jpa/repository/query/AbstractStringBasedJpaQuery.java
+++ b/src/main/java/org/springframework/data/jpa/repository/query/AbstractStringBasedJpaQuery.java
@@ -17,10 +17,7 @@
 
 import javax.persistence.EntityManager;
 import javax.persistence.Query;
-import javax.persistence.TypedQuery;
 
-import org.springframework.data.jpa.repository.support.JpaEntityInformation;
-import org.springframework.data.jpa.repository.support.JpaEntityInformationSupport;
 import org.springframework.data.jpa.repository.support.JpaQueryContext;
 import org.springframework.data.repository.augment.QueryAugmentationEngine;
 import org.springframework.data.repository.augment.QueryContext.QueryMode;
@@ -42,7 +39,6 @@
 	private final StringQuery countQuery;
 	private final EvaluationContextProvider evaluationContextProvider;
 	private final SpelExpressionParser parser;
-	private final JpaEntityInformation<?, ?> entityInformation;
 
 	/**
 	 * Creates a new {@link AbstractStringBasedJpaQuery} from the given {@link JpaQueryMethod}, {@link EntityManager} and
@@ -68,8 +64,6 @@ public AbstractStringBasedJpaQuery(JpaQueryMethod method, EntityManager em, Stri
 		this.countQuery = new StringQuery(method.getCountQuery() != null ? method.getCountQuery()
 				: QueryUtils.createCountQueryFor(this.query.getQueryString(), method.getCountQueryProjection()));
 		this.parser = parser;
-		this.entityInformation = JpaEntityInformationSupport
-				.getEntityInformation(method.getEntityInformation().getJavaType(), em);
 	}
 
 	/*
@@ -115,8 +109,13 @@ public Query createJpaQuery(String queryString) {
 	 * @see org.springframework.data.jpa.repository.query.AbstractJpaQuery#doCreateCountQuery(java.lang.Object[])
 	 */
 	@Override
-	protected TypedQuery<Long> doCreateCountQuery(Object[] values) {
-		return createBinder(values).bind(getEntityManager().createQuery(countQuery.getQueryString(), Long.class));
+	protected Query doCreateCountQuery(Object[] values) {
+
+		String queryString = countQuery.getQueryString();
+		EntityManager em = getEntityManager();
+
+		return createBinder(values).bind(
+				getQueryMethod().isNativeQuery() ? em.createNativeQuery(queryString) : em.createQuery(queryString, Long.class));
 	}
 
 	/**
@@ -141,8 +140,8 @@ private Query potentiallyAugment(Query query, QueryMode mode) {
 
 		QueryAugmentationEngine engine = getAugmentationEngine();
 
-		if (engine.augmentationNeeded(JpaQueryContext.class, mode, getQueryMethod().getEntityInformation())) {
-			JpaQueryContext context = new JpaQueryContext(query, mode, getEntityManager(), entityInformation);
+		if (engine.augmentationNeeded(JpaQueryContext.class, mode, getEntityInformation())) {
+			JpaQueryContext context = new JpaQueryContext(query, mode, getEntityManager(), getEntityInformation());
 			return engine.invokeNativeAugmentors(context).getQuery();
 		} else {
 			return query;
diff --git a/src/main/java/org/springframework/data/jpa/repository/query/JpaQueryExecution.java b/src/main/java/org/springframework/data/jpa/repository/query/JpaQueryExecution.java
index 394946a19f..521079803e 100755
--- a/src/main/java/org/springframework/data/jpa/repository/query/JpaQueryExecution.java
+++ b/src/main/java/org/springframework/data/jpa/repository/query/JpaQueryExecution.java
@@ -22,11 +22,10 @@
 import javax.persistence.NoResultException;
 import javax.persistence.Query;
 import javax.persistence.StoredProcedureQuery;
-import javax.persistence.TypedQuery;
 
 import org.springframework.core.convert.ConversionService;
 import org.springframework.core.convert.support.ConfigurableConversionService;
-import org.springframework.core.convert.support.GenericConversionService;
+import org.springframework.core.convert.support.DefaultConversionService;
 import org.springframework.data.domain.PageImpl;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Slice;
@@ -53,7 +52,7 @@
 
 	static {
 
-		ConfigurableConversionService conversionService = new GenericConversionService();
+		ConfigurableConversionService conversionService = new DefaultConversionService();
 		conversionService.addConverter(JpaResultConverters.BlobToByteArrayConverter.INSTANCE);
 
 		CONVERSION_SERVICE = conversionService;
@@ -90,8 +89,8 @@ public Object execute(AbstractJpaQuery query, Object[] values) {
 			return result;
 		}
 
-		return CONVERSION_SERVICE.canConvert(result.getClass(), requiredType) ? CONVERSION_SERVICE.convert(result,
-				requiredType) : result;
+		return CONVERSION_SERVICE.canConvert(result.getClass(), requiredType)
+				? CONVERSION_SERVICE.convert(result, requiredType) : result;
 	}
 
 	/**
@@ -173,10 +172,10 @@ public PagedExecution(Parameters<?, ?> parameters) {
 		protected Object doExecute(AbstractJpaQuery repositoryQuery, Object[] values) {
 
 			// Execute query to compute total
-			TypedQuery<Long> projection = repositoryQuery.createCountQuery(values);
+			Query projection = repositoryQuery.createCountQuery(values);
 
-			List<Long> totals = projection.getResultList();
-			Long total = totals.size() == 1 ? totals.get(0) : totals.size();
+			List<?> totals = projection.getResultList();
+			Long total = totals.size() == 1 ? CONVERSION_SERVICE.convert(totals.get(0), Long.class) : totals.size();
 
 			ParameterAccessor accessor = new ParametersParameterAccessor(parameters, values);
 			Pageable pageable = accessor.getPageable();
@@ -187,8 +186,8 @@ protected Object doExecute(AbstractJpaQuery repositoryQuery, Object[] values) {
 
 			Query query = repositoryQuery.createQuery(values);
 
-			List<Object> content = pageable == null || total > pageable.getOffset() ? query.getResultList() : Collections
-					.emptyList();
+			List<Object> content = pageable == null || total > pageable.getOffset() ? query.getResultList()
+					: Collections.emptyList();
 
 			return new PageImpl<Object>(content, pageable, total);
 		}
diff --git a/src/main/java/org/springframework/data/jpa/repository/support/DefaultJpaContext.java b/src/main/java/org/springframework/data/jpa/repository/support/DefaultJpaContext.java
new file mode 100755
index 0000000000..ace3b4a00c
--- /dev/null
+++ b/src/main/java/org/springframework/data/jpa/repository/support/DefaultJpaContext.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.data.jpa.repository.support;
+
+import java.util.List;
+import java.util.Set;
+
+import javax.persistence.EntityManager;
+import javax.persistence.metamodel.ManagedType;
+
+import org.springframework.data.jpa.repository.JpaContext;
+import org.springframework.util.Assert;
+import org.springframework.util.LinkedMultiValueMap;
+import org.springframework.util.MultiValueMap;
+
+/**
+ * Default implementation of {@link JpaContext}.
+ * 
+ * @author Oliver Gierke
+ * @soundtrack Marcus Miller - Son Of Macbeth (Afrodeezia)
+ * @since 1.9
+ */
+public class DefaultJpaContext implements JpaContext {
+
+	private final MultiValueMap<Class<?>, EntityManager> entityManagers;
+
+	/**
+	 * Creates a new {@link DefaultJpaContext} for the given {@link Set} of {@link EntityManager}s.
+	 * 
+	 * @param entityManagers must not be {@literal null}.
+	 */
+	public DefaultJpaContext(Set<EntityManager> entityManagers) {
+
+		Assert.notNull(entityManagers, "EntityManagers must not be null!");
+		Assert.notEmpty(entityManagers, "EntityManagers must not be empty!");
+
+		this.entityManagers = new LinkedMultiValueMap<Class<?>, EntityManager>();
+
+		for (EntityManager em : entityManagers) {
+			for (ManagedType<?> managedType : em.getMetamodel().getManagedTypes()) {
+				this.entityManagers.add(managedType.getJavaType(), em);
+			}
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.springframework.data.jpa.repository.JpaContext#getByManagedType(java.lang.Class)
+	 */
+	@Override
+	public EntityManager getEntityManagerByManagedType(Class<?> type) {
+
+		Assert.notNull(type, "Type must not be null!");
+
+		if (!entityManagers.containsKey(type)) {
+			throw new IllegalArgumentException(String.format("%s is not a managed type!", type));
+		}
+
+		List<EntityManager> candidates = this.entityManagers.get(type);
+
+		if (candidates.size() == 1) {
+			return candidates.get(0);
+		}
+
+		throw new IllegalArgumentException(
+				String.format("%s managed by more than one EntityManagers: %s!", type.getName(), candidates));
+	}
+}
diff --git a/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java b/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java
index 2484984c3a..c8f63bf1fd 100755
--- a/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java
+++ b/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java
@@ -456,18 +456,17 @@ public long count(Specification<T> spec) {
 			JpaUpdateContext<T, ID> context = engine
 					.invokeAugmentors(new JpaUpdateContext<T, ID>(entity, UpdateMode.SAVE, em, executor, entityInformation));
 
-			if (context != null) {
-
-				if (entityInformation.isNew(entity)) {
-					em.persist(entity);
-					return entity;
-				} else {
-					return em.merge(entity);
-				}
+			if (context == null) {
+				return entity;
 			}
 		}
 
-		return entity;
+		if (entityInformation.isNew(entity)) {
+			em.persist(entity);
+			return entity;
+		} else {
+			return em.merge(entity);
+		}
 	}
 
 	/*
diff --git a/src/main/resources/changelog.txt b/src/main/resources/changelog.txt
index abe36a4331..32c404e855 100755
--- a/src/main/resources/changelog.txt
+++ b/src/main/resources/changelog.txt
@@ -1,6 +1,66 @@
 Spring Data JPA Changelog
 =========================
 
+Changes in version 1.6.6.RELEASE (2015-07-01)
+---------------------------------------------
+* DATAJPA-750 - Release 1.6.6 (Dijkstra).
+* DATAJPA-743 - Typo in README.
+* DATAJPA-736 - Count query creation fails when entity names contain non-ASCII characters.
+* DATAJPA-728 - PageImpl : wrong total count.
+* DATAJPA-726 - Pageable Always Adding From Entity to Sort Field Name.
+* DATAJPA-721 - Enable Slack notifications for Travis build.
+* DATAJPA-720 - Remove relative reference to parent POM to make sure the right Spring version is picked up.
+* DATAJPA-715 - Fix typo in @EnableJpaRepositories' JavaDoc.
+* DATAJPA-702 - Add convenience methods to ease building up a more complex JpaSort.
+* DATAJPA-699 - Upgrade to EclipseLink 2.5.2.
+* DATAJPA-681 - Execution of derived stored procedures fails if named parameters are used.
+* DATAJPA-672 - Activate Spring 4.2 build profile for travis.
+* DATAJPA-656 - Count query with group by returns wrong result.
+* DATAJPA-633 - Target entity type not considered for associations.
+
+
+Changes in version 1.7.3.RELEASE (2015-07-01)
+---------------------------------------------
+* DATAJPA-751 - Release 1.7.3 (Evans).
+* DATAJPA-743 - Typo in README.
+* DATAJPA-741 - Back-port DATAJPA-608 to Evans.
+* DATAJPA-736 - Count query creation fails when entity names contain non-ASCII characters.
+* DATAJPA-728 - PageImpl : wrong total count.
+* DATAJPA-726 - Pageable Always Adding From Entity to Sort Field Name.
+* DATAJPA-721 - Enable Slack notifications for Travis build.
+* DATAJPA-720 - Remove relative reference to parent POM to make sure the right Spring version is picked up.
+* DATAJPA-715 - Fix typo in @EnableJpaRepositories' JavaDoc.
+* DATAJPA-714 - Include new section on Spring Data and Spring Framework dependencies in reference documentation.
+* DATAJPA-712 - Bug in binding in clause parameters with SPEL.
+* DATAJPA-703 - Assert Hibernate 5 compatibilty.
+* DATAJPA-702 - Add convenience methods to ease building up a more complex JpaSort.
+* DATAJPA-699 - Upgrade to EclipseLink 2.5.2.
+* DATAJPA-689 - Allow @EntityGraph on findOne method of CrudRepository.
+* DATAJPA-681 - Execution of derived stored procedures fails if named parameters are used.
+* DATAJPA-672 - Activate Spring 4.2 build profile for travis.
+* DATAJPA-656 - Count query with group by returns wrong result.
+* DATAJPA-633 - Target entity type not considered for associations.
+
+
+Changes in version 1.8.1.RELEASE (2015-06-30)
+---------------------------------------------
+* DATAJPA-752 - Release 1.8.1 (Fowler).
+* DATAJPA-743 - Typo in README.
+* DATAJPA-736 - Count query creation fails when entity names contain non-ASCII characters.
+* DATAJPA-728 - PageImpl : wrong total count.
+* DATAJPA-726 - Pageable Always Adding From Entity to Sort Field Name.
+* DATAJPA-721 - Enable Slack notifications for Travis build.
+* DATAJPA-720 - Remove relative reference to parent POM to make sure the right Spring version is picked up.
+* DATAJPA-716 - JpaPersistentProperty should consider updatable flag of mapping annotations.
+* DATAJPA-715 - Fix typo in @EnableJpaRepositories' JavaDoc.
+* DATAJPA-714 - Include new section on Spring Data and Spring Framework dependencies in reference documentation.
+* DATAJPA-712 - Bug in binding in clause parameters with SPEL.
+* DATAJPA-703 - Assert Hibernate 5 compatibilty.
+* DATAJPA-702 - Add convenience methods to ease building up a more complex JpaSort.
+* DATAJPA-699 - Upgrade to EclipseLink 2.5.2.
+* DATAJPA-695 - Package reference in javadoc wrong in Jsr310JpaConverters, ThreeTenBackPortJpaConverters.
+
+
 Changes in version 1.9.0.M1 (2015-06-02)
 ----------------------------------------
 * DATAJPA-731 - Donwgrade to Querydsl 3.6.3.
diff --git a/src/test/java/org/springframework/data/jpa/domain/sample/User.java b/src/test/java/org/springframework/data/jpa/domain/sample/User.java
index 962972c468..78fb72ab23 100755
--- a/src/test/java/org/springframework/data/jpa/domain/sample/User.java
+++ b/src/test/java/org/springframework/data/jpa/domain/sample/User.java
@@ -38,6 +38,7 @@
 import javax.persistence.NamedStoredProcedureQuery;
 import javax.persistence.ParameterMode;
 import javax.persistence.StoredProcedureParameter;
+import javax.persistence.Table;
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
@@ -64,6 +65,7 @@
 @NamedStoredProcedureQuery(name = "User.plus1IO", procedureName = "plus1inout", parameters = {
 		@StoredProcedureParameter(mode = ParameterMode.IN, name = "arg", type = Integer.class),
 		@StoredProcedureParameter(mode = ParameterMode.OUT, name = "res", type = Integer.class) })
+@Table(name = "SD_User")
 public class User {
 
 	@Id @GeneratedValue(strategy = GenerationType.AUTO) private Integer id;
diff --git a/src/test/java/org/springframework/data/jpa/repository/JavaConfigUserRepositoryTests.java b/src/test/java/org/springframework/data/jpa/repository/JavaConfigUserRepositoryTests.java
index 5f4ad62f19..bb927fc550 100755
--- a/src/test/java/org/springframework/data/jpa/repository/JavaConfigUserRepositoryTests.java
+++ b/src/test/java/org/springframework/data/jpa/repository/JavaConfigUserRepositoryTests.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2014 the original author or authors.
+ * Copyright 2012-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package org.springframework.data.jpa.repository;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.List;
 
 import javax.persistence.EntityManager;
@@ -37,6 +38,7 @@
 import org.springframework.data.jpa.repository.sample.SampleEvaluationContextExtension;
 import org.springframework.data.jpa.repository.sample.UserRepository;
 import org.springframework.data.jpa.repository.sample.UserRepositoryImpl;
+import org.springframework.data.jpa.repository.support.DefaultJpaContext;
 import org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;
 import org.springframework.data.repository.core.NamedQueries;
 import org.springframework.data.repository.core.support.PropertiesBasedNamedQueries;
@@ -78,7 +80,8 @@ public UserRepository userRepository() throws Exception {
 			factory.setEntityManager(entityManager);
 			factory.setBeanFactory(applicationContext);
 			factory.setRepositoryInterface(UserRepository.class);
-			factory.setCustomImplementation(new UserRepositoryImpl());
+			factory
+					.setCustomImplementation(new UserRepositoryImpl(new DefaultJpaContext(Collections.singleton(entityManager))));
 			factory.setNamedQueries(namedQueries());
 			factory.setEvaluationContextProvider(evaluationContextProvider);
 			factory.afterPropertiesSet();
diff --git a/src/test/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategyUnitTests.java b/src/test/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategyUnitTests.java
index 778c48bb2c..f934b13175 100755
--- a/src/test/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategyUnitTests.java
+++ b/src/test/java/org/springframework/data/jpa/repository/query/JpaQueryLookupStrategyUnitTests.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012-2014 the original author or authors.
+ * Copyright 2012-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,6 +56,7 @@
 public class JpaQueryLookupStrategyUnitTests {
 
 	private static final EvaluationContextProvider EVALUATION_CONTEXT_PROVIDER = DefaultEvaluationContextProvider.INSTANCE;
+
 	@Mock EntityManager em;
 	@Mock EntityManagerFactory emf;
 	@Mock QueryExtractor extractor;
diff --git a/src/test/java/org/springframework/data/jpa/repository/query/SimpleJpaQueryUnitTests.java b/src/test/java/org/springframework/data/jpa/repository/query/SimpleJpaQueryUnitTests.java
index b47df59fd3..c42ef877d3 100755
--- a/src/test/java/org/springframework/data/jpa/repository/query/SimpleJpaQueryUnitTests.java
+++ b/src/test/java/org/springframework/data/jpa/repository/query/SimpleJpaQueryUnitTests.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2014 the original author or authors.
+ * Copyright 2008-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,8 +44,8 @@
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.data.jpa.repository.sample.UserRepository;
 import org.springframework.data.repository.core.RepositoryMetadata;
-import org.springframework.data.repository.query.DefaultEvaluationContextProvider;
 import org.springframework.data.repository.query.EvaluationContextProvider;
+import org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider;
 import org.springframework.data.repository.query.RepositoryQuery;
 import org.springframework.expression.spel.standard.SpelExpressionParser;
 
@@ -60,14 +60,15 @@
 
 	static final String USER_QUERY = "select u from User u";
 	static final SpelExpressionParser PARSER = new SpelExpressionParser();
-	private static final EvaluationContextProvider EVALUATION_CONTEXT_PROVIDER = DefaultEvaluationContextProvider.INSTANCE;
+	private static final EvaluationContextProvider EVALUATION_CONTEXT_PROVIDER = new ExtensionAwareEvaluationContextProvider();
 
 	JpaQueryMethod method;
 
 	@Mock EntityManager em;
 	@Mock EntityManagerFactory emf;
 	@Mock QueryExtractor extractor;
-	@Mock TypedQuery<Long> query;
+	@Mock javax.persistence.Query query;
+	@Mock TypedQuery<Long> typedQuery;
 	@Mock RepositoryMetadata metadata;
 	@Mock ParameterBinder binder;
 
@@ -78,7 +79,7 @@
 	public void setUp() throws SecurityException, NoSuchMethodException {
 
 		when(em.createQuery(anyString())).thenReturn(query);
-		when(em.createQuery(anyString(), eq(Long.class))).thenReturn(query);
+		when(em.createQuery(anyString(), eq(Long.class))).thenReturn(typedQuery);
 		when(em.getEntityManagerFactory()).thenReturn(emf);
 		when(emf.createEntityManager()).thenReturn(em);
 		when(metadata.getDomainType()).thenReturn((Class) User.class);
@@ -92,13 +93,13 @@ public void setUp() throws SecurityException, NoSuchMethodException {
 	public void prefersDeclaredCountQueryOverCreatingOne() throws Exception {
 
 		method = new JpaQueryMethod(SimpleJpaQueryUnitTests.class.getMethod("prefersDeclaredCountQueryOverCreatingOne"),
-				metadata, extractor); // mock(JpaQueryMethod.class);
-		when(em.createQuery("foo", Long.class)).thenReturn(query);
+				metadata, extractor);
+		when(em.createQuery("foo", Long.class)).thenReturn(typedQuery);
 
 		SimpleJpaQuery jpaQuery = new SimpleJpaQuery(method, em, "select u from User u", EVALUATION_CONTEXT_PROVIDER,
 				PARSER);
 
-		assertThat(jpaQuery.createCountQuery(new Object[] {}), is(query));
+		assertThat(jpaQuery.createCountQuery(new Object[] {}), is((javax.persistence.Query) typedQuery));
 	}
 
 	/**
@@ -112,8 +113,8 @@ public void doesNotApplyPaginationToCountQuery() throws Exception {
 		Method method = UserRepository.class.getMethod("findAllPaged", Pageable.class);
 		JpaQueryMethod queryMethod = new JpaQueryMethod(method, metadata, extractor);
 
-		AbstractJpaQuery jpaQuery = new SimpleJpaQuery(queryMethod, em, "select u from User u",
-				EVALUATION_CONTEXT_PROVIDER, PARSER);
+		AbstractJpaQuery jpaQuery = new SimpleJpaQuery(queryMethod, em, "select u from User u", EVALUATION_CONTEXT_PROVIDER,
+				PARSER);
 		jpaQuery.createCountQuery(new Object[] { new PageRequest(1, 10) });
 
 		verify(query, times(0)).setFirstResult(anyInt());
@@ -169,7 +170,7 @@ public void rejectsNativeQueryWithPageable() throws Exception {
 	public void doesNotValidateCountQueryIfNotPagingMethod() throws Exception {
 
 		Method method = SampleRepository.class.getMethod("findByAnnotatedQuery");
-		when(em.createQuery(contains("count"))).thenThrow(IllegalArgumentException.class);
+		when(em.createQuery(Mockito.contains("count"))).thenThrow(IllegalArgumentException.class);
 
 		createJpaQuery(method);
 	}
@@ -183,7 +184,7 @@ public void validatesAndRejectsCountQueryIfPagingMethod() throws Exception {
 
 		Method method = SampleRepository.class.getMethod("pageByAnnotatedQuery", Pageable.class);
 
-		when(em.createQuery(contains("count"))).thenThrow(IllegalArgumentException.class);
+		when(em.createQuery(Mockito.contains("count"))).thenThrow(IllegalArgumentException.class);
 		exception.expect(IllegalArgumentException.class);
 		exception.expectMessage("Count");
 		exception.expectMessage(method.getName());
@@ -205,7 +206,23 @@ public void createsANativeJpaQueryFromAnnotation() throws Exception {
 		assertThat(query instanceof NativeJpaQuery, is(true));
 	}
 
-	private RepositoryQuery createJpaQuery(Method method) {
+	/**
+	 * @see DATAJPA-757
+	 */
+	@Test
+	public void createsNativeCountQuery() throws Exception {
+
+		when(em.createNativeQuery(anyString())).thenReturn(query);
+
+		AbstractJpaQuery jpaQuery = createJpaQuery(
+				UserRepository.class.getMethod("findUsersInNativeQueryWithPagination", Pageable.class));
+
+		jpaQuery.doCreateCountQuery(new Object[] { new PageRequest(0, 10) });
+
+		verify(em, times(1)).createNativeQuery(anyString());
+	}
+
+	private AbstractJpaQuery createJpaQuery(Method method) {
 
 		JpaQueryMethod queryMethod = new JpaQueryMethod(method, metadata, extractor);
 		return JpaQueryFactory.INSTANCE.fromQueryAnnotation(queryMethod, em, EVALUATION_CONTEXT_PROVIDER);
diff --git a/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java b/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java
index 774b56a9ef..3d968a27b4 100755
--- a/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java
+++ b/src/test/java/org/springframework/data/jpa/repository/sample/UserRepository.java
@@ -48,8 +48,8 @@
  * @author Oliver Gierke
  * @author Thomas Darimont
  */
-public interface UserRepository extends JpaRepository<User, Integer>, JpaSpecificationExecutor<User>,
-		UserRepositoryCustom {
+public interface UserRepository
+		extends JpaRepository<User, Integer>, JpaSpecificationExecutor<User>, UserRepositoryCustom {
 
 	/**
 	 * Retrieve users by their lastname. The finder {@literal User.findByLastname} is declared in
@@ -224,7 +224,7 @@
 	/**
 	 * @see DATAJPA-117
 	 */
-	@Query(value = "SELECT * FROM User WHERE lastname = ?1", nativeQuery = true)
+	@Query(value = "SELECT * FROM SD_User WHERE lastname = ?1", nativeQuery = true)
 	List<User> findNativeByLastname(String lastname);
 
 	/**
@@ -268,7 +268,7 @@
 	 */
 	List<User> findByFirstnameContaining(String firstname);
 
-	@Query(value = "SELECT 1 FROM User", nativeQuery = true)
+	@Query(value = "SELECT 1 FROM SD_User", nativeQuery = true)
 	List<Integer> findOnesByNativeQuery();
 
 	/**
@@ -460,7 +460,7 @@
 	/**
 	 * @see DATAJPA-506
 	 */
-	@Query(value = "select u.binaryData from User u where u.id = ?1", nativeQuery = true)
+	@Query(value = "select u.binaryData from SD_User u where u.id = ?1", nativeQuery = true)
 	byte[] findBinaryDataByIdNative(Integer id);
 
 	/**
@@ -533,8 +533,8 @@
 	 * @see DATAJPA-564
 	 */
 	@Query(
-			value = "select * from (select rownum() as RN, u.* from User u) where RN between ?#{ #pageable.offset -1} and ?#{#pageable.offset + #pageable.pageSize}",
-			countQuery = "select count(u.id) from User u", nativeQuery = true)
+			value = "select * from (select rownum() as RN, u.* from SD_User u) where RN between ?#{ #pageable.offset -1} and ?#{#pageable.offset + #pageable.pageSize}",
+			countQuery = "select count(u.id) from SD_User u", nativeQuery = true)
 	Page<User> findUsersInNativeQueryWithPagination(Pageable pageable);
 
 	/**
diff --git a/src/test/java/org/springframework/data/jpa/repository/sample/UserRepositoryImpl.java b/src/test/java/org/springframework/data/jpa/repository/sample/UserRepositoryImpl.java
index b6812ccebf..83c1133e11 100755
--- a/src/test/java/org/springframework/data/jpa/repository/sample/UserRepositoryImpl.java
+++ b/src/test/java/org/springframework/data/jpa/repository/sample/UserRepositoryImpl.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2008-2011 the original author or authors.
+ * Copyright 2008-2015 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,10 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.jpa.domain.sample.User;
+import org.springframework.data.jpa.repository.JpaContext;
+import org.springframework.util.Assert;
 
 /**
  * Dummy implementation to allow check for invoking a custom implementation.
@@ -28,25 +31,24 @@
 
 	private static final Logger LOG = LoggerFactory.getLogger(UserRepositoryImpl.class);
 
+	@Autowired
+	public UserRepositoryImpl(JpaContext context) {
+		Assert.notNull(context, "JpaContext must not be null!");
+	}
+
 	/*
 	 * (non-Javadoc)
-	 * 
-	 * @see org.springframework.data.jpa.repository.sample.UserRepositoryCustom#
-	 * someCustomMethod(org.springframework.data.jpa.domain.sample.User)
+	 * @see org.springframework.data.jpa.repository.sample.UserRepositoryCustom#someCustomMethod(org.springframework.data.jpa.domain.sample.User)
 	 */
 	public void someCustomMethod(User u) {
-
 		LOG.debug("Some custom method was invoked!");
 	}
 
 	/*
 	 * (non-Javadoc)
-	 * 
-	 * @see org.springframework.data.jpa.repository.sample.UserRepositoryCustom#
-	 * findByOverrridingMethod()
+	 * @see org.springframework.data.jpa.repository.sample.UserRepositoryCustom#findByOverrridingMethod()
 	 */
 	public void findByOverrridingMethod() {
-
 		LOG.debug("A method overriding a finder was invoked!");
 	}
 }
diff --git a/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextIntegrationTests.java b/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextIntegrationTests.java
new file mode 100755
index 0000000000..c7966a75ee
--- /dev/null
+++ b/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextIntegrationTests.java
@@ -0,0 +1,113 @@
+/*
+ * Copyright 2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.data.jpa.repository.support;
+
+import static org.hamcrest.CoreMatchers.*;
+import static org.junit.Assert.*;
+
+import java.util.Arrays;
+import java.util.HashSet;
+
+import javax.persistence.EntityManager;
+import javax.persistence.EntityManagerFactory;
+
+import org.hibernate.ejb.HibernatePersistence;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.springframework.data.jpa.domain.sample.Category;
+import org.springframework.data.jpa.domain.sample.User;
+import org.springframework.data.jpa.repository.JpaContext;
+import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
+import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
+
+/**
+ * Integration tests for {@link DefaultJpaContext}.
+ * 
+ * @author Oliver Gierke
+ * @soundtrack Marcus Miller - Papa Was A Rolling Stone (Afrodeezia)
+ */
+public class DefaultJpaContextIntegrationTests {
+
+	public @Rule ExpectedException exception = ExpectedException.none();
+
+	static EntityManagerFactory firstEmf, secondEmf;
+
+	EntityManager firstEm, secondEm;
+	JpaContext jpaContext;
+
+	@BeforeClass
+	public static void bootstrapJpa() {
+
+		firstEmf = createEntityManagerFactory("spring-data-jpa");
+		secondEmf = createEntityManagerFactory("querydsl");
+	}
+
+	@Before
+	public void createEntityManagers() {
+
+		this.firstEm = firstEmf.createEntityManager();
+		this.secondEm = secondEmf.createEntityManager();
+
+		this.jpaContext = new DefaultJpaContext(new HashSet<EntityManager>(Arrays.asList(firstEm, secondEm)));
+	}
+
+	/**
+	 * @see DATAJPA-669
+	 */
+	@Test
+	public void rejectsUnmanagedType() {
+
+		exception.expect(IllegalArgumentException.class);
+		exception.expectMessage(Object.class.getSimpleName());
+
+		jpaContext.getEntityManagerByManagedType(Object.class);
+	}
+
+	/**
+	 * @see DATAJPA-669
+	 */
+	@Test
+	public void returnsEntitymanagerForUniqueType() {
+		assertThat(jpaContext.getEntityManagerByManagedType(Category.class), is(firstEm));
+	}
+
+	/**
+	 * @see DATAJPA-669
+	 */
+	@Test
+	public void rejectsRequestForTypeManagedByMultipleEntityManagers() {
+
+		exception.expect(IllegalArgumentException.class);
+		exception.expectMessage(User.class.getSimpleName());
+
+		jpaContext.getEntityManagerByManagedType(User.class);
+	}
+
+	private static final EntityManagerFactory createEntityManagerFactory(String persistenceUnitName) {
+
+		LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();
+		factoryBean.setPersistenceProvider(new HibernatePersistence());
+		factoryBean.setDataSource(new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.HSQL).build());
+		factoryBean.setPersistenceUnitName(persistenceUnitName);
+		factoryBean.afterPropertiesSet();
+
+		return factoryBean.getObject();
+	}
+}
diff --git a/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextUnitTests.java b/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextUnitTests.java
new file mode 100755
index 0000000000..ebfb19c7dc
--- /dev/null
+++ b/src/test/java/org/springframework/data/jpa/repository/support/DefaultJpaContextUnitTests.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2015 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.data.jpa.repository.support;
+
+import java.util.Collections;
+
+import javax.persistence.EntityManager;
+
+import org.junit.Test;
+
+/**
+ * Unit tests for {@link DefaultJpaContext}.
+ * 
+ * @author Oliver Gierke
+ * @soundtrack Marcus Miller - B's River (Afrodeezia)
+ * @since 1.9
+ */
+public class DefaultJpaContextUnitTests {
+
+	/**
+	 * @see DATAJPA-669
+	 */
+	@Test(expected = IllegalArgumentException.class)
+	public void rejectsNullEntityManagers() {
+		new DefaultJpaContext(null);
+	}
+
+	/**
+	 * @see DATAJPA-669
+	 */
+	@Test(expected = IllegalArgumentException.class)
+	public void rejectsEmptyEntityManagers() {
+		new DefaultJpaContext(Collections.<EntityManager> emptySet());
+	}
+}
diff --git a/src/test/resources/application-context.xml b/src/test/resources/application-context.xml
index deee551f9f..55c14fb440 100755
--- a/src/test/resources/application-context.xml
+++ b/src/test/resources/application-context.xml
@@ -12,7 +12,11 @@
 	<bean id="userDao" class="org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean">
 		<property name="repositoryInterface" value="org.springframework.data.jpa.repository.sample.UserRepository" />
 		<property name="customImplementation">
-			<bean class="org.springframework.data.jpa.repository.sample.UserRepositoryImpl" />
+			<bean class="org.springframework.data.jpa.repository.sample.UserRepositoryImpl">
+				<constructor-arg>
+					<bean class="org.springframework.data.jpa.repository.support.DefaultJpaContext" autowire="constructor" />
+				</constructor-arg>
+			</bean>
 		</property>
 		<property name="namedQueries">
 			<bean class="org.springframework.data.repository.core.support.PropertiesBasedNamedQueries">
@@ -40,5 +44,7 @@
 	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" />
 	
 	<bean id="expressionEvaluationContextProvider" class="org.springframework.data.repository.query.ExtensionAwareEvaluationContextProvider" />
+	
+	<bean class="org.springframework.data.jpa.repository.support.EntityManagerBeanDefinitionRegistrarPostProcessor" />
 
 </beans>
