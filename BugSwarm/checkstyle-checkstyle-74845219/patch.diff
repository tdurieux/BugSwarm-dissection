diff --git a/config/suppressions.xml b/config/suppressions.xml
index 369a394d3a..0cd5ff121c 100755
--- a/config/suppressions.xml
+++ b/config/suppressions.xml
@@ -50,7 +50,10 @@
       -->
     <suppress checks="." files=".*[\\/]grammars[\\/]Generated[a-zA-Z]*\.java"/>
     <suppress checks="." files=".*[\\/]grammars[\\/]Generated[a-zA-Z]*\.java"/>
-    <suppress checks="." files=".*[\\/]checkstyle[\\/]gui[\\/]"/>
+
+    <!--Classes FileDrop, Main, ParseTreeInfoPanel from gui-package contain Magic Numbers.
+    The Check generates too many violations, fixing them will make code unmanageable.-->
+    <suppress checks="MagicNumber" files=".*[\\/]checkstyle[\\/]gui[\\/]"/>
 
     <!-- Methods that build fake AST are very long-->
     <suppress checks="MethodLength" files="src[\\/]test[\\/]java[\\/]com[\\/]puppycrawl[\\/]tools[\\/]checkstyle[\\/]comments[\\/]CommentsTest\.java"/>
diff --git a/pom.xml b/pom.xml
index af356937ac..1a7b91224d 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1090,13 +1090,11 @@
                   <regex><pattern>.*.checks.UniquePropertiesCheck\$.*</pattern><branchRate>75</branchRate><lineRate>90</lineRate></regex>
 
                   <regex><pattern>.*.checks.coding.DeclarationOrderCheck</pattern><branchRate>82</branchRate><lineRate>93</lineRate></regex>
-                  <regex><pattern>.*.checks.coding.VariableDeclarationUsageDistanceCheck</pattern><branchRate>90</branchRate><lineRate>98</lineRate></regex>
 
                   <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>90</branchRate><lineRate>87</lineRate></regex>
 
                   <regex><pattern>.*.checks.regexp.CommentSuppressor</pattern><branchRate>75</branchRate><lineRate>100</lineRate></regex>
                   <regex><pattern>.*.checks.regexp.DetectorOptions</pattern><branchRate>100</branchRate><lineRate>96</lineRate></regex>
-                  <regex><pattern>.*.checks.regexp.MultilineDetector</pattern><branchRate>58</branchRate><lineRate>87</lineRate></regex>
 
                 </regexes>
               </check>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 25a947df4a..aab6df10bd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -421,6 +421,19 @@ public final void setClassLoader(ClassLoader loader) {
         this.loader = loader;
     }
 
+    /**
+     * Sets the classloader that is used to contextualize filesetchecks.
+     * Some Check implementations will use that classloader to improve the
+     * quality of their reports, e.g. to load a class and then analyze it via
+     * reflection.
+     * @param loader the new classloader
+     * @deprecated use {@link #setClassLoader(ClassLoader loader)} instead.
+     */
+    @Deprecated
+    public final void setClassloader(ClassLoader loader) {
+        setClassLoader(loader);
+    }
+
     /**
      * Sets the classloader used to load Checkstyle core and custom module
      * classes when the module tree is being built up.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index 5b669f1c56..f93abb9fde 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -206,6 +206,31 @@ public static Configuration loadConfiguration(String config,
                 omitIgnoredModules);
     }
 
+    /**
+     * Returns the module configurations from a specified input stream.
+     * Note that clients are required to close the given stream by themselves
+     *
+     * @param configStream the input stream to the Checkstyle configuration
+     * @param overridePropsResolver overriding properties
+     * @param omitIgnoredModules <code>true</code> if modules with severity
+     *            'ignore' should be omitted, <code>false</code> otherwise
+     * @return the check configurations
+     * @throws CheckstyleException if an error occurs
+     *
+     * @deprecated As this method does not provide a valid system ID,
+     *   preventing resolution of external entities, a
+     *   {@link #loadConfiguration(InputSource,PropertyResolver,boolean)
+     *          version using an InputSource}
+     *   should be used instead
+     */
+    @Deprecated
+    public static Configuration loadConfiguration(InputStream configStream,
+        PropertyResolver overridePropsResolver, boolean omitIgnoredModules)
+        throws CheckstyleException {
+        return loadConfiguration(new InputSource(configStream),
+                                 overridePropsResolver, omitIgnoredModules);
+    }
+
     /**
      * Returns the module configurations from a specified input source.
      * Note that if the source does wrap an open byte or character
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 068a46759a..7437405545 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -82,20 +82,20 @@ public static void main(String... args) throws UnsupportedEncodingException,
                 // return error is smth is wrong in arguments
                 final List<String> messages = validateCli(commandLine);
                 cliViolations = !messages.isEmpty();
-                if (!cliViolations) {
-                    // create config helper object
-                    final CliOptions config = convertCliToPojo(commandLine);
-                    // run Checker
-                    errorCounter = runCheckstyle(config);
-                    exitStatus = errorCounter;
-                }
-                else {
+                if (cliViolations) {
                     exitStatus = exitWithCliViolation;
                     errorCounter = 1;
                     for (String message : messages) {
                         System.out.println(message);
                     }
                 }
+                else {
+                    // create config helper object
+                    final CliOptions config = convertCliToPojo(commandLine);
+                    // run Checker
+                    errorCounter = runCheckstyle(config);
+                    exitStatus = errorCounter;
+                }
             }
         }
         catch (ParseException pex) {
@@ -147,10 +147,7 @@ private static CommandLine parseCli(String... args)
     private static List<String> validateCli(CommandLine cmdLine) {
         final List<String> result = new ArrayList<>();
         // ensure a configuration file is specified
-        if (!cmdLine.hasOption("c")) {
-            result.add("Must specify a config XML file.");
-        }
-        else {
+        if (cmdLine.hasOption("c")) {
             // validate optional parameters
             if (cmdLine.hasOption("f")) {
                 final String format = cmdLine.getOptionValue("f");
@@ -178,6 +175,9 @@ private static CommandLine parseCli(String... args)
                 result.add("Must specify files to process, found 0.");
             }
         }
+        else {
+            result.add("Must specify a config XML file.");
+        }
 
         return result;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index f4e3ac8da4..abe02f9ccd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -250,7 +250,10 @@ private void registerCheck(Check check)
         throws CheckstyleException {
         final int[] tokens;
         final Set<String> checkTokens = check.getTokenNames();
-        if (!checkTokens.isEmpty()) {
+        if (checkTokens.isEmpty()) {
+            tokens = check.getDefaultTokens();
+        }
+        else {
             tokens = check.getRequiredTokens();
 
             //register configured tokens
@@ -268,9 +271,6 @@ private void registerCheck(Check check)
                 }
             }
         }
-        else {
-            tokens = check.getDefaultTokens();
-        }
         for (int element : tokens) {
             registerCheck(element, check);
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index f12c401fdb..6a98cc4f8c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -103,7 +103,7 @@ public final void setTokens(String... strRep) {
      * @return the set of token names
      */
     public final Set<String> getTokenNames() {
-        return tokens;
+        return Collections.unmodifiableSet(tokens);
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index fa81df72a6..5ea239ac59 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import java.io.File;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -64,6 +66,20 @@
      */
     private final Map<Integer, List<TextBlock>> clangComments = Maps.newHashMap();
 
+    /**
+     * Creates a new <code>FileContents</code> instance.
+     *
+     * @param filename name of the file
+     * @param lines the contents of the file
+     * @deprecated Use {@link #FileContents(FileText)} instead
+     *   in order to preserve the original line breaks where possible.
+     */
+    @Deprecated
+    public FileContents(String filename, String... lines) {
+        fileName = filename;
+        text = FileText.fromLines(new File(filename), Arrays.asList(lines));
+    }
+
     /**
      * Creates a new <code>FileContents</code> instance.
      *
@@ -214,7 +230,7 @@ private String line(int lineNo) {
      * @return an object containing the full text of the file
      */
     public FileText getText() {
-        return text;
+        return new FileText(text);
     }
 
     /** @return the lines in the file */
@@ -236,6 +252,16 @@ public String getFileName() {
         return fileName;
     }
 
+    /**
+     * Getter.
+     * @return the name of the file
+     * @deprecated use {@link #getFileName} instead
+     */
+    @Deprecated
+    public String getFilename() {
+        return getFileName();
+    }
+
     /**
      * Checks if the specified line is blank.
      * @param lineNo the line number to check
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
index 16a39b9582..682073d1bc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import java.util.Collections;
 import java.util.Objects;
 import java.util.Set;
 
@@ -56,7 +57,7 @@ public void removeFilter(Filter filter) {
      * @return the Filters of the filter set.
      */
     public Set<Filter> getFilters() {
-        return filters;
+        return Collections.unmodifiableSet(filters);
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
index 8e9ad80d40..0a1a99bc1f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
@@ -74,7 +74,14 @@ public void beginTree(DetailAST ast) {
     @Override
     public void visitToken(DetailAST ast) {
         final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();
-        if (!seenFirstToken) {
+        if (seenFirstToken) {
+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
+            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null
+                    && ast.getParent() == null) {
+                hasPublic = true;
+            }
+        }
+        else {
 
             if (fileName.equals(outerTypeName)) {
                 validFirst = true;
@@ -83,13 +90,6 @@ public void visitToken(DetailAST ast) {
                 wrongType = ast;
             }
         }
-        else {
-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null
-                    && ast.getParent() == null) {
-                hasPublic = true;
-            }
-        }
         seenFirstToken = true;
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
index e5d6eb8ae6..5cbab3fe2e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
@@ -28,6 +28,7 @@
 import java.util.regex.Pattern;
 
 import com.google.common.collect.HashMultiset;
+import com.google.common.collect.ImmutableMultiset;
 import com.google.common.collect.Multiset;
 import com.google.common.collect.Multiset.Entry;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
@@ -148,7 +149,7 @@ public Object put(Object key, Object value) {
         }
 
         public Multiset<String> getDuplicatedStrings() {
-            return duplicatedStrings;
+            return ImmutableMultiset.copyOf(duplicatedStrings);
         }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 30f41890b5..f64dad15ec 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -142,11 +142,11 @@ public void visitToken(DetailAST ast) {
 
         if (slist != null && !isTerminated(slist, true, true)
             && !hasFallTruComment(ast, nextGroup)) {
-            if (!isLastGroup) {
-                log(nextGroup, MSG_FALL_THROUGH);
+            if (isLastGroup) {
+                log(ast, MSG_FALL_THROUGH_LAST);
             }
             else {
-                log(ast, MSG_FALL_THROUGH_LAST);
+                log(nextGroup, MSG_FALL_THROUGH);
             }
         }
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 873cb6ca09..5fc9658be2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -243,12 +243,12 @@ private static boolean isInContext(DetailAST ast, int[]... contextSet) {
             for (int anElement : element) {
                 current = current.getParent();
                 final int expectedType = anElement;
-                if (current.getType() != expectedType) {
-                    found = false;
-                    break;
+                if (current.getType() == expectedType) {
+                    found = true;
                 }
                 else {
-                    found = true;
+                    found = false;
+                    break;
                 }
             }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index 61a71567c3..c66733e7d6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -332,8 +332,7 @@ private static boolean isInitializationSequence(
                 case TokenTypes.EXPR:
                     final DetailAST methodCallAst = currentSiblingAst.getFirstChild();
 
-                    if (methodCallAst != null
-                        && methodCallAst.getType() == TokenTypes.METHOD_CALL) {
+                    if (methodCallAst.getType() == TokenTypes.METHOD_CALL) {
                         final String instanceName =
                             getInstanceName(methodCallAst);
                         // method is called without instance
@@ -342,11 +341,11 @@ private static boolean isInitializationSequence(
                         }
                         // differs from previous instance
                         else if (!instanceName.equals(initInstanceName)) {
-                            if (!initInstanceName.isEmpty()) {
-                                result = false;
+                            if (initInstanceName.isEmpty()) {
+                                initInstanceName = instanceName;
                             }
                             else {
-                                initInstanceName = instanceName;
+                                result = false;
                             }
                         }
                     }
@@ -558,22 +557,16 @@ private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(
             else {
                 // Looking for RPAREN ( ')' ) token to mark the end of operator
                 // expression.
-                currentNode = block.findFirstToken(TokenTypes.RPAREN);
-                if (currentNode != null) {
-                    currentNode = currentNode.getNextSibling();
-                }
+                currentNode = block.findFirstToken(TokenTypes.RPAREN).getNextSibling();
             }
 
-            if (currentNode != null) {
-                final int currentNodeType = currentNode.getType();
+            final int currentNodeType = currentNode.getType();
 
-                if (currentNodeType == TokenTypes.SLIST) {
-                    firstNodeInsideBlock = currentNode.getFirstChild();
-                }
-                else if (currentNodeType != TokenTypes.VARIABLE_DEF
-                        && currentNodeType != TokenTypes.EXPR) {
-                    firstNodeInsideBlock = currentNode;
-                }
+            if (currentNodeType == TokenTypes.SLIST) {
+                firstNodeInsideBlock = currentNode.getFirstChild();
+            }
+            else if (currentNodeType != TokenTypes.EXPR) {
+                firstNodeInsideBlock = currentNode;
             }
         }
 
@@ -656,31 +649,28 @@ private static DetailAST getFirstNodeInsideSwitchBlock(
             DetailAST block, DetailAST variable) {
         DetailAST firstNodeInsideBlock = null;
 
-        if (!isVariableInOperatorExpr(block, variable)) {
-            DetailAST currentNode = block
-                    .findFirstToken(TokenTypes.CASE_GROUP);
-            final List<DetailAST> variableUsageExpressions =
-                    new ArrayList<>();
+        DetailAST currentNode = block
+                .findFirstToken(TokenTypes.CASE_GROUP);
+        final List<DetailAST> variableUsageExpressions =
+                new ArrayList<>();
 
-            // Checking variable usage inside all CASE blocks.
-            while (currentNode != null
-                    && currentNode.getType() == TokenTypes.CASE_GROUP) {
-                final DetailAST lastNodeInCaseGroup =
-                        currentNode.getLastChild();
+        // Checking variable usage inside all CASE blocks.
+        while (currentNode.getType() == TokenTypes.CASE_GROUP) {
+            final DetailAST lastNodeInCaseGroup =
+                    currentNode.getLastChild();
 
-                if (isChild(lastNodeInCaseGroup, variable)) {
-                    variableUsageExpressions.add(lastNodeInCaseGroup);
-                }
-                currentNode = currentNode.getNextSibling();
+            if (isChild(lastNodeInCaseGroup, variable)) {
+                variableUsageExpressions.add(lastNodeInCaseGroup);
             }
+            currentNode = currentNode.getNextSibling();
+        }
 
-            // If variable usage exists in several related blocks, then
-            // firstNodeInsideBlock = null, otherwise if variable usage exists
-            // only inside one block, then get node from
-            // variableUsageExpressions.
-            if (variableUsageExpressions.size() == 1) {
-                firstNodeInsideBlock = variableUsageExpressions.get(0);
-            }
+        // If variable usage exists in several related blocks, then
+        // firstNodeInsideBlock = null, otherwise if variable usage exists
+        // only inside one block, then get node from
+        // variableUsageExpressions.
+        if (variableUsageExpressions.size() == 1) {
+            firstNodeInsideBlock = variableUsageExpressions.get(0);
         }
 
         return firstNodeInsideBlock;
@@ -764,62 +754,33 @@ private static boolean isVariableInOperatorExpr(
         final DetailAST openingBracket =
                 operator.findFirstToken(TokenTypes.LPAREN);
 
-        if (openingBracket != null) {
-            // Get EXPR between brackets
-            DetailAST exprBetweenBrackets = openingBracket
-                    .getNextSibling();
+        // Get EXPR between brackets
+        DetailAST exprBetweenBrackets = openingBracket.getNextSibling();
 
-            // Look if variable is in operator expression
-            while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {
+        // Look if variable is in operator expression
+        while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {
 
-                if (isChild(exprBetweenBrackets, variable)) {
-                    isVarInOperatorDeclr = true;
-                    break;
-                }
-                exprBetweenBrackets = exprBetweenBrackets.getNextSibling();
+            if (isChild(exprBetweenBrackets, variable)) {
+                isVarInOperatorDeclr = true;
+                break;
             }
+            exprBetweenBrackets = exprBetweenBrackets.getNextSibling();
+        }
 
-            // Variable may be met in ELSE declaration or in CASE declaration.
-            // So, check variable usage in these declarations.
-            if (!isVarInOperatorDeclr) {
-                switch (operator.getType()) {
-                    case TokenTypes.LITERAL_IF:
-                        final DetailAST elseBlock = operator.getLastChild();
-
-                        if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {
-                            // Get IF followed by ELSE
-                            final DetailAST firstNodeInsideElseBlock = elseBlock
-                                .getFirstChild();
-
-                            if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {
-                                isVarInOperatorDeclr |=
-                                    isVariableInOperatorExpr(
-                                        firstNodeInsideElseBlock,
-                                            variable);
-                            }
-                        }
-                        break;
+        // Variable may be met in ELSE declaration
+        // So, check variable usage in these declarations.
+        if (!isVarInOperatorDeclr && operator.getType() == TokenTypes.LITERAL_IF) {
+            final DetailAST elseBlock = operator.getLastChild();
 
-                    case TokenTypes.LITERAL_SWITCH:
-                        DetailAST currentCaseBlock = operator
-                            .findFirstToken(TokenTypes.CASE_GROUP);
-
-                        while (currentCaseBlock != null
-                            && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {
-                            final DetailAST firstNodeInsideCaseBlock =
-                                currentCaseBlock.getFirstChild();
-
-                            if (isChild(firstNodeInsideCaseBlock,
-                                variable)) {
-                                isVarInOperatorDeclr = true;
-                                break;
-                            }
-                            currentCaseBlock = currentCaseBlock.getNextSibling();
-                        }
-                        break;
+            if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {
+                // Get IF followed by ELSE
+                final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();
 
-                    default:
-                        // no code
+                if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {
+                    isVarInOperatorDeclr |=
+                            isVariableInOperatorExpr(
+                                firstNodeInsideElseBlock,
+                                    variable);
                 }
             }
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
index 83e59404bd..43af8125c4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
@@ -44,11 +44,11 @@ public MemberDefHandler(IndentationCheck indentCheck,
     @Override
     public void checkIndentation() {
         final DetailAST modifiersNode = getMainAst().findFirstToken(TokenTypes.MODIFIERS);
-        if (modifiersNode.getChildCount() != 0) {
-            checkModifiers();
+        if (modifiersNode.getChildCount() == 0) {
+            checkType();
         }
         else {
-            checkType();
+            checkModifiers();
         }
         final LineWrappingHandler lineWrap =
             new LineWrappingHandler(getIndentCheck(), getMainAst(),
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 0bd4b5dd32..89e70d5174 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -365,13 +365,7 @@ private void checkHtml(final DetailAST ast, final TextBlock comment) {
                 //do nothing
                 continue;
             }
-            if (!tag.isCloseTag()) {
-                //We only push html tags that are allowed
-                if (isAllowedTag(tag)) {
-                    htmlStack.push(tag);
-                }
-            }
-            else {
+            if (tag.isCloseTag()) {
                 // We have found a close tag.
                 if (isExtraHtml(tag.getId(), htmlStack)) {
                     // No corresponding open tag was found on the stack.
@@ -386,6 +380,12 @@ private void checkHtml(final DetailAST ast, final TextBlock comment) {
                     checkUnclosedTags(htmlStack, tag.getId());
                 }
             }
+            else {
+                //We only push html tags that are allowed
+                if (isAllowedTag(tag)) {
+                    htmlStack.push(tag);
+                }
+            }
         }
 
         // Identify any tags left on the stack.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTags.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTags.java
index e05eeae94c..eef176c586 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTags.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTags.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import java.util.Collections;
 import java.util.List;
 
 import com.google.common.collect.ImmutableList;
@@ -50,7 +51,7 @@ public JavadocTags(List<JavadocTag> tags,
      *  @return validTags field
      */
     public List<JavadocTag> getValidTags() {
-        return validTags;
+        return Collections.unmodifiableList(validTags);
     }
 
     /**
@@ -58,6 +59,6 @@ public JavadocTags(List<JavadocTag> tags,
      *  @return invalidTags field
      */
     public List<InvalidJavadocTag> getInvalidTags() {
-        return invalidTags;
+        return Collections.unmodifiableList(invalidTags);
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 3606618c8f..40ba100096 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -130,14 +130,14 @@ else if (tagType == JavadocTagType.ALL || tagType == JavadocTagType.INLINE) {
                 final Matcher commentMatcher = commentPattern.matcher(s);
                 final String commentContents;
                 final int commentOffset; // offset including comment characters
-                if (!commentMatcher.find()) {
-                    commentContents = s; // No leading asterisks, still valid
-                    commentOffset = 0;
-                }
-                else {
+                if (commentMatcher.find()) {
                     commentContents = commentMatcher.group(1);
                     commentOffset = commentMatcher.start(1) - 1;
                 }
+                else {
+                    commentContents = s; // No leading asterisks, still valid
+                    commentOffset = 0;
+                }
                 final Pattern tagPattern = Pattern.compile(".*?\\{@(\\p{Alpha}+)\\s+(.*?)\\}");
                 final Matcher tagMatcher = tagPattern.matcher(commentContents);
                 while (tagMatcher.find()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
index f21476ebf1..eb7fe582c9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
@@ -79,14 +79,14 @@ public void processLines(FileText text) {
         this.text = new FileText(text);
         resetState();
 
-        if (!Strings.isNullOrEmpty(options.getFormat())) {
+        if (Strings.isNullOrEmpty(options.getFormat())) {
+            options.getReporter().log(0, EMPTY);
+        }
+        else {
             matcher = options.getPattern().matcher(text.getFullText());
             findMatch();
             finish();
         }
-        else {
-            options.getReporter().log(0, EMPTY);
-        }
     }
 
     /** Method that finds the matches. */
@@ -96,20 +96,15 @@ private void findMatch() {
 
             while (foundMatch) {
                 final LineColumn start = text.lineColumn(matcher.start());
-                final LineColumn end = text.lineColumn(matcher.end());
-
-                if (!options.getSuppressor().shouldSuppress(start.getLine(),
-                        start.getColumn(), end.getLine(), end.getColumn())) {
-                    currentMatches++;
-                    if (currentMatches > options.getMaximum()) {
-                        if (options.getMessage().isEmpty()) {
-                            options.getReporter().log(start.getLine(),
-                                    REGEXP_EXCEEDED, matcher.pattern().toString());
-                        }
-                        else {
-                            options.getReporter()
-                                    .log(start.getLine(), options.getMessage());
-                        }
+                currentMatches++;
+                if (currentMatches > options.getMaximum()) {
+                    if (options.getMessage().isEmpty()) {
+                        options.getReporter().log(start.getLine(),
+                                REGEXP_EXCEEDED, matcher.pattern().toString());
+                    }
+                    else {
+                        options.getReporter()
+                                .log(start.getLine(), options.getMessage());
                     }
                 }
                 foundMatch = matcher.find();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
index 84e74db75e..c6c99df679 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.filters;
 
+import java.util.Collections;
 import java.util.Objects;
 import java.util.Set;
 import java.util.StringTokenizer;
@@ -78,7 +79,7 @@ public final void addFilter(IntFilter filter) {
      * @return the IntFilters of the filter set.
      */
     protected Set<IntFilter> getFilters() {
-        return filters;
+        return Collections.unmodifiableSet(filters);
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 6fc903aef6..8def4779fa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -27,6 +27,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.TooManyListenersException;
 
@@ -199,7 +200,7 @@ private static void showErrorDialog(final Component parent, final String msg) {
     }
 
     public List<Integer> getLines2position() {
-        return lines2position;
+        return Collections.unmodifiableList(lines2position);
     }
 
     /**
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
index 49966a0546..b6348f380b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -186,6 +186,7 @@ public void testSetters() throws Exception {
         // all  that is set by reflection, so just make code coverage be happy
         final Checker c = new Checker();
         c.setClassLoader(this.getClass().getClassLoader());
+        c.setClassloader(this.getClass().getClassLoader());
         c.setBasedir("some");
         c.setSeverity("ignore");
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index 91ed602684..6dfe7cf5fb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -26,6 +26,8 @@
 import static org.powermock.api.mockito.PowerMockito.when;
 
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -472,6 +474,27 @@ public void testLoadConfiguration_URISyntaxException() throws CheckstyleExceptio
         }
     }
 
+    @Test
+    public void testLoadConfiguration_Deprecated() throws CheckstyleException {
+        try {
+            final DefaultConfiguration config =
+                    (DefaultConfiguration) ConfigurationLoader.loadConfiguration(
+                            new FileInputStream(
+                                    "src/test/resources/com/puppycrawl/tools/checkstyle/configs/"
+                                    + "config_with_ignore.xml"),
+                            new PropertiesExpander(new Properties()), true);
+
+            final Configuration[] children = config.getChildren();
+            assertTrue(children[0].getChildren().length == 0);
+        }
+        catch (CheckstyleException ex) {
+            fail("unexpected exception");
+        }
+        catch (FileNotFoundException e) {
+            fail("unexpected exception");
+        }
+    }
+
     @Test
     public void testReplacePropertiesDefault() throws Exception {
         final Properties props = new Properties();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
index 2b6a5fa08c..c40198a718 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
@@ -28,6 +29,22 @@
 
 public class FileContentsTest {
 
+    @Test
+    public void testDeprecatedCtor() {
+        // just to make UT coverage 100%
+        FileContents o = new FileContents("filename.java", new String[]{"1", "2"});
+        o.getFilename();
+    }
+
+    @Test
+    public void testCppCommentNotIntersect() {
+        // just to make UT coverage 100%
+        FileContents o = new FileContents(
+                FileText.fromLines(new File("filename"), Arrays.asList("  //  ")));
+        o.reportCppComment(1, 2);
+        assertFalse(o.hasIntersectionWithComment(1, 0, 1, 1));
+    }
+
     @Test
     public void testCppCommentIntersect() {
         // just to make UT coverage 100%
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheckTest.java
index 71b5c6d9d2..0219dea95f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheckTest.java
@@ -68,6 +68,9 @@ public void testGeneralLogic() throws Exception {
             "505: " + getCheckMessage(MSG_KEY, "files", 2, 1),
             "540: " + getCheckMessage(MSG_KEY, "id", 2, 1),
             "542: " + getCheckMessage(MSG_KEY, "parentId", 3, 1),
+            "891: " + getCheckMessage(MSG_KEY, "a", 4, 1),
+            "901: " + getCheckMessage(MSG_KEY, "a", 4, 1),
+            "967: " + getCheckMessage(MSG_KEY, "a", 4, 1),
         };
         verify(checkConfig, getPath("coding/InputVariableDeclarationUsageDistanceCheck.java"), expected);
     }
@@ -85,6 +88,9 @@ public void testDistance() throws Exception {
             "479: " + getCheckMessage(MSG_KEY, "myOption", 7, 3),
             "491: " + getCheckMessage(MSG_KEY, "myOption", 6, 3),
             "504: " + getCheckMessage(MSG_KEY, "count", 4, 3),
+            "891: " + getCheckMessage(MSG_KEY, "a", 4, 3),
+            "901: " + getCheckMessage(MSG_KEY, "a", 4, 3),
+            "967: " + getCheckMessage(MSG_KEY, "a", 4, 3),
         };
         verify(checkConfig, getPath("coding/InputVariableDeclarationUsageDistanceCheck.java"), expected);
     }
@@ -196,6 +202,9 @@ public void testIgnoreFinalOption() throws Exception {
             "505: " + getCheckMessage(MSG_KEY_EXT, "files", 2, 1),
             "540: " + getCheckMessage(MSG_KEY_EXT, "id", 2, 1),
             "542: " + getCheckMessage(MSG_KEY_EXT, "parentId", 3, 1),
+            "891: " + getCheckMessage(MSG_KEY_EXT, "a", 4, 1),
+            "901: " + getCheckMessage(MSG_KEY_EXT, "a", 4, 1),
+            "967: " + getCheckMessage(MSG_KEY_EXT, "a", 4, 1),
         };
         verify(checkConfig, getPath("coding/InputVariableDeclarationUsageDistanceCheck.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
index 33b05ed256..7321a23370 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
@@ -173,4 +173,29 @@ private static CharSequence makeLargeXYString() {
         return largeString;
     }
 
+    @Test
+    public void testSetMessage() throws Exception {
+        final String illegal = "\\n";
+        checkConfig.addAttribute("format", illegal);
+        checkConfig.addAttribute("minimum", "500");
+        checkConfig.addAttribute("message", "someMessage");
+
+        String[] expected = new String[223];
+        for (int i = 0; i < 223; i++) {
+            expected[i] = i + ": someMessage";
+        }
+
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
+    }
+
+    @Test
+    public void testGoodLimit() throws Exception {
+        final String illegal = "^import";
+        checkConfig.addAttribute("format", illegal);
+        checkConfig.addAttribute("maximum", "5000");
+        final String[] expected = {
+        };
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
+    }
+
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
index 4388952968..541096c41b 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
@@ -837,3 +837,141 @@ public static void append(String line)
     }
     
 }
+
+class New {
+    void a() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        while (true) {
+            System.out.println();
+            System.out.println(a);
+        }
+    }
+    
+    void b() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        do {
+            System.out.println();
+            System.out.println(a);
+        } while (true);
+    }
+    
+    void c() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        for (;;) {
+            System.out.println();
+            System.out.println(a);
+        }
+    }
+    
+    void d() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        for (int i: new int[]{1,2,3}) {
+            System.out.println();
+            System.out.println(a);
+        }
+    }
+
+    void f() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        while (true)
+            System.out.println(a);
+    }
+    
+    void h() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        while (true)
+            while (true)
+                a++;
+    }
+    
+    void i() {
+        int a = 1;
+        switch (Math.max(1, 2)) {
+        case 1:
+            System.out.println();
+            break;
+        case 2:
+            System.out.println();
+            break;
+        }
+
+        switch (Math.max(1, 2)) {
+        case 1:
+            System.out.println(a);
+            break;
+        case 2:
+            System.out.println(a);
+            break;
+        }
+    }
+    
+    void k() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        while (true) {
+            System.out.println();
+            if (true) {
+                System.out.println();
+            } else if (true) {
+                System.out.println(a);
+            } else {
+                System.out.println();
+            }
+        }
+    }
+    
+    void l() {
+        int a = 1;
+        
+        while (true) {
+            switch (hashCode()){}
+            switch (Math.max(1, 2)) {
+            case 1:
+                System.out.println(a);
+                break;
+            case 2:
+                System.out.println(a);
+                break;
+            }
+        }
+    }
+    
+    void tryWithoutFinally() {
+        int a = 1;
+        System.out.println();
+        System.out.println();
+        System.out.println();
+        try {
+            a = 2;
+        }
+        catch(Exception e){}
+    }
+    
+}
