travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: 65501fe4-ec96-42de-a636-3f1814b3a166@1.i-0245738-production-2-worker-org-ec2.travisci.net
version: v3.6.0 https://github.com/travis-ci/worker/tree/170b2a0bb43234479fd1911ba9e4dbcc36dadfad
instance: e4d0972 travisci/ci-garnet:packer-1512502276-986baf0 (via amqp)
startup: 443.878394ms
travis_fold:end:worker_info[0Kmode of â€˜/usr/local/clang-5.0.0/binâ€™ changed from 0777 (rwxrwxrwx) to 0775 (rwxrwxr-x)
travis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: python
Build group: stable
Build dist: trusty
Build id: 361095367
Job id: 361095368
Runtime kernel version: 4.14.12-041412-generic
travis-build version: e38cb04f7
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 20:11:19 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:39:28 2017
 OS/Arch:      linux/amd64
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	172.17.0.2/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-101-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-101-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
removed â€˜/etc/apt/sources.list.d/basho_riak.listâ€™
[32;1mNetwork availability confirmed.[0m
127.0.0.1	localhost
::1	 ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.8	travis-job-hylang-hy-361095368.travisci.net travis-job-hylang-hy-361095368
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
travis_fold:start:git.checkout[0Ktravis_time:start:0434b896[0K$ git clone --depth=50 https://github.com/hylang/hy.git hylang/hy
Cloning into 'hylang/hy'...
remote: Counting objects: 1520, done.[K
remote: Compressing objects:   0% (1/554)   [Kremote: Compressing objects:   1% (6/554)   [Kremote: Compressing objects:   2% (12/554)   [Kremote: Compressing objects:   3% (17/554)   [Kremote: Compressing objects:   4% (23/554)   [Kremote: Compressing objects:   5% (28/554)   [Kremote: Compressing objects:   6% (34/554)   [Kremote: Compressing objects:   7% (39/554)   [Kremote: Compressing objects:   8% (45/554)   [Kremote: Compressing objects:   9% (50/554)   [Kremote: Compressing objects:  10% (56/554)   [Kremote: Compressing objects:  11% (61/554)   [Kremote: Compressing objects:  12% (67/554)   [Kremote: Compressing objects:  13% (73/554)   [Kremote: Compressing objects:  14% (78/554)   [Kremote: Compressing objects:  15% (84/554)   [Kremote: Compressing objects:  16% (89/554)   [Kremote: Compressing objects:  17% (95/554)   [Kremote: Compressing objects:  18% (100/554)   [Kremote: Compressing objects:  19% (106/554)   [Kremote: Compressing objects:  20% (111/554)   [Kremote: Compressing objects:  21% (117/554)   [Kremote: Compressing objects:  22% (122/554)   [Kremote: Compressing objects:  23% (128/554)   [Kremote: Compressing objects:  24% (133/554)   [Kremote: Compressing objects:  25% (139/554)   [Kremote: Compressing objects:  26% (145/554)   [Kremote: Compressing objects:  27% (150/554)   [Kremote: Compressing objects:  28% (156/554)   [Kremote: Compressing objects:  29% (161/554)   [Kremote: Compressing objects:  30% (167/554)   [Kremote: Compressing objects:  31% (172/554)   [Kremote: Compressing objects:  32% (178/554)   [Kremote: Compressing objects:  33% (183/554)   [Kremote: Compressing objects:  34% (189/554)   [Kremote: Compressing objects:  35% (194/554)   [Kremote: Compressing objects:  36% (200/554)   [Kremote: Compressing objects:  37% (205/554)   [Kremote: Compressing objects:  38% (211/554)   [Kremote: Compressing objects:  39% (217/554)   [Kremote: Compressing objects:  40% (222/554)   [Kremote: Compressing objects:  41% (228/554)   [Kremote: Compressing objects:  42% (233/554)   [Kremote: Compressing objects:  43% (239/554)   [Kremote: Compressing objects:  44% (244/554)   [Kremote: Compressing objects:  45% (250/554)   [Kremote: Compressing objects:  46% (255/554)   [Kremote: Compressing objects:  47% (261/554)   [Kremote: Compressing objects:  48% (266/554)   [Kremote: Compressing objects:  49% (272/554)   [Kremote: Compressing objects:  50% (277/554)   [Kremote: Compressing objects:  51% (283/554)   [Kremote: Compressing objects:  52% (289/554)   [Kremote: Compressing objects:  53% (294/554)   [Kremote: Compressing objects:  54% (300/554)   [Kremote: Compressing objects:  55% (305/554)   [Kremote: Compressing objects:  56% (311/554)   [Kremote: Compressing objects:  57% (316/554)   [Kremote: Compressing objects:  58% (322/554)   [Kremote: Compressing objects:  59% (327/554)   [Kremote: Compressing objects:  60% (333/554)   [Kremote: Compressing objects:  61% (338/554)   [Kremote: Compressing objects:  62% (344/554)   [Kremote: Compressing objects:  63% (350/554)   [Kremote: Compressing objects:  64% (355/554)   [Kremote: Compressing objects:  65% (361/554)   [Kremote: Compressing objects:  66% (366/554)   [Kremote: Compressing objects:  67% (372/554)   [Kremote: Compressing objects:  68% (377/554)   [Kremote: Compressing objects:  69% (383/554)   [Kremote: Compressing objects:  70% (388/554)   [Kremote: Compressing objects:  71% (394/554)   [Kremote: Compressing objects:  72% (399/554)   [Kremote: Compressing objects:  73% (405/554)   [Kremote: Compressing objects:  74% (410/554)   [Kremote: Compressing objects:  75% (416/554)   [Kremote: Compressing objects:  76% (422/554)   [Kremote: Compressing objects:  77% (427/554)   [Kremote: Compressing objects:  78% (433/554)   [Kremote: Compressing objects:  79% (438/554)   [Kremote: Compressing objects:  80% (444/554)   [Kremote: Compressing objects:  81% (449/554)   [Kremote: Compressing objects:  82% (455/554)   [Kremote: Compressing objects:  83% (460/554)   [Kremote: Compressing objects:  84% (466/554)   [Kremote: Compressing objects:  85% (471/554)   [Kremote: Compressing objects:  86% (477/554)   [Kremote: Compressing objects:  87% (482/554)   [Kremote: Compressing objects:  88% (488/554)   [Kremote: Compressing objects:  89% (494/554)   [Kremote: Compressing objects:  90% (499/554)   [Kremote: Compressing objects:  91% (505/554)   [Kremote: Compressing objects:  92% (510/554)   [Kremote: Compressing objects:  93% (516/554)   [Kremote: Compressing objects:  94% (521/554)   [Kremote: Compressing objects:  95% (527/554)   [Kremote: Compressing objects:  96% (532/554)   [Kremote: Compressing objects:  97% (538/554)   [Kremote: Compressing objects:  98% (543/554)   [Kremote: Compressing objects:  99% (549/554)   [Kremote: Compressing objects: 100% (554/554)   [Kremote: Compressing objects: 100% (554/554), done.[K
Receiving objects:   0% (1/1520)   Receiving objects:   1% (16/1520)   Receiving objects:   2% (31/1520)   Receiving objects:   3% (46/1520)   Receiving objects:   4% (61/1520)   Receiving objects:   5% (76/1520)   Receiving objects:   6% (92/1520)   Receiving objects:   7% (107/1520)   Receiving objects:   8% (122/1520)   Receiving objects:   9% (137/1520)   Receiving objects:  10% (152/1520)   Receiving objects:  11% (168/1520)   Receiving objects:  12% (183/1520)   Receiving objects:  13% (198/1520)   Receiving objects:  14% (213/1520)   Receiving objects:  15% (228/1520)   Receiving objects:  16% (244/1520)   Receiving objects:  17% (259/1520)   Receiving objects:  18% (274/1520)   Receiving objects:  19% (289/1520)   Receiving objects:  20% (304/1520)   Receiving objects:  21% (320/1520)   Receiving objects:  22% (335/1520)   Receiving objects:  23% (350/1520)   Receiving objects:  24% (365/1520)   Receiving objects:  25% (380/1520)   Receiving objects:  26% (396/1520)   Receiving objects:  27% (411/1520)   Receiving objects:  28% (426/1520)   Receiving objects:  29% (441/1520)   Receiving objects:  30% (456/1520)   Receiving objects:  31% (472/1520)   Receiving objects:  32% (487/1520)   Receiving objects:  33% (502/1520)   Receiving objects:  34% (517/1520)   Receiving objects:  35% (532/1520)   Receiving objects:  36% (548/1520)   Receiving objects:  37% (563/1520)   Receiving objects:  38% (578/1520)   Receiving objects:  39% (593/1520)   Receiving objects:  40% (608/1520)   Receiving objects:  41% (624/1520)   Receiving objects:  42% (639/1520)   Receiving objects:  43% (654/1520)   Receiving objects:  44% (669/1520)   Receiving objects:  45% (684/1520)   Receiving objects:  46% (700/1520)   Receiving objects:  47% (715/1520)   Receiving objects:  48% (730/1520)   Receiving objects:  49% (745/1520)   Receiving objects:  50% (760/1520)   Receiving objects:  51% (776/1520)   Receiving objects:  52% (791/1520)   Receiving objects:  53% (806/1520)   Receiving objects:  54% (821/1520)   Receiving objects:  55% (836/1520)   Receiving objects:  56% (852/1520)   Receiving objects:  57% (867/1520)   Receiving objects:  58% (882/1520)   Receiving objects:  59% (897/1520)   Receiving objects:  60% (912/1520)   Receiving objects:  61% (928/1520)   Receiving objects:  62% (943/1520)   Receiving objects:  63% (958/1520)   Receiving objects:  64% (973/1520)   Receiving objects:  65% (988/1520)   Receiving objects:  66% (1004/1520)   Receiving objects:  67% (1019/1520)   Receiving objects:  68% (1034/1520)   Receiving objects:  69% (1049/1520)   Receiving objects:  70% (1064/1520)   Receiving objects:  71% (1080/1520)   Receiving objects:  72% (1095/1520)   Receiving objects:  73% (1110/1520)   Receiving objects:  74% (1125/1520)   Receiving objects:  75% (1140/1520)   Receiving objects:  76% (1156/1520)   Receiving objects:  77% (1171/1520)   Receiving objects:  78% (1186/1520)   Receiving objects:  79% (1201/1520)   Receiving objects:  80% (1216/1520)   Receiving objects:  81% (1232/1520)   Receiving objects:  82% (1247/1520)   Receiving objects:  83% (1262/1520)   Receiving objects:  84% (1277/1520)   Receiving objects:  85% (1292/1520)   Receiving objects:  86% (1308/1520)   Receiving objects:  87% (1323/1520)   Receiving objects:  88% (1338/1520)   Receiving objects:  89% (1353/1520)   Receiving objects:  90% (1368/1520)   Receiving objects:  91% (1384/1520)   Receiving objects:  92% (1399/1520)   Receiving objects:  93% (1414/1520)   Receiving objects:  94% (1429/1520)   Receiving objects:  95% (1444/1520)   remote: Total 1520 (delta 1058), reused 1326 (delta 953), pack-reused 0[K
Receiving objects:  96% (1460/1520)   Receiving objects:  97% (1475/1520)   Receiving objects:  98% (1490/1520)   Receiving objects:  99% (1505/1520)   Receiving objects: 100% (1520/1520)   Receiving objects: 100% (1520/1520), 648.94 KiB | 24.03 MiB/s, done.
Resolving deltas:   0% (0/1058)   Resolving deltas:   1% (12/1058)   Resolving deltas:   5% (58/1058)   Resolving deltas:   7% (76/1058)   Resolving deltas:   8% (87/1058)   Resolving deltas:   9% (102/1058)   Resolving deltas:  12% (131/1058)   Resolving deltas:  13% (144/1058)   Resolving deltas:  15% (161/1058)   Resolving deltas:  17% (188/1058)   Resolving deltas:  19% (211/1058)   Resolving deltas:  22% (233/1058)   Resolving deltas:  23% (251/1058)   Resolving deltas:  25% (268/1058)   Resolving deltas:  26% (280/1058)   Resolving deltas:  27% (287/1058)   Resolving deltas:  33% (354/1058)   Resolving deltas:  34% (366/1058)   Resolving deltas:  36% (388/1058)   Resolving deltas:  37% (399/1058)   Resolving deltas:  39% (422/1058)   Resolving deltas:  40% (424/1058)   Resolving deltas:  42% (450/1058)   Resolving deltas:  43% (464/1058)   Resolving deltas:  44% (470/1058)   Resolving deltas:  45% (477/1058)   Resolving deltas:  46% (488/1058)   Resolving deltas:  59% (634/1058)   Resolving deltas:  60% (642/1058)   Resolving deltas:  61% (650/1058)   Resolving deltas:  62% (659/1058)   Resolving deltas:  63% (673/1058)   Resolving deltas:  64% (684/1058)   Resolving deltas:  65% (694/1058)   Resolving deltas:  66% (699/1058)   Resolving deltas:  67% (713/1058)   Resolving deltas:  69% (732/1058)   Resolving deltas:  70% (746/1058)   Resolving deltas:  71% (756/1058)   Resolving deltas:  72% (762/1058)   Resolving deltas:  73% (773/1058)   Resolving deltas:  74% (784/1058)   Resolving deltas:  76% (809/1058)   Resolving deltas:  77% (817/1058)   Resolving deltas:  79% (837/1058)   Resolving deltas:  81% (857/1058)   Resolving deltas:  82% (874/1058)   Resolving deltas:  83% (884/1058)   Resolving deltas:  84% (891/1058)   Resolving deltas:  85% (904/1058)   Resolving deltas:  86% (911/1058)   Resolving deltas:  87% (923/1058)   Resolving deltas:  88% (941/1058)   Resolving deltas:  90% (954/1058)   Resolving deltas:  91% (964/1058)   Resolving deltas:  92% (981/1058)   Resolving deltas:  94% (996/1058)   Resolving deltas:  95% (1010/1058)   Resolving deltas:  99% (1050/1058)   Resolving deltas: 100% (1058/1058)   Resolving deltas: 100% (1058/1058), done.

travis_time:end:0434b896:start=1522656405253610261,finish=1522656405700649092,duration=447038831[0K$ cd hylang/hy
travis_time:start:20b1957a[0K$ git fetch origin +refs/pull/1566/merge:
remote: Counting objects: 12, done.[K
remote: Compressing objects:  16% (1/6)   [Kremote: Compressing objects:  33% (2/6)   [Kremote: Compressing objects:  50% (3/6)   [Kremote: Compressing objects:  66% (4/6)   [Kremote: Compressing objects:  83% (5/6)   [Kremote: Compressing objects: 100% (6/6)   [Kremote: Compressing objects: 100% (6/6), done.[K
remote: Total 12 (delta 8), reused 9 (delta 6), pack-reused 0[K
Unpacking objects:   8% (1/12)   Unpacking objects:  16% (2/12)   Unpacking objects:  25% (3/12)   Unpacking objects:  33% (4/12)   Unpacking objects:  41% (5/12)   Unpacking objects:  50% (6/12)   Unpacking objects:  58% (7/12)   Unpacking objects:  66% (8/12)   Unpacking objects:  75% (9/12)   Unpacking objects:  83% (10/12)   Unpacking objects:  91% (11/12)   Unpacking objects: 100% (12/12)   Unpacking objects: 100% (12/12), done.
From https://github.com/hylang/hy
 * branch            refs/pull/1566/merge -> FETCH_HEAD

travis_time:end:20b1957a:start=1522656405707532305,finish=1522656406149685354,duration=442153049[0K$ git checkout -qf FETCH_HEAD
travis_fold:end:git.checkout[0Ktravis_time:start:194baaa5[0K$ source ~/virtualenv/python2.7/bin/activate

travis_time:end:194baaa5:start=1522656410251988357,finish=1522656410259836131,duration=7847774[0Ktravis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=$HOME/.casher
travis_time:start:1a440f5c[0K$ Installing caching utilities

travis_time:end:1a440f5c:start=1522656414005453640,finish=1522656414038661932,duration=33208292[0Ktravis_time:start:02d94101[0K
travis_time:end:02d94101:start=1522656414045663462,finish=1522656414050792185,duration=5128723[0Ktravis_time:start:064c0cc0[0K[32;1mattempting to download cache archive[0m
[32;1mfetching PR.1566/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--python-2.7.tgz[0m
[32;1mfetching PR.1566/cache--python-2.7.tgz[0m
[32;1mfetching master/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--python-2.7.tgz[0m
[32;1mfound cache[0m

travis_time:end:064c0cc0:start=1522656414056593442,finish=1522656418988583606,duration=4931990164[0Ktravis_fold:end:cache.1[0Ktravis_fold:start:cache.pip[0K
travis_time:start:02fb76aa[0K
travis_time:end:02fb76aa:start=1522656418994736855,finish=1522656418999533028,duration=4796173[0Ktravis_time:start:07876c60[0K[32;1madding /home/travis/.cache/pip to cache[0m

travis_time:end:07876c60:start=1522656419005253142,finish=1522656421492415409,duration=2487162267[0Ktravis_fold:end:cache.pip[0K$ python --version
Python 2.7.14
$ pip --version
pip 9.0.1 from /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (python 2.7)
travis_fold:start:install.1[0Ktravis_time:start:026ed360[0K$ pip install -r requirements-travis.txt
Requirement already satisfied: pytest>=3.2.1 in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from -r requirements-travis.txt (line 1))
Collecting flake8 (from -r requirements-travis.txt (line 4))
  Using cached flake8-3.5.0-py2.py3-none-any.whl
Collecting coverage (from -r requirements-travis.txt (line 5))
  Using cached coverage-4.5.1-cp27-cp27mu-manylinux1_x86_64.whl
Requirement already satisfied: setuptools in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Requirement already satisfied: six>=1.10.0 in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Requirement already satisfied: funcsigs; python_version < "3.0" in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Requirement already satisfied: pluggy<0.7,>=0.5 in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Requirement already satisfied: attrs>=17.2.0 in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Requirement already satisfied: py>=1.5.0 in /home/travis/virtualenv/python2.7.14/lib/python2.7/site-packages (from pytest>=3.2.1->-r requirements-travis.txt (line 1))
Collecting pyflakes<1.7.0,>=1.5.0 (from flake8->-r requirements-travis.txt (line 4))
  Using cached pyflakes-1.6.0-py2.py3-none-any.whl
Collecting enum34; python_version < "3.4" (from flake8->-r requirements-travis.txt (line 4))
  Using cached enum34-1.1.6-py2-none-any.whl
Collecting configparser; python_version < "3.2" (from flake8->-r requirements-travis.txt (line 4))
Collecting pycodestyle<2.4.0,>=2.0.0 (from flake8->-r requirements-travis.txt (line 4))
  Using cached pycodestyle-2.3.1-py2.py3-none-any.whl
Collecting mccabe<0.7.0,>=0.6.0 (from flake8->-r requirements-travis.txt (line 4))
  Using cached mccabe-0.6.1-py2.py3-none-any.whl
Installing collected packages: pyflakes, enum34, configparser, pycodestyle, mccabe, flake8, coverage
Successfully installed configparser-3.5.0 coverage-4.5.1 enum34-1.1.6 flake8-3.5.0 mccabe-0.6.1 pycodestyle-2.3.1 pyflakes-1.6.0

travis_time:end:026ed360:start=1522656422105214361,finish=1522656424133450139,duration=2028235778[0Ktravis_fold:end:install.1[0Ktravis_fold:start:install.2[0Ktravis_time:start:06a79bfb[0K$ pip install --process-dependency-links -e .
Obtaining file:///home/travis/build/hylang/hy
[31m  DEPRECATION: Dependency Links processing has been deprecated and will be removed in a future release.[0m
Collecting rply>=0.7.5 (from hy==0.14.0+87.g02d857d)
  Using cached rply-0.7.5-py2.py3-none-any.whl
Collecting astor (from hy==0.14.0+87.g02d857d)
  Cloning https://github.com/berkerpeksag/astor.git to /tmp/pip-build-nDV2Ry/astor
Collecting clint>=0.4 (from hy==0.14.0+87.g02d857d)
Collecting appdirs (from rply>=0.7.5->hy==0.14.0+87.g02d857d)
  Using cached appdirs-1.4.3-py2.py3-none-any.whl
Collecting args (from clint>=0.4->hy==0.14.0+87.g02d857d)
Installing collected packages: appdirs, rply, astor, args, clint, hy
  Running setup.py install for astor ... [?25l- done
[?25h  Running setup.py develop for hy
Successfully installed appdirs-1.4.3 args-0.1.0 astor-0.6.2 clint-0.5.1 hy rply-0.7.5

travis_time:end:06a79bfb:start=1522656424139850573,finish=1522656427730653914,duration=3590803341[0Ktravis_fold:end:install.2[0Ktravis_time:start:16be5afb[0K$ pytest
[1m============================= test session starts ==============================[0m
platform linux2 -- Python 2.7.14, pytest-3.3.0, py-1.5.2, pluggy-0.6.0
rootdir: /home/travis/build/hylang/hy, inifile: setup.cfg
[1mcollecting 0 items                                                             [0m[1mcollecting 40 items                                                            [0m[1mcollecting 72 items                                                            [0m[1mcollecting 88 items                                                            [0m[1mcollecting 158 items                                                           [0m[1mcollecting 160 items                                                           [0m[1mcollecting 166 items                                                           [0m[1mcollecting 167 items                                                           [0m[1mcollecting 170 items                                                           [0m[1mcollecting 171 items                                                           [0m[1mcollecting 176 items                                                           [0m[1mcollecting 231 items                                                           [0m[1mcollecting 242 items                                                           [0m[1mcollecting 363 items                                                           [0m[1mcollecting 380 items                                                           [0m[1mcollecting 408 items                                                           [0m[1mcollecting 423 items                                                           [0m[1mcollecting 441 items                                                           [0m[1mcollecting 451 items                                                           [0m[1mcollecting 461 items                                                           [0m[1mcollecting 462 items                                                           [0m[1mcollecting 463 items                                                           [0m[1mcollecting 467 items                                                           [0m[1mcollecting 472 items                                                           [0m[1mcollecting 482 items                                                           [0m[1mcollecting 485 items                                                           [0m[1mcollecting 492 items                                                           [0m[1mcollecting 497 items                                                           [0m[1mcollecting 522 items                                                           [0m[1mcollecting 536 items                                                           [0m[1mcollecting 537 items                                                           [0m[1mcollected 537 items                                                            [0m

tests/test_bin.py FFFFFFFFFFFFFFFFFFFFFFFFF.FFFFFFFFFFFF.F[36m               [  7%][0m
tests/test_lex.py ................................[36m                       [ 13%][0m
tests/test_models.py ................[36m                                    [ 16%][0m
tests/compilers/test_ast.py ..................s.........................[36m [ 24%]
[0m.......................ss.[36m                                               [ 29%][0m
tests/compilers/test_compiler.py ..[36m                                      [ 29%][0m
tests/importer/test_importer.py ......[36m                                   [ 30%][0m
tests/importer/test_pyc.py .[36m                                             [ 31%][0m
tests/macros/test_macro_processor.py ..X[36m                                 [ 31%][0m
tests/macros/test_tag_macros.py .[36m                                        [ 31%][0m
tests/native_tests/cons.hy .....[36m                                         [ 32%][0m
tests/native_tests/core.hy .............................................[36m [ 41%]
[0m..........[36m                                                               [ 43%][0m
tests/native_tests/defclass.hy ...........[36m                               [ 45%][0m
tests/native_tests/language.hy .........................................[36m [ 52%]
[0m........................................................................[36m [ 66%]
[0m...x....[36m                                                                 [ 67%][0m
tests/native_tests/mangling.hy .................[36m                         [ 70%][0m
tests/native_tests/mathematics.hy ............................[36m           [ 75%][0m
tests/native_tests/native_macros.hy ...............[36m                      [ 78%][0m
tests/native_tests/operators.hy ..................[36m                       [ 82%][0m
tests/native_tests/quote.hy ..........[36m                                   [ 83%][0m
tests/native_tests/tag_macros.hy ..........[36m                              [ 85%][0m
tests/native_tests/unless.hy .[36m                                           [ 86%][0m
tests/native_tests/when.hy .[36m                                             [ 86%][0m
tests/native_tests/with_decorator.hy ....[36m                                [ 86%][0m
tests/native_tests/with_test.hy .....[36m                                    [ 87%][0m
tests/native_tests/contrib/hy_repr.hy ..........[36m                         [ 89%][0m
tests/native_tests/contrib/loop.hy ...[36m                                   [ 90%][0m
tests/native_tests/contrib/multi.hy .......[36m                              [ 91%][0m
tests/native_tests/contrib/sequences.hy .....[36m                            [ 92%][0m
tests/native_tests/contrib/walk.hy .........................[36m             [ 97%][0m
tests/native_tests/extra/anaphoric.hy ..............[36m                     [ 99%][0m
tests/native_tests/extra/reserved.hy .[36m                                   [100%][0m

=================================== FAILURES ===================================
[1m[31m_________________________________ test_bin_hy __________________________________[0m

[1m    def test_bin_hy():[0m
[1m>       run_cmd("hy", "")[0m

[1m[31mtests/test_bin.py[0m:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '', expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300326790>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300326790>> = <subprocess.Popen object at 0x7f2300326790>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m______________________________ test_bin_hy_stdin _______________________________[0m

[1m    def test_bin_hy_stdin():[0m
[1m>       output, _ = run_cmd("hy", '(koan)')[0m

[1m[31mtests/test_bin.py[0m:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(koan)', expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23004fd950>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23004fd950>> = <subprocess.Popen object at 0x7f23004fd950>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________________ test_bin_hy_stdin_multiline __________________________[0m

[1m    def test_bin_hy_stdin_multiline():[0m
[1m>       output, _ = run_cmd("hy", '(+ "a" "b"\n"c" "d")')[0m

[1m[31mtests/test_bin.py[0m:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(+ "a" "b"\n"c" "d")', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300305810>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300305810>> = <subprocess.Popen object at 0x7f2300305810>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_____________________________ test_bin_hy_history ______________________________[0m

[1m    def test_bin_hy_history():[0m
[1m>       output, _ = run_cmd("hy", '(+ "a" "b")\n(+ *1 "y" "z")')[0m

[1m[31mtests/test_bin.py[0m:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(+ "a" "b")\n(+ *1 "y" "z")', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230066e9d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230066e9d0>> = <subprocess.Popen object at 0x7f230066e9d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_stdin_comments __________________________[0m

[1m    def test_bin_hy_stdin_comments():[0m
[1m>       _, err_empty = run_cmd("hy", '')[0m

[1m[31mtests/test_bin.py[0m:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '', expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23003170d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23003170d0>> = <subprocess.Popen object at 0x7f23003170d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________________ test_bin_hy_stdin_assignment _________________________[0m

[1m    def test_bin_hy_stdin_assignment():[0m
[1m        # If the last form is an assignment, don't print the value.[0m
[1m    [0m
[1m>       output, _ = run_cmd("hy", '(setv x (+ "A" "Z"))')[0m

[1m[31mtests/test_bin.py[0m:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(setv x (+ "A" "Z"))', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230025b590>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230025b590>> = <subprocess.Popen object at 0x7f230025b590>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_stdin_as_arrow __________________________[0m

[1m    def test_bin_hy_stdin_as_arrow():[0m
[1m        # https://github.com/hylang/hy/issues/1255[0m
[1m>       output, _ = run_cmd("hy", "(as-> 0 it (inc it) (inc it))")[0m

[1m[31mtests/test_bin.py[0m:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(as-> 0 it (inc it) (inc it))', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230031b2d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230031b2d0>> = <subprocess.Popen object at 0x7f230031b2d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________ test_bin_hy_stdin_error_underline_alignment __________________[0m

[1m    def test_bin_hy_stdin_error_underline_alignment():[0m
[1m>       _, err = run_cmd("hy", "(defmacro mabcdefghi [x] x)\n(mabcdefghi)")[0m

[1m[31mtests/test_bin.py[0m:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(defmacro mabcdefghi [x] x)\n(mabcdefghi)'
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23002599d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23002599d0>> = <subprocess.Popen object at 0x7f23002599d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________________ test_bin_hy_stdin_except_do __________________________[0m

[1m    def test_bin_hy_stdin_except_do():[0m
[1m        # https://github.com/hylang/hy/issues/533[0m
[1m    [0m
[1m>       output, _ = run_cmd("hy", '(try (/ 1 0) (except [ZeroDivisionError] "hello"))')  # noqa[0m

[1m[31mtests/test_bin.py[0m:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(try (/ 1 0) (except [ZeroDivisionError] "hello"))'
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23003222d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23003222d0>> = <subprocess.Popen object at 0x7f23003222d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________ test_bin_hy_stdin_unlocatable_hytypeerror ___________________[0m

[1m    def test_bin_hy_stdin_unlocatable_hytypeerror():[0m
[1m        # https://github.com/hylang/hy/issues/1412[0m
[1m        # The chief test of interest here is the returncode assertion[0m
[1m        # inside run_cmd.[0m
[1m        _, err = run_cmd("hy", """[0m
[1m            (import hy.errors)[0m
[1m>           (raise (hy.errors.HyTypeError '[] (+ "A" "Z")))""")[0m

[1m[31mtests/test_bin.py[0m:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy']
stdin_data = '\n        (import hy.errors)\n        (raise (hy.errors.HyTypeError \'[] (+ "A" "Z")))'
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23009e2b10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23009e2b10>> = <subprocess.Popen object at 0x7f23009e2b10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_stdin_bad_repr __________________________[0m

[1m    def test_bin_hy_stdin_bad_repr():[0m
[1m        # https://github.com/hylang/hy/issues/1389[0m
[1m        output, err = run_cmd("hy", """[0m
[1m             (defclass BadRepr [] (defn __repr__ [self] (/ 0)))[0m
[1m             (BadRepr)[0m
[1m>            (+ "A" "Z")""")[0m

[1m[31mtests/test_bin.py[0m:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy']
stdin_data = '\n         (defclass BadRepr [] (defn __repr__ [self] (/ 0)))\n         (BadRepr)\n         (+ "A" "Z")'
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300164150>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300164150>> = <subprocess.Popen object at 0x7f2300164150>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_stdin_hy_repr ___________________________[0m

[1m    def test_bin_hy_stdin_hy_repr():[0m
[1m>       output, _ = run_cmd("hy", '(+ [1] [2])')[0m

[1m[31mtests/test_bin.py[0m:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy'], stdin_data = '(+ [1] [2])', expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23004bd410>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23004bd410>> = <subprocess.Popen object at 0x7f23004bd410>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m________________________ test_bin_hy_ignore_python_env _________________________[0m

[1m    def test_bin_hy_ignore_python_env():[0m
[1m        os.environ.update({"PYTHONTEST": '0'})[0m
[1m>       output, _ = run_cmd("hy -c '(print (do (import os) (. os environ)))'")[0m

[1m[31mtests/test_bin.py[0m:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-c', '(print (do (import os) (. os environ)))'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23002a0d10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23002a0d10>> = <subprocess.Popen object at 0x7f23002a0d10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_______________________________ test_bin_hy_cmd ________________________________[0m

[1m    def test_bin_hy_cmd():[0m
[1m>       output, _ = run_cmd("hy -c \"(koan)\"")[0m

[1m[31mtests/test_bin.py[0m:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-c', '(koan)'], stdin_data = None, expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300305190>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300305190>> = <subprocess.Popen object at 0x7f2300305190>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_______________________________ test_bin_hy_icmd _______________________________[0m

[1m    def test_bin_hy_icmd():[0m
[1m>       output, _ = run_cmd("hy -i \"(koan)\"", "(ideas)")[0m

[1m[31mtests/test_bin.py[0m:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-i', '(koan)'], stdin_data = '(ideas)', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23004fd790>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23004fd790>> = <subprocess.Popen object at 0x7f23004fd790>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m____________________________ test_bin_hy_icmd_file _____________________________[0m

[1m    def test_bin_hy_icmd_file():[0m
[1m>       output, _ = run_cmd("hy -i resources/icmd_test_file.hy", "(ideas)")[0m

[1m[31mtests/test_bin.py[0m:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-i', 'resources/icmd_test_file.hy'], stdin_data = '(ideas)'
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300407850>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300407850>> = <subprocess.Popen object at 0x7f2300407850>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m___________________________ test_bin_hy_icmd_and_spy ___________________________[0m

[1m    def test_bin_hy_icmd_and_spy():[0m
[1m>       output, _ = run_cmd("hy -i \"(+ [] [])\" --spy", "(+ 1 1)")[0m

[1m[31mtests/test_bin.py[0m:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-i', '(+ [] [])', '--spy'], stdin_data = '(+ 1 1)', expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23001f0a10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23001f0a10>> = <subprocess.Popen object at 0x7f23001f0a10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m___________________________ test_bin_hy_missing_file ___________________________[0m

[1m    def test_bin_hy_missing_file():[0m
[1m>       _, err = run_cmd("hy foobarbaz", expect=2)[0m

[1m[31mtests/test_bin.py[0m:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'foobarbaz'], stdin_data = None, expect = 2
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 2[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23003174d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23003174d0>> = <subprocess.Popen object at 0x7f23003174d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_file_with_args __________________________[0m

[1m    def test_bin_hy_file_with_args():[0m
[1m>       assert "usage" in run_cmd("hy tests/resources/argparse_ex.hy -h")[0][0m

[1m[31mtests/test_bin.py[0m:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/argparse_ex.hy', '-h'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230008eb90>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230008eb90>> = <subprocess.Popen object at 0x7f230008eb90>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________________________ test_bin_hyc _________________________________[0m

[1m    def test_bin_hyc():[0m
[1m>       _, err = run_cmd("hyc", expect=2)[0m

[1m[31mtests/test_bin.py[0m:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hyc'], stdin_data = None, expect = 2, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 2[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23002593d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23002593d0>> = <subprocess.Popen object at 0x7f23002593d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hyc_missing_file ___________________________[0m

[1m    def test_bin_hyc_missing_file():[0m
[1m>       _, err = run_cmd("hyc foobarbaz", expect=2)[0m

[1m[31mtests/test_bin.py[0m:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hyc', 'foobarbaz'], stdin_data = None, expect = 2
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 2[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230015a810>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230015a810>> = <subprocess.Popen object at 0x7f230015a810>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________________ test_hy2py __________________________________[0m

[1m    def test_hy2py():[0m
[1m        i = 0[0m
[1m        for dirpath, dirnames, filenames in os.walk("tests/native_tests"):[0m
[1m            for f in filenames:[0m
[1m                if f.endswith(".hy"):[0m
[1m                    if "py3_only" in f and not PY3:[0m
[1m                        continue[0m
[1m                    if "py35_only" in f and not PY35:[0m
[1m                        continue[0m
[1m                    if "py36_only" in f and not PY36:[0m
[1m                        continue[0m
[1m                    i += 1[0m
[1m>                   output, err = run_cmd("hy2py -s -a " + quote(os.path.join(dirpath, f)))[0m

[1m[31mtests/test_bin.py[0m:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy2py', '-s', '-a', 'tests/native_tests/cons.hy'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300143490>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300143490>> = <subprocess.Popen object at 0x7f2300143490>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_____________________________ test_bin_hy_builtins _____________________________[0m

[1m    def test_bin_hy_builtins():[0m
[1m        # hy.cmdline replaces builtins.exit and builtins.quit[0m
[1m        # for use by hy's repl.[0m
[1m>       import hy.cmdline  # NOQA[0m

[1m[31mtests/test_bin.py[0m:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[1m[31mhy/cmdline.py[0m:24: in <module>
[1m    from hy.completer import completion[0m
[1m[31mhy/importer.py[0m:251: in load_module
[1m    return import_file_to_module(fullname, self.path, self)[0m
[1m[31mhy/importer.py[0m:98: in import_file_to_module
[1m    module = imp.load_compiled(module_name, bytecode_path)[0m
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

[1m    (import contextlib)[0m
[1m    (import os)[0m
[1m    (import re)[0m
[1m    (import sys)[0m
[1m    [0m
[1m    (import hy.macros)[0m
[1m    (import hy.compiler)[0m
[1m    (import [hy.lex.parser [mangle unmangle]])[0m
[1m    (import [hy.-compat [builtins string-types]])[0m
[1m    [0m
[1m>   (import [builtins [eval]])[0m
[1m[31mE   ImportError: No module named builtins[0m

[1m[31mhy/completer.hy[0m:11: ImportError
[1m[31m_______________________________ test_bin_hy_main _______________________________[0m

[1m    def test_bin_hy_main():[0m
[1m>       output, _ = run_cmd("hy tests/resources/bin/main.hy")[0m

[1m[31mtests/test_bin.py[0m:275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/main.hy'], stdin_data = None, expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230000da90>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230000da90>> = <subprocess.Popen object at 0x7f230000da90>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m____________________________ test_bin_hy_main_args _____________________________[0m

[1m    def test_bin_hy_main_args():[0m
[1m>       output, _ = run_cmd("hy tests/resources/bin/main.hy test 123")[0m

[1m[31mtests/test_bin.py[0m:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/main.hy', 'test', '123'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230007c150>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230007c150>> = <subprocess.Popen object at 0x7f230007c150>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_____________________________ test_bin_hy_no_main ______________________________[0m

[1m    def test_bin_hy_no_main():[0m
[1m>       output, _ = run_cmd("hy tests/resources/bin/nomain.hy")[0m

[1m[31mtests/test_bin.py[0m:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/nomain.hy'], stdin_data = None, expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23002be390>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23002be390>> = <subprocess.Popen object at 0x7f23002be390>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________ test_bin_hy_byte_compile[hy {fpath}-normal] __________________[0m

scenario = 'normal', cmd_fmt = 'hy {fpath}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/bytecompile.hy'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23000aa110>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23000aa110>> = <subprocess.Popen object at 0x7f23000aa110>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m____________ test_bin_hy_byte_compile[hy {fpath}-prevent_by_force] _____________[0m

scenario = 'prevent_by_force', cmd_fmt = 'hy {fpath}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/bytecompile.hy'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23006936d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23006936d0>> = <subprocess.Popen object at 0x7f23006936d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_____________ test_bin_hy_byte_compile[hy {fpath}-prevent_by_env] ______________[0m

scenario = 'prevent_by_env', cmd_fmt = 'hy {fpath}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', 'tests/resources/bin/bytecompile.hy'], stdin_data = None
expect = 0, dontwritebytecode = True

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23000ab250>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23000ab250>> = <subprocess.Popen object at 0x7f23000ab250>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_______________ test_bin_hy_byte_compile[hy -m {modname}-normal] _______________[0m

scenario = 'normal', cmd_fmt = 'hy -m {modname}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.bytecompile'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f22ffff0710>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f22ffff0710>> = <subprocess.Popen object at 0x7f22ffff0710>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________ test_bin_hy_byte_compile[hy -m {modname}-prevent_by_force] __________[0m

scenario = 'prevent_by_force', cmd_fmt = 'hy -m {modname}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.bytecompile'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f22fffefa10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f22fffefa10>> = <subprocess.Popen object at 0x7f22fffefa10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m___________ test_bin_hy_byte_compile[hy -m {modname}-prevent_by_env] ___________[0m

scenario = 'prevent_by_env', cmd_fmt = 'hy -m {modname}'

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.bytecompile'], stdin_data = None
expect = 0, dontwritebytecode = True

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230004d990>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230004d990>> = <subprocess.Popen object at 0x7f230004d990>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________ test_bin_hy_byte_compile[hy -c '(import {modname})'-normal] __________[0m

scenario = 'normal', cmd_fmt = "hy -c '(import {modname})'"

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-c', '(import tests.resources.bin.bytecompile)']
stdin_data = None, expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300055710>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300055710>> = <subprocess.Popen object at 0x7f2300055710>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m____ test_bin_hy_byte_compile[hy -c '(import {modname})'-prevent_by_force] _____[0m

scenario = 'prevent_by_force', cmd_fmt = "hy -c '(import {modname})'"

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-c', '(import tests.resources.bin.bytecompile)']
stdin_data = None, expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300659a90>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300659a90>> = <subprocess.Popen object at 0x7f2300659a90>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_____ test_bin_hy_byte_compile[hy -c '(import {modname})'-prevent_by_env] ______[0m

scenario = 'prevent_by_env', cmd_fmt = "hy -c '(import {modname})'"

[1m    @pytest.mark.parametrize('scenario', [[0m
[1m        "normal", "prevent_by_force", "prevent_by_env"])[0m
[1m    @pytest.mark.parametrize('cmd_fmt', [[0m
[1m        'hy {fpath}', 'hy -m {modname}', "hy -c '(import {modname})'"])[0m
[1m    def test_bin_hy_byte_compile(scenario, cmd_fmt):[0m
[1m    [0m
[1m        modname = "tests.resources.bin.bytecompile"[0m
[1m        fpath = modname.replace(".", "/") + ".hy"[0m
[1m        cmd = cmd_fmt.format(**locals())[0m
[1m    [0m
[1m        rm(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        if scenario == "prevent_by_force":[0m
[1m            # Keep Hy from being able to byte-compile the module by[0m
[1m            # creating a directory at the target location.[0m
[1m            os.mkdir(get_bytecode_path(fpath))[0m
[1m    [0m
[1m        # Whether or not we can byte-compile the module, we should be able[0m
[1m        # to run it.[0m
[1m>       output, _ = run_cmd(cmd, dontwritebytecode=scenario == "prevent_by_env")[0m

[1m[31mtests/test_bin.py[0m:313: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-c', '(import tests.resources.bin.bytecompile)']
stdin_data = None, expect = 0, dontwritebytecode = True

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300093e50>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300093e50>> = <subprocess.Popen object at 0x7f2300093e50>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m___________________________ test_bin_hy_module_main ____________________________[0m

[1m    def test_bin_hy_module_main():[0m
[1m>       output, _ = run_cmd("hy -m tests.resources.bin.main")[0m

[1m[31mtests/test_bin.py[0m:333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.main'], stdin_data = None, expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f23000aac10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f23000aac10>> = <subprocess.Popen object at 0x7f23000aac10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m_________________________ test_bin_hy_module_main_args _________________________[0m

[1m    def test_bin_hy_module_main_args():[0m
[1m>       output, _ = run_cmd("hy -m tests.resources.bin.main test 123")[0m

[1m[31mtests/test_bin.py[0m:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.main', 'test', '123'], stdin_data = None
expect = 0, dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f2300693c10>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f2300693c10>> = <subprocess.Popen object at 0x7f2300693c10>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m__________________________ test_bin_hy_module_no_main __________________________[0m

[1m    def test_bin_hy_module_no_main():[0m
[1m>       output, _ = run_cmd("hy -m tests.resources.bin.nomain")[0m

[1m[31mtests/test_bin.py[0m:348: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cmd = ['hy', '-m', 'tests.resources.bin.nomain'], stdin_data = None, expect = 0
dontwritebytecode = False

[1m    def run_cmd(cmd, stdin_data=None, expect=0, dontwritebytecode=False):[0m
[1m        env = None[0m
[1m        if dontwritebytecode:[0m
[1m            env = dict(os.environ)[0m
[1m            env["PYTHONDONTWRITEBYTECODE"] = "1"[0m
[1m        cmd = shlex.split(cmd)[0m
[1m        cmd[0] = os.path.join(hy_dir, cmd[0])[0m
[1m        p = subprocess.Popen(cmd,[0m
[1m                             stdin=subprocess.PIPE,[0m
[1m                             stdout=subprocess.PIPE,[0m
[1m                             stderr=subprocess.PIPE,[0m
[1m                             universal_newlines=True,[0m
[1m                             shell=False,[0m
[1m                             env=env)[0m
[1m        output = p.communicate(input=stdin_data)[0m
[1m>       assert p.wait() == expect[0m
[1m[31mE       assert 1 == 0[0m
[1m[31mE        +  where 1 = <bound method Popen.wait of <subprocess.Popen object at 0x7f230078a7d0>>()[0m
[1m[31mE        +    where <bound method Popen.wait of <subprocess.Popen object at 0x7f230078a7d0>> = <subprocess.Popen object at 0x7f230078a7d0>.wait[0m

[1m[31mtests/test_bin.py[0m:41: AssertionError
[1m[31m=== 38 failed, 494 passed, 3 skipped, 1 xfailed, 1 xpassed in 31.12 seconds ====[0m

travis_time:end:16be5afb:start=1522656427737828956,finish=1522656459989004521,duration=32251175565[0K
[31;1mThe command "pytest" exited with 1.[0m
travis_fold:start:cache.2[0Kstore build cache
travis_time:start:0b3822a6[0K
travis_time:end:0b3822a6:start=1522656459995815192,finish=1522656460001151179,duration=5335987[0Ktravis_time:start:0146af6a[0K[32;1mchange detected (content changed, file is created, or file is deleted):
/home/travis/.cache/pip/http/0/c/7/8/c/0c78cc5ddccddcf3238359feeac7e1cddd59216d6ded4659cf5965cd
/home/travis/.cache/pip/http/1/b/6/1/9/1b6191bf7945cf949f4aa2ac69dac9612d5c8a4345dff6ceac200a1e
/home/travis/.cache/pip/http/2/2/8/1/d/2281ddaafdd93fe42769bedb55d3a2b9e1e6dc7ec1c52bbbd71e9bf7
/home/travis/.cache/pip/http/2/6/b/b/f/26bbf25688b3206233a8f9c2683a78f2f32caf0f7d1f4e4147816656
/home/travis/.cache/pip/http/2/e/a/0/1/2ea018c182b20227915df2f77a5d7a5542857698f6e2658d9ab5ae62
/home/travis/.cache/pip/http/4/0/6/e/9/406e9b27a390d51d6f5ba6446b20eddf170d46e00b171bdfa0fbde6b
/home/travis/.cache/pip/http/4/7/9/9/6/479960059f6a2c1bdbd0c32805cce11c8c453c4dcac2ea743c8462ff
/home/travis/.cache/pip/http/6/3/7/d/d/637ddeefd88d7cc4cd623d2cc6880ec9fbe18fc216d5628bd0493043
/home/travis/.cache/pip/http/a/6/d/a/3/a6da33837c55be9a1a6a6d3dcf3b9d954ca08015113dd2881751b75c
/home/travis/.cache/pip/http/a/9/5/b/1/a95b1e366422caa07b5ba5fc79636026b57716e26d614e2427980b9a
/home/travis/.cache/pip/http/d/8/b/0/c/d8
[0m
[32;1m...
[0m
[32;1mchanges detected, packing new archive[0m
[32;1muploading archive[0m

travis_time:end:0146af6a:start=1522656460007058586,finish=1522656464228886813,duration=4221828227[0Ktravis_fold:end:cache.2[0K
Done. Your build exited with 1.
