diff --git a/source/Security/CSRF.rst b/source/Security/CSRF.rst
index 747cb26cd9..e8cca09552 100755
--- a/source/Security/CSRF.rst
+++ b/source/Security/CSRF.rst
@@ -1,3 +1,5 @@
+.. _SpringSecurityCsrf:
+
 CSRF対策
 ================================================================================
 
@@ -9,224 +11,106 @@ CSRF対策
 Overview
 --------------------------------------------------------------------------------
 
-| Cross site request forgeries(以下、CSRFと略す）とは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
-| ユーザが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
+本節では、Spring Securityが提供しているCross site request forgeries(以下、CSRFと略す）対策の機能について説明する。
+
+CSRFとは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
+ユーザーが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
 
-| サーバ側でCSRFを防ぐには、以下の方法が知られている。
+サーバ側でCSRFを防ぐには、以下の方法が知られている。
 
 * 秘密情報(トークン)の埋め込み
 * パスワードの再入力
-* Referのチェック
-
-| OWASPでは、トークンパターンを使用する方法が\ `推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
-
-.. figure:: ./images/csrf_check_other_site.png
-   :alt: csrf check other site
-   :width: 60%
-   :align: center
-
-   **Picture - csrf check other site**
-
-.. note::
-
-  **OWASPとは**
+* Refererのチェック
 
-  Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する
-  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
+CSRF対策機能は、攻撃者が用意したWebページから送られてくる偽造リクエストを不正なリクエストとして扱うための機能である。
+CSRF対策が行われていないWebアプリケーションを利用すると、以下のような方法で攻撃を受ける可能性がある。
 
-    https://www.owasp.org/index.php/Main_Page
+* 利用者は、CSRF対策が行われていないWebアプリケーションにログインする。
+* 利用者は、攻撃者からの巧みな誘導によって、攻撃者が用意したWebページを開いてしまう。
+* 攻撃者が用意したWebページは、フォームの自動送信などのテクニックを使用して、偽造したリクエストをCSRF対策が行われていないWebアプリケーションに対して送信する。
+* CSRF対策が行われていないWebアプリケーションは、攻撃者が偽造したリクエストを正規のリクエストとして処理してしまう。
 
-| CSRFを回避する方法は、前述したように複数あるが、固定トークンを使用するライブラリを、Spring Securityが提供している。
-| セッション毎に1つの固定トークンを用い、すべてのリクエストについて、同じ値を使用している。
-
-| デフォルトではHTTPメソッドが、GET,HEAD,TRACE,OPTIONS以外の場合、
-| リクエストに含まれるCSRFトークンをチェックし、値が一致しない場合は、エラー(HTTP Status:403[Forbidden])とする。
-
-.. figure:: ./images/csrf_check_kind.png
-   :alt: csrf check other kind
-   :width: 50%
-   :align: center
-
-**Picture - csrf check other kind**
 
 .. tip::
 
-  CSRFトークンチェックは、別サイトからの不正な更新リクエストをチェックし、エラーとするものである。
-  ユーザに順序性（一連の業務フロー）を守らせ、チェックするためには、\ :ref:`double-submit_transactiontokencheck`\ を参照されたい。
+    OWASP\ [#fSpringSecurityCSRF1]_\では、\ `トークンパターンを使用する方法が推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
+    
+      .. [#fSpringSecurityCSRF1] Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
+       https://www.owasp.org/index.php/Main_Page
 
-|
+.. note:: **ログイン時におけるCSRF対策**
 
-How to use
---------------------------------------------------------------------------------
+    CSRF対策はログイン中のリクエストだけではなく、ログイン処理でも行う必要がある。
+    ログイン処理に対してCSRF対策を怠った場合、攻撃者が用意したアカウントを使って知らぬ間にログインさせられ、ログイン中に行った操作履歴などを盗まれる可能性がある。
 
-Spring Securityの設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring SecurityのCSRF機能を使用するための設定を説明する。
-\ :ref:`Spring Security の How to use <howtouse_springsecurity>`\ で設定したweb.xmlを前提とする。
 
-.. _csrf_spring-security-setting:
-
-spring-security.xmlの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-追加で設定が必要な箇所を、ハイライトしている。
+Spring SecurityのCSRF対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
+Spring Securityは、セッション単位にランダムに生成される固定トークン値(CSRFトークン)を払い出し、払い出されたCSRFトークンをリクエストパラメータ(HTMLフォームのhidden項目)として送信する。
+これにより正規のWebページからのリクエストなのか、攻撃者が用意したWebページからのリクエストなのかを判断する仕組みを採用している。
 
-.. code-block:: xml
-   :emphasize-lines: 3-4,8-
-
-    <sec:http auto-config="true" use-expressions="true" >
-        <!-- omitted -->
-        <sec:csrf />  <!-- (1) -->
-        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (2) -->
-        <!-- omitted -->
-    </sec:http>
-
-    <bean id="accessDeniedHandler"
-        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (3) -->
-        <constructor-arg index="0">  <!-- (4) -->
-            <map>
-                <entry
-                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">  <!-- (5) -->
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (5) -->
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />  <!-- (5) -->
-                    </bean>
-                </entry>
-                <entry
-                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">  <!-- (6) -->
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (6) -->
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />  <!-- (6) -->
-                    </bean>
-                </entry>
-            </map>
-        </constructor-arg>
-        <constructor-arg index="1">  <!-- (7) -->
-            <bean
-                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (8) -->
-                <property name="errorPage"
-                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />  <!-- (8) -->
-            </bean>
-        </constructor-arg>
-    </bean>
+.. figure:: ./images_CSRF/Csrf.png
+    :width: 100%
 
+    **Spring SecurityのCSRF対策の仕組み**
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:http>``\ 要素に\ ``<sec:csrf>``\ 要素を定義することで、Spring Security のCSRFトークンチェック機能を利用できるようになる。
-       | デフォルトでチェックされるHTTPメソッドについては、\ :ref:`こちら<csrf_default-add-token-method>`\ を参照されたい。
-       | 詳細については、\ `Spring Securityのレファレンスドキュメント <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#csrf-configure>`_\ を参照されたい。
-   * - | (2)
-     - | \ ``AccessDeniedException``\ を継承したExceptionが発生した場合、Exceptionの種類毎に表示するviewを切り替えるためにHandlerを定義する。
-       | 全て同じ画面で良い場合は ``error-page`` 属性に遷移先のjspを指定することで可能となる。
-       | Spring Securityの機能でハンドリングしない場合は、\ :ref:`こちら<csrf_403-webxml-setting>`\ を参照されたい。
-   * - | (3)
-     - | エラーページを切り替えるためにSpring Securityで用意されているHandlerのclassに \ ``org.springframework.security.web.access.DelegatingAccessDeniedHandler``\ を指定する。
-   * - | (4)
-     - | コンストラクタの第1引数でデフォルト以外のException（\ ``AccessDeniedException``\ を継承したException）の種類毎に表示を変更する画面をMap形式で設定する。
-   * - | (5)
-     - | keyに \ ``AccessDeniedException``\ を継承したException を指定する。
-       | 実装クラスとして、Spring Securityで用意されている \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
-       | propertyのnameにerrorPageを指定し、valueに表示するviewを指定する。
-   * - | (6)
-     - | (5)とExceptionの種類が違う場合に表示の変更を定義する。
-   * - | (7)
-     - | コンストラクタの第2引数でデフォルト（\ ``AccessDeniedException``\ とコンストラクタの第1引数で指定していない\ ``AccessDeniedException``\を継承したException）の場合のviewを指定する。
-   * - | (8)
-     - | 実装クラスとして、Spring Securityで用意されている \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
-       | propertyのnameにerrorPageを指定し、valueに表示するviewを指定する。
-
-|
-
-.. tabularcolumns:: |p{0.40\linewidth}|p{0.60\linewidth}|
-.. list-table:: \ ``AccessDeniedException``\ を継承したCSRF対策により発生するExceptionの種類
-   :header-rows: 1
-   :widths: 40 60
-
-   * - Exception
-     - 発生理由
-   * - | org.springframework.security.web.csrf.
-       | InvalidCsrfTokenException
-     - | クライアントからリクエストしたCSRFトークンとサーバで保持しているCSRFトークンが一致しない場合に発生する。
-   * - | org.springframework.security.web.csrf.
-       | MissingCsrfTokenException
-     - | CSRFトークンがサーバに存在しない場合に発生する。
-       | デフォルトの設定ではCSRFトークンをHTTPセッションに保持するため、CSRFトークンが存在しないということはHTTPセッションが破棄された(セッションタイムアウトが発生した)ことを意味する。
-       |
-       | \ ``<sec:csrf>``\ 要素の \ ``token-repository-ref``\ 属性でCSRFトークンの保存先をキャッシュサーバやDBなどに変更した場合は、CSRFトークンを保存先から削除した場合に\ ``MissingCsrfTokenException``\ が発生する。
-       | これは、トークンの保存先をHTTPセッションにしていない場合は、本機能を使ってセッションタイムアウトの検知が出来ない事を意味している。
-
-.. note::
-
-    CSRFトークンの保存先としてHTTPセッションを使用する場合は、
-    CSRFトークンのチェック対象のリクエストに対してセッションタイムアウトを検出することができる。
-
-    セッションタイムアウト検知後の動作は、\ ``<session-management>``\ 要素の\ ``invalid-session-url``\ 属性の指定によって異なる。
-
-    * \ ``invalid-session-url``\ 属性の指定がある場合は、セッションを生成した後に\ ``invalid-session-url``\ に指定したパスへリダイレクトされる。
-    * \ ``invalid-session-url``\ 属性の指定がない場合は、\ ``<access-denied-handler>``\ 要素に指定した\ ``org.springframework.security.web.access.AccessDeniedHandler``\ の定義に従ったハンドリングが行われる。
-
-    CSRFトークンのチェック対象外のリクエストに対してセッションタイムアウトを検出する必要がある場合は、
-    \ ``<session-management>``\ 要素の\ ``invalid-session-url``\ 属性を指定して検出すればよい。
-    詳細は、「:ref:`authentication_session-timeout`」を参照されたい。
-
-|
-
-.. _csrf_403-webxml-setting:
-
-.. note::
-
-  **<sec:access-denied-handler>の設定を省略した場合のエラーハンドリングについて**
-
-  web.xmlに以下の設定を行うことで、任意のページに遷移させることができる。
-
-  **web.xml**
-
-    .. code-block:: xml
-
-        <error-page>
-            <error-code>403</error-code>  <!-- (1) -->
-            <location>/WEB-INF/views/common/error/accessDeniedError.jsp</location>  <!-- (2) -->
-        </error-page>
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (2)
+      - | Spring Securityは、CSRFトークンを生成しHTTPセッションに格納する。
+        | 生成したCSRFトークンは、HTMLフォームのhiddenタグを使ってクライアントと連携する。
+    * - | (3)
+      - | クライアントは、HTMLフォーム内のボタンを押下してアプリケーションサーバーにリクエストを送信する。
+        | HTMLフォーム内のhidden項目にCSRFトークンが埋め込まれているため、CSRFトークン値はリクエストパラメータとして送信される。
+    * - | (4)
+      - | Spring Securityは、HTTPのPOSTメソッドを使ってアクセスされた際は、リクエストパラメータに指定されたCSRFトークン値とHTTPセッション内に保持しているCSRFトークン値が同じ値であることをチェックする。
+        | トークン値が一致しない場合は、不正なリクエスト(攻撃者からのリクエスト)としてエラーを発生させる。
+    * - | (5)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (6)
+      - | Spring Securityは、GETメソッドを使ってアクセスされた際は、CSRFトークン値のチェックは行わない。
+
+.. note:: **Ajax使用時のCSRFトークン**
+
+    Spring Securityは、リクエストヘッダにCSRFトークン値を設定することができるため、Ajax向けのリクエストなどに対してCSRF対策を行うことが可能である。
+
+.. _csrf_ckeck-target:
+
+トークンチェックの対象リクエスト
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-    .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-    .. list-table::
-       :header-rows: 1
-       :widths: 10 90
+Spring Securityのデフォルト実装では、以下のHTTPメソッドを使用したリクエストに対して、CSRFトークンチェックを行う。
 
-       * - 項番
-         - 説明
-       * - | (1)
-         - | error-code要素に、ステータスコード403を設定する。
-       * - | (2)
-         - | location要素に、遷移先のパスを設定する。
+* POST
+* PUT
+* DELETE
+* PATCH
 
-.. _csrf_change-httpstatus403:
+.. note:: **CSRFトークンチェックを行わない理由**
 
-.. note::
+    GET, HEAD, OPTIONS, TRACE メソッドがチェック対象外となっている理由は、これらのメソッドがアプリケーションの状態を変更するようなリクエストを実行するためのメソッドではないためである。
 
-  **ステータスコード403以外を返却したい場合**
+.. _csrf_spring-security-setting:
 
-  リクエストに含まれるCSRFトークンが一致しない場合、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを
-  実装した、独自のAccessDeniedHandlerを作成する必要がある。
+How to use
+--------------------------------------------------------------------------------
 
-.. _csrf_spring-mvc-setting:
+CSRF対策機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-spring-mvc.xmlの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用し、Springのタグライブラリの\ ``<form:form>``\ タグを使うことで、自動的にCSRFトークンを、hiddenに埋め込むことができる。
 
+* spring-mvc.xmlの設定例
+
 .. code-block:: xml
-   :emphasize-lines: 1-2,5-6
 
     <bean id="requestDataValueProcessor"
         class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor"> <!-- (1)  -->
@@ -248,74 +132,88 @@ CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``org.terasoluna.gfw.web.mvc.support.RequestDataValueProcessor``\ を複数定義可能な
+     - | \ 共通ライブラリから提供されている、\ ``org.springframework.web.servlet.support.RequestDataValueProcessor``\ を複数定義可能な
        | \ ``org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor``\ をbean定義する。
    * - | (2)
      - | コンストラクタの第1引数に、\ ``org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor``\ のbean定義を設定する。
 
-.. note::
+Spring Security 4.0からは、上記設定により、デフォルトでCSRF対策機能が有効となる。このため、CSRF対策機能を適用したくない場合は、明示的に無効化する必要がある。 
 
-  CSRFトークンの生成及びチェックは \ ``<sec:csrf />``\ の設定で有効になる \ ``CsrfFilter``\ により行われるので、開発者はControllerで特にCSRF対策は意識しなくてよい。
+CSRF対策機能を使用しない場合は、以下のようなbean定義を行う。
 
-.. _csrf_form-tag-token-send:
+* spring-security.xmlの定義例
 
-フォームによるCSRFトークンの送信
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:csrf disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
+        <!-- omitted -->
+    </sec:http>
 
-JSPで、フォームからCSRFトークンを送信するには
+CSRFトークン値の連携
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-* \ ``<form:form>``\ タグを使用してCSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを自動的に追加する
-* \ ``<sec:csrfInput/>``\ タグを使用してCSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを明示的に追加する
+Spring Securityは、CSRFトークン値をクライアントとサーバー間で連携する方法として、以下の2種類の方法を提供している。
 
-のどちらかを行う必要がある。
+* HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する
+* HTMLのmetaタグとしてCSRFトークンの情報を出力し、Ajax通信時にリクエストヘッダにトークン値を設定して連携する
 
-.. _csrf_formformtag-use:
+.. _csrf_formtag-use:
 
-CSRFトークンを自動で埋め込む方法
+Spring MVCを使用した連携
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-\ :ref:`spring-mvc.xmlの設定<csrf_spring-mvc-setting>`\ の通り、\ ``CsrfRequestDataValueProcessor``\ が定義されている場合、
-\ ``<form:form>``\ タグを使うことで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが、自動的に追加される。
+Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
+ここでは、CSRF対策機能と連携するためのコンポーネントの使い方を説明する。
 
-JSPで、CSRFトークンを意識する必要はない。
+hidden項目の自動出力
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
-.. code-block:: jsp
+HTMLフォームを作成する際は、以下のようなJSPの実装を行う。
 
-    <form:form method="POST"
-      action="${pageContext.request.contextPath}/csrfTokenCheckExample">
-      <input type="submit" name="second" value="second" />
-    </form:form>
+* JSPの実装例
 
-以下のようなHTMLが、出力される。
+.. code-block:: jsp
 
-.. code-block:: html
+    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
 
-    <form action="/terasoluna/csrfTokenCheckExample" method="POST">
-      <input type="submit" name="second" value="second" />
-      <input type="hidden" name="_csrf" value="dea86ae8-58ea-4310-bde1-59805352dec7" /> <!-- (1) -->
-    </form>
+    <c:url var="loginUrl" value="/login"/>
+    <form:form action="${loginUrl}"> <!-- (1) -->
+        <!-- omitted -->
+    </form:form>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Spring Securityのデフォルト実装では、\ ``name``\ 属性に\ ``_csrf``\ が設定されている \ ``<input type="hidden">``\ タグが追加され、CSRFトークンが埋め込まれる。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLフォームを作成する際は、Spring MVCから提供されている\ ``<form:form>``\ 要素を使用する。
 
+Spring MVCから提供されている\ ``<form:form>``\ 要素を使うと、以下のようなHTMLフォームが作成される。
 
-CSRFトークンはログインのタイミングで生成される。
+* HTMLの出力例
 
-.. tip::
+.. code-block:: html
+
+    <form id="command" action="/login" method="post">
+        <!-- omitted -->
+        <!-- Spring MVCの機能と連携して出力されたCSRFトークン値のhidden項目 -->
+        <div>
+            <input type="hidden"
+                   name="_csrf" value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        </div>
+    </form>
+
+.. tip:: **出力されるCSRFトークンチェック値**
 
-    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、
-    \ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象のHTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、
-    CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、\ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象の
+    HTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
 
-    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、
-    CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
+    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
 
         .. code-block:: jsp
 
@@ -329,110 +227,203 @@ CSRFトークンはログインのタイミングで生成される。
 
     に対応している事を意味しており、セキュアなWebアプリケーション構築の手助けとなる。
 
-.. _csrf_formtag-use:
+.. _csrf_htmlformtag-use:
 
-CSRFトークンを明示的に埋め込む方法
+HTMLフォーム使用時の連携
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-\ ``<form:form>``\ タグを使用しない場合は、明示的に、\ ``<sec:csrfInput/>``\ タグを追加する必要がある。
+\ :ref:`Spring MVCと連携<csrf_formtag-use>` せずに、HTMLフォームを使用してCSRFトークン値を連携することも可能である。
+HTMLフォームを使ってリクエストを送信する場合は、HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する。
 
-\ ``<sec:csrfInput/>``\ タグを使用すると、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+* JSPの実装例
 
 .. code-block:: jsp
 
-    <form method="POST"
-      action="${pageContext.request.contextPath}/csrfTokenCheckExample">
-        <input type="submit" name="second" value="second" />
-        <sec:csrfInput/>  <!-- (1) -->
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <form action="<c:url value="/login" />" method="post">
+        <!-- omitted -->
+        <sec:csrfInput /> <!-- (1) -->
+        <!-- omitted -->
     </form>
 
-以下のようなHTMLが、出力される。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<form>``\ 要素の中に\ ``<sec:csrfInput>``\ 要素を指定する。
+
+Spring Securityから提供されている\ ``<sec:csrfInput>``\ 要素を指定すると、以下のようなhidden項目が出力される。
+HTMLフォーム内にhidden項目を出力することで、CSRFトークン値がリクエストパラメータとして連携される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストパラメータ名は\ ``_csrf``\ になる。
+
+* HTMLの出力例
 
 .. code-block:: html
 
-    <form action="/terasoluna/csrfTokenCheckExample" method="POST">
-      <input type="submit" name="second" value="second" />
-      <input type="hidden" name="_csrf" value="dea86ae8-58ea-4310-bde1-59805352dec7"/>  <!-- (2) -->
+    <form action="/login" method="post">
+        <!-- omitted -->
+        <!-- CSRFトークン値のhidden項目 -->
+        <input type="hidden"
+               name="_csrf"
+               value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        <!-- omitted -->
     </form>
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+.. warning:: **GETメソッド使用時の注意点**
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを出力するために、\ ``<sec:csrfInput/>``\ タグを指定する。
-   * - | (2)
-     - | Spring Securityのデフォルト実装では、\ ``name``\ 属性に\ ``_csrf``\ が設定されている \ ``<input type="hidden">``\ タグが追加され、CSRFトークンが埋め込まれる。
+    HTTPメソッドとしてGETを使用する場合、\ ``<sec:csrfInput>``\ 要素を指定しないこと。
+    \ ``<sec:csrfInput>``\ 要素を指定してしまうと、URLにCSRFトークン値が含まれてしまうため、CSRFトークン値が盗まれるリスクが高くなる。
 
-.. _csrf_default-add-token-method:
+.. _csrf_ajax-token-setting:
 
-.. note::
+Ajax使用時の連携
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-  CSRFトークンチェック対象のリクエスト(デフォルトでは、HTTPメソッドが、GET, HEAD, TRACE, OPTIONS以外の場合)で、CSRFトークンがない、または
-  サーバー上に保存されているトークン値と、送信されたトークン値が異なる場合は、\ ``AccessDeniedHandler``\ によりアクセス拒否処理が行われ、HttpStatusの403が返却される。
-  \ :ref:`spring-security.xmlの設定 <csrf_spring-security-setting>`\ を記述している場合は、指定したエラーページに遷移する。
+Ajaxを使ってリクエストを送信する場合は、HTMLのmetaタグとしてCSRFトークンの情報を出力し、metaタグから取得したトークン値をAjax通信時のリクエストヘッダに設定して連携する。
 
+まず、Spring Securityから提供されているJSPタグライブラリを使用して、HTMLのmetaタグにCSRFトークンの情報を出力する。
 
-.. _csrf_ajax-token-setting:
+* JSPの実装例
 
-AjaxによるCSRFトークンの送信
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``<sec:csrf />``\ の設定で有効になる \ ``CsrfFilter``\ は、前述のようにリクエストパラメータからCSRFトークンを取得するだけでなく、
-| HTTPリクエストヘッダーからもCSRFトークンを取得する。
-| Ajaxを利用する場合はHTTPヘッダーに、CSRFトークンを設定することを推奨する。JSON形式でリクエストを送る場合にも対応できるためである。
+.. code-block:: jsp
 
-.. note::
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
 
-  HTTPヘッダ、リクエストパラメータの両方からCSRFトークンが送信する場合は、HTTPヘッダの値が優先される。
+    <head>
+        <!-- omitted -->
+        <sec:csrfMetaTags /> <!-- (1) -->
+        <!-- omitted -->
+    </head>
 
-| \ :doc:`../ArchitectureInDetail/Ajax`\ で使用した例を用いて、説明を行う。追加で設定が必要な箇所を、ハイライトしている。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-**jspの実装例**
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<head>``\ 要素内に\ ``<sec:csrfMetaTags>``\ 要素を指定する。
 
-.. code-block:: jsp
-   :emphasize-lines: 3-4
+\ ``<sec:csrfMetaTags>``\ 要素を指定すると、以下のようなmetaタグが出力される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストヘッダ名は\ ``X-CSRF-TOKEN``\ となる。
+
+* HTMLの出力例
+
+.. code-block:: html
 
-    <!-- omitted -->
     <head>
-      <sec:csrfMetaTags />  <!-- (1) -->
-      <!-- omitted -->
+        <!-- omitted -->
+        <meta name="_csrf_parameter" content="_csrf" />
+        <meta name="_csrf_header" content="X-CSRF-TOKEN" /> <!-- ヘッダ名 -->
+        <meta name="_csrf"
+              content="63845086-6b57-4261-8440-97a3c6fa6b99" /> <!-- トークン値 -->
+        <!-- omitted -->
     </head>
-    <!-- omitted -->
 
-.. code-block:: jsp
-   :emphasize-lines: 3-7
-
-    <script type="text/javascript">
-    var contextPath = "${pageContext.request.contextPath}";
-    var token = $("meta[name='_csrf']").attr("content");  <!-- (2) -->
-    var header = $("meta[name='_csrf_header']").attr("content");  <!-- (3) -->
-    $(document).ajaxSend(function(e, xhr, options) {
-        xhr.setRequestHeader(header, token);  <!-- (4) -->
-    });
+つぎに、JavaScriptを使ってmetaタグからCSRFトークンの情報を取得し、Ajax通信時のリクエストヘッダ
+にCSRFトークン値を設定する。(ここではjQueryを使った実装例となっている)
 
-    $(function() {
-        $('#calcButton').on('click', function() {
-            var $form = $('#calcForm'),
-                 $result = $('#result');
-            $.ajax({
-                url : contextPath + '/sample/calc',
-                type : 'POST',
-                data: $form.serialize(),
-            }).done(function(data) {
-                $result.html('add: ' + data.addResult + '<br>'
-                             + 'subtract: ' + data.subtractResult + '<br>'
-                             + 'multipy: ' + data.multipyResult + '<br>'
-                             + 'divide: ' + data.divideResult + '<br>'); // (5)
-            }).fail(function(data) {
-                // error handling
-                alert(data.statusText);
-            });
+* JavaScriptの実装例
+
+.. code-block:: javascript
+
+    $(function () {
+        var headerName = $("meta[name='_csrf_header']").attr("content"); // (1)
+        var tokenValue = $("meta[name='_csrf']").attr("content"); // (2)
+        $(document).ajaxSend(function(e, xhr, options) {
+            xhr.setRequestHeader(headerName, tokenValue); // (3)
         });
     });
-    </script>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | CSRFトークン値を連携するためのリクエストヘッダ名を取得する。
+    * - | (2)
+      - | CSRFトークン値を取得する。
+    * - | (3)
+      - | リクエストヘッダにCSRFトークン値を設定する。
+
+.. _csrf_token-error-response:
+
+トークンチェックエラー時の遷移先の制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+トークンチェックエラー時の遷移先の制御を行うためには、CSRFトークンチェックエラーに発生する例外である \ ``AccessDeniedException``\ をハンドリングして、その例外に対応した遷移先を指定する。
+
+CSRFのトークンチェックエラー時に発生する例外は以下の通りである。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **CSRFトークンチェックで使用される例外クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - クラス名
+      - 説明
+    * - | \ ``InvalidCsrfTokenException``\
+      - | クライアントから送られたトークン値と、サーバー側で保持しているトークン値が一致しない場合に使用する例外クラス（主に不正なリクエスト）。
+    * - | \ ``MissingCsrfTokenException``\
+      - | サーバー側にトークン値が保存されていない場合に使用する例外クラス（主にセッション切れ）。
+
+\ ``DelegatingAccessDeniedHandler``\クラスを使用して上記の例外をハンドリングし、それぞれに \ ``AccessDeniedHandler``\ インタフェースの実装クラスを割り当てることで、例外毎の遷移先を設定することが可能である。
+
+CSRFトークンチェックエラー時に専用のエラー画面（JSP）に遷移させたい場合は、以下のようなBean定義を行う。(以下の定義例は、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ からの抜粋である)
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+    <bean id="accessDeniedHandler"
+        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (2) -->
+        <constructor-arg index="0">  <!-- (3) -->
+            <map>
+                <!-- (4) -->
+                <entry
+                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+                <!-- (5) -->
+                <entry
+                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+            </map>
+        </constructor-arg>
+        <!-- (6) -->
+        <constructor-arg index="1">
+            <bean
+                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                <property name="errorPage"
+                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />
+            </bean>
+        </constructor-arg>
+    </bean>
+
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
@@ -442,32 +433,53 @@ AjaxによるCSRFトークンの送信
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``<sec:csrfMetaTags />``\ タグを設定することにより、デフォルトでは、以下の\ ``meta``\ タグが出力される。
-
-       * \ ``<meta name="_csrf_parameter" content="_csrf" />``\
-       * \ ``<meta name="_csrf_header" content="X-CSRF-TOKEN" />``\
-       * \ ``<meta name="_csrf" content="dea86ae8-58ea-4310-bde1-59805352dec7" />``\ (\ ``content``\ 属性の値はランダムなUUIDが設定される)
+     - | \ ``<sec:access-denied-handler>``\ タグのref属性に、Exception毎の制御を行うための\ ``AccessDeniedHandler``\ のBean名を指定する。
+       | エラー時遷移先が全て同じ画面である場合は ``error-page`` 属性に遷移先を指定すればよい。
+       | \ ``<sec:access-denied-handler>``\でハンドリングしない場合は、\ :ref:`SpringSecurityAuthorizationOnError`\ を参照されたい。
    * - | (2)
-     - | \ ``<meta name="_csrf">``\ タグに設定されたCSRFトークンを取得する。
+     - | \ ``DelegatingAccessDeniedHandler``\ を使用して、発生した例外（ \ ``AccessDeniedException``\ サブクラス ） と例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）を定義する。
    * - | (3)
-     - | \ ``<meta name="_csrf_header">``\ タグに設定されたCSRFヘッダ名を取得する。
+     - | コンストラクタの第1引数で、個別に遷移先を指定したい例外（ \ ``AccessDeniedException``\ サブクラス ）と、対応する例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）をMap形式で定義する。
    * - | (4)
-     - | リクエストヘッダーに、\ ``<meta>``\ タグから取得したヘッダ名(デフォルト:X-CSRF-TOKEN)、CSRFトークンの値を設定する。
+     - | \ ``key``\ に \ ``AccessDeniedException``\ のサブクラスを指定する。
+       | \ ``value`` として、\ ``AccessDeniedHandler``\ の実装クラスである、 \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
+       | \ ``property``\ の \ ``name``\ に \ ``errorPage``\ を指定し、\ ``value``\ に表示するviewを指定する。
+       | マッピングするExceptionに関しては、:ref:`csrf_token-error-response` を参照されたい。
    * - | (5)
-     - | この書き方はXSSの可能性があるので、実際にJavaScriptコードを書くときは気を付けること。
-       | 今回の例では\ ``data.addResult``\ 、\ ``data.subtractResult``\ 、\ ``data.multipyResult``\ 、\ ``data.divideResult``\ の全てが数値型であるため、問題ない。
+     - | (4)のExceptionと異なるExceptionを制御したい場合に定義する。
+       | 本例では \ ``InvalidCsrfTokenException``\ 、\ ``MissingCsrfTokenException``\ それぞれに異なる遷移先を設定している。
+   * - | (6)
+     - | コンストラクタの第2引数で、デフォルト例外（(4)(5)で指定していない \ ``AccessDeniedException``\のサブクラス）時の例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）と遷移先を指定する。
 
-JSONでリクエストを送信する場合も、同様にHTTPヘッダを設定すればよい。
 
-.. todo::
+.. note:: **無効なセッションを使ったリクエストの検知**
 
-  \ :doc:`../ArchitectureInDetail/Ajax`\ 対応する例がなくなっているため、例を直す。
+    セッション管理機能の「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効にしている場合は、\ ``MissingCsrfTokenException``\ に対して「:ref:`SpringSecuritySessionDetectInvalidSession`」処理と連動する\ ``AccessDeniedHandler``\ インタフェースの実装クラスが適用される。
+
+    そのため、\ ``MissingCsrfTokenException``\ が発生すると、「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効化する際に指定したパス(\ ``invalid-session-url``\ )にリダイレクトする。
+
+.. note::
+
+  **ステータスコード403以外を返却したい場合**
+
+  リクエストに含まれるCSRFトークンが一致しない場合に、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを実装した、独自のAccessDeniedHandlerを作成する必要がある。
+
+|
+
+Appendix
+--------------------------------------------------------------------------------
 
 マルチパートリクエスト(ファイルアップロード)時の留意点
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-| マルチパートリクエストを送る場合、アプリケーションサーバによって、アップロードで許容する最大サイズを超えた場合の動作が異なる。
-| アプリケーションサーバによる差異を無くすために、 \ ``org.springframework.web.multipart.support.MultipartFilter``\を使用する。
+マルチパートリクエストを送信する場合は、以下の方法によって、CSRFトークンを取得できるようにする必要がある。
+
+* \ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用する
+* クエリのパラメータでCSRFトークンを送信する
+
+.. note::
+
+    それぞれメリット・デメリットが存在するため、システム要件を考慮して、採用する対策方法を決めて頂きたい。
 
 ファイルアップロードの詳細については、\ :doc:`FileUpload <../ArchitectureInDetail/FileUpload>`\ を参照されたい。
 
@@ -476,30 +488,36 @@ JSONでリクエストを送信する場合も、同様にHTTPヘッダを設定
 
 MultipartFilterを使用する方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-.. warning::
 
-    \ ``MultipartFilter``\ を使用した場合、\ ``springSecurityFilterChain``\による認証・認可処理が行われる前にアップロード処理が行われるため、
-    認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容してしまう。
-    認証・認可前のアップロードを防ぐ必要がある場合は、後述の\ :ref:`csrf_token-send-using-query-parameter`\ を参照されたい。
+マルチパートリクエストを送信する場合、ファイルアップロードで許容する最大サイズを超えた場合の動作が、アプリケーションサーバによって異なる。
+\ ``org.springframework.web.multipart.support.MultipartFilter``\を使用することで、アプリケーションサーバ依存を無くすことができる。
 
-\ ``MultipartFilter``\ を使用するには、以下のように設定すればよい。
 
-**web.xmlの設定例**
+.. warning:: **MultipartFilterを使用する際の留意点**
+
+    \ ``MultipartFilter``\ を使用した場合、\ ``springSecurityFilterChain``\による認証・認可処理が行われる前にアップロード処理が行われるため、認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容してしまうことになる。
+
+\ ``MultipartFilter``\ を使用するには、以下のように設定する。
+
+* web.xmlの設定例
 
 .. code-block:: xml
 
+    <!-- (1) -->
     <filter>
         <filter-name>MultipartFilter</filter-name>
-        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class> <!-- (1) -->
-    </filter>
-    <filter>
-        <filter-name>springSecurityFilterChain</filter-name> <!-- (2) -->
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
     </filter>
     <filter-mapping>
         <filter-name>MultipartFilter</filter-name>
         <servlet-name>/*</servlet-name>
     </filter-mapping>
+
+    <!-- (2) -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+    </filter>
     <filter-mapping>
         <filter-name>springSecurityFilterChain</filter-name>
         <url-pattern>/*</url-pattern>
@@ -517,12 +535,13 @@ MultipartFilterを使用する方法
    * - | (2)
      - | \ ``springSecurityFilterChain``\ より前に、\ ``MultipartFilter``\ を定義すること。
 
-**JSPの実装例**
+* JSPの実装例
 
 .. code-block:: jsp
 
+    <!-- (1) -->
     <form:form action="${pageContext.request.contextPath}/fileupload"
-        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data">  <!-- (1) -->
+        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data">  
         <table>
             <tr>
                 <td width="65%"><form:input type="file" path="uploadFile" /></td>
@@ -541,45 +560,35 @@ MultipartFilterを使用する方法
    * - 項番
      - 説明
    * - | (1)
-     - | spring-mvc.xmlの設定の通り、\ ``CsrfRequestDataValueProcessor``\ が定義されている場合、
-       | \ ``<form:form>``\ タグを使うことで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが自動的に追加されるため、
-       | JSPの実装で、CSRFトークンを意識する必要はない。
+     - | \ ``<form:form>``\ タグを使用することで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが自動的に追加されるため、JSPの実装でCSRFトークンを意識する必要はない。
        |
-       | **<form> タグを使用する場合**
-       | \ :ref:`csrf_formtag-use`\ でCSRFトークンを設定すること。
+       | **<html> タグを使用する場合**
+       | :ref:`csrf_htmlformtag-use`\ を参照して、CSRFトークンを設定すること。
 
-.. _csrf_token-send-using-query-parameter:
 
 クエリパラメータでCSRFトークンを送る方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を防ぎたい場合は、
-\ ``MultipartFilter``\ は使用せず、クエリパラメータでCSRFトークンを送る必要がある。
+認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を防ぎたい場合は、\ ``MultipartFilter``\ は使用せず、クエリパラメータでCSRFトークンを送る必要がある。
 
-.. warning::
+.. warning:: **クエリパラメータでCSRFトークンを送る際の留意点**
 
-    この方法でCSRFトークンを送った場合、
+    この場合、web.xmlの<error-page>機能を使って別途エラーハンドリングの設定が必要になる。
+    この方法でCSRFトークンを送信した場合、以下の危険性があるため、\ ``MultipartFilter``\ を使用する方法と比べると、攻撃者にCSRFトークンを悪用されるリスクが高くなる。
+    なお、Spring Securityのデフォルト実装では、CSRFトークンの値としてランダムなUUIDを生成しているため、仮にCSRFトークンが漏洩してもセッションハイジャックされる事はないという点を補足しておく。
 
     * ブラウザのアドレスバーにCSRFトークンが表示される
     * ブックマークした場合、ブックマークにCSRFトークンが記録される
     * WebサーバのアクセスログにCSRFトークンが記録される
 
-    ため、\ ``MultipartFilter``\ を使用する方法と比べると、攻撃者にCSRFトークンを悪用されるリスクが高くなる。
-
-    Spring Securityのデフォルト実装では、CSRFトークンの値としてランダムなUUIDを生成しているため、
-    仮にCSRFトークンが漏洩してもセッションハイジャックされる事はないという点を補足しておく。
-
-.. warning::
-
-   WebLogic など一部のアプリケーションサーバでは、\ ``MultipartFilter``\ を使用しないと、
-   java.lang.IllegalStateExceptionが事前に発生してしまうため、CSRFトークンチェック前に
-   異なるエラーになる。
-   この場合、web.xmlの<error-page>機能を使って別途エラーハンドリングの設定が必要になる。
+    また、WebLogic など一部のアプリケーションサーバでは、\ ``MultipartFilter``\ を使用しないと、
+    java.lang.IllegalStateExceptionが事前に発生してしまうため、CSRFトークンチェック前に
+    異なるエラーになる。この場合、web.xmlの<error-page>機能を使って別途エラーハンドリングの設定が必要になる。
 
 
 以下に、CSRFトークンをクエリパラメータとして送る実装例を示す。
 
-**JSPの実装例**
+* JSPの実装例
 
 .. code-block:: jsp
 
@@ -603,9 +612,7 @@ MultipartFilterを使用する方法
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``<form:form>``\ タグのaction属性に、以下のクエリを付与する必要がある。
-       | \ ``?${f:h(_csrf.parameterName)}=${f:h(_csrf.token)}``\
-       | \ ``<form>``\ タグを使用する場合も、同様の設定が必要である。
+     - | \ ``<form:form>``\ タグのaction属性に、CSRFトークンのパラメータ名と、CSRFトークン値をクエリパラメタとして付加する。
 
 .. raw:: latex
 
