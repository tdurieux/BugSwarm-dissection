diff --git a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
index 5da4b6cb94..b5e5b2be57 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
@@ -43,6 +43,7 @@
 import org.sonar.java.checks.naming.MethodNamedEqualsCheck;
 import org.sonar.java.checks.naming.MethodNamedHashcodeOrEqualCheck;
 import org.sonar.java.checks.security.AESAlgorithmCheck;
+import org.sonar.java.checks.security.CookieShouldNotContainSensitiveDataCheck;
 import org.sonar.java.checks.security.HostnameVerifierImplementationCheck;
 import org.sonar.java.checks.security.IntegerToHexStringCheck;
 import org.sonar.java.checks.security.LDAPDeserializationCheck;
@@ -304,6 +305,7 @@ private CheckList() {
       .add(ToStringReturningNullCheck.class)
       .add(TransactionalMethodVisibilityCheck.class)
       .add(CompareToResultTestCheck.class)
+      .add(CookieShouldNotContainSensitiveDataCheck.class)
       .add(SecureCookieCheck.class)
       .add(CatchIllegalMonitorStateExceptionCheck.class)
       .add(ForLoopTerminationConditionCheck.class)
diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheck.java
new file mode 100755
index 0000000000..35644bad88
--- /dev/null
+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheck.java
@@ -0,0 +1,76 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+package org.sonar.java.checks.security;
+
+import java.util.Arrays;
+import java.util.List;
+import org.sonar.check.Rule;
+import org.sonar.java.checks.methods.AbstractMethodDetection;
+import org.sonar.java.matcher.MethodMatcher;
+import org.sonar.java.matcher.TypeCriteria;
+
+import org.sonar.plugins.java.api.tree.MethodInvocationTree;
+import org.sonar.plugins.java.api.tree.NewClassTree;
+import org.sonar.plugins.java.api.tree.Tree.Kind;
+
+@Rule(key = "S2255")
+public class CookieShouldNotContainSensitiveDataCheck extends AbstractMethodDetection {
+
+  private static final String SERVLET_COOKIE = "javax.servlet.http.Cookie";
+  private static final String NET_HTTP_COOKIE = "java.net.HttpCookie";
+  private static final String JAX_RS_COOKIE = "javax.ws.rs.core.Cookie";
+
+  private static final int VALUE_PARAM_INDEX = 1;
+
+  private static final String MESSAGE = "If the data stored in this cookie is sensitive, it should be stored internally in the user session.";
+
+  @Override
+  protected List<MethodMatcher> getMethodInvocationMatchers() {
+    return Arrays.asList(
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(SERVLET_COOKIE)).name("<init>").withAnyParameters(),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(SERVLET_COOKIE)).name("setValue").withAnyParameters(),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(NET_HTTP_COOKIE)).name("<init>").withAnyParameters(),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(NET_HTTP_COOKIE)).name("setValue").withAnyParameters(),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_COOKIE)).name("<init>").withAnyParameters());
+  }
+
+  @Override
+  protected void onConstructorFound(NewClassTree newClassTree) {
+    if (newClassTree.arguments().size() <= VALUE_PARAM_INDEX) {
+      return;
+    }
+    if (hasNameValueParameters(newClassTree)) {
+      reportIssue(newClassTree.arguments().get(VALUE_PARAM_INDEX), MESSAGE);
+    }
+  }
+
+  @Override
+  protected void onMethodInvocationFound(MethodInvocationTree methodTree) {
+    if (methodTree.arguments().size() != 1) {
+      return;
+    }
+    reportIssue(methodTree.methodSelect(), MESSAGE);
+  }
+
+  // this treats the corner case javax.ws.rs.core.NewCookie
+  private boolean hasNameValueParameters(NewClassTree newClassTree) {
+    return newClassTree.arguments().get(0).is(Kind.STRING_LITERAL);
+  }
+}
diff --git a/java-checks/src/test/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheckTest.java
index 7285d9b94e..7aa72998b6 100755
--- a/java-checks/src/test/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheckTest.java
+++ b/java-checks/src/test/java/org/sonar/java/checks/security/CookieShouldNotContainSensitiveDataCheckTest.java
@@ -20,7 +20,7 @@
 package org.sonar.java.checks.security;
 
 import org.junit.Test;
-import org.sonar.java.checks.CookieShouldNotContainSensitiveDataCheck;
+import org.sonar.java.checks.security.CookieShouldNotContainSensitiveDataCheck;
 import org.sonar.java.checks.verifier.JavaCheckVerifier;
 
 public class CookieShouldNotContainSensitiveDataCheckTest {
