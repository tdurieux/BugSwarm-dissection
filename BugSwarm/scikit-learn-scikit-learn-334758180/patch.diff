diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py
index 27066ddeef..7fd8b43af1 100755
--- a/sklearn/neighbors/base.py
+++ b/sklearn/neighbors/base.py
@@ -328,7 +328,7 @@ def _fit(self, X):
             self._fit_method = 'kd_tree'
             return self
 
-        if self.effective_metric_ == 'precomputed':
+        if getattr(self, 'effective_metric_', '') == 'precomputed':
             X = _check_precomputed(X)
         else:
             X = check_array(X, accept_sparse='csr')
@@ -462,7 +462,7 @@ class from an array representing our data set and ask who's
 
         if X is not None:
             query_is_train = False
-            if self.effective_metric_ == 'precomputed':
+            if getattr(self, 'effective_metric_', '') == 'precomputed':
                 X = _check_precomputed(X)
             else:
                 X = check_array(X, accept_sparse='csr')
@@ -611,7 +611,7 @@ def kneighbors_graph(self, X=None, n_neighbors=None,
 
         # kneighbors does the None handling.
         if X is not None:
-            if self.effective_metric_ == 'precomputed':
+            if getattr(self, 'effective_metric_', '') == 'precomputed':
                 X = _check_precomputed(X)
             else:
                 X = check_array(X, accept_sparse='csr')
@@ -717,7 +717,7 @@ class from an array representing our data set and ask who's
 
         if X is not None:
             query_is_train = False
-            if self.effective_metric_ == 'precomputed':
+            if getattr(self, 'effective_metric_', '') == 'precomputed':
                 X = _check_precomputed(X)
             else:
                 X = check_array(X, accept_sparse='csr')
@@ -846,7 +846,7 @@ def radius_neighbors_graph(self, X=None, radius=None, mode='connectivity'):
         kneighbors_graph
         """
         if X is not None:
-            if self.effective_metric_ == 'precomputed':
+            if getattr(self, 'effective_metric_', '') == 'precomputed':
                 X = _check_precomputed(X)
             else:
                 X = check_array(X, accept_sparse=['csr', 'csc', 'coo'])
