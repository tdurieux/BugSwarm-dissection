diff --git a/pom.xml b/pom.xml
index 32fe889abc..e4345df434 100755
--- a/pom.xml
+++ b/pom.xml
@@ -205,7 +205,7 @@
     <pmd.version>5.8.1</pmd.version>
     <maven.jacoco.plugin.version>0.7.9</maven.jacoco.plugin.version>
     <maven.checkstyle.plugin.version>2.17</maven.checkstyle.plugin.version>
-    <maven.sevntu.checkstyle.plugin.version>1.24.0</maven.sevntu.checkstyle.plugin.version>
+    <maven.sevntu.checkstyle.plugin.version>1.24.1</maven.sevntu.checkstyle.plugin.version>
     <maven.sevntu-checkstyle-check.checkstyle.version>8.0</maven.sevntu-checkstyle-check.checkstyle.version>
     <maven.versions.plugin.version>2.4</maven.versions.plugin.version>
     <java.version>1.8</java.version>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 616c20fa74..63cc685f39 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -110,11 +110,6 @@
     /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
-    /** The checker threads number. */
-    private int checkerThreadsNumber = 1;
-    /** The tree walker threads number. */
-    private int treeWalkerThreadsNumber = 1;
-
     /**
      * Whether to execute ignored modules - some modules may log above
      * their severity depending on their configuration (e.g. WriteTag) so
@@ -252,22 +247,6 @@ public void setExecuteIgnoredModules(boolean omit) {
         executeIgnoredModules = omit;
     }
 
-    /**
-     * Sets checker threads number.
-     * @param checkerThreadsNumber The checker threads number.
-     */
-    public void setCheckerThreadsNumber(int checkerThreadsNumber) {
-        this.checkerThreadsNumber = checkerThreadsNumber;
-    }
-
-    /**
-     * Sets tree walker threads number.
-     * @param treeWalkerThreadsNumber The tree walker threads number.
-     */
-    public void setTreeWalkerThreadsNumber(int treeWalkerThreadsNumber) {
-        this.treeWalkerThreadsNumber = treeWalkerThreadsNumber;
-    }
-
     ////////////////////////////////////////////////////////////////////////////
     // Setters for Root Module's configuration attributes
     ////////////////////////////////////////////////////////////////////////////
@@ -414,7 +393,7 @@ private RootModule createRootModule() {
         try {
             final Properties props = createOverridingProperties();
             final ThreadModeSettings threadModeSettings =
-                    new ThreadModeSettings(checkerThreadsNumber, treeWalkerThreadsNumber);
+                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;
             final Configuration configuration = ConfigurationLoader.loadConfiguration(
                     config, new PropertiesExpander(props),
                     !executeIgnoredModules, threadModeSettings);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index 2f64f71175..75e46e059c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -28,6 +28,7 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Properties;
@@ -413,12 +414,9 @@ public void testExternalEntityFromUri() throws Exception {
     public void testIncorrectTag() throws Exception {
         try {
             final Class<?> aClassParent = ConfigurationLoader.class;
-            Constructor<?> ctorParent = null;
-            final Constructor<?>[] parentConstructors = aClassParent.getDeclaredConstructors();
-            for (Constructor<?> parentConstructor: parentConstructors) {
-                parentConstructor.setAccessible(true);
-                ctorParent = parentConstructor;
-            }
+            final Constructor<?> ctorParent = aClassParent.getDeclaredConstructor(
+                    PropertyResolver.class, boolean.class, ThreadModeSettings.class);
+            ctorParent.setAccessible(true);
             final Class<?> aClass = Class.forName("com.puppycrawl.tools.checkstyle."
                     + "ConfigurationLoader$InternalLoader");
             Constructor<?> constructor = null;
@@ -446,6 +444,31 @@ public void testIncorrectTag() throws Exception {
         }
     }
 
+    @Test
+    public void testPrivateConstructorWithPropertyResolverAndOmitIgnoreModules() throws Exception {
+        final Class<?> configurationLoaderClass = ConfigurationLoader.class;
+        final Constructor<?> configurationLoaderCtor =
+                configurationLoaderClass.getDeclaredConstructor(
+                        PropertyResolver.class, boolean.class);
+        configurationLoaderCtor.setAccessible(true);
+
+        final Properties properties = new Properties();
+        final PropertyResolver propertyResolver = new PropertiesExpander(properties);
+        final ConfigurationLoader configurationLoader =
+                (ConfigurationLoader) configurationLoaderCtor.newInstance(
+                        propertyResolver, true);
+
+        final Field overridePropsResolverField =
+                configurationLoaderClass.getDeclaredField("overridePropsResolver");
+        overridePropsResolverField.setAccessible(true);
+        assertEquals(propertyResolver, overridePropsResolverField.get(configurationLoader));
+
+        final Field omitIgnoredModulesField =
+                configurationLoaderClass.getDeclaredField("omitIgnoredModules");
+        omitIgnoredModulesField.setAccessible(true);
+        assertEquals(true, omitIgnoredModulesField.get(configurationLoader));
+    }
+
     @Test
     public void testNonExistingPropertyName() {
         try {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
index 100330f0ca..188134e982 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
@@ -57,7 +57,6 @@
 
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
-import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.DefaultLogger;
 import com.puppycrawl.tools.checkstyle.Definitions;
 import com.puppycrawl.tools.checkstyle.PackageNamesLoader;
@@ -663,45 +662,6 @@ public void testPackageNamesLoaderStreamClosed() throws CheckstyleException {
         Closeables.closeQuietly(any(InputStream.class));
     }
 
-    @Test
-    public void testDefaultThreadsConfiguration() throws Exception {
-        final CheckstyleAntTask antTask = getCheckstyleAntTask(CUSTOM_ROOT_CONFIG_FILE);
-        antTask.setFile(new File(getPath(FLAWLESS_INPUT)));
-        antTask.setCheckerThreadsNumber(1);
-        antTask.execute();
-
-        final DefaultConfiguration testConfig =
-                (DefaultConfiguration) TestRootModuleChecker.getConfig();
-        assertThat(testConfig.getThreadModeSettings().getCheckerThreadsNumber(), is(1));
-        assertThat(testConfig.getThreadModeSettings().getTreeWalkerThreadsNumber(), is(1));
-    }
-
-    @Test
-    public void testSetCheckerThreadsNumber() throws Exception {
-        final CheckstyleAntTask antTask = getCheckstyleAntTask(CUSTOM_ROOT_CONFIG_FILE);
-        antTask.setFile(new File(getPath(FLAWLESS_INPUT)));
-        antTask.setCheckerThreadsNumber(4);
-        antTask.execute();
-
-        final DefaultConfiguration testConfig =
-                (DefaultConfiguration) TestRootModuleChecker.getConfig();
-        assertThat(testConfig.getThreadModeSettings().getCheckerThreadsNumber(), is(4));
-        assertThat(testConfig.getThreadModeSettings().getTreeWalkerThreadsNumber(), is(1));
-    }
-
-    @Test
-    public void testSetTreeWalkerCheckerNumber() throws Exception {
-        final CheckstyleAntTask antTask = getCheckstyleAntTask(CUSTOM_ROOT_CONFIG_FILE);
-        antTask.setFile(new File(getPath(FLAWLESS_INPUT)));
-        antTask.setTreeWalkerThreadsNumber(4);
-        antTask.execute();
-
-        final DefaultConfiguration testConfig =
-                (DefaultConfiguration) TestRootModuleChecker.getConfig();
-        assertThat(testConfig.getThreadModeSettings().getCheckerThreadsNumber(), is(1));
-        assertThat(testConfig.getThreadModeSettings().getTreeWalkerThreadsNumber(), is(4));
-    }
-
     private static class CheckstyleAntTaskStub extends CheckstyleAntTask {
         @Override
         protected List<File> scanFileSets() {
diff --git a/wercker.yml b/wercker.yml
index 31bbdb5d81..7a3f4ae798 100755
--- a/wercker.yml
+++ b/wercker.yml
@@ -150,18 +150,18 @@ build:
           echo "build is skipped ..."
         fi
 
-#  # NoErrorTest - checkstyle's sevntu
-#  - script:
-#      name: NoErrorTest - checkstyle's sevntu
-#      code: |
-#        if [[ $SKIP_CI == 'false' ]]; then
-#          set -e
-#          CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
-#          echo CS_version: ${CS_POM_VERSION}
-#          mvn compile verify -Dmaven.sevntu-checkstyle-check.checkstyle.version=${CS_POM_VERSION} -Dmaven.test.skip=true -Dcheckstyle.ant.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -Dforbiddenapis.skip=true -Dxml.skip=true
-#        else
-#          echo "build is skipped ..."
-#        fi
+  # NoErrorTest - checkstyle's sevntu
+  - script:
+      name: NoErrorTest - checkstyle's sevntu
+      code: |
+        if [[ $SKIP_CI == 'false' ]]; then
+          set -e
+          CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
+          echo CS_version: ${CS_POM_VERSION}
+          mvn compile verify -Dmaven.sevntu-checkstyle-check.checkstyle.version=${CS_POM_VERSION} -Dmaven.test.skip=true -Dcheckstyle.ant.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -Dforbiddenapis.skip=true -Dxml.skip=true
+        else
+          echo "build is skipped ..."
+        fi
 
   # NoExceptiontest - Apache Struts (oraclejdk8)
   - script:
