diff --git a/modules/swagger-core/src/main/java/io/swagger/v3/core/converter/AnnotatedType.java b/modules/swagger-core/src/main/java/io/swagger/v3/core/converter/AnnotatedType.java
index abc31e2d63..f232059369 100755
--- a/modules/swagger-core/src/main/java/io/swagger/v3/core/converter/AnnotatedType.java
+++ b/modules/swagger-core/src/main/java/io/swagger/v3/core/converter/AnnotatedType.java
@@ -194,7 +194,7 @@ public boolean equals(Object o) {
     @Override
     public int hashCode() {
         if (ctxAnnotations == null || ctxAnnotations.length == 0) {
-            return Objects.hash(type);
+            return Objects.hash(type, "fixed");
         }
         List<Annotation> meaningfulAnnotations = new ArrayList<>();
 
@@ -206,9 +206,13 @@ public int hashCode() {
                 hasDifference = true;
             }
         }
+        int result = 1;
+        result = 31 * result + (type == null ? 0 : Objects.hash(type, "fixed"));
         if (hasDifference) {
-            return Objects.hash(type, meaningfulAnnotations);
+            result = 31 * result + (meaningfulAnnotations == null ? 0 : Arrays.hashCode(meaningfulAnnotations.toArray(new Annotation[meaningfulAnnotations.size()])));
+        } else {
+            result = 31 * result + (ctxAnnotations == null ? 0 : Arrays.hashCode(ctxAnnotations));
         }
-        return Objects.hash(type, ctxAnnotations);
+        return result;
     }
 }
diff --git a/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java b/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
index c050ed5285..d4db722537 100755
--- a/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
+++ b/modules/swagger-core/src/main/java/io/swagger/v3/core/jackson/ModelResolver.java
@@ -141,7 +141,13 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
         // if we have a ref we don't consider anything else
         if (resolvedSchemaAnnotation != null &&
                 StringUtils.isNotEmpty(resolvedSchemaAnnotation.ref())) {
-            return new Schema().$ref(resolvedSchemaAnnotation.ref()).name(name);
+            if (resolvedArrayAnnotation == null) {
+                return new Schema().$ref(resolvedSchemaAnnotation.ref()).name(name);
+            } else {
+                ArraySchema schema = new ArraySchema();
+                resolveArraySchema(annotatedType, schema, resolvedArrayAnnotation);
+                return schema.items(new Schema().$ref(resolvedSchemaAnnotation.ref()).name(name));
+            }
         }
 
         if (!annotatedType.isSkipOverride() && resolvedSchemaAnnotation != null && !Void.class.equals(resolvedSchemaAnnotation.implementation())) {
@@ -173,6 +179,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                     .skipOverride(true);
             if (resolvedArrayAnnotation != null) {
                 ArraySchema schema = new ArraySchema();
+                resolveArraySchema(annotatedType, schema, resolvedArrayAnnotation);
                 Schema innerSchema = null;
 
                 Schema primitive = PrimitiveType.createProperty(cls);
@@ -273,6 +280,13 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
                 model.xml(xml);
             }
             resolveSchemaMembers(model, annotatedType);
+
+            if (resolvedArrayAnnotation != null) {
+                ArraySchema schema = new ArraySchema();
+                resolveArraySchema(annotatedType, schema, resolvedArrayAnnotation);
+                schema.setItems(model);
+                return schema;
+            }
             return model;
         }
 
@@ -745,22 +759,7 @@ public Schema resolve(AnnotatedType annotatedType, ModelConverterContext context
         if (model != null && !"array".equals(model.getType()) && resolvedArrayAnnotation != null) {
             ArraySchema schema = new ArraySchema();
             schema.setItems(model);
-            Integer minItems = resolveMinItems(annotatedType, resolvedArrayAnnotation);
-            if (minItems != null) {
-                schema.minItems(minItems);
-            }
-            Integer maxItems = resolveMaxItems(annotatedType, resolvedArrayAnnotation);
-            if (maxItems != null) {
-                schema.maxItems(maxItems);
-            }
-            Boolean uniqueItems = resolveUniqueItems(annotatedType, resolvedArrayAnnotation);
-            if (uniqueItems != null) {
-                schema.uniqueItems(uniqueItems);
-            }
-            Map<String, Object> extensions = resolveExtensions(annotatedType, resolvedArrayAnnotation);
-            if (extensions != null) {
-                schema.extensions(extensions);
-            }
+            resolveArraySchema(annotatedType, schema, resolvedArrayAnnotation);
             return schema;
         }
 
@@ -1811,4 +1810,23 @@ private boolean hiddenByJsonView(Annotation[] annotations,
         }
         return containsJsonViewAnnotation;
     }
+
+    private void resolveArraySchema(AnnotatedType annotatedType, ArraySchema schema, io.swagger.v3.oas.annotations.media.ArraySchema resolvedArrayAnnotation) {
+        Integer minItems = resolveMinItems(annotatedType, resolvedArrayAnnotation);
+        if (minItems != null) {
+            schema.minItems(minItems);
+        }
+        Integer maxItems = resolveMaxItems(annotatedType, resolvedArrayAnnotation);
+        if (maxItems != null) {
+            schema.maxItems(maxItems);
+        }
+        Boolean uniqueItems = resolveUniqueItems(annotatedType, resolvedArrayAnnotation);
+        if (uniqueItems != null) {
+            schema.uniqueItems(uniqueItems);
+        }
+        Map<String, Object> extensions = resolveExtensions(annotatedType, resolvedArrayAnnotation);
+        if (extensions != null) {
+            schema.extensions(extensions);
+        }
+    }
 }
diff --git a/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2740CyclicTest.java b/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2740CyclicTest.java
new file mode 100755
index 0000000000..eaf6856024
--- /dev/null
+++ b/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/Ticket2740CyclicTest.java
@@ -0,0 +1,32 @@
+package io.swagger.v3.core.resolving;
+
+import io.swagger.v3.core.converter.AnnotatedType;
+import io.swagger.v3.core.converter.ModelConverterContextImpl;
+import io.swagger.v3.core.jackson.ModelResolver;
+import io.swagger.v3.core.matchers.SerializationMatchers;
+import io.swagger.v3.core.resolving.resources.MyThing;
+import io.swagger.v3.oas.models.media.Schema;
+import org.testng.annotations.Test;
+
+public class Ticket2740CyclicTest extends SwaggerTestBase {
+    @Test
+    public void testCyclicBean() throws Exception {
+        final ModelResolver modelResolver = new ModelResolver(mapper());
+
+        final ModelConverterContextImpl context = new ModelConverterContextImpl(modelResolver);
+
+        final Schema model = context
+                .resolve(new AnnotatedType(MyThing.class));
+
+        SerializationMatchers.assertEqualsToYaml(model, "type: object\n" +
+                "properties:\n" +
+                "  otherThings:\n" +
+                "    uniqueItems: true\n" +
+                "    type: array\n" +
+                "    description: Other related things\n" +
+                "    items:\n" +
+                "      $ref: '#/components/schemas/MyThing'\n" +
+                "description: Thing");
+    }
+
+}
diff --git a/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/resources/MyThing.java b/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/resources/MyThing.java
new file mode 100755
index 0000000000..61b3913c70
--- /dev/null
+++ b/modules/swagger-core/src/test/java/io/swagger/v3/core/resolving/resources/MyThing.java
@@ -0,0 +1,21 @@
+package io.swagger.v3.core.resolving.resources;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+
+import java.util.HashSet;
+import java.util.Set;
+
+@Schema(description = "Thing")
+public class MyThing {
+    private final Set<MyThing> otherThings;
+
+    public MyThing() {
+        otherThings = new HashSet<>();
+    }
+
+    @Schema(description = "Other related things")
+    public Set<MyThing> getOtherThings() {
+        return otherThings;
+    }
+}
+
