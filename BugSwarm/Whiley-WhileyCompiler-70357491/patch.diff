diff --git a/modules/wyc/src/wyc/testing/AllInvalidTests.java b/modules/wyc/src/wyc/testing/AllInvalidTests.java
index 11e0406451..9bba6b7cb7 100755
--- a/modules/wyc/src/wyc/testing/AllInvalidTests.java
+++ b/modules/wyc/src/wyc/testing/AllInvalidTests.java
@@ -374,37 +374,6 @@ public void Export_Invalid_1() {
 		runTest("Export_Invalid_1");
 	}
 
-	@Test
-	public void For_Invalid_1() {
-		runTest("For_Invalid_1");
-	}
-
-	@Test
-	public void For_Invalid_5() {
-		runTest("For_Invalid_5");
-	}
-
-	@Test
-	public void For_Invalid_6() {
-		runTest("For_Invalid_6");
-	}
-
-	@Test
-	public void For_Invalid_7() {
-		runTest("For_Invalid_7");
-	}
-
-	@Test
-	public void For_Invalid_8() {
-		runTest("For_Invalid_8");
-	}
-
-	@Ignore("#409") @Test
-	public void For_Invalid_9() {
-		runTest("For_Invalid_9");
-	}
-
-
 	@Test
 	public void FunctionRef_Invalid_1() {
 		runTest("FunctionRef_Invalid_1");
@@ -480,11 +449,6 @@ public void If_Invalid_2() {
 		runTest("If_Invalid_2");
 	}
 
-	@Test
-	public void If_Invalid_3() {
-		runTest("If_Invalid_3");
-	}
-
 	@Test
 	public void If_Invalid_4() {
 		runTest("If_Invalid_4");
diff --git a/modules/wyc/src/wyc/testing/AllValidTests.java b/modules/wyc/src/wyc/testing/AllValidTests.java
index 2642972bab..5b9740ba40 100755
--- a/modules/wyc/src/wyc/testing/AllValidTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidTests.java
@@ -1304,11 +1304,6 @@ public void ListLength_Valid_3() throws IOException {
 		runTest("ListLength_Valid_3");
 	}
 
-	@Test
-	public void ListRange_Valid_1() throws IOException {
-		runTest("ListRange_Valid_1");
-	}
-
 	@Test
 	public void ListSublist_Valid_1() throws IOException {
 		runTest("ListSublist_Valid_1");
@@ -1559,11 +1554,6 @@ public void Quantifiers_Valid_1() throws IOException {
 		runTest("Quantifiers_Valid_1");
 	}
 
-	@Test
-	public void Range_Valid_1() throws IOException {
-		runTest("Range_Valid_1");
-	}
-
 	@Test
 	public void RealConst_Valid_1() throws IOException {
 		runTest("RealConst_Valid_1");
diff --git a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
index edabbf1034..de76c78ac9 100755
--- a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
@@ -1325,11 +1325,6 @@ public void ListLength_Valid_3() {
 		runTest("ListLength_Valid_3");
 	}
 
-	@Test
-	public void ListRange_Valid_1() {
-		runTest("ListRange_Valid_1");
-	}
-
 	@Ignore("#232") @Test
 	public void ListSublist_Valid_1() {
 		runTest("ListSublist_Valid_1");
@@ -1583,11 +1578,6 @@ public void Quantifiers_Valid_1() {
 		runTest("Quantifiers_Valid_1");
 	}
 
-	@Ignore("#308") @Test
-	public void Range_Valid_1() {
-		runTest("Range_Valid_1");
-	}
-
 	@Test
 	public void RealConst_Valid_1() {
 		runTest("RealConst_Valid_1");
diff --git a/modules/wyil/src/wyil/io/WyilFileReader.java b/modules/wyil/src/wyil/io/WyilFileReader.java
index 5ac5623658..516495ffca 100755
--- a/modules/wyil/src/wyil/io/WyilFileReader.java
+++ b/modules/wyil/src/wyil/io/WyilFileReader.java
@@ -817,7 +817,6 @@ private Code readBinaryAssign(int opcode, boolean wideBase, boolean wideRest)
 		case Code.OPCODE_mul:
 		case Code.OPCODE_div:
 		case Code.OPCODE_rem:
-		case Code.OPCODE_range:
 		case Code.OPCODE_bitwiseor:
 		case Code.OPCODE_bitwisexor:
 		case Code.OPCODE_bitwiseand:
diff --git a/modules/wyil/src/wyil/io/WyilFileWriter.java b/modules/wyil/src/wyil/io/WyilFileWriter.java
index b7b06ccb6d..d9b2b15190 100755
--- a/modules/wyil/src/wyil/io/WyilFileWriter.java
+++ b/modules/wyil/src/wyil/io/WyilFileWriter.java
@@ -526,7 +526,7 @@ private void writeCode(Code code, int offset,
 	private void writeBase(boolean wide, Code code,
 			BinaryOutputStream output) throws IOException {
 
-		// second, deal with standard instruction formats
+		// second, deal with standard instruction formats		
 		output.write_u8(code.opcode());
 
 		if(code instanceof Code.AbstractUnaryOp) {
diff --git a/modules/wyil/src/wyil/lang/Code.java b/modules/wyil/src/wyil/lang/Code.java
index b20ac98652..4efab9356b 100755
--- a/modules/wyil/src/wyil/lang/Code.java
+++ b/modules/wyil/src/wyil/lang/Code.java
@@ -547,12 +547,11 @@ public boolean equals(Object o) {
 	public static final int OPCODE_mul         = 2  + FMT_BINARYASSIGN;
 	public static final int OPCODE_div         = 3  + FMT_BINARYASSIGN;
 	public static final int OPCODE_rem         = 4  + FMT_BINARYASSIGN;
-	public static final int OPCODE_range       = 5  + FMT_BINARYASSIGN;
-	public static final int OPCODE_bitwiseor   = 6  + FMT_BINARYASSIGN;
-	public static final int OPCODE_bitwisexor  = 7  + FMT_BINARYASSIGN;
-	public static final int OPCODE_bitwiseand  = 8  + FMT_BINARYASSIGN;
-	public static final int OPCODE_lshr        = 9  + FMT_BINARYASSIGN;
-	public static final int OPCODE_rshr        = 10 + FMT_BINARYASSIGN;
+	public static final int OPCODE_bitwiseor   = 5  + FMT_BINARYASSIGN;
+	public static final int OPCODE_bitwisexor  = 6  + FMT_BINARYASSIGN;
+	public static final int OPCODE_bitwiseand  = 7  + FMT_BINARYASSIGN;
+	public static final int OPCODE_lshr        = 8  + FMT_BINARYASSIGN;
+	public static final int OPCODE_rshr        = 9  + FMT_BINARYASSIGN;
 	public static final int OPCODE_indexof     = 11 + FMT_BINARYASSIGN;
 //	public static final int OPCODE_union       = 12 + FMT_BINARYASSIGN;
 //	public static final int OPCODE_unionl      = 13 + FMT_BINARYASSIGN;
diff --git a/modules/wyil/src/wyil/lang/Codes.java b/modules/wyil/src/wyil/lang/Codes.java
index c0e9131a72..67524ce1fc 100755
--- a/modules/wyil/src/wyil/lang/Codes.java
+++ b/modules/wyil/src/wyil/lang/Codes.java
@@ -467,27 +467,27 @@ public String toString() {
 				return "rem";
 			}
 		},
-		BITWISEOR(6) {
+		BITWISEOR(5) {
 			public String toString() {
 				return "or";
 			}
 		},
-		BITWISEXOR(7) {
+		BITWISEXOR(6) {
 			public String toString() {
 				return "xor";
 			}
 		},
-		BITWISEAND(8) {
+		BITWISEAND(7) {
 			public String toString() {
 				return "and";
 			}
 		},
-		LEFTSHIFT(9) {
+		LEFTSHIFT(8) {
 			public String toString() {
 				return "shl";
 			}
 		},
-		RIGHTSHIFT(10) {
+		RIGHTSHIFT(9) {
 			public String toString() {
 				return "shr";
 			}
@@ -509,7 +509,6 @@ private BinaryOperatorKind(int offset) {
 	 * <li><i>add, subtract, multiply, divide, remainder</i>. Both operands must
 	 * be either integers or reals (but not one or the other). A value of the
 	 * same type is produced.</li>
-	 * <li><i>range</i></li>
 	 * <li><i>bitwiseor, bitwisexor, bitwiseand</i></li>
 	 * <li><i>leftshift,rightshift</i></li>
 	 * </ul>
diff --git a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
index 1c64a57090..b52de7ae3d 100755
--- a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
+++ b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
@@ -1371,11 +1371,6 @@ public void ListLength_Valid_3() {
 		runTest("ListLength_Valid_3");
 	}
 
-	@Test
-	public void ListRange_Valid_1() {
-		runTest("ListRange_Valid_1");
-	}
-
 	@Test
 	public void ListSublist_Valid_1() {
 		runTest("ListSublist_Valid_1");
@@ -1626,11 +1621,6 @@ public void Quantifiers_Valid_1() {
 		runTest("Quantifiers_Valid_1");
 	}
 
-	@Test
-	public void Range_Valid_1() {
-		runTest("Range_Valid_1");
-	}
-
 	@Test
 	public void RealConst_Valid_1() {
 		runTest("RealConst_Valid_1");
diff --git a/tests/invalid/For_Invalid_1.whiley b/tests/invalid/For_Invalid_1.whiley
deleted file mode 100755
index 27552de178..0000000000
--- a/tests/invalid/For_Invalid_1.whiley
+++ /dev/null
@@ -1,5 +0,0 @@
-method f([int] args) -> int:
-    int i = 1
-    for i in args:
-        r = r + i
-    return i
diff --git a/tests/invalid/For_Invalid_5.whiley b/tests/invalid/For_Invalid_5.whiley
deleted file mode 100755
index 93fcdac3e4..0000000000
--- a/tests/invalid/For_Invalid_5.whiley
+++ /dev/null
@@ -1,6 +0,0 @@
-
-function sum([int] xs) -> [int]:
-    [int] rs = []
-    for x in xs where |rs| <= 2:
-        rs = rs ++ [x]
-    return rs
diff --git a/tests/invalid/For_Invalid_6.whiley b/tests/invalid/For_Invalid_6.whiley
deleted file mode 100755
index 30d963bea4..0000000000
--- a/tests/invalid/For_Invalid_6.whiley
+++ /dev/null
@@ -1,8 +0,0 @@
-
-function sum([int] xs) -> (int y)
-ensures y >= 0:
-    //
-    int r = 0
-    for x in xs where r >= 0:
-        r = r + x
-    return r
diff --git a/tests/invalid/For_Invalid_7.whiley b/tests/invalid/For_Invalid_7.whiley
deleted file mode 100755
index 0e3e41bd6b..0000000000
--- a/tests/invalid/For_Invalid_7.whiley
+++ /dev/null
@@ -1,10 +0,0 @@
-
-type fr6nat is int x where x >= 0
-
-function g([fr6nat] xs) -> (int x)
-ensures x > 1:
-    //
-    int r = 1
-    for y in xs where r > 0:
-        r = r + 1
-    return r
diff --git a/tests/invalid/For_Invalid_8.whiley b/tests/invalid/For_Invalid_8.whiley
deleted file mode 100755
index 3f178d4979..0000000000
--- a/tests/invalid/For_Invalid_8.whiley
+++ /dev/null
@@ -1,9 +0,0 @@
-
-type nat is (int x) where x >= 0
-
-method main(int arg) -> int:
-    [int] xs = [1, 2, 3]
-    int r = arg - 1
-    for x in xs where r >= 0:
-        r = r + x
-    return r
diff --git a/tests/invalid/For_Invalid_9.whiley b/tests/invalid/For_Invalid_9.whiley
deleted file mode 100755
index 439f005133..0000000000
--- a/tests/invalid/For_Invalid_9.whiley
+++ /dev/null
@@ -1,6 +0,0 @@
-function List([int] items, int item) -> bool:
-    for i in items:
-        if item == i:
-            return true
-        return false // error!
-    return false
\ No newline at end of file
diff --git a/tests/invalid/If_Invalid_3.whiley b/tests/invalid/If_Invalid_3.whiley
deleted file mode 100755
index 747f51e2b5..0000000000
--- a/tests/invalid/If_Invalid_3.whiley
+++ /dev/null
@@ -1,8 +0,0 @@
-function f(bool z) -> int:
-    int r = 0
-    //
-    if z:                
-        for z in [1, 2, 3]:
-            r = r + 1
-    //
-    return r
\ No newline at end of file
diff --git a/tests/invalid/Quantifiers_Invalid_1.whiley b/tests/invalid/Quantifiers_Invalid_1.whiley
index 348ccdcf76..28537a5931 100755
--- a/tests/invalid/Quantifiers_Invalid_1.whiley
+++ b/tests/invalid/Quantifiers_Invalid_1.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires some { i in ls | i < 0 }:
+requires some { i in 0..|ls| | ls[i] < 0 }:
     return true
 
 method main() -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_2.whiley b/tests/invalid/Quantifiers_Invalid_2.whiley
index 28785904a7..dcd9f15ea9 100755
--- a/tests/invalid/Quantifiers_Invalid_2.whiley
+++ b/tests/invalid/Quantifiers_Invalid_2.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires no { i in ls | i <= 0 }:
+requires no { i in 0..|ls| | ls[i] <= 0 }:
     return true
 
 method main() -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_3.whiley b/tests/invalid/Quantifiers_Invalid_3.whiley
index 213609dff5..23e7174cd2 100755
--- a/tests/invalid/Quantifiers_Invalid_3.whiley
+++ b/tests/invalid/Quantifiers_Invalid_3.whiley
@@ -1,5 +1,5 @@
 function f([int] ls) -> bool
-requires no { i in [0, 1, 2, 3, 4] | (i >= 0) && ((i < |ls|) && (ls[i] < 0)) }:
+requires no { i in 0..5 | (i >= 0) && (i < |ls|) && (ls[i] < 0) }:
     return true
 
 method main() -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_4.whiley b/tests/invalid/Quantifiers_Invalid_4.whiley
index 9ce036297a..3c72c020da 100755
--- a/tests/invalid/Quantifiers_Invalid_4.whiley
+++ b/tests/invalid/Quantifiers_Invalid_4.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires some { i in [0, 1, 2, 3, 4] | (i >= 0) && ((i < |ls|) && (ls[i] < 0)) }:
+requires some { i in 0..5 | (i >= 0) && ((i < |ls|) && (ls[i] < 0)) }:
     return true
 
 method main() -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_5.whiley b/tests/invalid/Quantifiers_Invalid_5.whiley
index 9738a75cb9..ad607e72fc 100755
--- a/tests/invalid/Quantifiers_Invalid_5.whiley
+++ b/tests/invalid/Quantifiers_Invalid_5.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires some { i in ls | i < 0 }:
+requires some { i in 0..|ls| | ls[i] < 0 }:
     return true
 
 function g([int] ls) -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_6.whiley b/tests/invalid/Quantifiers_Invalid_6.whiley
index 8d1a0665dc..53c92a7277 100755
--- a/tests/invalid/Quantifiers_Invalid_6.whiley
+++ b/tests/invalid/Quantifiers_Invalid_6.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires no { i in ls | i <= 0 }:
+requires no { i in 0..|ls| | ls[i] <= 0 }:
     return true
 
 function g([int] ls) -> void:
diff --git a/tests/invalid/Quantifiers_Invalid_7.whiley b/tests/invalid/Quantifiers_Invalid_7.whiley
index 5502154383..bd573af912 100755
--- a/tests/invalid/Quantifiers_Invalid_7.whiley
+++ b/tests/invalid/Quantifiers_Invalid_7.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires some { i in [0, 1, 2, 3] | (i >= 0) && ((i < |ls|) && (ls[i] < 0)) }:
+requires some { i in 0 .. 4 | (i >= 0) && (i < |ls|) && (ls[i] < 0) }:
     return true
 
 function g([int] ls) -> void
diff --git a/tests/invalid/Quantifiers_Invalid_8.whiley b/tests/invalid/Quantifiers_Invalid_8.whiley
index fb6999c9f7..5aa9196689 100755
--- a/tests/invalid/Quantifiers_Invalid_8.whiley
+++ b/tests/invalid/Quantifiers_Invalid_8.whiley
@@ -1,6 +1,6 @@
 
 function f([int] ls) -> bool
-requires no { i in [-1, 0, 1, 2, 3] | (i >= 0) && ((i < |ls|) && (ls[i] < 0)) }:
+requires no { i in -1..4 | (i >= 0) && (i < |ls|) && (ls[i] < 0) }:
     return true
 
 function g([int] ls) -> void
diff --git a/tests/valid/Access_Valid_1.whiley b/tests/valid/Access_Valid_1.whiley
index 8b41e0d8fc..c5be3218b0 100755
--- a/tests/valid/Access_Valid_1.whiley
+++ b/tests/valid/Access_Valid_1.whiley
@@ -1,6 +1,8 @@
 type list is [int]
 
-function index(list l, int index) -> any:
+function index(list l, int index) -> any
+requires index >= 0 && index < |l|:
+    //
     return l[index]
 
 public export method test() -> void:
diff --git a/tests/valid/Byte_Valid_7.whiley b/tests/valid/Byte_Valid_7.whiley
index 94690f8d4c..a61b5eb5b0 100755
--- a/tests/valid/Byte_Valid_7.whiley
+++ b/tests/valid/Byte_Valid_7.whiley
@@ -20,7 +20,7 @@ function invert(byte b) -> byte:
 
 public export method test() -> void:
     int i = 0
-    while i < |constants|:
+    while i < |constants| where i >= 0:
         byte constant_i = constants[i]
         assume (~constant_i) == invert(constant_i)
         i = i + 1
diff --git a/tests/valid/Complex_Valid_5.whiley b/tests/valid/Complex_Valid_5.whiley
index 04db6a9bb8..f93c0a74fc 100755
--- a/tests/valid/Complex_Valid_5.whiley
+++ b/tests/valid/Complex_Valid_5.whiley
@@ -12,7 +12,7 @@ type Piece is (int p) where (p == BLANK) || p == CIRCLE || p == CROSS
 
 type Board is {[Piece] pieces, nat move} where (move <= 9) && (|pieces| == 9)
 
-type EmptyBoard is (Board b) where no { x in b.pieces | x != BLANK }
+type EmptyBoard is (Board b) where no { i in 0..|b.pieces| | b.pieces[i] != BLANK }
 
 function EmptyBoard() -> EmptyBoard:
     return {pieces: [BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK], move: 0}
diff --git a/tests/valid/ConstrainedList_Valid_14.whiley b/tests/valid/ConstrainedList_Valid_14.whiley
index 1edf7419ee..f6df602248 100755
--- a/tests/valid/ConstrainedList_Valid_14.whiley
+++ b/tests/valid/ConstrainedList_Valid_14.whiley
@@ -1,6 +1,6 @@
 
 
-type wierd is ([int] xs) where some { x in xs | x > 0 }
+type wierd is ([int] xs) where some { i in 0..|xs| | xs[i] > 0 }
 
 function f([int] xs) -> wierd
 requires |xs| > 0:
diff --git a/tests/valid/ConstrainedList_Valid_18.whiley b/tests/valid/ConstrainedList_Valid_18.whiley
index dee8838e38..ee8c6d701b 100755
--- a/tests/valid/ConstrainedList_Valid_18.whiley
+++ b/tests/valid/ConstrainedList_Valid_18.whiley
@@ -4,7 +4,7 @@ type nat is (int x) where x >= 0
 
 function f([nat] xs) -> ([int] rs)
 requires |xs| > 0
-ensures some { x in rs | x >= 0 }:
+ensures some { i in 0..|rs| | rs[i] >= 0 }:
     //
     return xs
 
diff --git a/tests/valid/ConstrainedList_Valid_21.whiley b/tests/valid/ConstrainedList_Valid_21.whiley
index 126d837396..c99e4cbd48 100755
--- a/tests/valid/ConstrainedList_Valid_21.whiley
+++ b/tests/valid/ConstrainedList_Valid_21.whiley
@@ -23,11 +23,11 @@ constant Value is [1, 5, 10, 20, 50, 100, 500, 1000]
 type Cash is ([nat] coins) where |coins| == |Value|
 
 function Cash([nat] coins) -> Cash
-requires no { c in coins | c >= |Value| }:
+requires no { i in 0..|coins| | coins[i] >= |Value| }:
     [int] cash = [0, 0, 0, 0, 0, 0, 0, 0]
     int i = 0
     while i < |coins|
-        where (|cash| == |Value|) && no { c in cash | c < 0 }:
+        where (|cash| == |Value|) && no { k in 0..|cash| | cash[k] < 0 }:
         nat coin = coins[i]
         cash[coin] = cash[coin] + 1
         i = i + 1
diff --git a/tests/valid/ConstrainedList_Valid_22.whiley b/tests/valid/ConstrainedList_Valid_22.whiley
index b25fda802c..76788fc10f 100755
--- a/tests/valid/ConstrainedList_Valid_22.whiley
+++ b/tests/valid/ConstrainedList_Valid_22.whiley
@@ -10,7 +10,7 @@ function inc([nat] xs) -> [nat]:
             xs[i] = xs[i] + 1
         i = i + 1
         j = j + 1
-    assert no { x in xs | x < 0 }
+    assert no { k in 0..|xs| | xs[k] < 0 }
     return xs
 
 public export method test() -> void:
diff --git a/tests/valid/ConstrainedList_Valid_25.whiley b/tests/valid/ConstrainedList_Valid_25.whiley
index 5cf77e5ec9..2e202691ad 100755
--- a/tests/valid/ConstrainedList_Valid_25.whiley
+++ b/tests/valid/ConstrainedList_Valid_25.whiley
@@ -1,7 +1,8 @@
 
 
 function indexOf([int] list, int index) -> int
-requires all { l in list | l >= 0 } && ((index >= 0) && (index < |list|)):
+requires all { i in 0..|list| | list[i] >= 0 }
+requires index >= 0 && index < |list|:
     return list[index]
 
 public export method test() -> void:
diff --git a/tests/valid/ConstrainedList_Valid_3.whiley b/tests/valid/ConstrainedList_Valid_3.whiley
index 7ffa8c6c4b..983f6455d1 100755
--- a/tests/valid/ConstrainedList_Valid_3.whiley
+++ b/tests/valid/ConstrainedList_Valid_3.whiley
@@ -3,11 +3,14 @@
 type nat is (int x) where x >= 0
 
 function init(nat length, int value) -> ([int] result)
-ensures (|result| == length) && all { i in result | i == value }:
+ensures (|result| == length)
+ensures all { i in 0..|result| | result[i] == value }:
     //
     int i = 0
     [int] data = []
-    while i != length where i == |data| && all { d in data | d == value }:
+    while i != length 
+        where i == |data|
+        where all { j in 0..|data| | data[j] == value }:
         data = data ++ [value]
         i = i + 1
     //
diff --git a/tests/valid/ConstrainedList_Valid_6.whiley b/tests/valid/ConstrainedList_Valid_6.whiley
index e7bb98bf41..a36b47b6cd 100755
--- a/tests/valid/ConstrainedList_Valid_6.whiley
+++ b/tests/valid/ConstrainedList_Valid_6.whiley
@@ -23,12 +23,12 @@ constant Value is [1, 5, 10, 20, 50, 100, 500, 1000]
 type Cash is ([nat] coins) where |coins| == |Value|
 
 function Cash([nat] coins) -> Cash
-requires all { c in coins | c < |Value| }:
+requires all { i in 0..|coins| | coins[i] < |Value| }:
     Cash cash = [0, 0, 0, 0, 0, 0, 0, 0]
     int i = 0
     while i < |coins|
         where i >= 0 && |cash| == |Value|
-        where all { c in cash | c >= 0 }:
+        where all { j in 0..|cash| | cash[j] >= 0 }:
         //
         int c = coins[i]
         cash[c] = cash[c] + 1
diff --git a/tests/valid/ConstrainedList_Valid_9.whiley b/tests/valid/ConstrainedList_Valid_9.whiley
index 78f8983f4b..4f36062cda 100755
--- a/tests/valid/ConstrainedList_Valid_9.whiley
+++ b/tests/valid/ConstrainedList_Valid_9.whiley
@@ -1,6 +1,6 @@
 
 
-type posintlist is ([int] list) where no { x in list | x < 0 }
+type posintlist is ([int] list) where no { i in 0 .. |list| | list[i] < 0 }
 
 function sum(posintlist ls, int i) -> (int r)
 // Input i must be valid index in list, or one past
diff --git a/tests/valid/ConstrainedRecord_Valid_8.whiley b/tests/valid/ConstrainedRecord_Valid_8.whiley
index db1147006d..ba42f1f854 100755
--- a/tests/valid/ConstrainedRecord_Valid_8.whiley
+++ b/tests/valid/ConstrainedRecord_Valid_8.whiley
@@ -12,7 +12,7 @@ type piece is (int p) where p == BLANK || p == CIRCLE || p == CROSS
 
 type Board is {[piece] pieces, nat move} where (move <= 9) && (|pieces| == 9)
 
-type EmptyBoard is (Board b) where no { x in b.pieces | x != BLANK }
+type EmptyBoard is (Board b) where no { i in 0..|b.pieces| | b.pieces[i] != BLANK }
 
 function EmptyBoard() -> EmptyBoard:
     return {pieces: [BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK, BLANK], move: 0}
diff --git a/tests/valid/ConstrainedRecord_Valid_9.whiley b/tests/valid/ConstrainedRecord_Valid_9.whiley
index 98250e8ad6..cfacc247dd 100755
--- a/tests/valid/ConstrainedRecord_Valid_9.whiley
+++ b/tests/valid/ConstrainedRecord_Valid_9.whiley
@@ -7,10 +7,10 @@ type Matrix is {
     int width,
     [[int]] data
 } where |data| == height &&
-        no { i in data | |i| != width }
+        no { i in 0..|data| | |data[i]| != width }
 
 function Matrix(nat width, nat height, [[int]] data) -> (Matrix result)
-requires (|data| == height) && no { i in data | |i| != width }
+requires (|data| == height) && no { i in 0..|data| | |data[i]| != width }
 ensures result.width == width && result.height == height && result.data == data:
     //
     return {height: height, width: width, data: data}
diff --git a/tests/valid/EffectiveList_Valid_1.whiley b/tests/valid/EffectiveList_Valid_1.whiley
index 99d03120ee..f4c54e07be 100755
--- a/tests/valid/EffectiveList_Valid_1.whiley
+++ b/tests/valid/EffectiveList_Valid_1.whiley
@@ -5,7 +5,7 @@ type rec is {int y, int x}
 function f([int] xs) -> [bool | null]:
     [bool|null] r = []
     int i = 0
-    while i < |xs|:
+    while i < |xs| where i >= 0:
         if xs[i] < 0:
             r = r ++ [true]
         else:
diff --git a/tests/valid/Ensures_Valid_3.whiley b/tests/valid/Ensures_Valid_3.whiley
index 085deb9325..968043e084 100755
--- a/tests/valid/Ensures_Valid_3.whiley
+++ b/tests/valid/Ensures_Valid_3.whiley
@@ -1,5 +1,5 @@
 function pred([int] xs) -> (bool b)
-ensures b ==> no { z in xs | z < 0 }:
+ensures b ==> no { i in 0..|xs| | xs[i] < 0 }:
     //
     [int] zs = []
     int i = 0
diff --git a/tests/valid/Function_Valid_18.whiley b/tests/valid/Function_Valid_18.whiley
index dc4b8fb9af..4246e7c6f2 100755
--- a/tests/valid/Function_Valid_18.whiley
+++ b/tests/valid/Function_Valid_18.whiley
@@ -1,6 +1,9 @@
 type nat is (int x) where x >= 0
 
-function abs(int x) -> nat:
+function abs(int x) -> (nat r)
+ensures r == x || r == -x
+ensures r >= 0:
+    //
     if x >= 0:
         return x
     else:
diff --git a/tests/valid/Function_Valid_7.whiley b/tests/valid/Function_Valid_7.whiley
index f8a82ddd7b..78ea8dc7ab 100755
--- a/tests/valid/Function_Valid_7.whiley
+++ b/tests/valid/Function_Valid_7.whiley
@@ -3,7 +3,7 @@ type fr5nat is int
 function g([fr5nat] xs) -> [fr5nat]:
     [fr5nat] ys = []
     int i = 0
-    while i < |xs|:
+    while i < |xs| where i >= 0:
         if xs[i] > 1:
             ys = ys ++ [xs[i]]
         i = i + 1
diff --git a/tests/valid/Function_Valid_9.whiley b/tests/valid/Function_Valid_9.whiley
index 80fa82bff4..e519376fd2 100755
--- a/tests/valid/Function_Valid_9.whiley
+++ b/tests/valid/Function_Valid_9.whiley
@@ -3,7 +3,7 @@ type fr6nat is int
 function g([fr6nat] xs) -> [fr6nat]:
     [fr6nat] ys = []
     int i = 0
-    while i < |xs|:
+    while i < |xs| where i >= 0:
         if xs[i] > 1:
             ys = ys ++ [xs[i]]
         i = i + 1
diff --git a/tests/valid/Import_Valid_2.whiley b/tests/valid/Import_Valid_2.whiley
index 62a34d76a1..04b39a5eda 100755
--- a/tests/valid/Import_Valid_2.whiley
+++ b/tests/valid/Import_Valid_2.whiley
@@ -1,6 +1,7 @@
 
 
-function f([int] x) -> int:
+function f([int] x) -> int
+requires |x| > 0:
     return x[0]
 
 public export method test() -> void:
diff --git a/tests/valid/Import_Valid_3.whiley b/tests/valid/Import_Valid_3.whiley
index 4181bc8e45..9ed5c0c174 100755
--- a/tests/valid/Import_Valid_3.whiley
+++ b/tests/valid/Import_Valid_3.whiley
@@ -4,7 +4,7 @@
 function toInt([int] ls) -> int:
     int r = 0
     int i = 0
-    while i < |ls|:
+    while i < |ls| where i >= 0:
         r = r + ls[i]
         i = i + 1
     return r
diff --git a/tests/valid/ListAccess_Valid_8.whiley b/tests/valid/ListAccess_Valid_8.whiley
index 47f837f786..46b413b890 100755
--- a/tests/valid/ListAccess_Valid_8.whiley
+++ b/tests/valid/ListAccess_Valid_8.whiley
@@ -13,7 +13,7 @@ public function toUnsignedInt(byte b) -> int:
 public function meth([byte] bytes) -> [int]:
     [int] data = []
     int i = 0
-    while i < |bytes|:
+    while i < |bytes| where i >= 0:
         data = data ++ [toUnsignedInt(bytes[i])]
         i = i + 1
     return data
diff --git a/tests/valid/ListAppend_Valid_2.whiley b/tests/valid/ListAppend_Valid_2.whiley
index 92ba4540fe..728f9d4314 100755
--- a/tests/valid/ListAppend_Valid_2.whiley
+++ b/tests/valid/ListAppend_Valid_2.whiley
@@ -1,7 +1,7 @@
 function append([int] input) -> [int]:
     [int] rs = []
     int i = 0
-    while i < |input|:
+    while i < |input| where i >= 0:
         rs = rs ++ [input[i]]
         i = i + 1
     return rs
diff --git a/tests/valid/ListAppend_Valid_4.whiley b/tests/valid/ListAppend_Valid_4.whiley
index 5e363dc69f..eb9421e443 100755
--- a/tests/valid/ListAppend_Valid_4.whiley
+++ b/tests/valid/ListAppend_Valid_4.whiley
@@ -1,7 +1,7 @@
 function append([int] input) -> [int]:
     [int] rs = []
     int i = 0
-    while i < |input|:
+    while i < |input| where i >= 0:
         rs = [input[i]] ++ rs
         i = i + 1
     return rs
diff --git a/tests/valid/ListRange_Valid_1.whiley b/tests/valid/ListRange_Valid_1.whiley
deleted file mode 100755
index cceaf782e4..0000000000
--- a/tests/valid/ListRange_Valid_1.whiley
+++ /dev/null
@@ -1,4 +0,0 @@
-
-
-public export method test() -> void:
-    assert (0 .. 7) == [0,1,2,3,4,5,6]
diff --git a/tests/valid/ListSublist_Valid_1.whiley b/tests/valid/ListSublist_Valid_1.whiley
index fdd8df3925..ba8cf86ecf 100755
--- a/tests/valid/ListSublist_Valid_1.whiley
+++ b/tests/valid/ListSublist_Valid_1.whiley
@@ -1,6 +1,6 @@
 
 
-type posintlist is ([int] xs) where no { x in xs | x < 0 }
+type posintlist is ([int] xs) where no { i in 0..|xs| | xs[i] < 0 }
 
 function sum(posintlist ls) -> (int result)
 // Result cannot be negative
diff --git a/tests/valid/MessageSend_Valid_5.whiley b/tests/valid/MessageSend_Valid_5.whiley
index bcd0253638..eb434f4f15 100755
--- a/tests/valid/MessageSend_Valid_5.whiley
+++ b/tests/valid/MessageSend_Valid_5.whiley
@@ -5,7 +5,7 @@ type Sum is &{int result, [int] items}
 method start(Sum this) -> void:
     int sum = 0
     int i = 0
-    while i < |this->items|:
+    while i < |this->items| where i >= 0:
         sum = sum + this->items[i]
         i = i + 1
     this->result = sum
diff --git a/tests/valid/OpenRecord_Valid_5.whiley b/tests/valid/OpenRecord_Valid_5.whiley
index 27d8493092..06c68af4bc 100755
--- a/tests/valid/OpenRecord_Valid_5.whiley
+++ b/tests/valid/OpenRecord_Valid_5.whiley
@@ -10,7 +10,7 @@ function sum(VecPoint vp) -> int:
     else:
         int r = 0
         int i = 0
-        while i < |vp|:
+        while i < |vp| where i >= 0:
             r = r + sum(vp[i])
             i = i + 1
         return r
diff --git a/tests/valid/OpenRecord_Valid_6.whiley b/tests/valid/OpenRecord_Valid_6.whiley
index 12bd1616f2..e7f8aaf297 100755
--- a/tests/valid/OpenRecord_Valid_6.whiley
+++ b/tests/valid/OpenRecord_Valid_6.whiley
@@ -8,7 +8,7 @@ function sum(VecPoint vp) -> int:
     if vp is [Point]:
         int r = 0
         int i = 0
-        while i < |vp|:
+        while i < |vp| where i >= 0:
             r = r + sum(vp[i])
             i = i + 1
         return r
diff --git a/tests/valid/Quantifiers_Valid_1.whiley b/tests/valid/Quantifiers_Valid_1.whiley
index dea39f2df9..8dc91fca97 100755
--- a/tests/valid/Quantifiers_Valid_1.whiley
+++ b/tests/valid/Quantifiers_Valid_1.whiley
@@ -1,7 +1,7 @@
 
 
 function f([int] xs) -> [int]
-requires no { w in xs | w < 0 }:
+requires no { i in 0..|xs| | xs[i] < 0 }:
     return xs
 
 public export method test() -> void:
diff --git a/tests/valid/Range_Valid_1.whiley b/tests/valid/Range_Valid_1.whiley
deleted file mode 100755
index 4818836820..0000000000
--- a/tests/valid/Range_Valid_1.whiley
+++ /dev/null
@@ -1,14 +0,0 @@
-type nat is (int x) where x >= 0
-
-function sum(int start, int end) -> nat:
-    int r = 0
-    [int] xs = start .. end
-    int i = 0
-    while i < |xs| where r >= 0:
-        r = r + 1
-        i = i + 1
-    return r
-
-public export method test() -> void:
-    assume sum(0, 10) == 10
-    assume sum(10, 13) == 3
diff --git a/tests/valid/String_Valid_3.whiley b/tests/valid/String_Valid_3.whiley
index 10e7363c9b..9010eeecd0 100755
--- a/tests/valid/String_Valid_3.whiley
+++ b/tests/valid/String_Valid_3.whiley
@@ -2,7 +2,7 @@
 
 public function has(int c1, [int] str) -> bool:
     int i = 0
-    while i < |str|:
+    while i < |str| where i >= 0:
         if c1 == str[i]:
             return true
         i = i + 1
diff --git a/tests/valid/String_Valid_5.whiley b/tests/valid/String_Valid_5.whiley
index d34db8e601..bfa2235057 100755
--- a/tests/valid/String_Valid_5.whiley
+++ b/tests/valid/String_Valid_5.whiley
@@ -1,6 +1,6 @@
 function indexOf(int c1, [int] str) -> int | null:
     int i = 0
-    while i < |str|:
+    while i < |str| where i >= 0:
         if c1 == str[i]:
             return i
         i = i + 1
diff --git a/tests/valid/Subtype_Valid_5.whiley b/tests/valid/Subtype_Valid_5.whiley
index 0e74187d4b..a5b74eb7d3 100755
--- a/tests/valid/Subtype_Valid_5.whiley
+++ b/tests/valid/Subtype_Valid_5.whiley
@@ -4,7 +4,7 @@ type sr9nat is (int x) where x > 0
 
 type sr9tup is {sr9nat f, int g} where g > f
 
-type sr9arr is ([sr9tup] xs) where some { z in xs | z.f == 1 }
+type sr9arr is ([sr9tup] xs) where some { i in 0..|xs| | xs[i].f == 1 }
 
 public export method test() -> void:
     sr9arr x = [{f: 1, g: 2}, {f: 1, g: 8}]
diff --git a/tests/valid/Subtype_Valid_7.whiley b/tests/valid/Subtype_Valid_7.whiley
index d2f405bac1..913e496aef 100755
--- a/tests/valid/Subtype_Valid_7.whiley
+++ b/tests/valid/Subtype_Valid_7.whiley
@@ -1,8 +1,4 @@
-
-
-type sr3nat is int
-
 public export method test() -> void:
-    [sr3nat] x = [1,2]
+    [int] x = [1,2]
     x[0] = 2
     assert x == [2,2]
diff --git a/tests/valid/UnionType_Valid_3.whiley b/tests/valid/UnionType_Valid_3.whiley
index 81b99258e8..33f54a037d 100755
--- a/tests/valid/UnionType_Valid_3.whiley
+++ b/tests/valid/UnionType_Valid_3.whiley
@@ -4,7 +4,7 @@ type TYPE is null | int
 
 function f([TYPE] xs, TYPE p) -> int:
     int i = 0
-    while i < |xs|:
+    while i < |xs| where i >= 0:
         if xs[i] == p:
             return i
         i = i + 1
diff --git a/tests/valid/While_Valid_11.whiley b/tests/valid/While_Valid_11.whiley
index a6be4b15f6..b6e0e99513 100755
--- a/tests/valid/While_Valid_11.whiley
+++ b/tests/valid/While_Valid_11.whiley
@@ -3,7 +3,10 @@ type nat is (int x) where x >= 0
 function extract([int] ls) -> [nat]:
     int i = 0
     [int] r = []
-    while i < |ls| where (i >= 0) && no { x in r | x < 0 }:
+    while i < |ls| 
+        where i >= 0
+        where no { j in 0..|r| | r[j] < 0 }:
+        //
         if ls[i] < 0:
             r = r ++ [-ls[i]]
         else:
diff --git a/tests/valid/While_Valid_2.whiley b/tests/valid/While_Valid_2.whiley
index a1befc682a..6dee55f6d6 100755
--- a/tests/valid/While_Valid_2.whiley
+++ b/tests/valid/While_Valid_2.whiley
@@ -8,9 +8,9 @@ function binarySearch([int] items, int item) -> (bool result)
 // The input list must be in sorted order
 requires all { i in 0 .. |items|-1 | items[i] < items[i+1] }
 // If return true, then matching item must exist in items
-ensures result ==> some { i in items | i == item }
+ensures result ==> some { i in 0..|items| | items[i] == item }
 // If return false, then no matching item exists in items
-ensures !result ==> no { i in items | i == item }:
+ensures !result ==> no { i in 0..|items| | items[i] == item }:
     //
     int lo = 0
     int hi = |items|
diff --git a/tests/valid/While_Valid_22.whiley b/tests/valid/While_Valid_22.whiley
index 81d3e68389..e27e9a132c 100755
--- a/tests/valid/While_Valid_22.whiley
+++ b/tests/valid/While_Valid_22.whiley
@@ -10,7 +10,7 @@ requires |xs| > 0
 // Return must be element of input list
 ensures result in xs
 // No element of input list is larger than return
-ensures no { x in xs | x > result }:
+ensures no { i in 0..|xs| | xs[i] > result }:
     //
     int r = xs[0]
     int i = 0
diff --git a/tests/valid/While_Valid_26.whiley b/tests/valid/While_Valid_26.whiley
index 1a60a77e4f..05a150f1bc 100755
--- a/tests/valid/While_Valid_26.whiley
+++ b/tests/valid/While_Valid_26.whiley
@@ -8,7 +8,7 @@ requires all { i in 0 .. |items|-1 | items[i] < items[i+1] }
 // If the answer is an integer, then it must be a value index
 ensures (result != null) ==> items[result] == item
 // If the answer is null, then the item must not be contained
-ensures (result == null) ==> no { i in items | i == item }:
+ensures (result == null) ==> no { i in 0..|items| | items[i] == item }:
     //
     int i = 0
     while i < |items|
diff --git a/tests/valid/While_Valid_33.whiley b/tests/valid/While_Valid_33.whiley
index bfa89f73ca..54c7dfcdfa 100755
--- a/tests/valid/While_Valid_33.whiley
+++ b/tests/valid/While_Valid_33.whiley
@@ -2,7 +2,7 @@
 
 function sum([int] items) -> (int r)
 // Every element of items must be non-negative
-requires all { i in items | i >= 0 }
+requires all { i in 0..|items| | items[i] >= 0 }
 // Return value must be non-negative
 ensures r >= 0:
     //
diff --git a/tests/valid/While_Valid_45.whiley b/tests/valid/While_Valid_45.whiley
index 2a90091bad..5c7f2dce41 100755
--- a/tests/valid/While_Valid_45.whiley
+++ b/tests/valid/While_Valid_45.whiley
@@ -11,7 +11,7 @@ function buildNatList(int n) -> ([int] m):
     //    r in rs ==> r >= 0
     while i < n
         where i >= 0
-        where all { r in rs | r >= 0 }:
+        where all { r in 0..|rs| | rs[r] >= 0 }:
         //
         rs = rs ++ [i]
         i = i + 1
diff --git a/tests/valid/While_Valid_47.whiley b/tests/valid/While_Valid_47.whiley
index 7c6f8138db..8abbef9a3e 100755
--- a/tests/valid/While_Valid_47.whiley
+++ b/tests/valid/While_Valid_47.whiley
@@ -1,6 +1,6 @@
 function sum([int] xs) -> (int r)
 // All elements of parameter xs are greater-or-equal to zero
-requires all { x in xs | x >= 0 }
+requires all { i in 0..|xs| | xs[i] >= 0 }
 // Return value must be greater-or-equal to zero
 ensures r >= 0:
    //
