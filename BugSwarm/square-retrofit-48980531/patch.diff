diff --git a/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java
index 0cac659165..ab5e9ceb63 100755
--- a/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java
+++ b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java
@@ -1,6 +1,8 @@
 package retrofit.converter;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
 import java.io.ByteArrayOutputStream;
 import org.junit.Test;
 import retrofit.mime.TypedByteArray;
@@ -28,16 +30,20 @@
     assertThat(result).isEqualTo(OBJECT);
   }
 
-  @Test(expected = ConversionException.class)
-  public void deserializeWrongValue() throws Exception {
+  @Test public void deserializeWrongValue() throws Exception {
     TypedInput input = new TypedByteArray(MIME_TYPE, "{\"foo\":\"bar\"}".getBytes());
-    converter.fromBody(input, MyObject.class);
+    try {
+      converter.fromBody(input, MyObject.class);
+    } catch (UnrecognizedPropertyException ignored) {
+    }
   }
 
-  @Test(expected = ConversionException.class)
-  public void deserializeWrongClass() throws Exception {
+  @Test public void deserializeWrongClass() throws Exception {
     TypedInput input = new TypedByteArray(MIME_TYPE, JSON.getBytes());
-    converter.fromBody(input, String.class);
+    try {
+      converter.fromBody(input, String.class);
+    } catch (JsonMappingException ignored) {
+    }
   }
 
   private String asString(TypedOutput typedOutput) throws Exception {
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
index a25f96003f..828588a305 100755
--- a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
+++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
@@ -54,7 +54,7 @@
     try {
       protoConverter.fromBody(decodeBase64("////"), Phone.class);
       fail();
-    } catch (ConversionException expected) {
+    } catch (RuntimeException expected) {
       assertThat(expected.getCause() instanceof InvalidProtocolBufferException);
     }
   }
@@ -63,7 +63,7 @@
     try {
       protoConverter.fromBody(decodeBase64("////", "yummy/bytes"), Phone.class);
       fail();
-    } catch (ConversionException e) {
+    } catch (RuntimeException e) {
       assertThat(e).hasMessage("Response content type was not a proto: yummy/bytes");
     }
   }
diff --git a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
index a752d23216..cd0b3e6f23 100755
--- a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
+++ b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
@@ -46,12 +46,13 @@ public void deserialize() throws Exception {
 		assertThat(result).isEqualTo(obj);
 	}
 
-	@Test(expected = ConversionException.class)
-	public void deserializeWrongValue() throws Exception {
+	@Test public void deserializeWrongValue() throws Exception {
 		final TypedInput input = new TypedByteArray(MIME_TYPE,
 				"<myObject><foo/><bar/></myObject>".getBytes());
-		converter.fromBody(input, MyObject.class);
-
+    try {
+      converter.fromBody(input, MyObject.class);
+    } catch (RuntimeException ignored) {
+    }
 	}
 
 	@Test
diff --git a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java
index dbc9cb5b7d..fdd967b2ff 100755
--- a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java
+++ b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java
@@ -55,8 +55,7 @@
     try {
       converter.fromBody(decodeBase64("////"), Person.class);
       fail();
-    } catch (ConversionException expected) {
-      assertThat(expected.getCause()).isInstanceOf(IOException.class);
+    } catch (IOException ignored) {
     }
   }
 
@@ -64,7 +63,7 @@
     try {
       converter.fromBody(decodeBase64("////", "yummy/bytes"), Person.class);
       fail();
-    } catch (ConversionException e) {
+    } catch (RuntimeException e) {
       assertThat(e).hasMessage("Expected a proto but was: yummy/bytes");
     }
   }
