diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/scaffold/FieldLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/scaffold/FieldLocator.java
index b4d61a4693..edcf945eab 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/scaffold/FieldLocator.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/scaffold/FieldLocator.java
@@ -76,10 +76,21 @@ public String toString() {
             }
         }
 
+        /**
+         * A simple implementation for a field resolution.
+         */
         class Simple implements Resolution {
 
+            /**
+             * A description of the located field.
+             */
             private final FieldDescription fieldDescription;
 
+            /**
+             * Creates a new simple resolution for a field.
+             *
+             * @param fieldDescription A description of the located field.
+             */
             protected Simple(FieldDescription fieldDescription) {
                 this.fieldDescription = fieldDescription;
             }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/FieldLocatorTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/FieldLocatorTest.java
index 5ed3600ce8..57dd6db865 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/FieldLocatorTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/FieldLocatorTest.java
@@ -98,6 +98,8 @@ public void testClassHierarchyNotFoundWrongType() throws Exception {
     public void testObjectProperties() throws Exception {
         ObjectPropertyAssertion.of(FieldLocator.ForExactType.class).apply();
         ObjectPropertyAssertion.of(FieldLocator.ForClassHierarchy.class).apply();
+        ObjectPropertyAssertion.of(FieldLocator.Resolution.Illegal.class).apply();
+        ObjectPropertyAssertion.of(FieldLocator.Resolution.Simple.class).apply();
     }
 
     @SuppressWarnings("unused")
