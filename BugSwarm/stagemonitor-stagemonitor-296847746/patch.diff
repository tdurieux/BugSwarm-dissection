diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/MonitoredHttpRequestTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/MonitoredHttpRequestTest.java
index 4a34e2bff5..c83cb978ae 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/MonitoredHttpRequestTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/MonitoredHttpRequestTest.java
@@ -29,6 +29,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
@@ -55,6 +56,7 @@ public void setUp() throws Exception {
 		when(tracingPlugin.getTracer()).thenReturn(new SpanWrappingTracer(tracer, spanEventListenerFactories));
 		final RequestMonitor requestMonitor = mock(RequestMonitor.class);
 		when(tracingPlugin.getRequestMonitor()).thenReturn(requestMonitor);
+		when(tracingPlugin.isSampled(any())).thenReturn(true);
 		assertThat(tracer.scopeManager().active()).isNull();
 	}
 
diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
index 3904ad0157..a98dc0c64a 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
@@ -1,5 +1,7 @@
 package org.stagemonitor.web.servlet.filter;
 
+import com.codahale.metrics.health.HealthCheckRegistry;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -10,6 +12,8 @@
 import org.springframework.mock.web.MockHttpServletResponse;
 import org.stagemonitor.configuration.ConfigurationRegistry;
 import org.stagemonitor.core.CorePlugin;
+import org.stagemonitor.core.MeasurementSession;
+import org.stagemonitor.core.StagemonitorPlugin;
 import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
 import org.stagemonitor.tracing.RequestMonitor;
 import org.stagemonitor.tracing.SpanContextInformation;
@@ -43,6 +47,7 @@
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.when;
 
 public class HttpRequestMonitorFilterTest {
 
@@ -76,6 +81,7 @@ public SpanContextInformation answer(InvocationOnMock invocation) throws Throwab
 		doReturn(true).when(servletPlugin).isClientSpanCollectionInjectionEnabled();
 		doReturn(true).when(corePlugin).isStagemonitorActive();
 		doReturn(1000000d).when(tracingPlugin).getProfilerRateLimitPerMinute();
+		when(tracingPlugin.isSampled(any())).thenReturn(true);
 		final RequestMonitor requestMonitor = new RequestMonitor(configuration, mock(Metric2Registry.class));
 		doReturn(requestMonitor).when(tracingPlugin).getRequestMonitor();
 		final SpanWrappingTracer spanWrappingTracer = new SpanWrappingTracer(new MockTracer(new ThreadLocalScopeManager(), new B3Propagator()),
@@ -87,6 +93,8 @@ public SpanContextInformation answer(InvocationOnMock invocation) throws Throwab
 		doReturn(spanWrappingTracer).when(tracingPlugin).getTracer();
 		doReturn("testApplication").when(corePlugin).getApplicationName();
 		doReturn("testInstance").when(corePlugin).getInstanceName();
+		servletPlugin.initializePlugin(new StagemonitorPlugin.InitArguments(mock(Metric2Registry.class), configuration,
+				mock(MeasurementSession.class), mock(HealthCheckRegistry.class)));
 
 		initFilter();
 		assertThat(tracingPlugin.getTracer().scopeManager().active()).isNull();
diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/jaxrs/JaxRsRequestNameDeterminerTransformerTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/jaxrs/JaxRsRequestNameDeterminerTransformerTest.java
index 7df16ca984..f858db74f0 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/jaxrs/JaxRsRequestNameDeterminerTransformerTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/jaxrs/JaxRsRequestNameDeterminerTransformerTest.java
@@ -36,6 +36,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 import static org.stagemonitor.tracing.BusinessTransactionNamingStrategy.METHOD_NAME_SPLIT_CAMEL_CASE;
@@ -79,6 +80,7 @@ public void before() throws Exception {
 		when(tracingPlugin.getRateLimitSpansPerMinutePercentPerType()).thenReturn(Collections.emptyMap());
 		when(tracingPlugin.getProfilerRateLimitPerMinuteOption()).thenReturn(mock(ConfigurationOption.class));
 		when(tracingPlugin.getBusinessTransactionNamingStrategy()).thenReturn(METHOD_NAME_SPLIT_CAMEL_CASE);
+		when(tracingPlugin.isSampled(any())).thenReturn(true);
 
 		when(servletPlugin.getGroupUrls()).thenReturn(Collections.singletonMap(Pattern.compile("(.*).js$"), "*.js"));
 		requestMonitor = new RequestMonitor(configuration, registry);
diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/spring/SpringRequestMonitorTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/spring/SpringRequestMonitorTest.java
index 8e177e645b..e2e15d2453 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/spring/SpringRequestMonitorTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/spring/SpringRequestMonitorTest.java
@@ -108,6 +108,7 @@ public void before() throws Exception {
 		when(tracingPlugin.getDefaultRateLimitSpansPercent()).thenReturn(1.0);
 		when(tracingPlugin.getRateLimitSpansPerMinutePercentPerType()).thenReturn(Collections.emptyMap());
 		when(tracingPlugin.getProfilerRateLimitPerMinuteOption()).thenReturn(mock(ConfigurationOption.class));
+		when(tracingPlugin.isSampled(any())).thenReturn(true);
 
 		when(servletPlugin.getGroupUrls()).thenReturn(Collections.singletonMap(Pattern.compile("(.*).js$"), "*.js"));
 		requestMonitor = new RequestMonitor(configuration, registry);
diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/widget/SpanServletTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/widget/SpanServletTest.java
index a09eeb16f6..f0b3342a01 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/widget/SpanServletTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/widget/SpanServletTest.java
@@ -63,6 +63,7 @@ public void setUp() throws Exception {
 		TracingPlugin tracingPlugin = mock(TracingPlugin.class);
 		when(tracingPlugin.getRequestMonitor()).thenReturn(mock(RequestMonitor.class));
 		when(tracingPlugin.getProfilerRateLimitPerMinuteOption()).thenReturn(mock(ConfigurationOption.class));
+		when(tracingPlugin.isSampled(any())).thenReturn(true);
 		when(configuration.getConfig(TracingPlugin.class)).thenReturn(tracingPlugin);
 
 		servletPlugin = mock(ServletPlugin.class);
