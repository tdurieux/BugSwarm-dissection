diff --git a/pom-test.xml b/pom-test.xml
index 212badaa2d..3a8f64389d 100755
--- a/pom-test.xml
+++ b/pom-test.xml
@@ -78,6 +78,12 @@
       <artifactId>testng</artifactId>
       <version>${testng.version}</version>
       <scope>test</scope>
+    </dependency>
+      <dependency>
+        <groupId>org.assertj</groupId>
+        <artifactId>assertj-core</artifactId>
+        <version>2.0.0</version>
+        <scope>test</scope>
     </dependency>
    </dependencies>
     
diff --git a/pom.xml b/pom.xml
index 829625b7dc..0f54a85eed 100755
--- a/pom.xml
+++ b/pom.xml
@@ -132,6 +132,12 @@
       <optional>true</optional>
 	  </dependency>
 
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <version>2.0.0</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>     
   
   <properties>
diff --git a/src/main/java/org/testng/TestRunner.java b/src/main/java/org/testng/TestRunner.java
index 45b46210fd..2772445d00 100755
--- a/src/main/java/org/testng/TestRunner.java
+++ b/src/main/java/org/testng/TestRunner.java
@@ -100,7 +100,7 @@
   private Date m_endDate = null;
 
   /** A map to keep track of Class <-> IClass. */
-  transient private Map<Class<?>, ITestClass> m_classMap = Maps.newLinkedHashMap(); // Changed to reproduce issue #87 (order is important)
+  transient private Map<Class<?>, ITestClass> m_classMap = Maps.newHashMap();
 
   /** Where the reports will be created. */
   private String m_outputDirectory= Constants.getDefaultValueFor(Constants.PROP_OUTPUT_DIR);
diff --git a/src/main/java/org/testng/internal/BaseClassFinder.java b/src/main/java/org/testng/internal/BaseClassFinder.java
index 1247dbe2a1..90ac311b31 100755
--- a/src/main/java/org/testng/internal/BaseClassFinder.java
+++ b/src/main/java/org/testng/internal/BaseClassFinder.java
@@ -17,7 +17,7 @@
  * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
  */
 abstract public class BaseClassFinder implements ITestClassFinder {
-  private Map<Class, IClass> m_classes = Maps.newLinkedHashMap(); // Changed to reproduce issue #87 (order is important)
+  private Map<Class, IClass> m_classes = Maps.newHashMap();
 
   @Override
   public IClass getIClass(Class cls) {
diff --git a/src/main/java/org/testng/internal/ClassInfoMap.java b/src/main/java/org/testng/internal/ClassInfoMap.java
index 50a17f4318..b57a03f1c2 100755
--- a/src/main/java/org/testng/internal/ClassInfoMap.java
+++ b/src/main/java/org/testng/internal/ClassInfoMap.java
@@ -8,7 +8,7 @@
 import java.util.Set;
 
 public class ClassInfoMap {
-  private Map<Class<?>, XmlClass> m_map = Maps.newLinkedHashMap(); // Changed to reproduce issue #87 (order is important)
+  private Map<Class<?>, XmlClass> m_map = Maps.newHashMap();
   private boolean includeNestedClasses;
 
   public ClassInfoMap() {
diff --git a/src/main/java/org/testng/internal/annotations/JDK15AnnotationFinder.java b/src/main/java/org/testng/internal/annotations/JDK15AnnotationFinder.java
index 0130e1abc7..cc2df3dd1d 100755
--- a/src/main/java/org/testng/internal/annotations/JDK15AnnotationFinder.java
+++ b/src/main/java/org/testng/internal/annotations/JDK15AnnotationFinder.java
@@ -101,7 +101,8 @@ public JDK15AnnotationFinder(IAnnotationTransformer transformer) {
     if (a == null) {
       throw new IllegalArgumentException("Java @Annotation class for '" + annotationClass + "' not found.");
     }
-    return findAnnotation(m.getAnnotation(a), annotationClass, m.getDeclaringClass(), null, m);
+    Annotation annotation = m.getAnnotation(a);
+    return findAnnotation(annotation, annotationClass, m.getDeclaringClass(), null, m, new Pair<>(annotation, m));
   }
 
   @Override
@@ -121,7 +122,7 @@ public JDK15AnnotationFinder(IAnnotationTransformer transformer) {
     if (annotation == null) {
       annotation = testClass.getAnnotation(a);
     }
-    return findAnnotation(annotation, annotationClass, testClass, null, m);
+    return findAnnotation(annotation, annotationClass, testClass, null, m, new Pair<>(annotation, m));
   }
 
   private void transform(IAnnotation a, Class testClass,
@@ -167,7 +168,8 @@ else if (a instanceof IFactoryAnnotation) {
     if (a == null) {
       throw new IllegalArgumentException("Java @Annotation class for '" + annotationClass + "' not found.");
     }
-    return findAnnotation(findAnnotationInSuperClasses(cls, a), annotationClass, cls, null, null);
+    Annotation annotation = findAnnotationInSuperClasses(cls, a);
+    return findAnnotation(annotation, annotationClass, cls, null, null, new Pair<>(annotation, annotationClass));
   }
 
   @Override
@@ -176,31 +178,24 @@ else if (a instanceof IFactoryAnnotation) {
     if (a == null) {
       throw new IllegalArgumentException("Java @Annotation class for '" + annotationClass + "' not found.");
     }
-    return findAnnotation(cons.getAnnotation(a), annotationClass, cons.getDeclaringClass(), cons, null);
+    Annotation annotation = cons.getAnnotation(a);
+    return findAnnotation(annotation, annotationClass, cons.getDeclaringClass(), cons, null, new Pair<>(annotation, cons));
   }
 
   private Map<Pair<Annotation, ?>, IAnnotation> m_annotations = Maps.newHashMap();
 
   private <A extends IAnnotation> A findAnnotation(Annotation a,
                                                    Class<A> annotationClass,
-                                                   Class testClass, Constructor testConstructor, Method testMethod) {
-    final Pair<Annotation, ?> p;
-    if (testClass != null) {
-      p = new Pair<Annotation, Class>(a, testClass);
-    } else if (testConstructor != null) {
-      p = new Pair<Annotation, Constructor>(a, testConstructor);
-    } else {
-      p = new Pair<Annotation, Method>(a, testMethod);
-    }
-    //noinspection unchecked
-    A result = (A) m_annotations.get(p);
+                                                   Class testClass, Constructor testConstructor, Method testMethod,
+                                                   Pair<Annotation, ?> p) {
+    IAnnotation result = m_annotations.get(p);
     if (result == null) {
       result = m_tagFactory.createTag(testClass, a, annotationClass, m_transformer);
       m_annotations.put(p, result);
       transform(result, testClass, testConstructor, testMethod);
     }
     //noinspection unchecked
-    return result;
+    return (A) result;
   }
 
   @Override
diff --git a/src/test/java/test/annotationtransformer/AnnotationTransformerSampleTest.java b/src/test/java/test/annotationtransformer/AnnotationTransformerSampleTest.java
index 6ae3efd71b..e930be7da7 100755
--- a/src/test/java/test/annotationtransformer/AnnotationTransformerSampleTest.java
+++ b/src/test/java/test/annotationtransformer/AnnotationTransformerSampleTest.java
@@ -14,25 +14,21 @@
   @Test(invocationCount = 2)
   public void two() {
     m_two++;
-    ppp("Should be invoked 2 times");
   }
 
   @Test(invocationCount = 5)
   public void four() {
     m_four++;
-    ppp("Should be invoked 4 times");
   }
 
   @Test(invocationCount = 5)
   public void three() {
     m_three++;
-    ppp("Should be invoked 3 times");
   }
 
   @Test
   public void five() {
     m_five++;
-    ppp("Should be invoked 5 times");
   }
 
   @Test(dependsOnMethods = {"two", "three", "four", "five"})
@@ -41,20 +37,5 @@ public void verify() {
     Assert.assertEquals(m_three, 3);
     Assert.assertEquals(m_four, 4);
     Assert.assertEquals(m_five, 5);
-
-  }
-
-  public static void main(String[] argv) {
-    TestNG tng = new TestNG();
-    tng.setAnnotationTransformer(new MyTransformer());
-    tng.setTestClasses(new Class[] { AnnotationTransformerSampleTest.class});
-
-    tng.run();
-  }
-
-  private void ppp(String string) {
-    if (false) {
-      System.out.println("[AnnotationTransformerSampleTest] " + string);
-    }
   }
 }
diff --git a/src/test/java/test/annotationtransformer/AnnotationTransformerTest.java b/src/test/java/test/annotationtransformer/AnnotationTransformerTest.java
index 16be028bc9..548ebf21c0 100755
--- a/src/test/java/test/annotationtransformer/AnnotationTransformerTest.java
+++ b/src/test/java/test/annotationtransformer/AnnotationTransformerTest.java
@@ -1,5 +1,6 @@
 package test.annotationtransformer;
 
+import org.assertj.core.api.iterable.Extractor;
 import org.testng.Assert;
 import org.testng.IAnnotationTransformer;
 import org.testng.ITestResult;
@@ -16,24 +17,40 @@
 import java.util.Collection;
 import java.util.List;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class AnnotationTransformerTest extends SimpleBaseTest {
 
+  private static final Extractor NAME_EXTRACTOR = new Extractor<ITestResult, String>() {
+    @Override
+    public String extract(ITestResult input) {
+      return input.getName();
+    }
+  };
+
   /**
    * Make sure that without a transformer in place, a class-level
    * annotation invocationCount is correctly used.
    */
   @Test
   public void verifyAnnotationWithoutTransformer() {
-    TestNG tng = new TestNG();
-    tng.setVerbose(0);
-    tng.setTestClasses(new Class[] { AnnotationTransformerClassInvocationSampleTest.class});
+    TestNG tng = create(AnnotationTransformerSampleTest.class);
+    tng.setPreserveOrder(true);
+
     TestListenerAdapter tla = new TestListenerAdapter();
     tng.addListener(tla);
 
     tng.run();
 
-    List passed = tla.getPassedTests();
-    Assert.assertEquals(passed.size(), 6);
+    assertThat(tla.getPassedTests()).extracting(NAME_EXTRACTOR)
+        .containsExactly(
+            "five",
+            "four", "four", "four", "four", "four",
+            "three", "three", "three", "three", "three",
+            "two", "two"
+        );
+    assertThat(tla.getFailedTests()).extracting(NAME_EXTRACTOR)
+        .containsExactly("verify");
   }
 
   /**
@@ -41,17 +58,28 @@ public void verifyAnnotationWithoutTransformer() {
    */
   @Test
   public void verifyAnnotationTransformerMethod() {
-    TestNG tng = new TestNG();
-    tng.setVerbose(0);
-    tng.setAnnotationTransformer(new MyTransformer());
-    tng.setTestClasses(new Class[] { AnnotationTransformerSampleTest.class});
+    TestNG tng = create(AnnotationTransformerSampleTest.class);
+    tng.setPreserveOrder(true);
+
+    MyTransformer transformer = new MyTransformer();
+    tng.setAnnotationTransformer(transformer);
+
     TestListenerAdapter tla = new TestListenerAdapter();
     tng.addListener(tla);
 
     tng.run();
 
-    List passed = tla.getPassedTests();
-    Assert.assertEquals(passed.size(), 15);
+    assertThat(transformer.getMethodNames()).contains("two", "three", "four", "five", "verify");
+
+    assertThat(tla.getPassedTests()).extracting(NAME_EXTRACTOR)
+        .containsExactly(
+            "five", "five", "five", "five", "five",
+            "four", "four", "four", "four",
+            "three", "three", "three",
+            "two", "two",
+            "verify"
+        );
+    assertThat(tla.getFailedTests()).isEmpty();
   }
 
   /**
diff --git a/src/test/java/test/annotationtransformer/MyTransformer.java b/src/test/java/test/annotationtransformer/MyTransformer.java
index 577003df43..b3eeeb43c6 100755
--- a/src/test/java/test/annotationtransformer/MyTransformer.java
+++ b/src/test/java/test/annotationtransformer/MyTransformer.java
@@ -5,32 +5,34 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
 
 public class MyTransformer implements IAnnotationTransformer {
 
+  private final List<String> methodNames = new ArrayList<>();
+
   @Override
   public void transform(ITestAnnotation annotation, Class testClass,
-      Constructor testConstructor, Method testMethod)
-  {
+      Constructor testConstructor, Method testMethod) {
     annotation.setTimeOut(10000);
     if (testMethod != null) {
-      String name = testMethod.getName();
-      if ("three".equals(name)) {
-        annotation.setInvocationCount(3);
-      }
-      else if ("four".equals(name)) {
-        annotation.setInvocationCount(4);
-      }
-      else if ("five".equals(name)) {
-        annotation.setInvocationCount(5);
+      switch (testMethod.getName()) {
+        case "three":
+          annotation.setInvocationCount(3);
+          break;
+        case "four":
+          annotation.setInvocationCount(4);
+          break;
+        case "five":
+          annotation.setInvocationCount(5);
+          break;
       }
+      methodNames.add(testMethod.getName());
     }
   }
 
-  private void ppp(String string) {
-    System.out.println("[MyTransformer] " + string);
+  public List<String> getMethodNames() {
+    return methodNames;
   }
-
-
-
 }
diff --git a/src/test/java/test/invokedmethodlistener/InvokedMethodListenerTest.java b/src/test/java/test/invokedmethodlistener/InvokedMethodListenerTest.java
index 232e32b5d0..1f6ff32581 100755
--- a/src/test/java/test/invokedmethodlistener/InvokedMethodListenerTest.java
+++ b/src/test/java/test/invokedmethodlistener/InvokedMethodListenerTest.java
@@ -124,7 +124,6 @@ public void issue87_method_orderning_with_disable_test_class() {
 
   private void assertIssue87(Class<?>... tests) {
     TestNG tng = create(tests);
-    tng.setVerbose(10);
     tng.setParallel("false");
     tng.setPreserveOrder(true);
     InvokedMethodListener listener = new InvokedMethodListener();
