diff --git a/its/ruling/src/test/resources/commons-beanutils/squid-S1125.json b/its/ruling/src/test/resources/commons-beanutils/squid-S1125.json
index c5cde382cd..d855540312 100755
--- a/its/ruling/src/test/resources/commons-beanutils/squid-S1125.json
+++ b/its/ruling/src/test/resources/commons-beanutils/squid-S1125.json
@@ -1,8 +1,17 @@
 {
+'commons-beanutils:commons-beanutils:src/main/java/org/apache/commons/beanutils/BaseDynaBeanMapDecorator.java':[
+123,
+],
 'commons-beanutils:commons-beanutils:src/main/java/org/apache/commons/beanutils/BeanMap.java':[
 464,
 471,
 822,
 829,
 ],
+'commons-beanutils:commons-beanutils:src/main/java/org/apache/commons/beanutils/LazyDynaBean.java':[
+896,
+],
+'commons-beanutils:commons-beanutils:src/main/java/org/apache/commons/beanutils/LazyDynaClass.java':[
+354,
+],
 }
diff --git a/its/ruling/src/test/resources/guava/squid-S1125.json b/its/ruling/src/test/resources/guava/squid-S1125.json
new file mode 100755
index 0000000000..0f7430bff6
--- /dev/null
+++ b/its/ruling/src/test/resources/guava/squid-S1125.json
@@ -0,0 +1,5 @@
+{
+'com.google.guava:guava:src/com/google/common/util/concurrent/AtomicLongMap.java':[
+405,
+],
+}
diff --git a/its/ruling/src/test/resources/jdk6/squid-S1125.json b/its/ruling/src/test/resources/jdk6/squid-S1125.json
index c51f7583e4..721dd943f1 100755
--- a/its/ruling/src/test/resources/jdk6/squid-S1125.json
+++ b/its/ruling/src/test/resources/jdk6/squid-S1125.json
@@ -7,12 +7,17 @@
 331,
 ],
 'jdk6:java/awt/Container.java':[
+704,
 4329,
 4338,
 ],
 'jdk6:java/awt/EventDispatchThread.java':[
 259,
 ],
+'jdk6:java/awt/KeyboardFocusManager.java':[
+2736,
+2829,
+],
 'jdk6:java/awt/font/TextLine.java':[
 1349,
 ],
@@ -26,21 +31,38 @@
 2899,
 ],
 'jdk6:java/awt/image/PackedColorModel.java':[
+114,
+182,
 352,
 ],
 'jdk6:java/beans/PropertyDescriptor.java':[
 637,
 638,
 ],
+'jdk6:java/beans/beancontext/BeanContextServicesSupport.java':[
+740,
+],
+'jdk6:java/lang/String.java':[
+1119,
+],
 'jdk6:java/lang/reflect/AccessibleObject.java':[
 115,
 ],
+'jdk6:java/math/MutableBigInteger.java':[
+398,
+],
 'jdk6:java/net/InetAddress.java':[
 1263,
 ],
+'jdk6:java/net/SocketPermission.java':[
+887,
+],
 'jdk6:java/rmi/activation/ActivationGroup.java':[
 269,
 ],
+'jdk6:java/rmi/server/ObjID.java':[
+229,
+],
 'jdk6:java/security/AlgorithmParameters.java':[
 307,
 325,
@@ -104,9 +126,18 @@
 45,
 78,
 ],
+'jdk6:java/text/CollationElementIterator.java':[
+609,
+],
+'jdk6:java/text/DictionaryBasedBreakIterator.java':[
+114,
+],
 'jdk6:java/text/PatternEntry.java':[
 242,
 ],
+'jdk6:java/util/GregorianCalendar.java':[
+776,
+],
 'jdk6:java/util/jar/JarInputStream.java':[
 145,
 ],
diff --git a/java-checks/src/main/java/org/sonar/java/checks/BooleanLiteralCheck.java b/java-checks/src/main/java/org/sonar/java/checks/BooleanLiteralCheck.java
index 074b200966..60ac42b1ef 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/BooleanLiteralCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/BooleanLiteralCheck.java
@@ -20,50 +20,50 @@
 package org.sonar.java.checks;
 
 import com.google.common.collect.ImmutableList;
+import java.util.Arrays;
+import java.util.List;
+import javax.annotation.Nullable;
 import org.sonar.check.Rule;
 import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
 import org.sonar.plugins.java.api.tree.BinaryExpressionTree;
+import org.sonar.plugins.java.api.tree.ConditionalExpressionTree;
 import org.sonar.plugins.java.api.tree.LiteralTree;
 import org.sonar.plugins.java.api.tree.Tree;
 import org.sonar.plugins.java.api.tree.Tree.Kind;
 import org.sonar.plugins.java.api.tree.UnaryExpressionTree;
 
-import java.util.List;
-
 @Rule(key = "S1125")
 public class BooleanLiteralCheck extends IssuableSubscriptionVisitor {
 
   @Override
   public List<Kind> nodesToVisit() {
-    return ImmutableList.of(Kind.EQUAL_TO, Kind.NOT_EQUAL_TO, Kind.CONDITIONAL_AND, Kind.CONDITIONAL_OR, Kind.LOGICAL_COMPLEMENT);
+    return ImmutableList.of(Kind.EQUAL_TO, Kind.NOT_EQUAL_TO, Kind.CONDITIONAL_AND, Kind.CONDITIONAL_OR,
+      Kind.LOGICAL_COMPLEMENT, Kind.CONDITIONAL_EXPRESSION);
   }
 
   @Override
   public void visitNode(Tree tree) {
     LiteralTree literal;
     if(tree.is(Kind.LOGICAL_COMPLEMENT)) {
-      literal = getBooleanLiteral(((UnaryExpressionTree)tree).expression());
+      literal = getBooleanLiteral(((UnaryExpressionTree) tree).expression());
+    } else if (tree.is(Kind.CONDITIONAL_EXPRESSION)) {
+      ConditionalExpressionTree expression = (ConditionalExpressionTree) tree;
+      literal = getBooleanLiteral(expression.trueExpression(), expression.falseExpression());
     } else {
-      literal = getBooleanLiteralOperands((BinaryExpressionTree)tree);
+      BinaryExpressionTree expression = (BinaryExpressionTree) tree;
+      literal = getBooleanLiteral(expression.leftOperand(), expression.rightOperand());
     }
     if(literal != null) {
       reportIssue(literal, "Remove the literal \"" + literal.value() + "\" boolean value.");
     }
   }
 
-  private static LiteralTree getBooleanLiteral(Tree tree) {
-    LiteralTree result = null;
-    if (tree.is(Kind.BOOLEAN_LITERAL)) {
-      result = (LiteralTree) tree;
-    }
-    return result;
+  @Nullable
+  private static LiteralTree getBooleanLiteral(Tree... trees) {
+    return Arrays.stream(trees)
+      .filter(tree -> tree.is(Kind.BOOLEAN_LITERAL))
+      .map(LiteralTree.class::cast)
+      .findFirst().orElse(null);
   }
 
-  private static LiteralTree getBooleanLiteralOperands(BinaryExpressionTree tree) {
-    LiteralTree result = getBooleanLiteral(tree.leftOperand());
-    if (result == null) {
-      result = getBooleanLiteral(tree.rightOperand());
-    }
-    return result;
-  }
 }
diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/SecureXmlTransformerCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/SecureXmlTransformerCheck.java
index 5d4d269ff1..d6d1046184 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/security/SecureXmlTransformerCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/security/SecureXmlTransformerCheck.java
@@ -1,3 +1,22 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
 package org.sonar.java.checks.security;
 
 import java.util.Collections;
diff --git a/java-checks/src/test/files/checks/BooleanEqualityComparisonCheck.java b/java-checks/src/test/files/checks/BooleanEqualityComparisonCheck.java
index b031090417..744935900b 100755
--- a/java-checks/src/test/files/checks/BooleanEqualityComparisonCheck.java
+++ b/java-checks/src/test/files/checks/BooleanEqualityComparisonCheck.java
@@ -1,5 +1,5 @@
 class A {
-  public void f() {
+  public void f(boolean var) {
     var == false;       // Noncompliant [[sc=12;ec=17]] {{Remove the literal "false" boolean value.}}
     var == true;        // Noncompliant {{Remove the literal "true" boolean value.}}
     var != false;       // Noncompliant {{Remove the literal "false" boolean value.}}
@@ -19,5 +19,22 @@ public void f() {
     ++ true;            // Compliant
     !foo;               // Compliant
     foo() && bar();     // Compliant
+
+    boolean exp = foo();
+    var = foo() ? true : false; // Noncompliant
+    var = foo() ? true : exp;   // Noncompliant
+    var = foo() ? false : exp;  // Noncompliant
+    var = foo() ? exp : true;   // Noncompliant
+    var = foo() ? exp : false;  // Noncompliant
+
+    var = foo();
+    var = foo() || exp;
+    var = !foo() && exp;
+    var = !foo() || exp;
+    var = foo() && exp;
   }
+
+  boolean foo()          { return true; }
+  boolean foo(boolean b) { return b;    }
+  boolean bar()          { return true; }
 }
diff --git a/java-checks/src/test/java/org/sonar/java/checks/security/SecureXmlTransformerCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/security/SecureXmlTransformerCheckTest.java
index 0bc8c1a245..89357eb502 100755
--- a/java-checks/src/test/java/org/sonar/java/checks/security/SecureXmlTransformerCheckTest.java
+++ b/java-checks/src/test/java/org/sonar/java/checks/security/SecureXmlTransformerCheckTest.java
@@ -1,3 +1,22 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
 package org.sonar.java.checks.security;
 
 import org.junit.Test;
