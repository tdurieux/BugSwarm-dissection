diff --git a/src/test/java/de/thm/arsnova/services/SessionServiceTest.java b/src/test/java/de/thm/arsnova/services/SessionServiceTest.java
index 206fed3b3d..d5f9da0576 100755
--- a/src/test/java/de/thm/arsnova/services/SessionServiceTest.java
+++ b/src/test/java/de/thm/arsnova/services/SessionServiceTest.java
@@ -33,6 +33,7 @@
 import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.AuthorityUtils;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.test.context.ActiveProfiles;
 import org.springframework.test.context.ContextConfiguration;
@@ -40,7 +41,7 @@
 import org.springframework.test.context.web.WebAppConfiguration;
 import org.springframework.test.util.ReflectionTestUtils;
 
-import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
@@ -67,9 +68,14 @@
 	@Autowired
 	private StubDatabaseDao databaseDao;
 
-	private void setAuthenticated(final boolean isAuthenticated, final String username) {
+	private void setAuthenticated(final boolean isAuthenticated, final String username, final boolean creator) {
 		if (isAuthenticated) {
-			final List<GrantedAuthority> ga = new ArrayList<>();
+			final List<GrantedAuthority> ga;
+			if (creator) {
+				ga = AuthorityUtils.createAuthorityList("ROLE_SESSION_CREATOR");
+			} else {
+				ga = Collections.emptyList();
+			}
 			final UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, "secret", ga);
 			SecurityContextHolder.getContext().setAuthentication(token);
 			userService.setUserAuthenticated(isAuthenticated, username);
@@ -78,6 +84,10 @@ private void setAuthenticated(final boolean isAuthenticated, final String userna
 		}
 	}
 
+	private void setAuthenticated(final boolean isAuthenticated, final String username) {
+		setAuthenticated(isAuthenticated, username, false);
+	}
+
 	@Before
 	public void startup() {
 		SecurityContextHolder.clearContext();
@@ -126,7 +136,21 @@ public void testShouldNotSaveSessionIfUnauthorized() {
 
 	@Test
 	public void testShouldSaveSession() {
-		setAuthenticated(true, "ptsr00");
+		setAuthenticated(true, "ptsr00", true);
+
+		final Session session = new Session();
+		session.setActive(true);
+		session.setCreator("ptsr00");
+		session.setKeyword("11111111");
+		session.setName("TestSessionX");
+		session.setShortName("TSX");
+		sessionService.saveSession(session);
+		assertNotNull(sessionService.getSession("11111111"));
+	}
+
+	@Test(expected = AccessDeniedException.class)
+	public void testShouldNotSaveSession() {
+		setAuthenticated(true, "ptsr00", false);
 
 		final Session session = new Session();
 		session.setActive(true);
