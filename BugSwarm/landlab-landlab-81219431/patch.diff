diff --git a/landlab/io/esri_ascii.py b/landlab/io/esri_ascii.py
index dbf758ab42..a5d9bdb07d 100755
--- a/landlab/io/esri_ascii.py
+++ b/landlab/io/esri_ascii.py
@@ -253,9 +253,8 @@ def read_asc_header(asc_file):
     ...     xllcenter 0.5
     ...     yllcenter -0.5
     ... ''')
-    >>> read_asc_header(contents)
+    >>> read_asc_header(contents) # doctest: +IGNORE_EXCEPTION_DETAIL
     Traceback (most recent call last):
-        ...
     MissingRequiredKeyError: nrows
 
     ``KeyTypeError`` is raises if a value is of the wrong type. For instance,
@@ -268,9 +267,8 @@ def read_asc_header(asc_file):
     ...     xllcenter 0.5
     ...     yllcenter -0.5
     ... ''')
-    >>> read_asc_header(contents)
+    >>> read_asc_header(contents) # doctest: +IGNORE_EXCEPTION_DETAIL
     Traceback (most recent call last):
-        ...
     KeyTypeError: Unable to convert nrows to <type 'int'>
     """
     header = dict()
diff --git a/landlab/io/gebco/read.py b/landlab/io/gebco/read.py
index dfb8d876ed..8575e8cc09 100755
--- a/landlab/io/gebco/read.py
+++ b/landlab/io/gebco/read.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
-"""
-Read data from a GEBCO NetCDF file into a RasterModelGrid.
-"""
+"""Read data from a GEBCO NetCDF file into a RasterModelGrid."""
+
 
 try:
     import netCDF4 as nc4
@@ -11,8 +10,6 @@
 
 from scipy.io import netcdf as nc
 
-import numpy as np
-
 from landlab import RasterModelGrid
 from landlab.io.netcdf.errors import NotRasterGridError
 
@@ -22,30 +19,51 @@
 
 
 def _read_netcdf_grid_shape(root):
-    return root.variables['dimension'][:]
-
+    """Read the grid shape from a GEBCO NetCDF file.
 
-def _read_netcdf_grid_spacing(root):
-    return root.variables['spacing'][:]
+    Parameters
+    ----------
+    root : netcdf_file
+        A NetCDF file.
 
+    Returns
+    -------
+    tuple of int
+        The shape of the grid as number of rows, then columns.
+    """
+    return root.variables['dimension'][:]
 
-def _read_netcdf_coordinate_values(root):
-    values = []
-
-    spacing = root.variables['spacing'][:]
-    for (axis, coordinate_name) in enumerate(_AXIS_NAMES):
-        coord_range = root.variables[coordinate_name + '_range'][:]
-        values.append(np.arange(coord_range[0], coord_range[1] + spacing[axis],
-                                spacing[axis]))
 
-    return values
+def _read_netcdf_grid_spacing(root):
+    """Read the grid spacing from a GEBCO NetCDF file.
 
+    Parameters
+    ----------
+    root : netcdf_file
+        A NetCDF file.
 
-def _read_netcdf_coordinate_units(root):
-    return ['degrees_east', 'degrees_north']
+    Returns
+    -------
+    tuple of float
+        The spacing of the grid between rows, then columns.
+    """
+    return root.variables['spacing'][:]
 
 
 def _read_netcdf_structured_data(root):
+    """Read the grid data from a GEBCO NetCDF file.
+
+    Parameters
+    ----------
+    root : netcdf_file
+        A NetCDF file.
+
+    Returns
+    -------
+    dict
+        The data fields as numpy arrays. Keys are the variable names, and
+        values are the data.
+    """
     fields = dict()
     for (name, var) in root.variables.items():
         if name not in _COORDINATE_NAMES:
@@ -54,12 +72,25 @@ def _read_netcdf_structured_data(root):
     return fields
 
 
-def read_netcdf(nc_file, reshape=False, just_grid=False):
-    """
+def read_netcdf(nc_file, just_grid=False):
+    """Read a GEBCO-formatted NetCDF file.
+
     Reads the NetCDF file *nc_file*, and writes it to the fields of a new
-    RasterModelGrid, which it then returns.
-    Check the names of the fields in the returned grid with
-    grid.at_nodes.keys().
+    RasterModelGrid, which it then returns.  Check the names of the fields
+    in the returned grid with grid.at_nodes.keys().
+
+    Parameters
+    ----------
+    nc_file : str
+        Name of the NetCDF file.
+    just_grid : bool, optional
+        If ``True``, just read the grid information and forget the data.
+        Otherwise add the data as fields.
+
+    Returns
+    -------
+    RasterModelGrid
+        A newly-created :any:`RasterModelGrid`.
     """
     try:
         root = nc.netcdf_file(nc_file, 'r', version=2)
@@ -69,8 +100,8 @@ def read_netcdf(nc_file, reshape=False, just_grid=False):
     shape = _read_netcdf_grid_shape(root)
     spacing = _read_netcdf_grid_spacing(root)
 
-    assert(len(shape) == 2)
-    assert(len(spacing) == 2)
+    assert len(shape) == 2
+    assert len(spacing) == 2
     if spacing[0] != spacing[1]:
         raise NotRasterGridError()
 
diff --git a/landlab/io/netcdf/__init__.py b/landlab/io/netcdf/__init__.py
index d6cf8d1bcb..234a099512 100755
--- a/landlab/io/netcdf/__init__.py
+++ b/landlab/io/netcdf/__init__.py
@@ -1,5 +1,9 @@
 import os
 
+from .read import read_netcdf
+from .write import write_netcdf
+from .errors import NotRasterGridError
+
 try:
     import netCDF4 as nc4
 except ImportError:
@@ -14,12 +18,6 @@
 NETCDF3_64BIT_EXAMPLE_FILE = os.path.join(os.path.dirname(__file__), 'tests',
                                           'data', 'test-netcdf3-64bit.nc')
 
-
-from .read import read_netcdf
-from .write import write_netcdf
-from .errors import NotRasterGridError
-
-
-__all__ = ['read_netcdf', 'write_netcdf', 'NotRasterGridError',
+__all__ = ('read_netcdf', 'write_netcdf', 'NotRasterGridError',
            'WITH_NETCDF4', 'NETCDF4_EXAMPLE_FILE',
-           'NETCDF3_64BIT_EXAMPLE_FILE']
+           'NETCDF3_64BIT_EXAMPLE_FILE')
diff --git a/landlab/io/netcdf/_constants.py b/landlab/io/netcdf/_constants.py
index 133aa64137..3a1fbfdfb4 100755
--- a/landlab/io/netcdf/_constants.py
+++ b/landlab/io/netcdf/_constants.py
@@ -1,4 +1,5 @@
 #!/usr/bin/env python
+"""Constants used with the netcdf module."""
 
 
 _DIMENSION_NAMES = ['ni', 'nj', 'nk']
@@ -21,8 +22,6 @@
 
 _AXIS_DIMENSION_NAMES = ['nk', 'nj', 'ni']
 _AXIS_COORDINATE_NAMES = ['z', 'y', 'x']
-#_AXIS_DIMENSION_NAMES = ['ni', 'nj', 'nk']
-#_AXIS_COORDINATE_NAMES = ['x', 'y', 'z']
 
 _DIMENSION_NAMES = set(_AXIS_DIMENSION_NAMES + ['nt'])
 _COORDINATE_NAMES = set(_AXIS_COORDINATE_NAMES + ['t'])
diff --git a/landlab/io/netcdf/errors.py b/landlab/io/netcdf/errors.py
index 2fd5ae798b..d2f38eefa7 100755
--- a/landlab/io/netcdf/errors.py
+++ b/landlab/io/netcdf/errors.py
@@ -1,16 +1,20 @@
 #! /usr/bin/env
+"""Exceptions to raise for the netcdf module."""
 
 
 class Error(Exception):
-    """
-    Base class for errors in this package.
-    """
+
+    """Base class for errors in this package."""
+
     pass
 
 
 class NotRasterGridError(Error):
-    """
+
+    """Raise if grid is not uniform rectilinear.
+
     Raise this error if the grid defined in the netcdf file is not
     uniform rectilinear with constant spacing in all dimensions.
     """
+
     pass
diff --git a/landlab/io/netcdf/tests/test_read_netcdf.py b/landlab/io/netcdf/tests/test_read_netcdf.py
index bec953fe6a..5a4d441a96 100755
--- a/landlab/io/netcdf/tests/test_read_netcdf.py
+++ b/landlab/io/netcdf/tests/test_read_netcdf.py
@@ -1,10 +1,7 @@
 #! /usr/bin/env python
-"""
-Unit tests for landlab.io.netcdf module.
-"""
+"""Unit tests for landlab.io.netcdf module."""
 
 import os
-import numpy as np
 from nose.tools import assert_equal
 from nose.plugins.skip import SkipTest
 
@@ -15,11 +12,13 @@
 
 
 def test_read_netcdf3_64bit():
+    """Test read_netcdf for with 64-bit netcdf3 format."""
     grid = read_netcdf(os.path.join(_TEST_DATA_DIR, 'test-netcdf3-64bit.nc'))
     assert_equal(grid.shape, (4, 3))
 
 
 def test_read_netcdf4():
+    """Test read_netcdf with netcdf4 format."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
diff --git a/landlab/io/netcdf/tests/test_write_netcdf.py b/landlab/io/netcdf/tests/test_write_netcdf.py
index e5f830a127..1e9efe6562 100755
--- a/landlab/io/netcdf/tests/test_write_netcdf.py
+++ b/landlab/io/netcdf/tests/test_write_netcdf.py
@@ -1,16 +1,9 @@
 #! /usr/bin/env python
-"""
-Unit tests for landlab.io.netcdf module.
-"""
+"""Unit tests for landlab.io.netcdf module."""
 
-import os
 import numpy as np
 from nose.tools import assert_equal, assert_true, assert_raises
 from nose import SkipTest
-try:
-    from nose import assert_list_equal
-except ImportError:
-    from landlab.testing.tools import assert_list_equal
 from numpy.testing import assert_array_equal
 
 from landlab import RasterModelGrid
@@ -25,6 +18,7 @@
 
 
 def test_netcdf_write_int64_field_netcdf4():
+    """Test write_netcdf with a grid that has an int64 field."""
     field = RasterModelGrid(4, 3)
     field.add_field('node', 'topographic__elevation',
                     np.arange(12, dtype=np.int64))
@@ -44,6 +38,7 @@ def test_netcdf_write_int64_field_netcdf4():
 
 
 def test_netcdf_write_uint8_field_netcdf4():
+    """Test write_netcdf with a grid that has an uint8 field."""
     field = RasterModelGrid(4, 3)
     field.add_field('node', 'topographic__elevation',
                     np.arange(12, dtype=np.uint8))
@@ -63,6 +58,7 @@ def test_netcdf_write_uint8_field_netcdf4():
 
 
 def test_netcdf_write_as_netcdf3_64bit():
+    """Test write_netcdf with output format 64-bit netcdf3."""
     from scipy.io import netcdf
 
     field = RasterModelGrid(4, 3)
@@ -82,6 +78,7 @@ def test_netcdf_write_as_netcdf3_64bit():
 
 
 def test_netcdf_write_as_netcdf3_classic():
+    """Test write_netcdf with output format classic netcdf3."""
     from scipy.io import netcdf
 
     field = RasterModelGrid(4, 3)
@@ -101,6 +98,7 @@ def test_netcdf_write_as_netcdf3_classic():
 
 
 def test_netcdf_write():
+    """Test generic write_netcdf."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
@@ -133,6 +131,7 @@ def test_netcdf_write():
 
 
 def test_netcdf_write_as_netcdf4_classic():
+    """Test write_netcdf to netcdf4 classic format."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
@@ -153,6 +152,7 @@ def test_netcdf_write_as_netcdf4_classic():
 
 
 def test_netcdf_write_names_keyword_as_list():
+    """Test write_netcdf using a list for the *names* keyword."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
@@ -174,6 +174,7 @@ def test_netcdf_write_names_keyword_as_list():
 
 
 def test_netcdf_write_names_keyword_as_str():
+    """Test write_netcdf using a ``str`` for the *names* keyword."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
@@ -194,6 +195,7 @@ def test_netcdf_write_names_keyword_as_str():
 
 
 def test_netcdf_write_names_keyword_as_none():
+    """Test write_netcdf using ``None`` for the *names* keyword."""
     if not WITH_NETCDF4:
         raise SkipTest('netCDF4 package not installed')
 
@@ -214,6 +216,7 @@ def test_netcdf_write_names_keyword_as_none():
 
 
 def test_2d_unit_spacing():
+    """Test write_netcdf with a 2D grid with unit spacing."""
     (x, y) = np.meshgrid(np.arange(5.), np.arange(4.))
 
     spacing = _get_raster_spacing((y, x))
@@ -221,6 +224,7 @@ def test_2d_unit_spacing():
 
 
 def test_2d_non_unit_spacing():
+    """Test _get_raster_spacing with a 2D grid with non-unit spacing."""
     (x, y) = np.meshgrid(np.arange(5.) * 2, np.arange(4.) * 2)
 
     spacing = _get_raster_spacing((y, x))
@@ -228,36 +232,40 @@ def test_2d_non_unit_spacing():
 
 
 def test_2d_uneven_spacing_axis_0():
+    """Test _get_raster_spacing with a 2D grid with uneven spacing in y."""
     (x, y) = np.meshgrid(np.logspace(0., 2., num=5), np.arange(4.))
 
     assert_raises(NotRasterGridError, _get_raster_spacing, (y, x))
 
 
 def test_2d_uneven_spacing_axis_1():
+    """Test _get_raster_spacing with a 2D grid with uneven spacing in x."""
     (x, y) = np.meshgrid(np.arange(4.), np.logspace(0., 2., num=5))
 
     assert_raises(NotRasterGridError, _get_raster_spacing, (y, x))
 
 
 def test_2d_switched_coords():
+    """Test _get_raster_spacing with a 2D grid when the spacing is switched."""
     (x, y) = np.meshgrid(np.arange(5.), np.arange(4.))
 
     spacing = _get_raster_spacing((x, y))
     assert_equal(spacing, 0.)
 
 
-def test_1d__unit_spacing():
+def test_1d_unit_spacing():
+    """Test _get_raster_spacing with a 1D grid with unit spacing."""
     spacing = _get_raster_spacing((np.arange(5.), ))
     assert_equal(spacing, 1.)
 
 
 def test_1d_non_unit_spacing():
+    """Test _get_raster_spacing with a 1D grid with non-unit spacing."""
     spacing = _get_raster_spacing((np.arange(5.) * 2, ))
     assert_equal(spacing, 2.)
 
 
 def test_1d_uneven_spacing():
-    (x, y) = np.meshgrid(np.logspace(0., 2., num=5), np.arange(4.))
-
+    """Test _get_raster_spacing with a 1D grid with uneven spacing in y."""
     assert_raises(NotRasterGridError, _get_raster_spacing,
                   (np.logspace(0., 2., num=5), ))
