diff --git a/azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/VirtualMachineImpl.java b/azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/VirtualMachineImpl.java
index acc6b652a6..e6ed847714 100755
--- a/azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/VirtualMachineImpl.java
+++ b/azure-mgmt-compute/src/main/java/com/microsoft/azure/management/compute/implementation/VirtualMachineImpl.java
@@ -737,7 +737,7 @@ public PublicIpAddress primaryPublicIpAddress()  throws CloudException, IOExcept
 
     @Override
     public List<String> networkInterfaceIds() {
-        List nicIds = new ArrayList();
+        List<String> nicIds = new ArrayList<>();
         for (NetworkInterfaceReference nicRef : inner().networkProfile().networkInterfaces()) {
             nicIds.add(nicRef.id());
         }
@@ -889,7 +889,6 @@ private void handleStorageSettings() throws Exception {
                     .define(nameWithPrefix("stg", null))
                     .withRegion(this.region())
                     .withExistingGroup(this.resourceGroupName())
-                    .withAccountType(AccountType.STANDARD_GRS)
                     .create();
         }
 
diff --git a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkSecurityGroup.java b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkSecurityGroup.java
index a0d6bd238b..1eaac5b1e1 100755
--- a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkSecurityGroup.java
+++ b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkSecurityGroup.java
@@ -40,6 +40,12 @@
      */
     List<NetworkSecurityRule> defaultSecurityRules();
 
+    /**
+     * @return list of the ids of the network interfaces associated with this network security group
+     */
+    List<String> networkInterfaceIds();
+
+
     // Fluent interfaces for creating NSGs
 
     /**
diff --git a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/NetworkSecurityGroupImpl.java b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/NetworkSecurityGroupImpl.java
index 246a3f0455..9902f4b0d6 100755
--- a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/NetworkSecurityGroupImpl.java
+++ b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/NetworkSecurityGroupImpl.java
@@ -11,6 +11,7 @@
 
 import com.microsoft.azure.management.network.NetworkSecurityGroup;
 import com.microsoft.azure.management.network.NetworkSecurityRule;
+import com.microsoft.azure.management.network.implementation.api.NetworkInterfaceInner;
 import com.microsoft.azure.management.network.implementation.api.NetworkSecurityGroupInner;
 import com.microsoft.azure.management.network.implementation.api.NetworkSecurityGroupsInner;
 import com.microsoft.azure.management.network.implementation.api.SecurityRuleInner;
@@ -139,4 +140,15 @@ public Update withoutRule(String name) {
     public List<NetworkSecurityRule> defaultSecurityRules() {
         return Collections.unmodifiableList(this.defaultRules);
     }
-}
\ No newline at end of file
+
+    @Override
+    public List<String> networkInterfaceIds() {
+        List<String> ids = new ArrayList<>();
+        if (this.inner().networkInterfaces() != null) {
+            for (NetworkInterfaceInner inner : this.inner().networkInterfaces()) {
+                ids.add(inner.id());
+            }
+        }
+        return Collections.unmodifiableList(ids);
+    }
+ }
\ No newline at end of file
diff --git a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/PublicIpAddressImpl.java b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/PublicIpAddressImpl.java
index 91d07ddeaf..9f219af29c 100755
--- a/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/PublicIpAddressImpl.java
+++ b/azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/implementation/PublicIpAddressImpl.java
@@ -7,6 +7,7 @@
 
 import com.microsoft.azure.management.network.PublicIpAddress;
 import com.microsoft.azure.management.network.implementation.api.IPAllocationMethod;
+import com.microsoft.azure.management.network.implementation.api.PublicIPAddressDnsSettings;
 import com.microsoft.azure.management.network.implementation.api.PublicIPAddressInner;
 import com.microsoft.azure.management.network.implementation.api.PublicIPAddressesInner;
 import com.microsoft.azure.management.resources.ResourceGroups;
@@ -142,6 +143,16 @@ public String leafDomainLabel() {
 
     @Override
     protected void createResource() throws Exception {
+        // Clean up empty DNS settings
+        final PublicIPAddressDnsSettings dnsSettings = this.inner().dnsSettings();
+        if (dnsSettings != null) {
+            if ((dnsSettings.domainNameLabel() == null || dnsSettings.domainNameLabel().isEmpty())
+                    && (dnsSettings.fqdn() == null || dnsSettings.fqdn().isEmpty())
+                    && (dnsSettings.reverseFqdn() == null || dnsSettings.reverseFqdn().isEmpty())) {
+                this.inner().withDnsSettings(null);
+            }
+        }
+
         ServiceResponse<PublicIPAddressInner> response =
                 this.client.createOrUpdate(this.resourceGroupName(), this.name(), this.inner());
         this.setInner(response.getBody());
diff --git a/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/ResourceGroupExportTemplateOptions.java b/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/ResourceGroupExportTemplateOptions.java
index 076d07b1fb..59d9ef70a0 100755
--- a/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/ResourceGroupExportTemplateOptions.java
+++ b/azure-mgmt-resources/src/main/java/com/microsoft/azure/management/resources/ResourceGroupExportTemplateOptions.java
@@ -10,10 +10,19 @@
  * The export template options.
  */
 public enum ResourceGroupExportTemplateOptions {
+    /**
+     * Includes default parameter values.
+     */
     INCLUDE_PARAMETER_DEFAULT_VALUE("IncludeParameterDefaultValue"),
 
+    /**
+     * Includes comments.
+     */
     INCLUDE_COMMENTS("IncludeComments"),
 
+    /**
+     * Includes default parameter values and comments.
+     */
     INCLUDE_BOTH("IncludeParameterDefaultValue, IncludeComments");
 
     private String value;
diff --git a/azure/src/test/java/com/microsoft/azure/TestNSG.java b/azure/src/test/java/com/microsoft/azure/TestNSG.java
index e4dd1f6ac7..f9758d6027 100755
--- a/azure/src/test/java/com/microsoft/azure/TestNSG.java
+++ b/azure/src/test/java/com/microsoft/azure/TestNSG.java
@@ -77,6 +77,8 @@ public void print(NetworkSecurityGroup resource) {
                 .append("\n\t\tPriority: ").append(rule.priority());
         }
 
+        info.append("\n\tNICs: ").append(resource.networkInterfaceIds());
+
         System.out.println(info.toString());
     }
 }
diff --git a/azure/src/test/java/com/microsoft/azure/TestNetworkInterface.java b/azure/src/test/java/com/microsoft/azure/TestNetworkInterface.java
index 7d6fe3952f..c7ff6a21e7 100755
--- a/azure/src/test/java/com/microsoft/azure/TestNetworkInterface.java
+++ b/azure/src/test/java/com/microsoft/azure/TestNetworkInterface.java
@@ -5,9 +5,10 @@
  */
 package com.microsoft.azure;
 
-import com.microsoft.azure.management.network.*;
 import org.junit.Assert;
 
+import com.microsoft.azure.management.network.NetworkInterface;
+import com.microsoft.azure.management.network.NetworkInterfaces;
 import com.microsoft.azure.management.resources.fluentcore.arm.Region;
 
 public class TestNetworkInterface extends TestTemplate<NetworkInterface, NetworkInterfaces> {
@@ -53,7 +54,7 @@ public void print(NetworkInterface resource) {
                 .append("\n\tDNS server IPs: ");
 
         // Output dns servers
-        for(String dnsServerIp : resource.dnsServers()) {
+        for (String dnsServerIp : resource.dnsServers()) {
             info.append("\n\t\t").append(dnsServerIp);
         }
         info.append("\n\t IP forwarding enabled: ").append(resource.isIpForwardingEnabled())
diff --git a/azure/src/test/java/com/microsoft/azure/TestVirtualMachine.java b/azure/src/test/java/com/microsoft/azure/TestVirtualMachine.java
index 54efa60459..f4328c4afc 100755
--- a/azure/src/test/java/com/microsoft/azure/TestVirtualMachine.java
+++ b/azure/src/test/java/com/microsoft/azure/TestVirtualMachine.java
@@ -3,9 +3,7 @@
 import com.microsoft.azure.management.compute.VirtualMachine;
 import com.microsoft.azure.management.compute.VirtualMachines;
 import com.microsoft.azure.management.compute.implementation.KnownVirtualMachineImage;
-import com.microsoft.azure.management.compute.implementation.api.DataDisk;
 import com.microsoft.azure.management.resources.fluentcore.arm.Region;
-import org.junit.Assert;
 
 public class TestVirtualMachine extends TestTemplate<VirtualMachine, VirtualMachines> {
     @Override
diff --git a/azure/src/test/java/com/microsoft/azure/TestVirtualMachineNics.java b/azure/src/test/java/com/microsoft/azure/TestVirtualMachineNics.java
index fa5ef64297..51b6801bee 100755
--- a/azure/src/test/java/com/microsoft/azure/TestVirtualMachineNics.java
+++ b/azure/src/test/java/com/microsoft/azure/TestVirtualMachineNics.java
@@ -9,7 +9,6 @@
 import com.microsoft.azure.management.network.NetworkInterfaces;
 import com.microsoft.azure.management.network.Networks;
 import com.microsoft.azure.management.network.PublicIpAddress;
-import com.microsoft.azure.management.network.PublicIpAddresses;
 import com.microsoft.azure.management.resources.ResourceGroup;
 import com.microsoft.azure.management.resources.ResourceGroups;
 import com.microsoft.azure.management.resources.fluentcore.arm.Region;
diff --git a/azure/src/test/java/com/microsoft/azure/Utils.java b/azure/src/test/java/com/microsoft/azure/Utils.java
index fd5f612857..9b90e83118 100755
--- a/azure/src/test/java/com/microsoft/azure/Utils.java
+++ b/azure/src/test/java/com/microsoft/azure/Utils.java
@@ -3,11 +3,22 @@
 import com.microsoft.azure.management.compute.VirtualMachine;
 import com.microsoft.azure.management.compute.implementation.api.DataDisk;
 
-public class Utils {
+/**
+ * Test utilities.
+ */
+public final class Utils {
+    private Utils() {
+
+    }
+
+    /**
+     * Shows the virtual machine.
+     * @param resource virtual machine to show
+     */
     public static void print(VirtualMachine resource) {
         StringBuilder storageProfile = new StringBuilder().append("\n\tStorageProfile: ");
         if (resource.storageProfile().imageReference() != null) {
-            storageProfile.append("\n\t\tImageReference:" );
+            storageProfile.append("\n\t\tImageReference:");
             storageProfile.append("\n\t\t\tPublisher: ").append(resource.storageProfile().imageReference().publisher());
             storageProfile.append("\n\t\t\tOffer: ").append(resource.storageProfile().imageReference().offer());
             storageProfile.append("\n\t\t\tSKU: ").append(resource.storageProfile().imageReference().sku());
@@ -15,7 +26,7 @@ public static void print(VirtualMachine resource) {
         }
 
         if (resource.storageProfile().osDisk() != null) {
-            storageProfile.append("\n\t\tOSDisk:" );
+            storageProfile.append("\n\t\tOSDisk:");
             storageProfile.append("\n\t\t\tOSType: ").append(resource.storageProfile().osDisk().osType());
             storageProfile.append("\n\t\t\tName: ").append(resource.storageProfile().osDisk().name());
             storageProfile.append("\n\t\t\tCaching: ").append(resource.storageProfile().osDisk().caching());
@@ -46,7 +57,7 @@ public static void print(VirtualMachine resource) {
         if (resource.storageProfile().dataDisks() != null) {
             int i = 0;
             for (DataDisk disk : resource.storageProfile().dataDisks()) {
-                storageProfile.append("\n\t\tDataDisk: #" ).append(i++);
+                storageProfile.append("\n\t\tDataDisk: #").append(i++);
                 storageProfile.append("\n\t\t\tName: ").append(disk.name());
                 storageProfile.append("\n\t\t\tCaching: ").append(disk.caching());
                 storageProfile.append("\n\t\t\tCreateOption: ").append(disk.createOption());
@@ -62,7 +73,7 @@ public static void print(VirtualMachine resource) {
         }
 
         StringBuilder osProfile = new StringBuilder().append("\n\tOSProfile: ");
-        osProfile.append("\n\t\tComputerName:" ).append(resource.osProfile().computerName());
+        osProfile.append("\n\t\tComputerName:").append(resource.osProfile().computerName());
         if (resource.osProfile().windowsConfiguration() != null) {
             osProfile.append("\n\t\t\tWindowsConfiguration: ");
             osProfile.append("\n\t\t\t\tProvisionVMAgent: ")
@@ -81,7 +92,7 @@ public static void print(VirtualMachine resource) {
 
         StringBuilder networkProfile = new StringBuilder().append("\n\tNetworkProfile: ");
         for (String networkInterfaceId : resource.networkInterfaceIds()) {
-            networkProfile.append("\n\t\tId:" ).append(networkInterfaceId);
+            networkProfile.append("\n\t\tId:").append(networkInterfaceId);
         }
 
         System.out.println(new StringBuilder().append("Virtual Machine: ").append(resource.id())
