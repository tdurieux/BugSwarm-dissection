diff --git a/osgidistribution/pom.xml b/osgidistribution/pom.xml
index 38534a6f3a..3d3f5a2606 100755
--- a/osgidistribution/pom.xml
+++ b/osgidistribution/pom.xml
@@ -35,6 +35,7 @@
 		<dependency><groupId>org.slf4j</groupId><artifactId>slf4j-api</artifactId><version>1.7.22</version></dependency>
 		<dependency><groupId>org.slf4j</groupId><artifactId>jcl-over-slf4j</artifactId><version>1.7.22</version></dependency>
 		<dependency><groupId>org.openrdf.sesame</groupId><artifactId>sesame-model</artifactId><version>${inherited.sesame.version}</version></dependency>
+		<dependency><groupId>org.openrdf.sesame</groupId><artifactId>sesame-util</artifactId><version>${inherited.sesame.version}</version></dependency>		
 		<dependency><groupId>org.openrdf.sesame</groupId><artifactId>sesame-rio-api</artifactId><version>${inherited.sesame.version}</version></dependency>
 		<dependency><groupId>org.openrdf.sesame</groupId><artifactId>sesame-rio-languages</artifactId><version>${inherited.sesame.version}</version></dependency>
 		<dependency><groupId>org.openrdf.sesame</groupId><artifactId>sesame-rio-datatypes</artifactId><version>${inherited.sesame.version}</version></dependency>
diff --git a/osgidistribution/src/test/java/org/semanticweb/owlapi/BundleIsLoadableIntegrationTestCase.java b/osgidistribution/src/test/java/org/semanticweb/owlapi/BundleIsLoadableIntegrationTestCase.java
index 10b8b714e9..5e24edb790 100755
--- a/osgidistribution/src/test/java/org/semanticweb/owlapi/BundleIsLoadableIntegrationTestCase.java
+++ b/osgidistribution/src/test/java/org/semanticweb/owlapi/BundleIsLoadableIntegrationTestCase.java
@@ -25,19 +25,14 @@
 import org.osgi.framework.launch.Framework;
 import org.semanticweb.owlapi.apibinding.OWLManager;
 import org.semanticweb.owlapi.test.IntegrationTest;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 @SuppressWarnings("javadoc")
 @Category(IntegrationTest.class)
 public class BundleIsLoadableIntegrationTestCase {
 
-    private static Logger logger = LoggerFactory
-        .getLogger(BundleIsLoadableIntegrationTestCase.class);
-
     @Test
-    public void startBundle() throws BundleException, ClassNotFoundException,
-        IllegalAccessException, InstantiationException {
+    public void startBundle() throws BundleException, ClassNotFoundException, IllegalAccessException,
+        InstantiationException {
         Map<String, String> configuration = new HashMap<>();
         configuration.put("org.osgi.framework.storage.clean", "onFirstInit");
         configuration.put("felix.log.level", "4");
@@ -54,8 +49,7 @@ public void startBundle() throws BundleException, ClassNotFoundException,
         File[] files = dir.listFiles();
         for (File f : files) {
             String fileName = f.getAbsolutePath();
-            if (fileName.endsWith("jar") && !fileName.contains("sources")
-                && !fileName.contains("javadoc")) {
+            if (fileName.endsWith("jar") && !fileName.contains("sources") && !fileName.contains("javadoc")) {
                 file = f;
                 break;
             }
@@ -65,36 +59,43 @@ public void startBundle() throws BundleException, ClassNotFoundException,
         assertNotNull("uri is null", uri);
         BundleContext context = framework.getBundleContext();
         assertNotNull("context is null", context);
-        List<String> bundles = Arrays.asList("javax-inject", "aopalliance",
-            "guava", "guice-multibindings", "guice-assistedinject", "guice-4",
-            "aopalliance", "commons-io", "commons-codec", "slf4j-simple", "jcl-over-slf4j", "slf4j-api");
+        List<String> bundles = Arrays.asList("org.apache.servicemix.bundles.javax-inject",
+            "org.apache.servicemix.bundles.aopalliance", "slf4j-simple", "slf4j-api", "caffeine", "guava", "jsr305",
+            "guice-multibindings", "guice-assistedinject", "guice-4", "commons-io", "commons-codec", "jcl-over-slf4j");
         for (String bundleName : bundles) {
             try {
                 String simple = getJarURL(bundleName);
                 if (simple.isEmpty()) {
-                    logger.info("Can't install " + bundleName + ";");
+                    System.out.println("Can't install " + bundleName + ";");
                 }
+                // System.out.println("BundleIsLoadableIntegrationTestCase.startBundle()
+                // " + simple);
                 Bundle simpleLoggerBundle = context.installBundle(simple);
                 try {
                     simpleLoggerBundle.start();
                 } catch (BundleException e) {
-                    e.printStackTrace();
+                    if (!"Fragment bundles can not be started.".equals(e.getMessage())) {
+                        System.out.println("ERROR " + simple + " " + e.getMessage());
+                    }
                 }
             } catch (Throwable e) {
-                logger.info("Can't install: " + bundleName, e);
+                System.out.println("ERROR " + e.getMessage());
             }
         }
-        Bundle bundle = context.installBundle(uri.toString());
-        assertNotNull(bundle);
-        bundle.start();
-        assertEquals("bundle state", bundle.getState(), Bundle.ACTIVE);
-        Class<?> owlManagerClass = bundle
-            .loadClass("org.semanticweb.owlapi.apibinding.OWLManager");
-        assertNotNull("no class owlmanager", owlManagerClass);
-        owlManagerClass.newInstance();
-        assertNotEquals(
-            "OWLManager class from bundle class loader  equals OWLManager class from system class path",
-            OWLManager.class, owlManagerClass);
+        try {
+            Bundle bundle = context.installBundle(uri.toString());
+            assertNotNull(bundle);
+            bundle.start();
+            assertEquals("bundle state", bundle.getState(), Bundle.ACTIVE);
+            Class<?> owlManagerClass = bundle.loadClass("org.semanticweb.owlapi.apibinding.OWLManager");
+            assertNotNull("no class owlmanager", owlManagerClass);
+            owlManagerClass.newInstance();
+            assertNotEquals("OWLManager class from bundle class loader  equals OWLManager class from system class path",
+                OWLManager.class, owlManagerClass);
+        } catch (Exception e) {
+            e.printStackTrace(System.out);
+            throw e;
+        }
     }
 
     @Nonnull
@@ -104,7 +105,8 @@ private String getJarURL(String jarNameFragment) {
             for (URL url : ((URLClassLoader) classLoader).getURLs()) {
                 String string = url.toString();
                 if (string.contains(jarNameFragment)) {
-                    System.out.println("BundleIsLoadableIntegrationTestCase.getJarURL() " + string);
+                    // System.out.println("BundleIsLoadableIntegrationTestCase.getJarURL()
+                    // " + string);
                     return string;
                 }
             }
diff --git a/pom.xml b/pom.xml
index afc6b807bb..7f8525c289 100755
--- a/pom.xml
+++ b/pom.xml
@@ -325,7 +325,7 @@
 			<plugin>
 				<groupId>org.codehaus.mojo</groupId>
 				<artifactId>animal-sniffer-maven-plugin</artifactId>
-				<version>1.13</version>
+				<version>1.15</version>
 				<executions>
 					<execution>
 						<phase>test</phase>
