diff --git a/modules/wyc/src/wyc/builder/CodeGenerator.java b/modules/wyc/src/wyc/builder/CodeGenerator.java
index a5e688535d..058f235b87 100755
--- a/modules/wyc/src/wyc/builder/CodeGenerator.java
+++ b/modules/wyc/src/wyc/builder/CodeGenerator.java
@@ -230,7 +230,6 @@ public WyilFile generate(WhileyFile wf) {
 		// Allocate all declared variables now. This ensures that all declared
 		// variables occur before any temporary variables.
 		buildVariableDeclarations(fd.statements, declarations, environment, fd);
-		
 		// ==================================================================
 		// Generate pre-condition
 		// ==================================================================
diff --git a/modules/wyc/src/wyc/builder/FlowTypeChecker.java b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
index 00cee75c60..eb5839ac3d 100755
--- a/modules/wyc/src/wyc/builder/FlowTypeChecker.java
+++ b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
@@ -250,12 +250,12 @@ public void propagate(WhileyFile.FunctionOrMethod d) throws IOException {
 		
 		// Resolve the types of all parameters and construct an appropriate
 		// environment for use in the flow-sensitive type propagation.
-		Environment environment = addDeclaredParameters(d.parameters,new Environment(),d);		
+		Environment environment = addDeclaredParameters(d.parameters,new Environment(),d);
+		environment = addDeclaredParameter(d.returnType, environment.clone(), d);
 		// Resolve types for any preconditions (i.e. requires clauses) provided.
 		propagateConditions(d.requires, environment, d);		
 		// Resolve types for any postconditions (i.e. ensures clauses) provided.
-		Environment ensuresEnvironment = addDeclaredParameter(d.returnType, environment.clone(), d);
-		propagateConditions(d.ensures, ensuresEnvironment, d);
+		propagateConditions(d.ensures, environment, d);
 
 		// Resolve the overall type for the function or method.
 		if (d instanceof WhileyFile.Function) {
diff --git a/modules/wyc/src/wyc/io/WhileyFileParser.java b/modules/wyc/src/wyc/io/WhileyFileParser.java
index 07051856c7..d6aba818e8 100755
--- a/modules/wyc/src/wyc/io/WhileyFileParser.java
+++ b/modules/wyc/src/wyc/io/WhileyFileParser.java
@@ -289,15 +289,13 @@ private void parseFunctionOrMethodDeclaration(WhileyFile wf,
 		
 		// Parse (optional) return type
 		Parameter ret = null;
-		HashSet<String> ensuresEnvironment = environment;
 
 		if (tryAndMatch(true, MinusGreater) != null) {
 			// Explicit return type is given, so parse it! We first clone the
 			// environent and create a special one only for use within ensures
 			// clauses, since these are the only expressions which may refer to
 			// variables declared in the return type.
-			ensuresEnvironment = new HashSet<String>(environment);						
-			ret = parseOptionalParameter(wf,ensuresEnvironment);		
+			ret = parseOptionalParameter(wf,environment);		
 		} 
 
 		// Parse optional requires/ensures clauses
@@ -315,7 +313,7 @@ private void parseFunctionOrMethodDeclaration(WhileyFile wf,
 				// Use the ensuresEnvironment here to get access to any
 				// variables declared in the return type pattern.
 				// NOTE: expression terminated by ':'
-				ensures.add(parseLogicalExpression(wf, ensuresEnvironment, true));
+				ensures.add(parseLogicalExpression(wf, environment, true));
 				break;
 			}
 		}
diff --git a/modules/wyc/src/wyc/testing/AllValidTests.java b/modules/wyc/src/wyc/testing/AllValidTests.java
index 49633ca219..d8b1a472ed 100755
--- a/modules/wyc/src/wyc/testing/AllValidTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidTests.java
@@ -1694,7 +1694,7 @@ public void RecursiveType_Valid_11() throws IOException {
 		runTest("RecursiveType_Valid_11");
 	}
 
-	@Test
+	@Ignore("#339") @Test
 	public void RecursiveType_Valid_12() throws IOException {
 		runTest("RecursiveType_Valid_12");
 	}
@@ -1749,7 +1749,7 @@ public void RecursiveType_Valid_21() throws IOException {
 		runTest("RecursiveType_Valid_21");
 	}
 
-	@Test
+	@Ignore("#339") @Test
 	public void RecursiveType_Valid_22() throws IOException {
 		runTest("RecursiveType_Valid_22");
 	}
diff --git a/modules/wyil/src/wyil/builders/VcGenerator.java b/modules/wyil/src/wyil/builders/VcGenerator.java
index 75f568a0c3..a06947e9c3 100755
--- a/modules/wyil/src/wyil/builders/VcGenerator.java
+++ b/modules/wyil/src/wyil/builders/VcGenerator.java
@@ -1862,7 +1862,6 @@ private Expr havoc(Expr source, VcBranch branch, AttributedCodeBlock block) {
 			branch.havoc(register);
 			return branch.read(register);
 		} else {
-			System.out.println("SOURCE IS: " + source.getClass().getName());
 			// TODO: Must implement the other cases. At the moment, I'm not sure
 			// the best way to do this though.
 		}
diff --git a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
index 939b4be963..e1dfc45ab0 100755
--- a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
+++ b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
@@ -414,7 +414,7 @@ public void Complex_Valid_2() {
 		runTest("Complex_Valid_2");
 	}
 
-	@Ignore("Issue ???") @Test
+	@Ignore("#339") @Test
 	public void Complex_Valid_3() {
 		runTest("Complex_Valid_3");
 	}
@@ -1763,7 +1763,7 @@ public void RecursiveType_Valid_11() {
 		runTest("RecursiveType_Valid_11");
 	}
 
-	@Test
+	@Ignore("#339") @Test
 	public void RecursiveType_Valid_12() {
 		runTest("RecursiveType_Valid_12");
 	}
@@ -1818,7 +1818,7 @@ public void RecursiveType_Valid_21() {
 		runTest("RecursiveType_Valid_21");
 	}
 
-	@Test
+	@Ignore("#339") @Test
 	public void RecursiveType_Valid_22() {
 		runTest("RecursiveType_Valid_22");
 	}
diff --git a/modules/wyrt/src/whiley/lang/Array.whiley b/modules/wyrt/src/whiley/lang/Array.whiley
index f1d8e2b555..67c26625a4 100755
--- a/modules/wyrt/src/whiley/lang/Array.whiley
+++ b/modules/wyrt/src/whiley/lang/Array.whiley
@@ -26,15 +26,15 @@
 package whiley.lang
 
 // Resize an array to a given size
-public function resize(int[] items, int size, int element) -> (int[] nitems)
+public function resize(int[] items, int size, int element) -> (int[] result)
 // Required size cannot be negative
 requires size >= 0
 // Returned array is of specified size
-ensures |nitems| == size
+ensures |result| == size
 // If array is enlarged, the all elements up to new size match
-ensures all { i in 0 .. |items| | i >= size || nitems[i] == items[i] }
+ensures all { i in 0 .. |items| | i >= size || result[i] == items[i] }
 // All new elements match given element
-ensures all { i in |items| .. size | nitems[i] == element}:
+ensures all { i in |items| .. size | result[i] == element}:
     //
     int[] nitems = [element; size]
     int i = 0
@@ -142,16 +142,16 @@ ensures |r| == (end - start)
 // Items returned in slice match those in region from start
 ensures all { i in 0..|r| | items[i+start] == r[i] }:
     //
-    int[] r = [0; end-start]
+    int[] nitems = [0; end-start]
     int i = 0
     //
-    while i < |r|
-    where i >= 0 && |r| == (end-start)
-    where all { k in 0..i | r[k] == items[k+start] }:
-        r[i] = items[i+start]
+    while i < |nitems|
+    where i >= 0 && |nitems| == (end-start)
+    where all { k in 0..i | nitems[k] == items[k+start] }:
+        nitems[i] = items[i+start]
         i = i + 1
     //
-    return r
+    return nitems
 
 public function append(int[] lhs, int[] rhs) -> int[]:
     int[] rs = [0; |lhs| + |rhs|]
diff --git a/modules/wyrt/src/whiley/lang/Math.whiley b/modules/wyrt/src/whiley/lang/Math.whiley
index 3786048fa6..64822576a5 100755
--- a/modules/wyrt/src/whiley/lang/Math.whiley
+++ b/modules/wyrt/src/whiley/lang/Math.whiley
@@ -127,11 +127,11 @@ requires exponent > 0:
  * Return largest integer which is less-than-or-equal to
  * the given value
  */
-public function floor(real x) -> (int r)
+public function floor(real x) -> (int result)
 // Return is greater-than-or-equal to input
-ensures ((real) r) <= x
+ensures ((real) result) <= x
 // Input value is between return and return plus one
-ensures ((real) r + 1) > x:
+ensures ((real) result + 1) > x:
     //
     int num
     int den
@@ -146,11 +146,11 @@ ensures ((real) r + 1) > x:
  * Return smallest integer which is greater-than-or-equal to
  * the given value
  */
-public function ceil(real x) -> (int r)
+public function ceil(real x) -> (int result)
 // Return is greater-than-or-equal to input
-ensures x <= ((real) r)
+ensures x <= ((real) result)
 // Input value is between return and return less one
-ensures ((real) r - 1) < x:
+ensures ((real) result - 1) < x:
     //
     int num
     int den
diff --git a/tests/valid/Cast_Valid_5.whiley b/tests/valid/Cast_Valid_5.whiley
index 8af7518e40..b70fa286ce 100755
--- a/tests/valid/Cast_Valid_5.whiley
+++ b/tests/valid/Cast_Valid_5.whiley
@@ -12,21 +12,21 @@ ensures all { i in 1 .. |r| | 2 * r[i-1] == r[i] }:
 public function toUnsignedInt(byte b) -> (int r)
 ensures 0 <= r && r <= 255:
     //
-    int r = 0
+    int x = 0
     int base = 1
     int i = 0
     //
     while i <= 7
         where 0 <= i
-        where 0 <= r && r < base
+        where 0 <= x && x < base
         where base == bases[i]:
         if (b & 00000001b) == 00000001b:
-            r = r + base
+            x = x + base
         b = b >> 1
         base = base * 2
         i = i + 1
     //
-    return r
+    return x
 
 public function toUnsignedByte(u8 v) -> byte:
     //
diff --git a/tests/valid/RealSplit_Valid_1.whiley b/tests/valid/RealSplit_Valid_1.whiley
index e979acbb76..7c1ca9ac08 100755
--- a/tests/valid/RealSplit_Valid_1.whiley
+++ b/tests/valid/RealSplit_Valid_1.whiley
@@ -1,7 +1,9 @@
 
 
 function f(real z) -> {int n, int d}:
-    int x / int y = z
+    int x
+    int y
+    x/y = z
     return {n: x, d: y}
 
 public export method test() -> void:
diff --git a/tests/valid/RecordCoercion_Valid_1.whiley b/tests/valid/RecordCoercion_Valid_1.whiley
index 6eb6c4ff1f..20a0a52a1d 100755
--- a/tests/valid/RecordCoercion_Valid_1.whiley
+++ b/tests/valid/RecordCoercion_Valid_1.whiley
@@ -5,7 +5,9 @@ type Rec1 is {int x}
 type Rec2 is {real x}
 
 function f(Rec2 rec) -> int:
-    int x / int y = rec.x
+    int x
+    int y
+    x/y = rec.x
     return x
 
 public export method test() -> void:
diff --git a/tests/valid/While_Valid_30.whiley b/tests/valid/While_Valid_30.whiley
index b8d9ec25cd..c2a2adf66b 100755
--- a/tests/valid/While_Valid_30.whiley
+++ b/tests/valid/While_Valid_30.whiley
@@ -5,11 +5,11 @@ requires n >= 0
 ensures  r == 2*n:
     //
     int i = 0
-    int r = 0
-    while i < n where i <= n && r == 2*i:
-        r = r + 2
+    int x = 0
+    while i < n where i <= n && x == 2*i:
+        x = x + 2
         i = i + 1
-    return r
+    return x
 
 public export method test():
     assume duplicate(0) == 0
diff --git a/tests/valid/While_Valid_33.whiley b/tests/valid/While_Valid_33.whiley
index ae555ec91d..3b4c74a7b4 100755
--- a/tests/valid/While_Valid_33.whiley
+++ b/tests/valid/While_Valid_33.whiley
@@ -7,12 +7,12 @@ requires all { i in 0..|items| | items[i] >= 0 }
 ensures r >= 0:
     //
     int i = 0
-    int r = 0
-    while i < |items| where i >= 0 && r >= 0:
-        r = r + items[i]
+    int x = 0
+    while i < |items| where i >= 0 && x >= 0:
+        x = x + items[i]
         i = i + 1
     //
-    return r
+    return x
 
 public export method test():
     assume sum([0;0]) == 0
diff --git a/tests/valid/While_Valid_37.whiley b/tests/valid/While_Valid_37.whiley
index ed8db0ef94..772444c271 100755
--- a/tests/valid/While_Valid_37.whiley
+++ b/tests/valid/While_Valid_37.whiley
@@ -1,12 +1,12 @@
 
 
-function invertByte(bool[] bits) -> (bool[] ret)
+function invertByte(bool[] bits) -> (bool[] r)
 // Precondition: 8 bits in a byte
 requires |bits| == 8
 // Postcondition: return a byte as well
-ensures |ret| == 8
+ensures |r| == 8
 // Postcondition: every bit must be inverted
-ensures all { i in 0 .. 8 | ret[i] == !bits[i] }:
+ensures all { i in 0 .. 8 | r[i] == !bits[i] }:
     //
     int i = 0
     bool[] ret = bits
diff --git a/tests/valid/While_Valid_47.whiley b/tests/valid/While_Valid_47.whiley
index 434437bc4d..3c6a7ed8ad 100755
--- a/tests/valid/While_Valid_47.whiley
+++ b/tests/valid/While_Valid_47.whiley
@@ -5,13 +5,13 @@ requires all { i in 0..|xs| | xs[i] >= 0 }
 ensures r >= 0:
    //
    nat i = 0
-   nat r = 0
+   nat x = 0
    //
    while i < |xs|:
-       r = r + xs[i]
+       x = x + xs[i]
        i = i + 1
    //
-   return r
+   return x
 
 type nat is (int x) where x >= 0
 
