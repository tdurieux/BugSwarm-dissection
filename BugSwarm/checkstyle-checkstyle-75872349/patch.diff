diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 12c15b0fa2..dd102201c1 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -305,12 +305,11 @@
     <module name="InnerTypeLast"/>
 
     <module name="ModifiedControlVariable"/>
+    <module name="AvoidInlineConditionals"/>
 
 <!--
-    <module name="AvoidInlineConditionals"/>
     <module name="ClassDataAbstractionCoupling"/>
     <module name="ClassFanOutComplexity"/>
-    <module name="DesignForExtension"/>
     <module name="ExecutableStatementCount"/>
     <module name="FinalParameters"/>
     <module name="IllegalToken"/>
@@ -332,5 +331,11 @@
     <module name="VariableDeclarationUsageDistance"/>
     <module name="WriteTag"/>
 -->
+<!--
+    We should postpone DesignForExtension Check enforcement till next major release 
+    as it will seriously brake backward compatibility with existing usage of our library
+
+    <module name="DesignForExtension"/>
+-->  
   </module>
 </module>
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
index 64aa134312..cf1f8de327 100755
--- a/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
@@ -4,24 +4,15 @@
 import java.io.IOException;
 import java.util.List;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.Checker;
-import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class ConfigValidationTest extends BaseCheckTestSupport {
-
-    static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() throws CheckstyleException, IOException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-    }
-
     @Test
     public void testGoogleChecks() throws IOException, Exception {
+        ConfigurationBuilder builder = new ConfigurationBuilder(new File("src/it/"));
         final Configuration checkerConfig = builder.config;
         final Checker c = new Checker();
         c.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
index 3d7c4b57b9..e4a9725e71 100755
--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
@@ -20,7 +20,7 @@
 
 	private File ROOT;
 
-	private List<File> files = new ArrayList<File>();
+	private List<File> files = new ArrayList<>();
 
 	Configuration config;
 	
@@ -100,7 +100,7 @@ public File getROOT() {
 
 	public Integer[] getLinesWithWarn(String aFileName) throws IOException {
 		int lineNumber = 1;
-	    List<Integer> result = new ArrayList<Integer>();
+	    List<Integer> result = new ArrayList<>();
 	    try(BufferedReader br = new BufferedReader(new FileReader(aFileName))) {
 	        for(String line; (line = br.readLine()) != null; ) {
 	            if (warnPattern.matcher(line).find()) {
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
index 71dea5d658..1697c0c34e 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java
@@ -112,4 +112,17 @@ public void rightCurlyTestAlone() throws Exception {
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(newCheckConfig, filePath, expected, warnList);
     }
+
+    @Test
+    public void rightCurlyTestSame() throws Exception {
+        DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);
+        newCheckConfig.addAttribute("option", RightCurlyOption.SAME.toString());
+
+        final String[] expected = {
+        };
+
+        String filePath = builder.getFilePath("RightCurlyInputSame");
+        Integer[] warnList = builder.getLinesWithWarn(filePath);
+        verify(newCheckConfig, filePath, expected, warnList);
+    }
 }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyInputSame.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyInputSame.java
new file mode 100755
index 0000000000..a4dae053dc
--- /dev/null
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyInputSame.java
@@ -0,0 +1,9 @@
+package com.google.checkstyle.test.chapter4formatting.rule412nonemptyblocks;
+
+public class RightCurlyInputSame {
+    public static void main(String[] args) {
+        boolean after = false;
+        try {
+        } finally { after = true; }
+    }
+}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index cd40e528b8..1d31012ac4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -86,9 +86,13 @@ public DefaultLogger(OutputStream infoStream,
         final Writer infoStreamWriter = new OutputStreamWriter(infoStream, "UTF-8");
         final Writer errorStreamWriter = new OutputStreamWriter(errorStream, "UTF-8");
         infoWriter = new PrintWriter(infoStreamWriter);
-        errorWriter = infoStream == errorStream
-            ? infoWriter
-            : new PrintWriter(errorStreamWriter);
+
+        if (infoStream == errorStream) {
+            errorWriter = infoWriter;
+        }
+        else {
+            errorWriter = new PrintWriter(errorStreamWriter);
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 485f9116ae..ea861cd524 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -215,10 +215,14 @@ private static CliOptions convertCliToPojo(CommandLine cmdLine) {
     private static int runCheckstyle(CliOptions cliOptions)
             throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException {
         // setup the properties
-        final Properties props =
-                cliOptions.propertiesLocation != null
-                        ? loadProperties(new File(cliOptions.propertiesLocation))
-                        : System.getProperties();
+        final Properties props;
+
+        if (cliOptions.propertiesLocation == null) {
+            props = System.getProperties();
+        }
+        else {
+            props = loadProperties(new File(cliOptions.propertiesLocation));
+        }
 
         // create a configuration
         final Configuration config = ConfigurationLoader.loadConfiguration(
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 750e3b9f66..7286ab092b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -231,7 +231,13 @@ public static Pattern createPattern(String pattern) {
      */
     public static String baseClassname(String type) {
         final int i = type.lastIndexOf('.');
-        return i == -1 ? type : type.substring(i + 1);
+
+        if (i == -1) {
+            return type;
+        }
+        else {
+            return type.substring(i + 1);
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
index 9079e40d1f..def551635d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
@@ -109,9 +109,12 @@ public int getColumn() {
 
     /** @return the audit event severity level **/
     public SeverityLevel getSeverityLevel() {
-        return message == null
-            ? SeverityLevel.INFO
-            : message.getSeverityLevel();
+        if (message == null) {
+            return SeverityLevel.INFO;
+        }
+        else {
+            return message.getSeverityLevel();
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index efc235d18e..6d24b05798 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -214,9 +214,12 @@ public FileText(FileText fileText) {
      * @return an object representing the denoted text file
      */
     public static FileText fromLines(File file, List<String> lines) {
-        return lines instanceof FileText
-            ? (FileText) lines
-            : new FileText(file, lines);
+        if (lines instanceof FileText) {
+            return (FileText) lines;
+        }
+        else {
+            return new FileText(file, lines);
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
index f191d6812f..603b7b349e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java
@@ -56,9 +56,12 @@ public int getColumn() {
 
     @Override
     public int compareTo(LineColumn lineColumn) {
-        return getLine() != lineColumn.getLine()
-            ? Integer.compare(getLine(), lineColumn.getLine())
-            : Integer.compare(getColumn(), lineColumn.getColumn());
+        if (getLine() == lineColumn.getLine()) {
+            return Integer.compare(getColumn(), lineColumn.getColumn());
+        }
+        else {
+            return Integer.compare(getLine(), lineColumn.getLine());
+        }
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index e4f118661b..4c8b34eb45 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -115,7 +115,13 @@ public LocalizedMessage(int lineNo,
         this.lineNo = lineNo;
         this.colNo = colNo;
         this.key = key;
-        this.args = args == null ? null : args.clone();
+
+        if (args == null) {
+            this.args = null;
+        }
+        else {
+            this.args = Arrays.copyOf(args, args.length);
+        }
         this.bundle = bundle;
         this.severityLevel = severityLevel;
         this.moduleId = moduleId;
@@ -349,10 +355,9 @@ public int compareTo(LocalizedMessage other) {
             if (getColumnNo() == other.getColumnNo()) {
                 return getMessage().compareTo(other.getMessage());
             }
-            return getColumnNo() < other.getColumnNo() ? -1 : 1;
+            return Integer.compare(getColumnNo(), other.getColumnNo());
         }
-
-        return getLineNo() < other.getLineNo() ? -1 : 1;
+        return Integer.compare(getLineNo(), other.getLineNo());
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 83c073fcbf..38823a8f49 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -335,9 +335,12 @@ private void processTypeParams(DetailAST ast) {
      */
     private void processClass(DetailAST ast) {
         final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);
-        currentClass += (currentClass.isEmpty() ? "" : "$")
-            + ident.getText();
+        String innerClass = ident.getText();
 
+        if (!currentClass.isEmpty()) {
+            innerClass = "$" + innerClass;
+        }
+        currentClass += innerClass;
         processTypeParams(ast);
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
index 742de3fc1d..3db654edca 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
@@ -37,7 +37,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.ARRAY_DECLARATOR};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -45,6 +45,11 @@
         return new int[] {TokenTypes.ARRAY_DECLARATOR};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST typeAST = ast.getParent();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index 777ad784d3..4954254d24 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -192,7 +192,7 @@ public final void setAllowNonPrintableEscapes(boolean allow) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -200,6 +200,11 @@ public final void setAllowNonPrintableEscapes(boolean allow) {
         return new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
index 4919999c0a..4ce49b764c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
@@ -121,9 +121,15 @@ private static boolean isElseWithCurlyBraces(DetailAST ast) {
     public static FullIdent createFullType(DetailAST typeAST) {
         final DetailAST arrayDeclAST =
             typeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);
+        final FullIdent fullType;
 
-        return createFullTypeNoArrays(arrayDeclAST == null ? typeAST
-                                                           : arrayDeclAST);
+        if (arrayDeclAST == null) {
+            fullType = createFullTypeNoArrays(typeAST);
+        }
+        else {
+            fullType = createFullTypeNoArrays(arrayDeclAST);
+        }
+        return fullType;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index 035ddf760e..1ae78790f0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -121,8 +121,12 @@ public ClassResolver(ClassLoader loader, String pkg, Set<String> imports) {
             throws ClassNotFoundException {
         Class<?> clazz = null;
         if (!currentClass.isEmpty()) {
-            final String innerClass = (pkg.isEmpty() ? "" : pkg + ".")
-                + currentClass + "$" + name;
+            String innerClass = currentClass + "$" + name;
+
+            if (!pkg.isEmpty()) {
+                innerClass = pkg + "." + innerClass;
+            }
+
             if (isLoadable(innerClass)) {
                 clazz = safeLoad(innerClass);
             }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index b970760928..d93f587a91 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -220,6 +220,11 @@
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         //reset counts
@@ -245,22 +250,26 @@ private void logAsSeparated(DetailAST ast) {
         for (int element : limitedTokens) {
             final int tokenCount = counts[element - 1];
             if (tokenCount < minimumNumber) {
-                final String descendantName = Utils
-                        .getTokenName(element);
+                final String descendantName = Utils.getTokenName(element);
+
+                if (minimumMessage == null) {
+                    minimumMessage = MSG_KEY_MIN;
+                }
                 log(ast.getLineNo(), ast.getColumnNo(),
-                    minimumMessage == null ? MSG_KEY_MIN
-                                : minimumMessage,
+                        minimumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(minimumNumber),
                         name,
                         descendantName);
             }
             if (tokenCount > maximumNumber) {
-                final String descendantName = Utils
-                        .getTokenName(element);
+                final String descendantName = Utils.getTokenName(element);
+
+                if (maximumMessage == null) {
+                    maximumMessage = MSG_KEY_MAX;
+                }
                 log(ast.getLineNo(), ast.getColumnNo(),
-                    maximumMessage == null ? MSG_KEY_MAX
-                                : maximumMessage,
+                        maximumMessage,
                         String.valueOf(tokenCount),
                         String.valueOf(maximumNumber),
                         name,
@@ -282,19 +291,22 @@ private void logAsTotal(DetailAST ast) {
             total += counts[element - 1];
         }
         if (total < minimumNumber) {
+            if (minimumMessage == null) {
+                minimumMessage = MSG_KEY_SUM_MIN;
+            }
             log(ast.getLineNo(), ast.getColumnNo(),
-                minimumMessage == null ? MSG_KEY_SUM_MIN
-                            : minimumMessage,
+                    minimumMessage,
                     String.valueOf(total),
                     String.valueOf(minimumNumber), name);
         }
         if (total > maximumNumber) {
+            if (maximumMessage == null) {
+                maximumMessage = MSG_KEY_SUM_MAX;
+            }
             log(ast.getLineNo(), ast.getColumnNo(),
-                maximumMessage == null ? MSG_KEY_SUM_MAX
-                            : maximumMessage,
+                    maximumMessage,
                     String.valueOf(total),
-                    String.valueOf(maximumNumber),
-                    name);
+                    String.valueOf(maximumNumber), name);
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
index eaaa2d5e53..e1000c086f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
@@ -44,9 +44,19 @@ public static FileContents getContents() {
 
     @Override
     public int[] getDefaultTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         FILE_CONTENTS.set(getFileContents());
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
index 23fae8a97f..21a82e8c89 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.Set;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -104,6 +106,11 @@ public void setIgnorePrimitiveTypes(boolean ignorePrimitiveTypes) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         // don't flag interfaces
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
index 0a1a99bc1f..fb5346243b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
@@ -48,10 +48,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF,
-            TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -62,6 +59,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST ast) {
         fileName = getFileName();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 8f1248ba82..a0bc3879d6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -168,9 +168,19 @@ public static boolean isSuppressed(String sourceName, int line,
 
     @Override
     public int[] getDefaultTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
         return new int[] {TokenTypes.ANNOTATION};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         ENTRIES.set(new LinkedList<Entry>());
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
index 2966295d78..888dce27c9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java
@@ -89,7 +89,7 @@ public void setFormat(String format) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.COMMENT_CONTENT };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -97,6 +97,11 @@ public void setFormat(String format) {
         return new int[] {TokenTypes.COMMENT_CONTENT };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final String[] lines = ast.getText().split("\n");
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index d95e79da8d..cb713429c1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -133,6 +133,16 @@ public void setLegalComment(final String format) {
         return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         throw new IllegalStateException("visitToken() shouldn't be called.");
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index e35da632d3..b9c0007253 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -134,7 +134,14 @@ private static String extractPropertyIdentifier(final File file,
         final int underscoreIdx = filePath.indexOf(basenameSeparator,
             baseNameStart);
         final int dotIdx = filePath.indexOf('.', baseNameStart);
-        final int cutoffIdx = underscoreIdx == -1 ? dotIdx : underscoreIdx;
+        final int cutoffIdx;
+
+        if (underscoreIdx == -1) {
+            cutoffIdx = dotIdx;
+        }
+        else {
+            cutoffIdx = underscoreIdx;
+        }
         return filePath.substring(0, cutoffIdx);
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java
index 610e126f29..d324b0df27 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java
@@ -57,7 +57,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.NUM_LONG};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -65,6 +65,11 @@
         return new int[] {TokenTypes.NUM_LONG};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (Utils.endsWithChar(ast.getText(), 'l')) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
index 5dd3d8328f..46b26ef62b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.annotation;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -199,6 +201,11 @@ public final void setAllowSamelineMultipleAnnotations(boolean allow) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST modifiersNode = ast.findFirstToken(TokenTypes.MODIFIERS);
@@ -238,8 +245,14 @@ else if (annotation.getColumnNo() != correctLevel && !hasNodeBefore(annotation))
      * @return Some javadoc.
      */
     private boolean isCorrectLocation(DetailAST annotation, boolean hasParams) {
-        final boolean allowingCondition = hasParams ? allowSamelineParameterizedAnnotation
-            : allowSamelineSingleParameterlessAnnotation;
+        final boolean allowingCondition;
+
+        if (hasParams) {
+            allowingCondition = allowSamelineParameterizedAnnotation;
+        }
+        else {
+            allowingCondition = allowSamelineSingleParameterlessAnnotation;
+        }
         return allowingCondition && !hasNodeBefore(annotation)
             || !allowingCondition && !hasNodeBeside(annotation)
             || allowSamelineMultipleAnnotations;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index 8350e88f88..0bd0b2ec3f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -136,6 +136,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(final DetailAST ast) {
         final TextBlock javadoc =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 35531b221b..a5148d869c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.regex.Matcher;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.AnnotationUtility;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -136,6 +138,11 @@ public SuppressWarningsCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(final DetailAST ast) {
         final DetailAST annotation = getSuppressWarnings(ast);
@@ -209,9 +216,12 @@ private static DetailAST getSuppressWarnings(DetailAST ast) {
         final DetailAST annotation = AnnotationUtility.getAnnotation(
             ast, SUPPRESS_WARNINGS);
 
-        return annotation != null ? annotation
-            : AnnotationUtility.getAnnotation(
-                ast, FQ_SUPPRESS_WARNINGS);
+        if (annotation == null) {
+            return AnnotationUtility.getAnnotation(ast, FQ_SUPPRESS_WARNINGS);
+        }
+        else {
+            return annotation;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
index 2cc30c70bb..bac9957a4c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java
@@ -100,7 +100,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.SLIST};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -108,6 +108,11 @@
         return new int[] {TokenTypes.SLIST};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST parent = ast.getParent();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
index d9f3b65e98..50c47a158a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -120,11 +121,23 @@ public EmptyBlockCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST slistToken = ast.findFirstToken(TokenTypes.SLIST);
-        final DetailAST leftCurly = slistToken != null
-                ? slistToken : ast.findFirstToken(TokenTypes.LCURLY);
+        final DetailAST leftCurly;
+
+        if (slistToken == null) {
+            leftCurly = ast.findFirstToken(TokenTypes.LCURLY);
+        }
+        else {
+            leftCurly = slistToken;
+        }
+
         if (leftCurly != null) {
             if (getAbstractOption() == BlockOption.STMT) {
                 boolean emptyBlock;
@@ -158,8 +171,14 @@ protected boolean hasText(final DetailAST slistAST) {
         boolean retVal = false;
 
         final DetailAST rightCurly = slistAST.findFirstToken(TokenTypes.RCURLY);
-        final DetailAST rcurlyAST = rightCurly != null
-                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);
+        final DetailAST rcurlyAST;
+
+        if (rightCurly == null) {
+            rcurlyAST = slistAST.getParent().findFirstToken(TokenTypes.RCURLY);
+        }
+        else {
+            rcurlyAST = rightCurly;
+        }
         final int slistLineNo = slistAST.getLineNo();
         final int slistColNo = slistAST.getColumnNo();
         final int rcurlyLineNo = rcurlyAST.getLineNo();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
index a071c1f5c5..0662155cf8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java
@@ -174,9 +174,7 @@ public void setCommentFormat(String commentFormat) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.LITERAL_CATCH,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -186,6 +184,11 @@ public void setCommentFormat(String commentFormat) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public boolean isCommentNodesRequired() {
         return true;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 2605ccd39a..9731e30c3b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -139,26 +141,7 @@ public void setIgnoreEnums(boolean ignoreEnums) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.INTERFACE_DEF,
-            TokenTypes.CLASS_DEF,
-            TokenTypes.ANNOTATION_DEF,
-            TokenTypes.ENUM_DEF,
-            TokenTypes.CTOR_DEF,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.ENUM_CONSTANT_DEF,
-            TokenTypes.LITERAL_WHILE,
-            TokenTypes.LITERAL_TRY,
-            TokenTypes.LITERAL_CATCH,
-            TokenTypes.LITERAL_FINALLY,
-            TokenTypes.LITERAL_SYNCHRONIZED,
-            TokenTypes.LITERAL_SWITCH,
-            TokenTypes.LITERAL_DO,
-            TokenTypes.LITERAL_IF,
-            TokenTypes.LITERAL_ELSE,
-            TokenTypes.LITERAL_FOR,
-            TokenTypes.STATIC_INIT,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -185,6 +168,11 @@ public void setIgnoreEnums(boolean ignoreEnums) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         DetailAST startToken;
@@ -203,9 +191,11 @@ public void visitToken(DetailAST ast) {
             case TokenTypes.ENUM_CONSTANT_DEF:
                 startToken = skipAnnotationOnlyLines(ast);
                 final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
-                brace = objBlock == null
-                        ? null
-                        : objBlock.getFirstChild();
+                brace = objBlock;
+
+                if (objBlock != null) {
+                    brace = objBlock.getFirstChild();
+                }
                 break;
             case TokenTypes.LITERAL_WHILE:
             case TokenTypes.LITERAL_CATCH:
@@ -222,9 +212,11 @@ public void visitToken(DetailAST ast) {
             case TokenTypes.LITERAL_ELSE:
                 startToken = ast;
                 final DetailAST candidate = ast.getFirstChild();
-                brace = candidate.getType() == TokenTypes.SLIST
-                        ? candidate
-                        : null; // silently ignore
+                brace = null;
+
+                if (candidate.getType() == TokenTypes.SLIST) {
+                    brace = candidate;
+                }
                 break;
             default:
                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
@@ -262,9 +254,15 @@ private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
             // There are no annotations.
             return ast;
         }
-        final DetailAST tokenAfterLast = lastAnnot.getNextSibling() != null
-                                       ? lastAnnot.getNextSibling()
-                                       : modifiers.getNextSibling();
+        final DetailAST tokenAfterLast;
+
+        if (lastAnnot.getNextSibling() == null) {
+            tokenAfterLast = modifiers.getNextSibling();
+        }
+        else {
+            tokenAfterLast = lastAnnot.getNextSibling();
+        }
+
         if (tokenAfterLast.getLineNo() > lastAnnot.getLineNo()) {
             return tokenAfterLast;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index 1ff57006b5..bc1e5cdb8d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -145,6 +147,11 @@ public void setAllowSingleLineStatement(boolean allowSingleLineStatement) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index 4999a2313c..c5ba574326 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -76,6 +78,7 @@
  * @author o_sukhodolsky
  * @author maxvetrenko
  * @author Andrei Selkin
+ * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
  */
 public class RightCurlyCheck extends AbstractOptionCheck<RightCurlyOption> {
     /**
@@ -150,6 +153,11 @@ public void setShouldStartLine(boolean flag) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final Details details = getDetails(ast);
@@ -192,7 +200,8 @@ private static String validate(Details details, RightCurlyOption bracePolicy,
         String violation = "";
 
         if (bracePolicy == RightCurlyOption.SAME
-                && !hasLineBreakBefore(rcurly)) {
+                && !hasLineBreakBefore(rcurly)
+                && lcurly.getLineNo() != rcurly.getLineNo()) {
             violation = MSG_KEY_LINE_BREAK_BEFORE;
         }
         else if (shouldCheckLastRcurly) {
@@ -331,7 +340,7 @@ private static Details getDetails(DetailAST ast) {
 
                 lcurly = ast.findFirstToken(TokenTypes.SLIST);
                 if (lcurly != null) {
-                    // SLIST could be absent if method is abstract, 
+                    // SLIST could be absent if method is abstract,
                     // or in cases of loops without body for example
                     rcurly = lcurly.getLastChild();
                 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.java
index b829ab7958..296b493ef1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.java
@@ -46,7 +46,7 @@ protected AbstractIllegalMethodCheck(String methodName, String errorKey) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -54,6 +54,11 @@ protected AbstractIllegalMethodCheck(String methodName, String errorKey) {
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST aAST) {
         final DetailAST mid = aAST.findFirstToken(TokenTypes.IDENT);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
index cded73e151..50b09a4d39 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java
@@ -49,7 +49,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.ARRAY_INIT};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -57,6 +57,11 @@
         return new int[] {TokenTypes.ARRAY_INIT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST arrayInit) {
         final DetailAST rcurly = arrayInit.findFirstToken(TokenTypes.RCURLY);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
index 93d28f4a2e..ccb4ad9384 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
@@ -160,12 +160,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.CTOR_DEF,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.MODIFIERS,
-            TokenTypes.OBJBLOCK,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -178,6 +173,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final int parentType = ast.getParent().getType();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheck.java
index 718c9335a3..ac4a54b715 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EmptyStatementCheck.java
@@ -52,7 +52,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.EMPTY_STAT};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -60,6 +60,11 @@
         return new int[] {TokenTypes.EMPTY_STAT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 1775281d0a..4589b964cc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -67,7 +67,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -75,6 +75,11 @@
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         objBlockEquals.clear();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 2eff5c259a..63c062ef9d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -224,13 +224,15 @@ private void visitOtherTokens(DetailAST ast, int type) {
         final boolean isStaticInnerType =
                 typeMods != null
                         && typeMods.branchContains(TokenTypes.LITERAL_STATIC);
+        final String frameName;
 
-        final FieldFrame frame =
-            new FieldFrame(currentFrame, isStaticInnerType,
-                    type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF
-                    ? ast.findFirstToken(TokenTypes.IDENT).getText()
-                    : null
-            );
+        if (type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF) {
+            frameName = ast.findFirstToken(TokenTypes.IDENT).getText();
+        }
+        else {
+            frameName = null;
+        }
+        final FieldFrame frame = new FieldFrame(currentFrame, isStaticInnerType, frameName);
 
         //add fields to container
         final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 7f680222b5..4a2f416df2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -227,8 +227,14 @@ private String getIllegalInstantiation(String className) {
         if (illegalClasses.contains(className)) {
             return className;
         }
+        final int pkgNameLen;
 
-        final int pkgNameLen = pkgName == null ? 0 : pkgName.length();
+        if (pkgName == null) {
+            pkgNameLen = 0;
+        }
+        else {
+            pkgNameLen = pkgName.length();
+        }
 
         for (String illegal : illegalClasses) {
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
index 42f9f54ba6..fce85e80dc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java
@@ -109,7 +109,12 @@ public void visitToken(DetailAST ast) {
      *                 to report about violations.
      */
     public void setMessage(String message) {
-        this.message = message == null ? "" : message;
+        if (message == null) {
+            this.message = "";
+        }
+        else {
+            this.message = message;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index bcf843246a..17bf16ecfc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -149,12 +149,7 @@ public IllegalTypeCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.VARIABLE_DEF,
-            TokenTypes.PARAMETER_DEF,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.IMPORT,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -167,6 +162,11 @@ public IllegalTypeCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         switch (ast.getType()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index 4c8511c8ac..e72f969f95 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -105,20 +105,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.ASSIGN,            // '='
-            TokenTypes.DIV_ASSIGN,        // "/="
-            TokenTypes.PLUS_ASSIGN,       // "+="
-            TokenTypes.MINUS_ASSIGN,      //"-="
-            TokenTypes.STAR_ASSIGN,       // "*="
-            TokenTypes.MOD_ASSIGN,        // "%="
-            TokenTypes.SR_ASSIGN,         // ">>="
-            TokenTypes.BSR_ASSIGN,        // ">>>="
-            TokenTypes.SL_ASSIGN,         // "<<="
-            TokenTypes.BXOR_ASSIGN,       // "^="
-            TokenTypes.BOR_ASSIGN,        // "|="
-            TokenTypes.BAND_ASSIGN,       // "&="
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -139,6 +126,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index 276ffccbf1..fc3cec0235 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.Arrays;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
@@ -200,6 +202,11 @@ public MagicNumberCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (ignoreAnnotation && isChildOf(ast, TokenTypes.ANNOTATION)) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
index 43ff2dac1a..f5e341f255 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java
@@ -115,7 +115,7 @@ public final void setIgnoreOccurrenceContext(String... strRep) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.STRING_LITERAL};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -123,6 +123,11 @@ public final void setIgnoreOccurrenceContext(String... strRep) {
         return new int[] {TokenTypes.STRING_LITERAL};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (isInIgnoreOccurrenceContext(ast)) {
@@ -197,7 +202,7 @@ public void finishTree(DetailAST rootAST) {
          * @param line int
          * @param col int
          */
-        public StringInfo(int line, int col) {
+        StringInfo(int line, int col) {
             this.line = line;
             this.col = col;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
index f2bf117289..bc36e4a2cf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java
@@ -57,9 +57,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.OBJBLOCK,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -69,6 +67,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final int parentType = ast.getParent().getType();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
index 6d16d12ddb..671c79c1e1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java
@@ -47,7 +47,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.EQUAL, TokenTypes.NOT_EQUAL};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -55,6 +55,11 @@
         return new int[] {TokenTypes.EQUAL, TokenTypes.NOT_EQUAL};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         // no need to check for nulls here, == and != always have two children
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index 3a951bf689..09ef3cdb09 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -246,7 +246,7 @@ public void setIgnoreFinal(boolean ignoreFinal) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.VARIABLE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -254,6 +254,11 @@ public void setIgnoreFinal(boolean ignoreFinal) {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final int parentType = ast.getParent().getType();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
index 052c82ee6c..4e8cef65b1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
@@ -66,7 +66,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -74,6 +74,11 @@
         return new int[] {TokenTypes.METHOD_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         // nothing to do for Interfaces
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index 789a4fc615..7bba62391b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -54,7 +54,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -62,6 +62,11 @@
         return new int[]{TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index de76b9d0eb..eb3dc094e3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -43,7 +43,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.CLASS_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -51,6 +51,11 @@
         return new int[] {TokenTypes.CLASS_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (isAbstract(ast)) {
@@ -122,7 +127,7 @@ private static boolean isStatic(DetailAST ast) {
         /** c-tor
          * @param ast class ast
          * */
-        public Details(DetailAST ast) {
+        Details(DetailAST ast) {
             this.ast = ast;
         }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
index 43c921bbab..e7bc19f0a2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheck.java
@@ -45,7 +45,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -53,6 +53,11 @@
         return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         // First root class
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
index d0d2ffb7ae..a62643b374 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java
@@ -111,7 +111,7 @@ public void leaveToken(DetailAST ast) {
      * @param ast class definition node
      */
     private void visitClassDef(DetailAST ast) {
-        checkingStack.push(checking ? Boolean.TRUE : Boolean.FALSE);
+        checkingStack.push(checking);
         checking = isNamedAsException(ast) && isExtendedClassNamedAsException(ast);
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
index 7b6084511d..b64f2ffeed 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
@@ -23,6 +23,8 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -108,7 +110,12 @@
     // ZERO tokens as Check do Traverse of Tree himself, he does not need to subscribed to Tokens
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {};
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 9ef4ab4cbe..8247596fcc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -395,6 +395,11 @@ public void setImmutableClassCanonicalNames(String... classNames) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getDefaultTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAst) {
         immutableClassShortNames.clear();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index fd5465e977..e48c93d5e6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -113,8 +113,15 @@
      */
     public void setExcludes(String... excludesParam) {
         excludes.clear();
+        final String suffix = ".*";
+
         for (final String exclude : excludesParam) {
-            excludes.add(exclude.endsWith(".*") ? exclude : exclude + ".*");
+            if (exclude.endsWith(suffix)) {
+                excludes.add(exclude);
+            }
+            else {
+                excludes.add(exclude + suffix);
+            }
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
index e3b2cccb1f..52a40ce152 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
@@ -78,7 +78,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.STATIC_IMPORT};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -86,6 +86,11 @@
         return new int[] {TokenTypes.STATIC_IMPORT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     /**
      * Sets the list of classes or static members to be exempt from the check.
      * @param excludes a list of fully-qualified class names/specific
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index cca8cc27ec..194ba15113 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -408,11 +408,7 @@ public final void setCustomImportOrderRules(final String inputCustomImportOrder)
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.IMPORT,
-            TokenTypes.STATIC_IMPORT,
-            TokenTypes.PACKAGE_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -424,6 +420,11 @@ public final void setCustomImportOrderRules(final String inputCustomImportOrder)
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         importToGroupList.clear();
@@ -716,8 +717,12 @@ private boolean hasEmptyLineBefore(int lineNo) {
      * @return full path or null.
      */
     private static String getFullImportIdent(DetailAST token) {
-        return token != null ? FullIdent.createFullIdent(token
-                .findFirstToken(TokenTypes.DOT)).getText() : "";
+        if (token == null) {
+            return "";
+        }
+        else {
+            return FullIdent.createFullIdent(token.findFirstToken(TokenTypes.DOT)).getText();
+        }
     }
 
     /**
@@ -814,7 +819,7 @@ private static String getFirstNDomainsFromIdent(
          * @param staticImport
          *        if import is static.
          */
-        public ImportDetails(String importFullPath,
+        ImportDetails(String importFullPath,
                 int lineNumber, String importGroup, boolean staticImport) {
             this.importFullPath = importFullPath;
             this.lineNumber = lineNumber;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java
index 78cc62d72f..e5f78bb2ca 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java
@@ -88,9 +88,14 @@
      */
     AccessResult verifyImport(final String forImport) {
         if (className != null) {
-            final boolean classMatch = regExp
-                ? forImport.matches(className)
-                : forImport.equals(className);
+            final boolean classMatch;
+
+            if (regExp) {
+                classMatch = forImport.matches(className);
+            }
+            else {
+                classMatch = forImport.equals(className);
+            }
             return calculateResult(classMatch);
         }
 
@@ -129,9 +134,16 @@ boolean isLocalOnly() {
      * @return An appropriate {@link AccessResult}.
      */
     private AccessResult calculateResult(final boolean matched) {
+        AccessResult result = AccessResult.UNKNOWN;
+
         if (matched) {
-            return allowed ? AccessResult.ALLOWED : AccessResult.DISALLOWED;
+            if (allowed) {
+                result = AccessResult.ALLOWED;
+            }
+            else {
+                result = AccessResult.DISALLOWED;
+            }
         }
-        return AccessResult.UNKNOWN;
+        return result;
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index 420d2c4421..d2be9072be 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -86,7 +86,7 @@ public final void setIllegalPkgs(String... from) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -94,6 +94,11 @@ public final void setIllegalPkgs(String... from) {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final FullIdent imp;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
index ee7f6efde2..7d852a2da8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -76,8 +76,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT,
-                          TokenTypes.STATIC_IMPORT, };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -86,6 +85,11 @@
                           TokenTypes.STATIC_IMPORT, };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(final DetailAST rootAST) {
         currentLeaf = null;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index a2f0bd3d53..05e01ea7ae 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -303,7 +303,7 @@ public void setSortStaticImportsAlphabetically(boolean sortAlphabetically) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -311,6 +311,11 @@ public void setSortStaticImportsAlphabetically(boolean sortAlphabetically) {
         return new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return new int[] {TokenTypes.IMPORT};
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         lastGroup = Integer.MIN_VALUE;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index 2e913b1f25..428add90b5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -88,10 +88,7 @@ public void beginTree(DetailAST aRootAST) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]
-        {TokenTypes.IMPORT,
-         TokenTypes.STATIC_IMPORT,
-         TokenTypes.PACKAGE_DEF, };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -102,6 +99,11 @@ public void beginTree(DetailAST aRootAST) {
          TokenTypes.PACKAGE_DEF, };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.PACKAGE_DEF) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index b40de54fec..d8e4964b61 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -149,8 +149,14 @@ protected final void logError(DetailAST ast, String subtypeName,
      */
     protected final void logError(DetailAST ast, String subtypeName,
                                   int actualLevel, IndentLevel expectedLevel) {
-        final String typeStr =
-            subtypeName.isEmpty() ? "" : " " + subtypeName;
+        final String typeStr;
+
+        if (subtypeName.isEmpty()) {
+            typeStr = "";
+        }
+        else {
+            typeStr = " " + subtypeName;
+        }
         String messageKey = MSG_ERROR;
         if (expectedLevel.isMultiLevel()) {
             messageKey = MSG_ERROR_MULTI;
@@ -348,8 +354,8 @@ private void checkSingleLine(int lineNum, int colNum,
         // at the correct indention level; otherwise, it is an only an
         // error if this statement starts the line and it is less than
         // the correct indentation level
-        if (mustMatch ? !indentLevel.accept(start)
-            : colNum == start && indentLevel.greaterThan(start)) {
+        if (mustMatch && !indentLevel.accept(start)
+                || !mustMatch && colNum == start && indentLevel.greaterThan(start)) {
             logChildError(lineNum, start, indentLevel);
         }
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index 347bf68b7b..d332949550 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -126,7 +126,12 @@ private int getNextFirstNonblankOnLineAfter(int lineNo, int columnNo) {
             realColumnNo++;
         }
 
-        return realColumnNo == lineLength ? -1 : realColumnNo;
+        if (realColumnNo == lineLength) {
+            return -1;
+        }
+        else {
+            return realColumnNo;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
index 7b05c9b1a2..b97f6e1878 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java
@@ -39,11 +39,7 @@
     public ClassDefHandler(IndentationCheck indentCheck,
                            DetailAST ast,
                            AbstractExpressionHandler parent) {
-        super(indentCheck,
-              ast.getType() == TokenTypes.CLASS_DEF
-              ? "class def" : ast.getType() == TokenTypes.ENUM_DEF
-                  ? "enum def" : "interface def",
-              ast, parent);
+        super(indentCheck, getHandlerName(ast), ast, parent);
     }
 
     @Override
@@ -102,4 +98,24 @@ public void checkIndentation() {
         };
     }
 
+    /**
+     * Creates a handler name for this class according to ast type.
+     *
+     * @param ast the abstract syntax tree.
+     * @return handler name for this class.
+     */
+    private static String getHandlerName(DetailAST ast) {
+        final String name;
+
+        if (ast.getType() == TokenTypes.CLASS_DEF) {
+            name = "class def";
+        }
+        else if (ast.getType() == TokenTypes.ENUM_DEF) {
+            name = "enum def";
+        }
+        else {
+            name = "interface def";
+        }
+        return name;
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
index e2321e9f54..5e711a6bb5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
@@ -221,7 +221,7 @@ private static boolean areSameLevelIndented(DetailAST singleLineComment,
         }
         else {
             result = singleLineComment.getColumnNo() == nextStmt.getColumnNo()
-                | singleLineComment.getColumnNo() == prevStmt.getColumnNo();
+                || singleLineComment.getColumnNo() == prevStmt.getColumnNo();
         }
         return result;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
index b39647f78b..8b948449cc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
@@ -262,9 +262,19 @@ public int getIndentationTabWidth() {
 
     @Override
     public int[] getDefaultTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
         return handlerFactory.getHandledTypes();
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST ast) {
         handlerFactory.clearCreatedHandlers();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
index 1d69b0b0f5..017714bf6e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java
@@ -39,8 +39,7 @@
      */
     public MethodDefHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
-        super(indentCheck, ast.getType() == TokenTypes.CTOR_DEF
-            ? "ctor def" : "method def", ast, parent);
+        super(indentCheck, getHandlerName(ast), ast, parent);
     }
 
     @Override
@@ -82,4 +81,22 @@ public void checkIndentation() {
     private static DetailAST getMethodDefParamRightParen(DetailAST methodDefAst) {
         return methodDefAst.findFirstToken(TokenTypes.RPAREN);
     }
+
+    /**
+     * Creates a handler name for this class according to ast type.
+     *
+     * @param ast the abstract syntax tree.
+     * @return handler name for this class.
+     */
+    private static String getHandlerName(DetailAST ast) {
+        final String name;
+
+        if (ast.getType() == TokenTypes.CTOR_DEF) {
+            name = "ctor def";
+        }
+        else {
+            name = "method def";
+        }
+        return name;
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 51550f546a..d686440cf8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -131,6 +131,16 @@ public void setTagOrder(String order) {
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         final int parentType = getParentType(getBlockCommentAst());
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 25dd19ad02..42d800897d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -548,8 +548,13 @@ private boolean hasShortCircuitTag(final DetailAST ast,
     private static Scope calculateScope(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-        return ScopeUtils.inInterfaceOrAnnotationBlock(ast) ? Scope.PUBLIC
-                : declaredScope;
+
+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {
+            return Scope.PUBLIC;
+        }
+        else {
+            return declaredScope;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
index aa23f058f6..da317c324f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
@@ -22,6 +22,7 @@
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks that:
@@ -121,6 +122,16 @@ public void setAllowNewlineParagraph(boolean value) {
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (ast.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(ast)) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 0db7637cd2..e4550ca5c9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -112,18 +112,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.INTERFACE_DEF,
-            TokenTypes.CLASS_DEF,
-            TokenTypes.ANNOTATION_DEF,
-            TokenTypes.ENUM_DEF,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.CTOR_DEF,
-            TokenTypes.VARIABLE_DEF,
-            TokenTypes.ENUM_CONSTANT_DEF,
-            TokenTypes.ANNOTATION_FIELD_DEF,
-            TokenTypes.PACKAGE_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -142,6 +131,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
@@ -179,9 +173,14 @@ private boolean shouldCheck(final DetailAST ast) {
                 ast.findFirstToken(TokenTypes.MODIFIERS));
         }
 
-        final Scope customScope =
-            ScopeUtils.inInterfaceOrAnnotationBlock(ast)
-            ? Scope.PUBLIC : declaredScope;
+        final Scope customScope;
+
+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {
+            customScope = Scope.PUBLIC;
+        }
+        else {
+            customScope = declaredScope;
+        }
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return customScope.isIn(scope)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
index d4feaba0ab..f14a7b33a6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
@@ -24,6 +24,7 @@
 
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
@@ -70,6 +71,16 @@ public void setOffset(int offset) {
         return new int[] {JavadocTokenTypes.DESCRIPTION };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (isInlineDescription(ast)) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 4c3f07a2fc..6d398c9e27 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -156,12 +156,7 @@ public void setAllowUnknownTags(boolean flag) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.INTERFACE_DEF,
-            TokenTypes.CLASS_DEF,
-            TokenTypes.ENUM_DEF,
-            TokenTypes.ANNOTATION_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -174,6 +169,11 @@ public void setAllowUnknownTags(boolean flag) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (shouldCheck(ast)) {
@@ -217,9 +217,14 @@ public void visitToken(DetailAST ast) {
     private boolean shouldCheck(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-        final Scope customScope =
-            ScopeUtils.inInterfaceOrAnnotationBlock(ast)
-                ? Scope.PUBLIC : declaredScope;
+        final Scope customScope;
+
+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {
+            customScope = Scope.PUBLIC;
+        }
+        else {
+            customScope = declaredScope;
+        }
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
 
         return customScope.isIn(scope)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index c2363954b0..7416029939 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -259,7 +259,12 @@ public static DetailNode findFirstToken(DetailNode detailNode, int type) {
      * @return first child
      */
     public static DetailNode getFirstChild(DetailNode node) {
-        return node.getChildren().length > 0 ? node.getChildren()[0] : null;
+        DetailNode resultNode = null;
+
+        if (node.getChildren().length > 0) {
+            resultNode = node.getChildren()[0];
+        }
+        return resultNode;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index 539e5672a2..acad026faf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -80,17 +80,25 @@ public void setIgnoreNamePattern(String regexp) {
 
     @Override
     public int[] getDefaultTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
+    /*
+     * Skipping enum values is requested.
+     * Checkstyle's issue #1669: https://github.com/checkstyle/checkstyle/issues/1669
+     */
     @Override
-    public int[] getAcceptableTokens() {
+    public int[] getRequiredTokens() {
         return new int[] {
             TokenTypes.VARIABLE_DEF,
-            TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
@@ -135,9 +143,13 @@ private boolean shouldCheck(final DetailAST ast) {
         else {
             final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
             final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
-            customScope =
-                ScopeUtils.inInterfaceOrAnnotationBlock(ast)
-                    ? Scope.PUBLIC : declaredScope;
+
+            if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {
+                customScope = Scope.PUBLIC;
+            }
+            else {
+                customScope = declaredScope;
+            }
         }
 
         final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
index 7647b40a97..85f17b6789 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
@@ -21,6 +21,7 @@
 
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks that the at-clause tag is followed by description .
@@ -61,6 +62,16 @@
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (isEmptyTag(ast.getParent())) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
index 2c4a567b5a..4138e2225e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
@@ -25,6 +25,7 @@
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * Checks that a JavaDoc block can fit on a single line and doesn't
@@ -102,6 +103,16 @@ public void setIgnoreInlineTags(boolean ignoreInlineTags) {
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         if (isSingleLineJavadoc(getBlockCommentAst())
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
index d3a6b9a179..47892d0b70 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
@@ -25,6 +25,7 @@
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
  * <p>
@@ -105,6 +106,16 @@ public void setPeriod(String period) {
         };
     }
 
+    @Override
+    public int[] getAcceptableTokens() {
+        return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitJavadocToken(DetailNode ast) {
         String firstSentence = getFirstSentence(ast);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index cafe283234..ce47892708 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -54,7 +54,7 @@
      * @param text the line of text to parse.
      * @param lineNo the source line number.
      */
-    public TagParser(String[] text, int lineNo) {
+    TagParser(String[] text, int lineNo) {
         parseTags(text, lineNo);
     }
 
@@ -109,8 +109,14 @@ else if (!isTag(text, position)) {
                 final Point endTag = findChar(text, '>', position);
                 final boolean incompleteTag = endTag.getLineNo() >= nLines;
                 // get tag id (one word)
-                final String tagId =
-                        incompleteTag ? "" : getTagId(text, position);
+                final String tagId;
+
+                if (incompleteTag) {
+                    tagId = "";
+                }
+                else {
+                    tagId = getTagId(text, position);
+                }
                 // is this closed tag
                 final boolean closedTag =
                         endTag.getLineNo() < nLines
@@ -271,7 +277,7 @@ private static Point getNextCharPos(String[] text, Point from) {
          * @param lineNo line number
          * @param columnNo column number
          */
-        public Point(int lineNo, int columnNo) {
+        Point(int lineNo, int columnNo) {
             line = lineNo;
             column = columnNo;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index 2ee661d730..dd1637020c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -22,6 +22,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -147,6 +149,11 @@ public final void setTagSeverity(String severity) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final FileContents contents = getFileContents();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index 6632dac293..a918ead191 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -90,7 +90,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.MODIFIERS};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -98,6 +98,11 @@
         return new int[] {TokenTypes.MODIFIERS};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final List<DetailAST> mods = Lists.newArrayList();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index f0268cac6c..4449ca4fc0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -204,8 +204,11 @@ private static boolean isEnumMember(DetailAST ast) {
      * @return true or false
      */
     private static boolean isInterfaceOrAnnotationMember(DetailAST ast) {
-        final DetailAST parentTypeDef =
-                ast.getParent() != null ? ast.getParent().getParent() : null;
+        DetailAST parentTypeDef = ast.getParent();
+
+        if (parentTypeDef != null) {
+            parentTypeDef = parentTypeDef.getParent();
+        }
         return parentTypeDef != null
                 && (parentTypeDef.getType() == TokenTypes.INTERFACE_DEF
                     || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index a8edba0ecc..7e35db3b35 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -25,6 +25,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -191,6 +193,11 @@ public void setAllowedAbbreviations(String allowedAbbreviations) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheck.java
index 18e323a5c9..91116a7009 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheck.java
@@ -53,6 +53,13 @@ public ClassTypeParameterNameCheck() {
         super("^[A-Z]$");
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return new int[] {
+            TokenTypes.TYPE_PARAMETER,
+        };
+    }
+
     @Override
     protected final int getLocation() {
         return TokenTypes.CLASS_DEF;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
index 71bded1e1b..cfcb2ed68f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java
@@ -62,7 +62,7 @@ public ConstantNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.VARIABLE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -70,6 +70,11 @@ public ConstantNameCheck() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         boolean retVal = false;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheck.java
index c42a60c89e..69b712d5c5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheck.java
@@ -53,6 +53,11 @@ public InterfaceTypeParameterNameCheck() {
         super("^[A-Z]$");
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return new int[] {TokenTypes.TYPE_PARAMETER};
+    }
+
     @Override
     protected final int getLocation() {
         return TokenTypes.INTERFACE_DEF;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
index 11ea37d7ec..ec044d6d02 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -58,10 +60,7 @@ public LocalFinalVariableNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.VARIABLE_DEF,
-            TokenTypes.PARAMETER_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -72,6 +71,11 @@ public LocalFinalVariableNameCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         final DetailAST modifiersAST =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
index 0873a0d726..d41d566993 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -92,10 +94,7 @@ public final void setAllowOneCharVarInForLoop(boolean allow) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.VARIABLE_DEF,
-            TokenTypes.PARAMETER_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -106,6 +105,11 @@ public final void setAllowOneCharVarInForLoop(boolean allow) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         if (allowOneCharVarInForLoop && isForLoopVariable(ast)) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
index be3017c9bc..c8931168ef 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java
@@ -58,7 +58,7 @@ public MemberNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.VARIABLE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -66,6 +66,11 @@ public MemberNameCheck() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         final DetailAST modifiersAST =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
index 022d3e654e..1ad6286e45 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java
@@ -100,7 +100,7 @@ public MethodNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF, };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -108,6 +108,11 @@ public MethodNameCheck() {
         return new int[] {TokenTypes.METHOD_DEF, };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
index 7836ed6833..ae0c6ac0e7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
@@ -53,6 +53,13 @@ public MethodTypeParameterNameCheck() {
         super("^[A-Z]$");
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return new int[] {
+            TokenTypes.TYPE_PARAMETER,
+        };
+    }
+
     @Override
     protected final int getLocation() {
         return TokenTypes.METHOD_DEF;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
index 0ad5976913..56c3d88692 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheck.java
@@ -74,7 +74,7 @@ public PackageNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.PACKAGE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -82,6 +82,11 @@ public PackageNameCheck() {
         return new int[] {TokenTypes.PACKAGE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nameAST = ast.getLastChild().getPreviousSibling();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
index 3628d1374e..862bd54896 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
@@ -59,7 +59,7 @@ public ParameterNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.PARAMETER_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -67,6 +67,11 @@ public ParameterNameCheck() {
         return new int[] {TokenTypes.PARAMETER_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     protected boolean mustCheckName(DetailAST ast) {
         return ast.getParent().getType() != TokenTypes.LITERAL_CATCH;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
index d170a51ca6..d7093fcba4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheck.java
@@ -56,7 +56,7 @@ public StaticVariableNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.VARIABLE_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -64,6 +64,11 @@ public StaticVariableNameCheck() {
         return new int[] {TokenTypes.VARIABLE_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     protected final boolean mustCheckName(DetailAST ast) {
         final DetailAST modifiersAST =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
index ecec8d0a4e..8f50c0bf57 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
@@ -62,11 +64,7 @@ public TypeNameCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.CLASS_DEF,
-                          TokenTypes.INTERFACE_DEF,
-                          TokenTypes.ENUM_DEF,
-                          TokenTypes.ANNOTATION_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -77,4 +75,9 @@ public TypeNameCheck() {
                           TokenTypes.ANNOTATION_DEF,
         };
     }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
index bf8613c86a..d281836974 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
@@ -36,7 +36,7 @@
      * @param currentContents
      *            content of checked file.
      **/
-    public CommentSuppressor(FileContents currentContents) {
+    CommentSuppressor(FileContents currentContents) {
         this.currentContents = currentContents;
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
index 9d651724ae..57592df152 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -56,7 +56,7 @@
      * @param compileFlags the flags to create the regular expression with.
      * @param reporter used to report violations.
      */
-    public DetectorOptions(int compileFlags,
+    DetectorOptions(int compileFlags,
             AbstractViolationReporter reporter) {
         this.compileFlags = compileFlags;
         this.reporter = reporter;
@@ -183,8 +183,11 @@ public boolean isIgnoreCase() {
      * @return the pattern to use when matching.
      */
     public Pattern getPattern() {
-        final int options = isIgnoreCase() ? compileFlags
-                | Pattern.CASE_INSENSITIVE : compileFlags;
+        int options = compileFlags;
+
+        if (isIgnoreCase()) {
+            options |= Pattern.CASE_INSENSITIVE;
+        }
         return Pattern.compile(format, options);
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
index d9993cbe63..480cebe421 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
@@ -67,7 +67,7 @@
      * Creates an instance.
      * @param options the options to use.
      */
-    public MultilineDetector(DetectorOptions options) {
+    MultilineDetector(DetectorOptions options) {
         this.options = options;
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
index d9e610e026..09690af1c7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -22,6 +22,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
@@ -122,7 +124,12 @@ public RegexpCheck() {
      * @param message custom message which should be used in report.
      */
     public void setMessage(String message) {
-        this.message = message == null ? "" : message;
+        if (message == null) {
+            this.message = "";
+        }
+        else {
+            this.message = message;
+        }
     }
 
     /**
@@ -172,7 +179,17 @@ public void setDuplicateLimit(int duplicateLimit) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
@@ -255,10 +272,19 @@ private boolean isIgnore(int startLine, FileText text, LineColumn start) {
      * @param lineNumber the line number the message relates to.
      */
     private void logMessage(int lineNumber) {
-        String msg = getMessage().isEmpty() ? getFormat() : message;
+        String msg;
+
+        if (getMessage().isEmpty()) {
+            msg = getFormat();
+        }
+        else {
+            msg = message;
+        }
+
         if (errorCount >= errorLimit) {
             msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;
         }
+
         if (illegalPattern) {
             log(lineNumber, MSG_ILLEGAL_REGEXP, msg);
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
index 094176be19..dda7542a26 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.Arrays;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 
@@ -39,7 +41,17 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
index b586d383bf..0af4be5733 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java
@@ -36,7 +36,7 @@
      * Creates an instance.
      * @param options the options to use.
      */
-    public SinglelineDetector(DetectorOptions options) {
+    SinglelineDetector(DetectorOptions options) {
         this.options = options;
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
index 1f95ee95cf..0573935cc6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
@@ -72,7 +72,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.LITERAL_NEW};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -80,6 +80,11 @@
         return new int[] {TokenTypes.LITERAL_NEW};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST openingBrace = ast.findFirstToken(TokenTypes.OBJBLOCK);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index 1cdcadf147..3c99907baa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -99,7 +101,17 @@ public LineLengthCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
index 7f36141db8..772097cde5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
@@ -85,13 +85,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.CLASS_DEF,
-            TokenTypes.ENUM_CONSTANT_DEF,
-            TokenTypes.ENUM_DEF,
-            TokenTypes.INTERFACE_DEF,
-            TokenTypes.METHOD_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -105,6 +99,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return new int[] {TokenTypes.METHOD_DEF};
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.METHOD_DEF) {
@@ -251,7 +250,14 @@ void increment(Scope scope) {
          */
         int value(Scope scope) {
             final Integer value = counts.get(scope);
-            return value == null ? 0 : value;
+            final int defaultValue = 0;
+
+            if (value == null) {
+                return defaultValue;
+            }
+            else {
+                return value;
+            }
         }
 
         /** @return the total number of methods. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
index a0b7486f1d..080cb3e8ff 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
@@ -73,7 +75,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -81,6 +83,11 @@
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST openingBrace = ast.findFirstToken(TokenTypes.SLIST);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
index b23a09de35..7c5473fca7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java
@@ -44,8 +44,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF,
-            TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF, };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -54,6 +53,11 @@
             TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF, };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST ast) {
         currentDepth = 0;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
index 10b39e772a..c86a7f5866 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.AnnotationUtility;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -105,7 +107,7 @@ public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -113,6 +115,11 @@ public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods) {
         return new int[] {TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
index 93614de9c9..5e866979f6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheck.java
@@ -70,14 +70,17 @@ public EmptyForInitializerPadCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.FOR_INIT,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.FOR_INIT,
-        };
+        return new int[] {TokenTypes.FOR_INIT};
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
index e86e2b075c..2d0f9d37bc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java
@@ -70,14 +70,17 @@ public EmptyForIteratorPadCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.FOR_ITERATOR,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[] {TokenTypes.FOR_ITERATOR,
-        };
+        return new int[] {TokenTypes.FOR_ITERATOR};
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
index 31a8ec1234..ad4b936000 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -184,18 +186,7 @@ public void setAllowMultipleEmptyLines(boolean allow) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.PACKAGE_DEF,
-            TokenTypes.IMPORT,
-            TokenTypes.CLASS_DEF,
-            TokenTypes.INTERFACE_DEF,
-            TokenTypes.ENUM_DEF,
-            TokenTypes.STATIC_INIT,
-            TokenTypes.INSTANCE_INIT,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.CTOR_DEF,
-            TokenTypes.VARIABLE_DEF,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -214,6 +205,11 @@ public void setAllowMultipleEmptyLines(boolean allow) {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nextToken = ast.getNextSibling();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index 3556d5b1b8..28600db694 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -98,7 +98,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.GENERIC_START, TokenTypes.GENERIC_END};
+        return getAcceptableTokens();
     }
 
     @Override
@@ -106,6 +106,11 @@
         return new int[] {TokenTypes.GENERIC_START, TokenTypes.GENERIC_END};
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
     @Override
     public void beginTree(DetailAST rootAST) {
         // Reset for each tree, just incase there are errors in preceeding
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index cf62d7a809..d2d9d867e3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -96,13 +98,7 @@ public MethodParamPadCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {
-            TokenTypes.CTOR_DEF,
-            TokenTypes.LITERAL_NEW,
-            TokenTypes.METHOD_CALL,
-            TokenTypes.METHOD_DEF,
-            TokenTypes.SUPER_CTOR_CALL,
-        };
+        return getAcceptableTokens();
     }
 
     @Override
@@ -116,6 +112,11 @@ public MethodParamPadCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST parenAST;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
index 87b559d624..e1ce81104c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -90,6 +92,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getLineNo() != ast.getLastChild().getLineNo()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
index 339a40d277..e0cac26308 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -104,6 +106,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST astNode = getPreceded(ast);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
index c2d3f805c5..a1a4412eb2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -88,6 +90,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final String line = getLine(ast.getLineNo() - 1);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
index 628fb568cf..790cdae511 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 
 import com.puppycrawl.tools.checkstyle.Utils;
@@ -181,6 +182,11 @@ public OperatorWrapCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.COLON) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
index 05d5af9983..fbc47a53ad 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java
@@ -21,6 +21,8 @@
 
 import java.util.Arrays;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
@@ -98,7 +100,7 @@ public ParenPadCheck() {
 
     @Override
     public int[] getDefaultTokens() {
-        return getAcceptableTokens();
+        return makeAcceptableTokens();
     }
 
     @Override
@@ -106,6 +108,11 @@ public ParenPadCheck() {
         return makeAcceptableTokens();
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         switch (ast.getType()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
index c82bab69db..037195b6af 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
@@ -122,6 +124,11 @@ public SeparatorWrapCheck() {
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final String text = ast.getText();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
index 524a2499b8..6074e1a967 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -81,6 +83,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final String line = getLine(ast.getLineNo() - 1);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index f0a20ef361..bb43768f54 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -293,6 +295,11 @@
         };
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
     /**
      * Sets whether or not empty method bodies are allowed.
      * @param allow {@code true} to allow empty method bodies.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index b09fd8d112..8d74dc06db 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -147,7 +147,13 @@ public void updateUI() {
     @Override
     public int getEditingRow() {
         final Class<?> editingClass = getColumnClass(editingColumn);
-        return editingClass == TreeTableModel.class ? -1 : editingRow;
+
+        if (editingClass == TreeTableModel.class) {
+            return -1;
+        }
+        else {
+            return editingRow;
+        }
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index f896bddb6c..3ef931af55 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -27,7 +27,6 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.TooManyListenersException;
 
@@ -112,9 +111,9 @@ public void openAst(DetailAST parseTree, final Component parent) {
         reloadAction.setEnabled(true);
 
         // clear for each new file
-        getLinesToPosition().clear();
+        clearLinesToPosition();
         // starts line counting at 1
-        getLinesToPosition().add(0);
+        addLineToPosition(0);
         // insert the contents of the file to the text area
 
         // clean the text area before inserting the lines of the new file
@@ -141,12 +140,12 @@ public void openFile(File file, final Component parent) {
                 final String[] sourceLines = text.toLinesArray();
 
                 // clear for each new file
-                getLinesToPosition().clear();
+                clearLinesToPosition();
                 // starts line counting at 1
-                getLinesToPosition().add(0);
+                addLineToPosition(0);
                 // insert the contents of the file to the text area
                 for (String element : sourceLines) {
-                    getLinesToPosition().add(textArea.getText().length());
+                    addLineToPosition(textArea.getText().length());
                     textArea.append(element + "\n");
                 }
 
@@ -199,8 +198,12 @@ private static void showErrorDialog(final Component parent, final String msg) {
         SwingUtilities.invokeLater(showError);
     }
 
-    public List<Integer> getLinesToPosition() {
-        return Collections.unmodifiableList(linesToPosition);
+    void addLineToPosition(int value) {
+        linesToPosition.add(value);
+    }
+
+    void clearLinesToPosition() {
+        linesToPosition.clear();
     }
 
     /**
diff --git a/src/site/resources/images/gui_screenshot_eclipse_build_path.png b/src/site/resources/images/gui_screenshot_eclipse_build_path.png
new file mode 100755
index 0000000000..6955e22602
Binary files /dev/null and b/src/site/resources/images/gui_screenshot_eclipse_build_path.png differ
diff --git a/src/site/resources/images/gui_screenshot_eclipse_ignore_warnings.png b/src/site/resources/images/gui_screenshot_eclipse_ignore_warnings.png
new file mode 100755
index 0000000000..569c4606d7
Binary files /dev/null and b/src/site/resources/images/gui_screenshot_eclipse_ignore_warnings.png differ
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
index 37a8add33e..ec8fe78a71 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
@@ -90,12 +90,12 @@ protected static String getSrcPath(String filename) throws IOException {
         return new File("src/test/java/com/puppycrawl/tools/checkstyle/" + filename).getCanonicalPath();
     }
 
-    protected void verify(Configuration aConfig, String fileName, String[] expected)
+    protected void verify(Configuration aConfig, String fileName, String... expected)
             throws Exception {
         verify(createChecker(aConfig), fileName, fileName, expected);
     }
 
-    protected void verify(Checker c, String fileName, String[] expected)
+    protected void verify(Checker c, String fileName, String... expected)
             throws Exception {
         verify(c, fileName, fileName, expected);
     }
@@ -103,7 +103,7 @@ protected void verify(Checker c, String fileName, String[] expected)
     protected void verify(Checker c,
                           String processedFilename,
                           String messageFileName,
-                          String[] expected)
+                          String... expected)
             throws Exception {
         verify(c,
                 new File[]{new File(processedFilename)},
@@ -113,7 +113,7 @@ protected void verify(Checker c,
     protected void verify(Checker c,
                           File[] processedFiles,
                           String messageFileName,
-                          String[] expected)
+                          String... expected)
             throws Exception {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
index c67d9aa36f..f1c1b3f08c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -178,7 +178,7 @@ public void testFileExtensions() throws Exception {
         final String[] fileExtensions = {"java", "xml", "properties"};
         c.setFileExtensions(fileExtensions);
         final int counter = c.process(files);
-        assertEquals(counter, 1); // comparing to 1 as there is only one legal file in input
+        assertEquals(1, counter); // comparing to 1 as there is only one legal file in input
     }
 
     @SuppressWarnings("deprecation")
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index 90d10ef134..1b0181ca2a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -225,11 +225,11 @@ private static void verifyConfigNode(
         final String[] attNames = config.getAttributeNames();
         assertEquals("attributes.length", atts.size(), attNames.length);
 
-        for (int i = 0; i < attNames.length; i++) {
+        for (String attName : attNames) {
             assertEquals(
-                "attribute[" + attNames[i] + "]",
-                atts.get(attNames[i]),
-                config.getAttribute(attNames[i]));
+                "attribute[" + attName + "]",
+                atts.get(attName),
+                config.getAttribute(attName));
         }
     }
 
@@ -239,10 +239,10 @@ public void testReplacePropertiesNoReplace()
         final String[] testValues = {null, "", "a", "$a", "{a",
                                      "{a}", "a}", "$a}", "$", "a$b", };
         final Properties props = initProperties();
-        for (int i = 0; i < testValues.length; i++) {
+        for (String testValue : testValues) {
             final String value = ConfigurationLoader.replaceProperties(
-                testValues[i], new PropertiesExpander(props), null);
-            assertEquals("\"" + testValues[i] + "\"", value, testValues[i]);
+                testValue, new PropertiesExpander(props), null);
+            assertEquals("\"" + testValue + "\"", value, testValue);
         }
     }
 
@@ -290,11 +290,11 @@ public void testReplacePropertiesReplace()
             {"$$", "$"},
         };
         final Properties props = initProperties();
-        for (int i = 0; i < testValues.length; i++) {
+        for (String[] testValue : testValues) {
             final String value = ConfigurationLoader.replaceProperties(
-                testValues[i][0], new PropertiesExpander(props), null);
-            assertEquals("\"" + testValues[i][0] + "\"",
-                testValues[i][1], value);
+                testValue[0], new PropertiesExpander(props), null);
+            assertEquals("\"" + testValue[0] + "\"",
+                testValue[1], value);
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index b89e2cd743..8925da7074 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -472,10 +472,10 @@ public void checkAssertion() throws IOException {
                 String format = "%s.java:%s: warning: File length is %s lines (max allowed is 80).";
                 StringBuilder sb = new StringBuilder();
                 sb.append("Starting audit..." + System.getProperty("line.separator"));
-                for (int i = 0; i < outputValues.length; i++) {
+                for (String[] outputValue : outputValues) {
                     String line = String.format(format,
-                            expectedPath + outputValues[i][0], outputValues[i][1],
-                            outputValues[i][2]);
+                            expectedPath + outputValue[0], outputValue[1],
+                            outputValue[2]);
                     sb.append(line + System.getProperty("line.separator"));
                 }
                 sb.append("Audit done." + System.getProperty("line.separator"));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 6564dad14e..47fbb0f14e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -297,7 +297,18 @@ public void testProcessWithRecognitionException() throws Exception {
     public static class BadJavaDocCheck extends Check {
         @Override
         public int[] getDefaultTokens() {
+            return getAcceptableTokens();
+        }
+
+        @Override
+        public int[] getAcceptableTokens() {
             return new int[]{TokenTypes.SINGLE_LINE_COMMENT};
         }
+
+        @Override
+        public int[] getRequiredTokens() {
+            return getAcceptableTokens();
+        }
     }
+
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
index 1dd052f7e3..c033fc7c01 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
@@ -22,6 +22,7 @@
 import static com.puppycrawl.tools.checkstyle.TestUtils.assertUtilsClassHasPrivateConstructor;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -144,7 +145,7 @@ public void testGetNonExistingConstructor() throws NoSuchMethodException {
             fail();
         }
         catch (IllegalStateException expected) {
-            assertEquals(NoSuchMethodException.class, expected.getCause().getClass());
+            assertSame(NoSuchMethodException.class, expected.getCause().getClass());
         }
     }
 
@@ -167,7 +168,7 @@ public void testInvokeConstructorThatFails() throws NoSuchMethodException {
             fail();
         }
         catch (IllegalStateException expected) {
-            assertEquals(InstantiationException.class, expected.getCause().getClass());
+            assertSame(InstantiationException.class, expected.getCause().getClass());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
index 8f006af139..e57b90e1aa 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
@@ -62,9 +62,9 @@ public void testEncode()
             {"&#0", "&amp;#0"}, //not reference
             {"&#X0;", "&amp;#X0;"}, //not reference
         };
-        for (int i = 0; i < encodings.length; i++) {
-            final String encoded = XMLLogger.encode(encodings[i][0]);
-            assertEquals("\"" + encodings[i][0] + "\"", encodings[i][1], encoded);
+        for (String[] encoding : encodings) {
+            final String encoded = XMLLogger.encode(encoding[0]);
+            assertEquals("\"" + encoding[0] + "\"", encoding[1], encoded);
         }
         outStream.close();
     }
@@ -73,15 +73,15 @@ public void testEncode()
     public void testIsReference()
         throws IOException {
         new XMLLogger(outStream, false);
-        final String[] reference = {
+        final String[] references = {
             "&#0;",
             "&#x0;",
         };
-        for (int i = 0; i < reference.length; i++) {
-            assertTrue("reference: " + reference[i],
-                       XMLLogger.isReference(reference[i]));
+        for (String reference : references) {
+            assertTrue("reference: " + reference,
+                    XMLLogger.isReference(reference));
         }
-        final String[] noReference = {
+        final String[] noReferences = {
             "&",
             "&;",
             "&#;",
@@ -91,9 +91,9 @@ public void testIsReference()
             "&#xg;",
             "ref",
         };
-        for (int i = 0; i < noReference.length; i++) {
-            assertFalse("no reference: " + noReference[i],
-                       XMLLogger.isReference(noReference[i]));
+        for (String noReference : noReferences) {
+            assertFalse("no reference: " + noReference,
+                    XMLLogger.isReference(noReference));
         }
 
         outStream.close();
@@ -202,7 +202,7 @@ public void testAddException()
             new LocalizedMessage(1, 1,
                 "messages.properties", null, null, null, this.getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "Test.java", message);
-        logger.addException(ev, new TestThrowable());
+        logger.addException(ev, new TestException());
         logger.auditFinished(null);
         final String[] expectedLines = {
             "&lt;exception&gt;",
@@ -238,7 +238,7 @@ public void testAddException()
      * Take into consideration checkstyle element (first and last lines).
      * @param expectedLines expected error report lines
      */
-    private void verifyLines(String[] expectedLines)
+    private void verifyLines(String... expectedLines)
         throws IOException {
         final String[] lines = getOutStreamLines();
         assertEquals("length.", expectedLines.length + 3, lines.length);
@@ -253,7 +253,7 @@ private void verifyLines(String[] expectedLines)
         assertEquals("last line.", "</checkstyle>", lines[lines.length - 1]);
     }
 
-    private static class TestThrowable extends Exception {
+    private static class TestException extends Exception {
 
         private static final long serialVersionUID = 1L;
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
index a84f1d1c9b..ef414fc6a1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
@@ -23,6 +23,7 @@
 
 import java.util.SortedSet;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -38,7 +39,17 @@
     private final Check emptyCheck = new Check() {
         @Override
         public int[] getDefaultTokens() {
-            return new int[0];
+            return ArrayUtils.EMPTY_INT_ARRAY;
+        }
+
+        @Override
+        public int[] getAcceptableTokens() {
+            return ArrayUtils.EMPTY_INT_ARRAY;
+        }
+
+        @Override
+        public int[] getRequiredTokens() {
+            return ArrayUtils.EMPTY_INT_ARRAY;
         }
     };
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
index d632059ea3..3b986d360e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
@@ -71,7 +71,7 @@ public void testSetupChildFromBaseClass() throws CheckstyleException {
     public void testContextualize_InvocationTargetException() {
         final TestBean testBean = new TestBean();
         DefaultContext context = new DefaultContext();
-        context.add("exceptionalMethod", 123f);
+        context.add("exceptionalMethod", 123.0f);
         try {
             testBean.contextualize(context);
             fail();
@@ -98,7 +98,7 @@ public void testContextualize_ConversionException() {
     }
 
     @SuppressWarnings("unused")
-    public class TestBean extends AutomaticBean {
+    public static class TestBean extends AutomaticBean {
 
         private String privateField;
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/CheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/CheckTest.java
index 09432c9194..25d187ff54 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/CheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/CheckTest.java
@@ -19,21 +19,44 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
 public class CheckTest {
 
+    @Test
+    public void testGetRequiredTokens() {
+        Check check = new Check() {
+            @Override
+            public int[] getDefaultTokens() {
+                return ArrayUtils.EMPTY_INT_ARRAY;
+            }
+
+            @Override
+            public int[] getRequiredTokens() {
+                return super.getRequiredTokens();
+            }
+        };
+        // Eventually it will become clear abstract method
+        Assert.assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, check.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptable() {
         Check check = new Check() {
             @Override
             public int[] getDefaultTokens() {
-                return new int[0];
+                return ArrayUtils.EMPTY_INT_ARRAY;
+            }
+
+            @Override
+            public int[] getAcceptableTokens() {
+                return super.getAcceptableTokens();
             }
         };
         // Eventually it will become clear abstract method
-        Assert.assertNotNull(check.getAcceptableTokens());
+        Assert.assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, check.getAcceptableTokens());
     }
 
     @Test
@@ -41,7 +64,17 @@ public void testVisitToken() {
         Check check = new Check() {
             @Override
             public int[] getDefaultTokens() {
-                return new int[0];
+                return  ArrayUtils.EMPTY_INT_ARRAY;
+            }
+
+            @Override
+            public int[] getAcceptableTokens() {
+                return  ArrayUtils.EMPTY_INT_ARRAY;
+            }
+
+            @Override
+            public int[] getRequiredTokens() {
+                return  ArrayUtils.EMPTY_INT_ARRAY;
             }
         };
         // Eventually it will become clear abstract method
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
index fd4c23ea06..f0b141cdee 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
@@ -119,12 +119,12 @@ public boolean accept(File file) {
                         && !file.getName().endsWith("InputGrammar.java");
                 }
             });
-        for (int i = 0; i < files.length; i++) {
-            if (files[i].isFile()) {
-                checkFile(files[i].getCanonicalPath());
+        for (File file : files) {
+            if (file.isFile()) {
+                checkFile(file.getCanonicalPath());
             }
-            else if (files[i].isDirectory()) {
-                checkDir(files[i]);
+            else if (file.isDirectory()) {
+                checkDir(file);
             }
         }
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
index 7f23234530..240dc6cccb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
@@ -303,7 +303,7 @@ public void testSerialData() {
 
     @Test
     public void testCoverage() {
-        assertEquals(JavadocTagInfo.VERSION.getType(), JavadocTagInfo.Type.BLOCK);
+        assertEquals(JavadocTagInfo.Type.BLOCK, JavadocTagInfo.VERSION.getType());
 
         assertEquals("text [@version] name [version] type [BLOCK]", JavadocTagInfo.VERSION.toString());
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
index 7a50c68780..5b88a6e1de 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
@@ -30,6 +30,14 @@
 
 public class ArrayTypeStyleCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ArrayTypeStyleCheck checkObj = new ArrayTypeStyleCheck();
+        int[] expected = new int[] {TokenTypes.ARRAY_DECLARATOR};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testJavaStyle()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
index 8f6ad24819..881c7eebb7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import static org.junit.Assert.assertArrayEquals;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -30,6 +32,17 @@
 
     private final String MSG = getCheckMessage("forbid.escaped.unicode.char");
 
+    @Test
+    public void testGetRequiredTokens() {
+        AvoidEscapedUnicodeCharactersCheck checkObj =
+            new AvoidEscapedUnicodeCharactersCheck();
+        int[] expected = new int[] {
+            TokenTypes.STRING_LITERAL,
+            TokenTypes.CHAR_LITERAL,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         DefaultConfiguration checkConfig =
@@ -173,7 +186,7 @@ public void testGetAcceptableTokens() {
         int[] actual = check.getAcceptableTokens();
         int[] expected = new int[] {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
index 2ac7f53164..e6afb194ab 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
@@ -19,12 +19,14 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.util.List;
 import java.util.Locale;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -45,6 +47,12 @@ protected DefaultConfiguration createCheckerConfig(
         return dc;
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        FileContentsHolder checkObj = new FileContentsHolder();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testTranslation() throws Exception {
         final Configuration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
index 5b67d8b5cf..be33934a6f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import static org.junit.Assert.assertArrayEquals;
+
 import java.io.File;
 
 import org.junit.Assert;
@@ -30,6 +32,18 @@
 
 public class OuterTypeFilenameCheckTest extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        OuterTypeFilenameCheck checkObj = new OuterTypeFilenameCheck();
+        int[] expected = new int[] {
+            TokenTypes.CLASS_DEF,
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGood1() throws Exception {
         final DefaultConfiguration checkConfig =
@@ -57,7 +71,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ANNOTATION_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
index 72ed465bf3..28c6673da4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
@@ -19,14 +19,25 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import static org.junit.Assert.assertArrayEquals;
+
 import java.io.File;
 
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class SuppressWarningsHolderTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        SuppressWarningsHolder checkObj = new SuppressWarningsHolder();
+        int[] expected = new int[] {TokenTypes.ANNOTATION};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testOnComplexAnnotations() throws Exception {
         Configuration checkConfig = createCheckConfig(SuppressWarningsHolder.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
index 5a2a7c9d7d..3900e81c55 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
@@ -31,6 +31,14 @@
 
 public class TodoCommentCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        TodoCommentCheck checkObj = new TodoCommentCheck();
+        int[] expected = new int[] {TokenTypes.COMMENT_CONTENT};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIt() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
index 07b54b24a7..a24640006a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
@@ -20,7 +20,9 @@
 package com.puppycrawl.tools.checkstyle.checks;
 
 import static com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -37,6 +39,18 @@ public void setUp() {
         checkConfig = createCheckConfig(TrailingCommentCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        TrailingCommentCheck checkObj = new TrailingCommentCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        TrailingCommentCheck checkObj = new TrailingCommentCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
+    }
+
     @Test
     public void testDefaults() throws Exception {
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
index 3ed098dbf3..e926ee5078 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
@@ -74,4 +74,18 @@ public void testBaseNameSeparator() throws Exception {
             expected);
     }
 
+    @Test
+    public void testOnePropertyFileSet() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(TranslationCheck.class);
+        final String[] expected = {
+        };
+        final File[] propertyFiles = new File[] {
+            new File(getPath("app-dev.properties")),
+        };
+        verify(
+            createChecker(checkConfig),
+            propertyFiles,
+            getPath("app-dev.properties"),
+            expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index c5ba3758fb..89230f6b7a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -81,7 +81,7 @@ public void testNotFoundKey() throws Exception {
         final int stringNumber =
                 UniquePropertiesCheck.getLineNumber(testStrings,
                         "some key");
-        Assert.assertEquals(stringNumber, 0);
+        Assert.assertEquals(0, stringNumber);
     }
 
     /**
@@ -97,12 +97,12 @@ public void testIOException() throws Exception {
         final SortedSet<LocalizedMessage> messages =
                 check.process(file, Collections.<String>emptyList());
         Assert.assertEquals("Wrong messages count: " + messages.size(),
-                messages.size(), 1);
+                1, messages.size());
         final LocalizedMessage message = messages.iterator().next();
         final String retrievedMessage = messages.iterator().next().getKey();
         Assert.assertEquals("Message key '" + retrievedMessage
-                + "' is not valid", retrievedMessage,
-                "unable.open.cause");
+                + "' is not valid", "unable.open.cause",
+                retrievedMessage);
         Assert.assertEquals("Message '" + message.getMessage()
                 + "' is not valid", message.getMessage(),
                 getCheckMessage(IO_EXCEPTION_KEY, fileName, getFileNotFoundDetail(file)));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
index 877d218f5d..e855745f0a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
@@ -31,6 +31,14 @@
 
 public class UpperEllCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        UpperEllCheck checkObj = new UpperEllCheck();
+        int[] expected = new int[] {TokenTypes.NUM_LONG};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testWithChecker()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
index bb7b66a5e4..3911ce0479 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
@@ -21,7 +21,9 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck.MSG_KEY_ANNOTATION_LOCATION;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck.MSG_KEY_ANNOTATION_LOCATION_ALONE;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -30,6 +32,13 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AnnotationLocationCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        AnnotationLocationCheck checkObj = new AnnotationLocationCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCorrect() throws Exception {
         DefaultConfiguration checkConfig = createCheckConfig(AnnotationLocationCheck.class);
@@ -88,7 +97,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ANNOTATION_FIELD_DEF,
             };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java
index 4462c150fb..46749e2f38 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java
@@ -22,6 +22,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_ANNOTATION_MISSING_DEPRECATED;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_JAVADOC_DUPLICATE_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_JAVADOC_MISSING;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -29,8 +30,27 @@
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class MissingDeprecatedTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        MissingDeprecatedCheck checkObj = new  MissingDeprecatedCheck();
+        int[] expected = new int[] {
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ANNOTATION_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.CTOR_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     /**
      * Tests that memebers that are only deprecated via javadoc are flagged.
      */
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
index 6efe9f26fb..558e516787 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
 import static com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck.MSG_KEY_BLOCK_NESTED;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -30,6 +31,14 @@
 
 public class AvoidNestedBlocksCheckTest
         extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        AvoidNestedBlocksCheck checkObj = new AvoidNestedBlocksCheck();
+        int[] expected = new int[] {TokenTypes.SLIST};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testStrictSettings()
         throws Exception {
@@ -65,7 +74,7 @@ public void testGetAcceptableTokens() {
         int[] actual = constantNameCheckObj.getAcceptableTokens();
         int[] expected = new int[] {TokenTypes.SLIST };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
index 7316795adb..5d86adccca 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import static org.junit.Assert.assertArrayEquals;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -32,6 +34,14 @@
  *
  */
 public class EmptyCatchBlockCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        EmptyCatchBlockCheck checkObj = new EmptyCatchBlockCheck();
+        int[] expected = new int[] {TokenTypes.LITERAL_CATCH};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final DefaultConfiguration checkConfig =
@@ -68,7 +78,7 @@ public void testGetAcceptableTokens() {
         int[] actual = constantNameCheckObj.getAcceptableTokens();
         int[] expected = new int[] {TokenTypes.LITERAL_CATCH };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
index b39a610795..548f589801 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
@@ -22,7 +22,9 @@
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_BREAK_AFTER;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_NEW;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -39,6 +41,13 @@ public void setUp() {
         checkConfig = createCheckConfig(LeftCurlyCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        LeftCurlyCheck checkObj = new LeftCurlyCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
@@ -276,7 +285,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT, };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
index 4141acaf45..31318b2fcb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
@@ -46,7 +46,6 @@ public void testDefault() throws Exception {
             "40:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
             "44:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
             "93:27: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 27),
-            "97:54: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 54),
         };
         verify(checkConfig, getPath("InputLeftCurlyOther.java"), expected);
     }
@@ -60,11 +59,18 @@ public void testSame() throws Exception {
             "40:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
             "44:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
             "93:27: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 27),
-            "97:54: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 54),
         };
         verify(checkConfig, getPath("InputLeftCurlyOther.java"), expected);
     }
 
+    @Test
+    public void testSameOmitOneLiners() throws Exception {
+        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
+        final String[] expected = {
+        };
+        verify(checkConfig, getPath("InputRightCurlySameForOneLiners.java"), expected);
+    }
+
     @Test
     public void testAlone() throws Exception {
         checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
@@ -125,10 +131,6 @@ public void testForceLineBreakBefore() throws Exception {
     @Test
     public void testForceLineBreakBefore2() throws Exception {
         final String[] expected = {
-            "24:33: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 33),
-            "32:44: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 44),
-            "32:63: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 63),
-            "52:48: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 48),
         };
         verify(checkConfig, getPath("InputRightCurlyLineBreakBefore.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheckTest.java
index d6c1f7a7a5..dccc31e213 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheckTest.java
@@ -28,7 +28,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 
 /**
- * The unit-test for the <code>NestedForDepthCheck</code>-checkstyle enhancement.
+ * The unit-test for the {@code NestedForDepthCheck}-checkstyle enhancement.
  * @see com.puppycrawl.tools.checkstyle.checks.coding.NestedForDepthCheck
  */
 public class NestedForDepthCheckTest extends BaseCheckTestSupport {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
index 9aef213fe1..374c9964e9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
@@ -30,6 +30,14 @@
 
 public class DesignForExtensionCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        DesignForExtensionCheck checkObj = new DesignForExtensionCheck();
+        int[] expected = new int[] {TokenTypes.METHOD_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIt() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
index e1313ea9b7..37bef4ed1d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
@@ -30,6 +30,14 @@
 
 public class FinalClassCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        FinalClassCheck checkObj = new FinalClassCheck();
+        int[] expected = new int[]{TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testFianlClass() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
index 699cdfc8f5..496c3a3586 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
@@ -33,6 +33,14 @@
 public class HideUtilityClassConstructorCheckTest
     extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        HideUtilityClassConstructorCheck checkObj =
+            new HideUtilityClassConstructorCheck();
+        int[] expected = new int[] {TokenTypes.CLASS_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testUtilClass() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
index 85107d12cc..2c1d89a496 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
@@ -31,6 +31,14 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class InnerTypeLastCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        InnerTypeLastCheck checkObj = new InnerTypeLastCheck();
+        int[] expected = new int[] {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testMembersBeforeInner() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
index 2a7c0e8ade..3fbadb9767 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
@@ -20,9 +20,11 @@
 package com.puppycrawl.tools.checkstyle.checks.design;
 
 import static com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -31,6 +33,12 @@
 
 public class OneTopLevelClassCheckTest extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        OneTopLevelClassCheck checkObj = new OneTopLevelClassCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testAcceptableTokens() throws Exception {
         final OneTopLevelClassCheck check =  new OneTopLevelClassCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
index eb23c59e40..f4ef736ac2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
@@ -41,6 +41,16 @@ private Checker getChecker() throws Exception {
         return createChecker(checkConfig);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        VisibilityModifierCheck checkObj = new VisibilityModifierCheck();
+        int[] expected = new int[] {
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.IMPORT,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testInner()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java
index 36b6cffdb7..180ef01f4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java
@@ -32,6 +32,14 @@
 
 public class AvoidStaticImportTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokesn() {
+        AvoidStaticImportCheck checkObj = new AvoidStaticImportCheck();
+        int[] expected = new int[] {TokenTypes.STATIC_IMPORT};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefaultOperation()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
index 154e108b50..acab708a62 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
@@ -47,6 +47,17 @@
     private static final String STD = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.STANDARD_JAVA_PACKAGE_RULE_GROUP;
     private static final String SPECIAL = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.SPECIAL_IMPORTS_RULE_GROUP;
 
+    @Test
+    public void testGetRequiredTokens() {
+        CustomImportOrderCheck checkObj = new CustomImportOrderCheck();
+        int[] expected = new int[] {
+            TokenTypes.IMPORT,
+            TokenTypes.STATIC_IMPORT,
+            TokenTypes.PACKAGE_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCustom() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
index 17ca387df2..7e3c116fe1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
@@ -31,6 +31,14 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class IllegalImportCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        IllegalImportCheck checkObj = new  IllegalImportCheck();
+        int[] expected = new int[] {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testWithSupplied()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
index 13976e9437..9e9fcad660 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
@@ -35,6 +35,18 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class ImportControlCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ImportControlCheck checkObj = new ImportControlCheck();
+        int[] expected = new int[] {
+            TokenTypes.PACKAGE_DEF,
+            TokenTypes.IMPORT,
+            TokenTypes.STATIC_IMPORT,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testOne() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(ImportControlCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
index 7c6f7c3590..f5936afd14 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
@@ -34,6 +34,18 @@
 
 public class RedundantImportCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        RedundantImportCheck checkObj = new RedundantImportCheck();
+        int[] expected = new int[] {
+            TokenTypes.IMPORT,
+            TokenTypes.STATIC_IMPORT,
+            TokenTypes.PACKAGE_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testWithChecker()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
index 22421ffae5..5a6ba86182 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
@@ -50,6 +50,7 @@ public void testSurroundingCode() throws Exception {
             "28: " + getCheckMessage(MSG_KEY_BLOCK, 31, 16, 12),
             "50: " + getCheckMessage(MSG_KEY_SINGLE, 51, 27, 23),
             "51: " + getCheckMessage(MSG_KEY_BLOCK, 53, 23, 36),
+            "136: " + getCheckMessage(MSG_KEY_SINGLE, 137, 20, 16),
         };
         verify(checkConfig, getPath("comments" + File.separator
                  + "InputCommentsIndentationCheckSurroundingCode.java"), expected);
@@ -73,6 +74,7 @@ public void testTokens() throws Exception {
         final String[] expected = {
             "13: " + getCheckMessage(MSG_KEY_SINGLE, 14, 14, 12),
             "50: " + getCheckMessage(MSG_KEY_SINGLE, 51, 27, 23),
+            "136: " + getCheckMessage(MSG_KEY_SINGLE, 137, 20, 16),
         };
         verify(checkConfig, getPath("comments" + File.separator
                  + "InputCommentsIndentationCheckSurroundingCode.java"), expected);
@@ -90,7 +92,7 @@ public void testVisitToken() throws Exception {
         }
         catch (IllegalArgumentException e) {
             final String msg = e.getMessage();
-            Assert.assertEquals(msg, "Unexpected token type: methodStub");
+            Assert.assertEquals("Unexpected token type: methodStub", msg);
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 2cdc35716c..cfc945407e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -23,6 +23,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.MSG_CHILD_ERROR_MULTI;
 import static com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.MSG_ERROR;
 import static com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.MSG_ERROR_MULTI;
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 
 import java.io.BufferedReader;
@@ -180,11 +181,27 @@ private void verifyWarns(Configuration config, String filePath,
     }
 
     private void verifyWarns(Configuration config, String filePath,
-                    String[] expected)
+                    String... expected)
                     throws Exception {
         verifyWarns(config, filePath, expected, 0);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        IndentationCheck checkObj = new IndentationCheck();
+        final HandlerFactory handlerFactory = new HandlerFactory();
+        int[] expected = handlerFactory.getHandledTypes();
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        IndentationCheck checkObj = new IndentationCheck();
+        final HandlerFactory handlerFactory = new HandlerFactory();
+        int[] expected = handlerFactory.getHandledTypes();
+        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+    }
+
     @Test
     public void testThrowsIndentProperty() {
         IndentationCheck indentationCheck = new IndentationCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index d5f52b897d..41a83b744c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -31,6 +31,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AbstractJavadocCheckTest extends BaseCheckTestSupport {
 
@@ -87,6 +88,16 @@ public void testWithMultipleChecks() throws Exception {
             return null;
         }
 
+        @Override
+        public int[] getAcceptableTokens() {
+            return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        }
+
+        @Override
+        public int[] getRequiredTokens() {
+            return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        }
+
         @Override
         public void visitJavadocToken(DetailNode ast) {
             // do nothing
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
index dc9c77cf2c..4e0b96fd07 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
@@ -20,14 +20,30 @@
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AtclauseOrderCheckTest extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetAcceptableTokens() {
+        AtclauseOrderCheck checkObj = new AtclauseOrderCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        AtclauseOrderCheck checkObj = new AtclauseOrderCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCorrect() throws Exception {
         DefaultConfiguration checkConfig = createCheckConfig(AtclauseOrderCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
index 705e25278b..d1897880ec 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
@@ -23,12 +23,14 @@
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck.MSG_MISPLACED_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck.MSG_REDUNDANT_PARAGRAPH;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck.MSG_TAG_AFTER;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Before;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class JavadocParagraphCheckTest extends BaseCheckTestSupport {
 
@@ -39,6 +41,13 @@ public void setUp() {
         checkConfig = createCheckConfig(JavadocParagraphCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        JavadocParagraphCheck checkObj = new JavadocParagraphCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCorrect() throws Exception {
         final String[] expected = {};
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
index c59bc0fb93..f776354515 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
@@ -37,6 +37,26 @@
 
 public class JavadocStyleCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();
+        int[] actual = javadocStyleCheck.getRequiredTokens();
+        int[] expected = new int[]{
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ANNOTATION_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.CTOR_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+            TokenTypes.PACKAGE_DEF,
+        };
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
index 7a7fdab7f2..7c5fca8d28 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
@@ -20,14 +20,25 @@
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class JavadocTagContinuationIndentationCheckTest
         extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        JavadocTagContinuationIndentationCheck checkObj =
+            new JavadocTagContinuationIndentationCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testFP() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
index ae5799276b..43fc039b47 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
@@ -45,6 +45,18 @@
  */
 public class JavadocTypeCheckTest extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();
+        int[] expected = new int[] {
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+        };
+        assertArrayEquals(expected, javadocTypeCheck.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
index 24fa6d75cc..d4dcb2db6a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
@@ -34,6 +34,16 @@
 public class JavadocVariableCheckTest
     extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();
+        int[] actual = javadocVariableCheck.getRequiredTokens();
+        int[] expected = new int[]{
+            TokenTypes.VARIABLE_DEF,
+        };
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
index 0504d9ba5b..35307ae904 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
@@ -20,14 +20,33 @@
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class NonEmptyAtclauseDescriptionCheckTest
         extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetAcceptableTokens() {
+        NonEmptyAtclauseDescriptionCheck checkObj =
+            new NonEmptyAtclauseDescriptionCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        NonEmptyAtclauseDescriptionCheck checkObj =
+            new NonEmptyAtclauseDescriptionCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCheck()
             throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java
index 1bb23d5a33..c5e5f58f60 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java
@@ -49,9 +49,12 @@
 import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagOpenContext;
 
 //@formatter:off
-public class ParseTreeBuilder {
+public final class ParseTreeBuilder {
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
+    private ParseTreeBuilder() {
+    }
+
     public static ParseTree treeOneSimpleHtmlTag() {
         JavadocContext Rohae = new JavadocContext(null, 0);
         HtmlElementContext qazLp = new HtmlElementContext(Rohae, 0);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
index f41a541c3b..882a2b6db6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
@@ -20,13 +20,30 @@
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class SingleLineJavadocCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testAcceptableTokens() {
+        SingleLineJavadocCheck checkObj = new SingleLineJavadocCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        SingleLineJavadocCheck checkObj = new SingleLineJavadocCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void simpleTest() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
index 40e3549d85..72950afe54 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck.SUMMARY_FIRST_SENTENCE;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck.SUMMARY_JAVADOC;
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.fail;
 
 import org.junit.Before;
@@ -28,6 +29,7 @@
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class SummaryJavadocCheckTest extends BaseCheckTestSupport {
     private DefaultConfiguration checkConfig;
@@ -37,6 +39,13 @@ public void setUp() {
         checkConfig = createCheckConfig(SummaryJavadocCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        SummaryJavadocCheck checkObj = new SummaryJavadocCheck();
+        int[] expected = new int[] {TokenTypes.BLOCK_COMMENT_BEGIN };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCorrect() throws Exception {
         checkConfig.addAttribute("forbiddenSummaryFragments",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
index c0d0cd91a5..1b5775580f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
@@ -195,7 +195,7 @@ public void testEnumsAndAnnotations() throws Exception {
     protected void verify(Checker c,
                           File[] processedFiles,
                           String messageFileName,
-                          String[] expected)
+                          String... expected)
         throws Exception {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
index 30ccd44d5e..34d96d9d52 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck.MSG_ANNOTATION_ORDER;
 import static com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck.MSG_MODIFIER_ORDER;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -33,6 +34,14 @@
 
 public class ModifierOrderCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ModifierOrderCheck checkObj = new ModifierOrderCheck();
+        int[] expected = new int[] {TokenTypes.MODIFIERS};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIt() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
index dd3516a7c9..b78f6bcfa8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.fail;
 
 import java.io.File;
@@ -34,6 +35,14 @@
 
 public class ConstantNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ConstantNameCheck checkObj = new ConstantNameCheck();
+        int[] expected = new int[] {TokenTypes.VARIABLE_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIllegalRegexp()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
index b1aa92ab5a..d0df4fb9c3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
@@ -20,7 +20,9 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -30,6 +32,14 @@
 
 public class LocalFinalVariableNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        LocalFinalVariableNameCheck checkObj =
+            new LocalFinalVariableNameCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault()
         throws Exception {
@@ -77,6 +87,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.PARAMETER_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
index 3c1e0565af..90dc57d0b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -32,6 +33,14 @@
 
 public class MemberNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        MemberNameCheck checkObj = new MemberNameCheck();
+        int[] expected = new int[] {TokenTypes.VARIABLE_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testSpecified()
         throws Exception {
@@ -248,6 +257,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
index 148a382fb4..a386213da1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
 import static com.puppycrawl.tools.checkstyle.checks.naming.MethodNameCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -31,6 +32,14 @@
 
 public class MethodNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        MethodNameCheck checkObj = new MethodNameCheck();
+        int[] expected = new int[] {TokenTypes.METHOD_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault()
         throws Exception {
@@ -146,6 +155,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.METHOD_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
index ffcd22a0cc..3960618bf4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -30,6 +31,14 @@
 
 public class PackageNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        PackageNameCheck checkObj = new PackageNameCheck();
+        int[] expected = new int[] {TokenTypes.PACKAGE_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testSpecified()
         throws Exception {
@@ -63,6 +72,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.PACKAGE_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
index 00a6f036ec..5d32b9a336 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -30,6 +31,14 @@
 
 public class ParameterNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ParameterNameCheck checkObj = new ParameterNameCheck();
+        int[] expected = new int[] {TokenTypes.PARAMETER_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testCatch()
         throws Exception {
@@ -76,6 +85,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.PARAMETER_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
index ceaa88bb7e..0db512eb3a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -32,6 +33,14 @@
 
 public class StaticVariableNameCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        StaticVariableNameCheck checkObj = new StaticVariableNameCheck();
+        int[] excpected = new int[] {TokenTypes.VARIABLE_DEF};
+        assertArrayEquals(excpected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testSpecified()
         throws Exception {
@@ -80,6 +89,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java
index 076ba23f95..4528d65fd9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -32,6 +33,31 @@
 
 public class TypeParameterNameTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetInterfaceRequiredTokens() {
+        InterfaceTypeParameterNameCheck checkObj =
+            new InterfaceTypeParameterNameCheck();
+        int[] expected = new int[] {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetMethodRequiredTokens() {
+        MethodTypeParameterNameCheck checkObj =
+            new MethodTypeParameterNameCheck();
+        int[] expected = new int[] {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetClassRequiredTokens() {
+        ClassTypeParameterNameCheck checkObj =
+            new ClassTypeParameterNameCheck();
+        int[] expected = new int[] {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testClassDefault()
         throws Exception {
@@ -141,6 +167,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.TYPE_PARAMETER,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
index b7c32d4d37..dd9822a83f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
@@ -22,13 +22,22 @@
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_DUPLICATE_REGEXP;
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_ILLEGAL_REGEXP;
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_REQUIRED_REGEXP;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 
 public class RegexpCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        RegexpCheck checkObj = new RegexpCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testRequiredPass() throws Exception {
         final String required = "Test case file";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
index db2190be88..f19172ae79 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
@@ -21,7 +21,9 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.REGEXP_EXCEEDED;
 import static com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.REGEXP_MINIMUM;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -36,6 +38,12 @@ public void setUp() {
         checkConfig = createCheckConfig(RegexpSinglelineJavaCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        RegexpSinglelineJavaCheck checkObj = new RegexpSinglelineJavaCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIt() throws Exception {
         final String illegal = "System\\.(out)|(err)\\.print(ln)?\\(";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
index 95b7e4852c..0b712b46f7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
@@ -33,6 +33,14 @@
  * @author Lars Kühne
  */
 public class AnonInnerLengthCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        AnonInnerLengthCheck checkObj = new AnonInnerLengthCheck();
+        int[] expected = new int[] {TokenTypes.LITERAL_NEW};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         AnonInnerLengthCheck anonInnerLengthCheckObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
index b3a1f1aa99..9086bb7d94 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
@@ -20,13 +20,28 @@
 package com.puppycrawl.tools.checkstyle.checks.sizes;
 
 import static com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 
 public class LineLengthCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        LineLengthCheck checkObj = new LineLengthCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        LineLengthCheck checkObj = new LineLengthCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
+    }
+
     @Test
     public void testSimple()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
index aa9efed71e..b6813477e1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
@@ -33,6 +33,14 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class MethodCountCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        MethodCountCheck checkObj = new MethodCountCheck();
+        int[] expected = new int[] {TokenTypes.METHOD_DEF};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         MethodCountCheck methodCountCheckObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
index f0ecbdbe19..32ff0f6435 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
@@ -22,6 +22,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck.MSG_KEY;
 import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -29,6 +30,13 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class MethodLengthCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        MethodLengthCheck checkObj = new MethodLengthCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         MethodLengthCheck methodLengthCheckObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
index 8309de9d72..43702a596d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
@@ -29,6 +29,19 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class OuterTypeNumberCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        OuterTypeNumberCheck checkObj = new OuterTypeNumberCheck();
+        int[] expected = new int[] {
+            TokenTypes.CLASS_DEF,
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         OuterTypeNumberCheck outerTypeNumberObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
index bcc59e6110..0f9dccd152 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
@@ -22,6 +22,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck.MSG_KEY;
 import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -30,6 +31,13 @@
 
 public class ParameterNumberCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetRequiredTokens() {
+        ParameterNumberCheck checkObj = new ParameterNumberCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         ParameterNumberCheck paramNumberCheckObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
index 7fd5bf9527..bf7c34acd5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_NOT_PRECEDED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_PRECEDED;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Before;
@@ -39,6 +40,13 @@ public void setUp() {
         checkConfig = createCheckConfig(EmptyForInitializerPadCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        EmptyForInitializerPadCheck checkObj = new EmptyForInitializerPadCheck();
+        int[] expected = new int[] {TokenTypes.FOR_INIT};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
@@ -64,6 +72,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.FOR_INIT,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
index 7c730b28a8..d6dec4bd9a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck.WS_FOLLOWED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck.WS_NOT_FOLLOWED;
+import static org.junit.Assert.assertArrayEquals;
 
 import org.junit.Assert;
 import org.junit.Before;
@@ -39,6 +40,13 @@ public void setUp() {
         checkConfig = createCheckConfig(EmptyForIteratorPadCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        EmptyForIteratorPadCheck checkObj = new EmptyForIteratorPadCheck();
+        int[] expected = new int[] {TokenTypes.FOR_ITERATOR};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
@@ -66,6 +74,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.FOR_ITERATOR,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
index d584db1dee..fe48974e8b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
@@ -21,7 +21,9 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.MSG_MULTIPLE_LINES;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.MSG_SHOULD_BE_SEPARATED;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -32,6 +34,12 @@
 public class EmptyLineSeparatorCheckTest
     extends BaseCheckTestSupport {
 
+    @Test
+    public void testGetRequiredTokens() {
+        EmptyLineSeparatorCheck checkObj = new EmptyLineSeparatorCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         DefaultConfiguration checkConfig = createCheckConfig(EmptyLineSeparatorCheck.class);
@@ -132,7 +140,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
index e85cf5204d..2fa56a66f0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
@@ -23,6 +23,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.WS_ILLEGAL_FOLLOW;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.WS_NOT_PRECEDED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.WS_PRECEDED;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 import java.util.Map;
@@ -53,6 +54,16 @@ public void setUp() {
         //for (final Entry<Class<?>, Integer> entry : entrySet())
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        GenericWhitespaceCheck checkObj = new GenericWhitespaceCheck();
+        int[] expected = new int[] {
+            TokenTypes.GENERIC_START,
+            TokenTypes.GENERIC_END,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
@@ -130,7 +141,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.GENERIC_END,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 
     @Test(expected = IllegalArgumentException.class)
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
index eee782d4ab..370da89b05 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
@@ -22,7 +22,9 @@
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck.LINE_PREVIOUS;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck.WS_NOT_PRECEDED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck.WS_PRECEDED;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -40,6 +42,12 @@ public void setUp() {
         checkConfig = createCheckConfig(MethodParamPadCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        MethodParamPadCheck checkObj = new MethodParamPadCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
@@ -129,6 +137,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.SUPER_CTOR_CALL,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
index 0bb217bee4..85dcfe1d77 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
@@ -21,7 +21,9 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck.WS_NOT_FOLLOWED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck.WS_TYPECAST;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -37,6 +39,12 @@ public void setUp() {
         checkConfig = createCheckConfig(WhitespaceAfterCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        WhitespaceAfterCheck checkObj = new WhitespaceAfterCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java
index 03df662abc..5e581c7948 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java
@@ -21,7 +21,9 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck.WS_NOT_FOLLOWED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck.WS_NOT_PRECEDED;
+import static org.junit.Assert.assertArrayEquals;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -39,6 +41,12 @@ public void setUp() {
         checkConfig = createCheckConfig(WhitespaceAroundCheck.class);
     }
 
+    @Test
+    public void testGetRequiredTokens() {
+        WhitespaceAroundCheck checkObj = new WhitespaceAroundCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
     @Test
     public void testIt()
         throws Exception {
@@ -274,6 +282,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.WILDCARD_TYPE,
         };
         Assert.assertNotNull(actual);
-        Assert.assertArrayEquals(expected, actual);
+        assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
index cea443a9d1..64765a43d3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
@@ -34,7 +34,7 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AllBlockCommentsTest extends BaseCheckTestSupport {
-    protected static final Set<String> allComments = Sets.newLinkedHashSet();
+    protected static final Set<String> ALL_COMMENTS = Sets.newLinkedHashSet();
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
@@ -44,7 +44,7 @@ public void testAllBlockComments() throws Exception {
         final String[] expected = {};
         verify(checkConfig, getPath("comments" + File.separator
                 + "InputFullOfBlockComments.java"), expected);
-        Assert.assertTrue(allComments.isEmpty());
+        Assert.assertTrue(ALL_COMMENTS.isEmpty());
     }
 
     public static class BlockCommentListenerCheck extends Check {
@@ -55,7 +55,7 @@ public boolean isCommentNodesRequired() {
 
         @Override
         public int[] getDefaultTokens() {
-            return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
+            return getAcceptableTokens();
         }
 
         @Override
@@ -63,9 +63,14 @@ public boolean isCommentNodesRequired() {
             return new int[] {TokenTypes.BLOCK_COMMENT_BEGIN};
         }
 
+        @Override
+        public int[] getRequiredTokens() {
+            return getAcceptableTokens();
+        }
+
         @Override
         public void init() {
-            allComments.addAll(Arrays.asList("0", "1", "2", "3", "4", "5",
+            ALL_COMMENTS.addAll(Arrays.asList("0", "1", "2", "3", "4", "5",
                     "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
                     "16", "17", "18", "19", "20",
                     LINE_SEPARATOR + "21" + LINE_SEPARATOR,
@@ -79,7 +84,7 @@ public void init() {
         @Override
         public void visitToken(DetailAST aAST) {
             String commentContent = aAST.getFirstChild().getText();
-            if (!allComments.remove(commentContent)) {
+            if (!ALL_COMMENTS.remove(commentContent)) {
                 Assert.fail("Unexpected comment: " + commentContent);
             }
         }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
index e9b6023a73..6b53989a2f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
@@ -33,7 +33,7 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AllSinglelineCommentsTest extends BaseCheckTestSupport {
-    protected static final Set<String> allComments = Sets.newLinkedHashSet();
+    protected static final Set<String> ALL_COMMENTS = Sets.newLinkedHashSet();
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
@@ -43,7 +43,7 @@ public void testAllBlockComments() throws Exception {
         final String[] expected = {};
         verify(checkConfig, getPath("comments" + File.separator
                 + "InputFullOfSinglelineComments.java"), expected);
-        Assert.assertTrue(allComments.isEmpty());
+        Assert.assertTrue(ALL_COMMENTS.isEmpty());
     }
 
     public static class SinglelineCommentListenerCheck extends Check {
@@ -54,7 +54,7 @@ public boolean isCommentNodesRequired() {
 
         @Override
         public int[] getDefaultTokens() {
-            return new int[] {TokenTypes.SINGLE_LINE_COMMENT};
+            return getAcceptableTokens();
         }
 
         @Override
@@ -62,19 +62,24 @@ public boolean isCommentNodesRequired() {
             return new int[] {TokenTypes.SINGLE_LINE_COMMENT};
         }
 
+        @Override
+        public int[] getRequiredTokens() {
+            return getAcceptableTokens();
+        }
+
         @Override
         public void init() {
             int lines = 63;
             for (int i = 0; i < lines; i++) {
-                allComments.add(i + LINE_SEPARATOR);
+                ALL_COMMENTS.add(i + LINE_SEPARATOR);
             }
-            allComments.add(String.valueOf(lines));
+            ALL_COMMENTS.add(String.valueOf(lines));
         }
 
         @Override
         public void visitToken(DetailAST aAST) {
             String commentContent = aAST.getFirstChild().getText();
-            if (!allComments.remove(commentContent)) {
+            if (!ALL_COMMENTS.remove(commentContent)) {
                 Assert.fail("Unexpected comment: " + commentContent);
             }
         }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
index 30345e8ebf..0aca3a34b2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
@@ -1,5 +1,6 @@
 package com.puppycrawl.tools.checkstyle.comments;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
 
 import com.puppycrawl.tools.checkstyle.api.Check;
@@ -15,7 +16,17 @@ public boolean isCommentNodesRequired() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{};
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
+    }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/CSVFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/CSVFilterTest.java
index 42d68a27b4..ce47caf603 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/CSVFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/CSVFilterTest.java
@@ -31,49 +31,49 @@
     @Test
     public void testDecideSingle() {
         final IntFilter filter = new CSVFilter("0");
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("equal", filter.accept(Integer.valueOf(0)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(1)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("equal", filter.accept(0));
+        assertFalse("greater than", filter.accept(1));
     }
 
     @Test
     public void testDecidePair() {
         final IntFilter filter = new CSVFilter("0, 2");
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("equal 0", filter.accept(Integer.valueOf(0)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(1)));
-        assertTrue("equal 2", filter.accept(Integer.valueOf(2)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("equal 0", filter.accept(0));
+        assertFalse("greater than", filter.accept(1));
+        assertTrue("equal 2", filter.accept(2));
     }
 
     @Test
     public void testDecideRange() {
         final IntFilter filter = new CSVFilter("0-2");
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("equal 0", filter.accept(Integer.valueOf(0)));
-        assertTrue("equal 1", filter.accept(Integer.valueOf(1)));
-        assertTrue("equal 2", filter.accept(Integer.valueOf(2)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(3)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("equal 0", filter.accept(0));
+        assertTrue("equal 1", filter.accept(1));
+        assertTrue("equal 2", filter.accept(2));
+        assertFalse("greater than", filter.accept(3));
     }
 
     @Test
     public void testDecideEmptyRange() {
         final IntFilter filter = new CSVFilter("2-0");
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertFalse("equal 0", filter.accept(Integer.valueOf(0)));
-        assertFalse("equal 1", filter.accept(Integer.valueOf(1)));
-        assertFalse("equal 2", filter.accept(Integer.valueOf(2)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(3)));
+        assertFalse("less than", filter.accept(-1));
+        assertFalse("equal 0", filter.accept(0));
+        assertFalse("equal 1", filter.accept(1));
+        assertFalse("equal 2", filter.accept(2));
+        assertFalse("greater than", filter.accept(3));
     }
 
     @Test
     public void testDecideRangePlusValue() {
         final IntFilter filter = new CSVFilter("0-2, 10");
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("equal 0", filter.accept(Integer.valueOf(0)));
-        assertTrue("equal 1", filter.accept(Integer.valueOf(1)));
-        assertTrue("equal 2", filter.accept(Integer.valueOf(2)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(3)));
-        assertTrue("equal 10", filter.accept(Integer.valueOf(10)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("equal 0", filter.accept(0));
+        assertTrue("equal 1", filter.accept(1));
+        assertTrue("equal 2", filter.accept(2));
+        assertFalse("greater than", filter.accept(3));
+        assertTrue("equal 10", filter.accept(10));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilterTest.java
index ad196367a1..1ae157aad3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilterTest.java
@@ -30,9 +30,9 @@
     @Test
     public void testDecide() {
         final IntFilter filter = new IntMatchFilter(0);
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("equal", filter.accept(Integer.valueOf(0)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(1)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("equal", filter.accept(0));
+        assertFalse("greater than", filter.accept(1));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilterTest.java
index 100c227e24..e03074742d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilterTest.java
@@ -32,29 +32,29 @@
     @Test
     public void testDecide() {
         final IntFilter filter = new IntRangeFilter(0, 10);
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("in range", filter.accept(Integer.valueOf(0)));
-        assertTrue("in range", filter.accept(Integer.valueOf(5)));
-        assertTrue("in range", filter.accept(Integer.valueOf(10)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(11)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("in range", filter.accept(0));
+        assertTrue("in range", filter.accept(5));
+        assertTrue("in range", filter.accept(10));
+        assertFalse("greater than", filter.accept(11));
     }
 
     @Test
     public void testDecideSingle() {
         final IntFilter filter = new IntRangeFilter(0, 0);
-        assertFalse("less than", filter.accept(Integer.valueOf(-1)));
-        assertTrue("in range", filter.accept(Integer.valueOf(0)));
-        assertFalse("greater than", filter.accept(Integer.valueOf(1)));
+        assertFalse("less than", filter.accept(-1));
+        assertTrue("in range", filter.accept(0));
+        assertFalse("greater than", filter.accept(1));
     }
 
     @Test
     public void testDecideEmpty() {
         final IntFilter filter = new IntRangeFilter(10, 0);
-        assertFalse("out", filter.accept(Integer.valueOf(-1)));
-        assertFalse("out", filter.accept(Integer.valueOf(0)));
-        assertFalse("out", filter.accept(Integer.valueOf(5)));
-        assertFalse("out", filter.accept(Integer.valueOf(10)));
-        assertFalse("out", filter.accept(Integer.valueOf(11)));
+        assertFalse("out", filter.accept(-1));
+        assertFalse("out", filter.accept(0));
+        assertFalse("out", filter.accept(5));
+        assertFalse("out", filter.accept(10));
+        assertFalse("out", filter.accept(11));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
index 0fcd68157d..32bf1e203c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
@@ -78,7 +78,7 @@ public static DefaultConfiguration createFilterConfig(Class<?> classObj) {
     }
 
     protected void verifySuppressed(Configuration aFilterConfig,
-        String[] aSuppressed) throws Exception {
+        String... aSuppressed) throws Exception {
         verify(createChecker(aFilterConfig),
             getPath("filters/InputSuppressWarningsFilter.java"),
             removeSuppressed(sAllMessages, aSuppressed));
@@ -116,7 +116,7 @@ protected Checker createChecker(Configuration filterConfig)
         return checker;
     }
 
-    private static String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String... remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index 59436f2ad5..36519c6d4a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -196,7 +196,7 @@ public static DefaultConfiguration createFilterConfig(Class<?> classObj) {
     }
 
     protected void verifySuppressed(Configuration filterConfig,
-                                    String[] suppressed)
+                                    String... suppressed)
         throws Exception {
         verify(createChecker(filterConfig),
                getPath("filters/InputSuppressWithNearbyCommentFilter.java"),
@@ -227,7 +227,7 @@ protected Checker createChecker(Configuration filterConfig)
         return checker;
     }
 
-    private static String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String... remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index f5046357d8..af472756cb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -196,7 +196,7 @@ public static DefaultConfiguration createFilterConfig(Class<?> aClass) {
     }
 
     protected void verifySuppressed(Configuration aFilterConfig,
-                                    String[] aSuppressed)
+                                    String... aSuppressed)
         throws Exception {
         verify(createChecker(aFilterConfig),
                getPath("filters/InputSuppressionCommentFilter.java"),
@@ -227,7 +227,7 @@ protected Checker createChecker(Configuration aFilterConfig)
         return checker;
     }
 
-    private static String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String... remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/InputRightCurlySameForOneLiners.java b/src/test/resources/com/puppycrawl/tools/checkstyle/InputRightCurlySameForOneLiners.java
new file mode 100755
index 0000000000..ed58a098b5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/InputRightCurlySameForOneLiners.java
@@ -0,0 +1,18 @@
+////////////////////////////////////////////////////////////////////////////////
+// Test case file for checkstyle.
+// Created: 2015
+////////////////////////////////////////////////////////////////////////////////
+package com.puppycrawl.tools.checkstyle;
+
+/**
+ * Test case for RightCurly with option SAME to omit oneliners
+ * @see https://github.com/checkstyle/checkstyle/issues/1416
+ * @author <a href="mailto:piotr.listkiewicz@gmail.com">liscju</a>
+ */
+public class InputRightCurlySameForOneLiners {
+    public static void main(String[] args) {
+        boolean after = false;
+        try {
+        } finally { after = true; }
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/comments/InputCommentsIndentationCheckSurroundingCode.java b/src/test/resources/com/puppycrawl/tools/checkstyle/comments/InputCommentsIndentationCheckSurroundingCode.java
index 79d3e42869..b319aacc70 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/comments/InputCommentsIndentationCheckSurroundingCode.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/comments/InputCommentsIndentationCheckSurroundingCode.java
@@ -126,4 +126,17 @@ private void foo4() {
      * some javadoc
      */
     private static void l() {}
+    
+    private void foo32() {
+        if (true) {
+            switch(1) {
+            case 0:
+                
+            case 1:
+                    // initialize b
+                int b = 10;
+            }
+            
+        }
+    }
 } // The Check should not throw NPE here!
diff --git a/src/xdocs/config_design.xml b/src/xdocs/config_design.xml
index 980e492fe2..3f5fbf27cf 100755
--- a/src/xdocs/config_design.xml
+++ b/src/xdocs/config_design.xml
@@ -459,13 +459,32 @@ public class StringUtils // not final to allow subclassing
     <section name="DesignForExtension">
       <subsection name="Description">
         <p>
-          Checks that classes are designed for extension.  More specifically,
-          it enforces a programming style where superclasses provide empty
-          "hooks" that can be implemented by subclasses.
+          The Check finds classes that are designed for extension (subclass creation).
+        </p>
+        <p>
+          Problem is described at "Effective Java, 2nd Edition by Josh Bloch" book, chapter "Item 17: Design and document for inheritance or else prohibit it".
         </p>
-
         <p>
-          The exact rule is that nonprivate, nonstatic methods of classes that
+          Some quotes from book:
+        </p>
+        <blockquote>The class must document its self-use of overridable methods.
+By convention, a method that invokes overridable methods contains a description
+of these invocations at the end of its documentation comment. The description
+begins with the phrase “This implementation.”
+        </blockquote>
+        <blockquote>The best solution to this problem is to prohibit subclassing in classes that
+are not designed and documented to be safely subclassed.
+        </blockquote>
+        <blockquote>If a concrete class does not implement a standard interface, then you may
+inconvenience some programmers by prohibiting inheritance. If you feel that you
+must allow inheritance from such a class, one reasonable approach is to ensure
+that the class never invokes any of its overridable methods and to document this
+fact. In other words, eliminate the class’s self-use of overridable methods entirely.
+In doing so, you’ll create a class that is reasonably safe to subclass. Overriding a
+method will never affect the behavior of any other method.
+        </blockquote>
+        <p>
+          The exact rule is that non-private, non-static methods of classes that
           can be subclassed must
         </p>
 
@@ -483,6 +502,60 @@ public class StringUtils // not final to allow subclassing
           subclasses cannot corrupt the state of the superclass by forgetting
           to call the superclass's method.
         </p>
+        <p>
+          More specifically,
+          it enforces a programming style where superclasses provide empty
+          "hooks" that can be implemented by subclasses.
+        </p>
+        <p>
+          Example of code that cause violation as it is designed for extension:
+        </p>
+        <source>
+public abstract class Plant {
+    private String roots;
+    private String trunk;
+
+    protected void validate() {
+      if (roots == null) throw new IllegalArgumentException("No roots!");
+      if (trunk == null) throw new IllegalArgumentException("No trunk!");
+    }
+
+    public abstract void grow();
+}
+
+public class Tree extends Plant {
+    private List leaves;
+
+    @Overrides
+    protected void validate() {
+      super.validate();
+      if (leaves == null) throw new IllegalArgumentException("No leaves!");
+    }
+
+    public void grow() {
+      validate();
+    }
+}
+        </source>
+        <p>
+          Example of code without violation:
+        </p>
+        <source>
+public abstract class Plant {
+    private String roots;
+    private String trunk;
+
+    private void validate() {
+        if (roots == null) throw new IllegalArgumentException("No roots!");
+        if (trunk == null) throw new IllegalArgumentException("No trunk!");
+        validateEx();
+    }
+
+    protected void validateEx() { }
+
+    public abstract void grow();
+}
+        </source>
       </subsection>
 
       <subsection name="Properties">
diff --git a/src/xdocs/eclipse.xml b/src/xdocs/eclipse.xml
index 8edfedfc83..6fcfffb2fa 100755
--- a/src/xdocs/eclipse.xml
+++ b/src/xdocs/eclipse.xml
@@ -33,6 +33,25 @@
       </p>
     </section>
 
+    <section name="Suppress Eclipse warnings on resource files">
+      <p>
+        Right click on Checkstyle project > Build Path > Configure Build Path...<br/><br/>
+        <img alt="screenshot" src="images/gui_screenshot_eclipse_build_path.png"/>
+      </p>
+      <p>
+        Set "Ignore optional compile problems" to "Yes" for following folders:
+      </p>
+      <ul>
+        <li>src/it/resources</li>
+        <li>src/main/resources</li>
+        <li>src/test/resources</li>
+        <li>target/generated-sources/antlr</li>
+      </ul>
+      <p>
+        <img alt="screenshot" src="images/gui_screenshot_eclipse_ignore_warnings.png"/>
+      </p>
+    </section>
+
     <section name="Debug">
       <p>
         Open the Check's source file by double click on it in a source tree as is shown:<br/><br/>
