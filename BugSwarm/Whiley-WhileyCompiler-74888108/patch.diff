diff --git a/modules/wycs/src/wycs/transforms/VerificationCheck.java b/modules/wycs/src/wycs/transforms/VerificationCheck.java
index 21ca934bed..6f29734a60 100755
--- a/modules/wycs/src/wycs/transforms/VerificationCheck.java
+++ b/modules/wycs/src/wycs/transforms/VerificationCheck.java
@@ -498,7 +498,7 @@ public int convert(Automaton automaton, SemanticType type) {
 		// work during verification, and also allows the functions in
 		// SolverUtils to work properly.		
 		Rewriter rewriter = new BatchRewriter(Solver.SCHEMA, Solver.reductions);
-		RewriteProof proof = rewriter.apply(rewriter.initialise(automaton));
+		RewriteProof proof = rewriter.apply(rewriter.initialise(type_automaton));
 		if(proof.size() > 0) {
 			type_automaton = proof.last().automaton();
 		} 
@@ -860,30 +860,34 @@ private Code and(ArrayList<Code> axioms, Code c) {
  	
 	private static final EncapsulatedRewriter.Constructor reductionConstructor = new EncapsulatedRewriter.Constructor() {
 		@Override
-		public Rewriter construct(Automaton automaton) {
-			return new BatchRewriter(automaton, Solver.SCHEMA, Solver.reductions);
-			//return new SingleStepRewriter(automaton, Solver.SCHEMA, Solver.reductions);
+		public Rewriter construct() {
+			return new BatchRewriter(Solver.SCHEMA, Solver.reductions);
+			//return new SingleStepRewriter(Solver.SCHEMA, Solver.reductions);
 		}
 	};
  	
 	private Automaton infer(Automaton automaton) {
-		System.out.println("About to rewrite...");
-		Rewriter rewriter = new EncapsulatedRewriter(reductionConstructor, automaton, Solver.SCHEMA,
-				Activation.RANK_COMPARATOR, Solver.inferences);		
-		// Rewriter rewriter = new SingleStepRewriter(automaton, Solver.SCHEMA, append(Solver.reductions,Solver.inferences));
+		Rewriter rewriter = new EncapsulatedRewriter(reductionConstructor, Solver.SCHEMA,
+				Activation.RANK_COMPARATOR, Solver.inferences);
+//		Rewriter rewriter = new SingleStepRewriter(Solver.SCHEMA, append(Solver.reductions,Solver.inferences));
+		RewriteState initial = rewriter.initialise(automaton);		
 		// Add caching to the rewriter. This is essential to prevent oscillating
 		// between multiple equivalent or identical states.
-		//rewriter = new CachingRewriter(rewriter);
+		rewriter = new CachingRewriter(rewriter);
 		// Add throttling to the rewriter. This is essential to cap the maximum
 		// number of rewriter steps which will be taken.		
-		//rewriter = new ThrottledRewriter(rewriter,maxInferences);
+		rewriter = new ThrottledRewriter(rewriter,maxInferences);
 		// Finally, perform the rewrite!		
-		RewriteProof proof = rewriter.apply();
+		RewriteProof proof = rewriter.apply(initial);
 		System.out.println("Rewrite proof was " + proof.size() + " steps.");
 		if(proof.size() > 0) {
-			automaton = proof.last().automaton();
-		} 
-		return automaton;
+			return  proof.last().automaton();
+		} else {
+			// Cannot return automaton parameter here, in case it was reduced
+			// during the Rewriter.initialise() function. This can result in an
+			// empty proof, since no inference rules were applied.
+			return initial.automaton();
+		}
 	}
 	
 	private RewriteRule[] append(RewriteRule[] lhs, RewriteRule[] rhs) {
