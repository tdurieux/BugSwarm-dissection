diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
index e7faeea700..cfb353150e 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
@@ -968,6 +968,8 @@ public Resolution resolve(TypeDescription instrumentedType) {
                 FieldLocator.Resolution resolution = fieldLocatorFactory.make(instrumentedType).locate(fieldName);
                 if (!resolution.isResolved()) {
                     throw new IllegalStateException("Could not locate field '" + fieldName + "' for " + instrumentedType);
+                } else if (!resolution.getField().getType().asErasure().isVisibleTo(instrumentedType)) {
+                    throw new IllegalStateException(resolution.getField() + " is not visible to " + instrumentedType);
                 }
                 return new Resolution(methodGraphCompiler.compile(resolution.getField().getType(), instrumentedType).listNodes().asMethodList().filter(matcher),
                         new StackManipulation.Compound(resolution.getField().isStatic()
@@ -982,10 +984,10 @@ public boolean equals(Object object) {
                 if (this == object) return true;
                 if (object == null || getClass() != object.getClass()) return false;
                 ForField forField = (ForField) object;
-                if (!matcher.equals(forField.matcher)) return false;
-                if (!fieldName.equals(forField.fieldName)) return false;
-                if (!fieldLocatorFactory.equals(forField.fieldLocatorFactory)) return false;
-                return methodGraphCompiler.equals(forField.methodGraphCompiler);
+                return matcher.equals(forField.matcher)
+                        && fieldName.equals(forField.fieldName)
+                        && fieldLocatorFactory.equals(forField.fieldLocatorFactory)
+                        && methodGraphCompiler.equals(forField.methodGraphCompiler);
             }
 
             @Override
@@ -1092,6 +1094,9 @@ public ImplementationDelegate filter(ElementMatcher<? super MethodDescription> m
 
             @Override
             public Resolution resolve(TypeDescription instrumentedType) {
+                if (!fieldType.asErasure().isVisibleTo(instrumentedType)) {
+                    throw new IllegalStateException(fieldType + " is not visible to " + instrumentedType);
+                }
                 return new Resolution(methodGraphCompiler.compile(fieldType, instrumentedType).listNodes().asMethodList().filter(matcher),
                         FieldAccess.forField(instrumentedType.getDeclaredFields().filter(named(fieldName).and(genericFieldType(fieldType))).getOnly()).getter(),
                         new MethodDelegationBinder.MethodInvoker.Virtual(fieldType.asErasure()));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOtherTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOtherTest.java
index 4f408f6c0e..9a8ef811c3 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOtherTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOtherTest.java
@@ -2,6 +2,7 @@
 
 import net.bytebuddy.ByteBuddy;
 import net.bytebuddy.description.modifier.Ownership;
+import net.bytebuddy.dynamic.scaffold.TypeValidation;
 import net.bytebuddy.test.utility.ObjectPropertyAssertion;
 import org.junit.Test;
 
@@ -22,6 +23,17 @@ public void testDelegationToInvisibleInstanceThrowsException() throws Exception
                 .make();
     }
 
+    @Test(expected = IllegalStateException.class)
+    public void testDelegationToInvisibleFieldTypeThrowsException() throws Exception {
+        new ByteBuddy()
+                .with(TypeValidation.DISABLED)
+                .subclass(Object.class)
+                .defineField("foo", Foo.class)
+                .method(isToString())
+                .intercept(MethodDelegation.toField("foo"))
+                .make();
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void testDelegationWithIllegalType() throws Exception {
         MethodDelegation.to(new Object(), String.class);
