diff --git a/abjad/__init__.py b/abjad/__init__.py
index cdee3c23b7..442f0bc576 100755
--- a/abjad/__init__.py
+++ b/abjad/__init__.py
@@ -76,6 +76,7 @@
 from abjad._version import __version_info__, __version__
 del _version
 
+from abjad import cli
 from abjad import demos
 from abjad import ly
 
diff --git a/abjad/cli/__init__.py b/abjad/cli/__init__.py
index 5b40f11645..3faa40e469 100755
--- a/abjad/cli/__init__.py
+++ b/abjad/cli/__init__.py
@@ -2,7 +2,6 @@
 from .AbjDevScript import AbjDevScript
 from .CheckClassSections import CheckClassSections
 from .CleanScript import CleanScript
-from .DoctestScript import DoctestScript
 from .ScorePackageScript import ScorePackageScript
 from .ManageBuildTargetScript import ManageBuildTargetScript
 from .ManageMaterialScript import ManageMaterialScript
diff --git a/abjad/cli/test/test_cli_AbjDevScript___init__.py b/abjad/cli/test/test_cli_AbjDevScript___init__.py
new file mode 100755
index 0000000000..8fa76a528f
--- /dev/null
+++ b/abjad/cli/test/test_cli_AbjDevScript___init__.py
@@ -0,0 +1,6 @@
+import abjad
+
+
+def test_cli_AbjDevScript___init___01():
+
+    script = abjad.cli.AbjDevScript()
diff --git a/abjad/cli/test/test_cli_CheckClassSections.py b/abjad/cli/test/test_cli_CheckClassSections.py
new file mode 100755
index 0000000000..603d4e3e1c
--- /dev/null
+++ b/abjad/cli/test/test_cli_CheckClassSections.py
@@ -0,0 +1,451 @@
+import abjad
+import argparse
+import doctest
+import re
+import shutil
+import unittest
+import pathlib
+from io import StringIO
+
+
+class TestCheckClassSections(unittest.TestCase):
+
+    ansi_escape = re.compile(r'\x1b[^m]*m')
+    test_path = pathlib.Path(__file__).parent
+    temp_test_dir_name = 'temp_test_dir'
+    subdirectory = test_path.joinpath(temp_test_dir_name)
+
+    # Specific test case file contents
+    test_bad_header_order_module_path = subdirectory.joinpath(
+        'BadHeaderOrder.py'
+        )
+    test_property_in_methods_module_path = subdirectory.joinpath(
+        'PropInMethods.py'
+        )
+    test_method_in_properties_module_path = subdirectory.joinpath(
+        'MethodInProps.py'
+        )
+    test_multiple_errors_in_file_module_path = subdirectory.joinpath(
+        'MultipleErrors.py'
+        )
+    test_multiple_classes_in_one_module_path = subdirectory.joinpath(
+        'MultipleClasses.py'
+        )
+    test_passing_module_path = subdirectory.joinpath(
+        'GoodClass.py'
+        )
+    test_non_property_decorators_module_path = subdirectory.joinpath(
+        'NonPropertyDecorators.py'
+        )
+    test_bad_header_order_module_contents = abjad.String.normalize(r'''
+    class BadHeaders:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        ### PUBLIC PROPERTIES ###
+        ### PRIVATE PROPERTIES ###
+        # ^ Properties are out of order
+    ''')
+    test_property_in_methods_module_contents = abjad.String.normalize(r'''
+    class PropertyInMethods:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        @property
+        def i_dont_belong_here(self):
+            pass
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+    ''')
+    test_method_in_properties_module_contents = abjad.String.normalize(r'''
+    class MethodInProperties:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+        def i_dont_belong_here(self):
+            pass
+    ''')
+    test_multiple_errors_in_file_module_contents = abjad.String.normalize(r'''
+    class MultipleErrors:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        @property
+        def doesnt_belong_here(self):
+            pass
+        @property
+        def also_doesnt_belong_here(self):
+            pass
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+        def i_dont_belong_here(self):
+            pass
+    ''')
+    test_multiple_classes_in_one_module_contents = abjad.String.normalize(r'''
+    class GoodClassOne:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+        pass
+    class GoodClassTwo:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+        pass
+    ''')
+    test_non_property_decorators_module_contents = abjad.String.normalize(r'''
+    class NonPropertyDecoratorsInMethods:
+        ### CLASS VARIABLES ###
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        ### SPECIAL METHODS ###
+        ### PRIVATE METHODS ###
+        ### PUBLIC METHODS ###
+        @staticmethod
+        def i_belong_here(self):
+            pass
+        @classmethod
+        def me_too(self):
+            pass
+        @abc.abstractmethod
+        def me_three(self):
+            pass
+        @lex.TOKEN()
+        def me_four(self):
+            pass
+        ### PRIVATE PROPERTIES ###
+        ### PUBLIC PROPERTIES ###
+    ''')
+    test_passing_module_contents = abjad.String.normalize(r'''
+    class PassingClass:
+        ### CLASS VARIABLES ###
+        x = 5
+        ### CONSTRUCTOR ###
+        ### INITIALIZER ###
+        def __init__(self):
+            pass
+        ### SPECIAL METHODS ###
+        def __str__(self):
+            print("Hello, testing!")
+        ### PRIVATE METHODS ###
+        def _some_private_method(self):
+            pass
+        ### PUBLIC METHODS ###
+        def some_public_method(self):
+            pass
+        ### PRIVATE PROPERTIES ###
+        @property
+        def _i_belong_here(self):
+            pass
+        @_i_belong_here.setter
+        def _i_belong_here(self, value):
+            pass
+        ### PUBLIC PROPERTIES ###
+        @property
+        def i_belong_here(self):
+            pass
+        @i_belong_here.setter
+        def i_belong_here(self, value):
+            pass
+    ''')
+
+    ### TEST HELPER METHODS ###
+
+    def compare_strings(self, expected, actual):
+        example = argparse.Namespace()
+        example.want = expected
+        output_checker = doctest.OutputChecker()
+        flags = (
+            doctest.NORMALIZE_WHITESPACE |
+            doctest.ELLIPSIS |
+            doctest.REPORT_NDIFF
+            )
+        success = output_checker.check_output(expected, actual, flags)
+        if not success:
+            diff = output_checker.output_difference(example, actual, flags)
+            raise Exception(diff)
+
+    def tearDown(self):
+        shutil.rmtree(str(self.subdirectory))
+        self.string_io.close()
+
+    def run_script_on_modules(
+        self,
+        modules,
+        script_args=None,
+        working_directory=None
+        ):
+        r'''Return the output and exit code of CheckClassSections
+        when run against `modules`.
+
+        `modules` should be a list of 2-tuples of strings in the form of
+        (file_name, file_contents).
+
+        `script_args` is an optional list of arguments to be passed to
+        CheckClassSections.
+
+        `working_directory` is an optional directory to run the script from.
+        if none is passed, `self.test_path` is used.
+
+        This method actually touches the file system, creating a temporary
+        directory at `self.temp_test_dir_name` and creating temporary
+        modules as specified in `modules`. `self.tearDown()` cleans up after
+        this method.
+
+        Returns a 2-tuple of (script_output, exit_code).
+        '''
+        # Handle arguments
+        if script_args:
+            if isinstance(script_args, list):
+                command = [s_arg for s_arg in map(str, script_args)]
+            else:
+                command = [str(script_args)]
+        else:
+            command = []
+        if working_directory:
+            test_working_directory = working_directory
+        else:
+            test_working_directory = self.test_path
+        # Create temporary testing modules
+        if not self.subdirectory.exists():
+            self.subdirectory.mkdir()
+        for case in modules:
+            with open(str(case[0]), 'w') as file_pointer:
+                file_pointer.write(case[1])
+        self.string_io = StringIO()
+        # cd into test_working_directory and run the script with commands
+        with abjad.TemporaryDirectoryChange(str(test_working_directory)):
+            with abjad.RedirectedStreams(stdout=self.string_io):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script = abjad.cli.CheckClassSections()
+                    script(command)
+        # Normalize script output for sane diffs
+        script_output = self.ansi_escape.sub('', self.string_io.getvalue())
+        script_output = abjad.String.normalize(script_output)
+        return (script_output, context_manager.exception.code)
+
+    ### TEST CASES ###
+
+    def test_bad_header_order(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+Errors in {}:
+Lines [8]: BAD HEADER ORDER
+===============================================================================
+1 total files checked.
+0 passed.
+1 failed.
+        '''.format(
+                self.temp_test_dir_name,
+                self.test_bad_header_order_module_path,
+             )
+        )
+        test_modules = [
+            (self.test_bad_header_order_module_path,
+             self.test_bad_header_order_module_contents),
+             ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 1)
+
+    def test_method_in_properties(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+Errors in {}:
+Lines [9]: METHOD IN PROPERTIES SECTION
+===============================================================================
+1 total files checked.
+0 passed.
+1 failed.
+        '''.format(
+                self.temp_test_dir_name,
+                self.test_method_in_properties_module_path,
+             )
+        )
+        test_modules = [
+            (self.test_method_in_properties_module_path,
+             self.test_method_in_properties_module_contents),
+            ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 1)
+
+    def test_property_in_methods(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+Errors in {}:
+Lines [7]: PROPERTY IN METHODS SECTION
+===============================================================================
+1 total files checked.
+0 passed.
+1 failed.
+        '''.format(
+                self.temp_test_dir_name,
+                self.test_property_in_methods_module_path,
+            )
+        )
+        test_modules = [
+            (self.test_property_in_methods_module_path,
+             self.test_property_in_methods_module_contents),
+             ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 1)
+
+    def test_multiple_errors_in_file(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+Errors in {}:
+Lines [15]: METHOD IN PROPERTIES SECTION
+Lines [7, 10]: PROPERTY IN METHODS SECTION
+===============================================================================
+1 total files checked.
+0 passed.
+1 failed.
+        '''.format(
+                self.temp_test_dir_name,
+                self.test_multiple_errors_in_file_module_path,
+            )
+        )
+        test_modules = [
+            (self.test_multiple_errors_in_file_module_path,
+             self.test_multiple_errors_in_file_module_contents),
+             ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 1)
+
+    def test_non_property_decorators_in_methods_passes(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+1 total files checked.
+1 passed.
+0 failed.
+        '''.format(
+                self.temp_test_dir_name,
+            )
+        )
+        test_modules = [
+            (self.test_non_property_decorators_module_path,
+             self.test_non_property_decorators_module_contents),
+             ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 0)
+
+    def test_multiple_classes_in_one_module(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+1 total files checked.
+1 passed.
+0 failed.
+        '''.format(self.temp_test_dir_name)
+        )
+        test_modules = [
+            (self.test_multiple_classes_in_one_module_path,
+             self.test_multiple_classes_in_one_module_contents)
+            ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 0)
+
+    def test_passing_case(self):
+        expected = abjad.String.normalize('''
+Recursively scanning {} for errors...
+1 total files checked.
+1 passed.
+0 failed.
+        '''.format(self.temp_test_dir_name)
+        )
+        test_modules = [
+            (self.test_passing_module_path,
+             self.test_passing_module_contents)
+            ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules, self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 0)
+
+    def test_passing_case_without_passing_path(self):
+        expected = abjad.String.normalize('''
+Recursively scanning current working directory for errors...
+1 total files checked.
+1 passed.
+0 failed.
+        '''.format(self.temp_test_dir_name)
+        )
+        test_modules = [
+            (self.test_passing_module_path,
+             self.test_passing_module_contents)
+            ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules,
+            working_directory=self.subdirectory
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 0)
+
+    def test_passing_file_instead_of_dir(self):
+        expected = abjad.String.normalize('''
+Scanning {} for errors...
+1 total files checked.
+1 passed.
+0 failed.
+        '''.format(self.test_passing_module_path)
+        )
+        test_modules = [
+            (self.test_passing_module_path,
+             self.test_passing_module_contents)
+            ]
+        # Run test
+        script_output, exit_code = self.run_script_on_modules(
+            test_modules,
+            script_args=self.test_passing_module_path
+            )
+        self.compare_strings(expected, script_output)
+        self.assertEqual(exit_code, 0)
diff --git a/abjad/cli/test/test_cli_CleanScript___init__.py b/abjad/cli/test/test_cli_CleanScript___init__.py
new file mode 100755
index 0000000000..5860b2159c
--- /dev/null
+++ b/abjad/cli/test/test_cli_CleanScript___init__.py
@@ -0,0 +1,6 @@
+import abjad
+
+
+def test_cli_CleanScript___init___01():
+
+    script = abjad.cli.CleanScript()
diff --git a/abjad/cli/test/test_cli_ManageBuildTargetScript_distribute.py b/abjad/cli/test/test_cli_ManageBuildTargetScript_distribute.py
new file mode 100755
index 0000000000..8d3be36ae0
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageBuildTargetScript_distribute.py
@@ -0,0 +1,58 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/distribution/.gitignore',
+        'test_score/test_score/distribution/letter-portrait/letter-portrait-parts-cello.pdf',
+        'test_score/test_score/distribution/letter-portrait/letter-portrait-parts-viola.pdf',
+        'test_score/test_score/distribution/letter-portrait/letter-portrait-parts-violin-i.pdf',
+        'test_score/test_score/distribution/letter-portrait/letter-portrait-parts-violin-ii.pdf',
+        'test_score/test_score/distribution/letter-portrait/letter-portrait-score.pdf',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success(self, open_file_mock):
+        self.create_score()
+        self.install_fancy_segment_maker()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--render', 'letter-portrait']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        command = ['--distribute', 'letter-portrait']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Distributing 'letter-portrait'
+            score.pdf --> letter-portrait-score.pdf
+            parts-cello.pdf --> letter-portrait-parts-cello.pdf
+            parts-viola.pdf --> letter-portrait-parts-viola.pdf
+            parts-violin-i.pdf --> letter-portrait-parts-violin-i.pdf
+            parts-violin-ii.pdf --> letter-portrait-parts-violin-ii.pdf
+        ''')
+        self.compare_path_contents(
+            self.distribution_path,
+            self.expected_files,
+            )
diff --git a/abjad/cli/test/test_cli_ManageBuildTargetScript_list.py b/abjad/cli/test/test_cli_ManageBuildTargetScript_list.py
new file mode 100755
index 0000000000..b15a1358da
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageBuildTargetScript_list.py
@@ -0,0 +1,40 @@
+import abjad
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    def test_list(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--new', 'big-version']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        command = ['--new', 'medium-version']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        command = ['--new', 'small-version']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Available build targets:
+            big-version
+            medium-version
+            small-version
+        ''')
diff --git a/abjad/cli/test/test_cli_ManageBuildTargetScript_new.py b/abjad/cli/test/test_cli_ManageBuildTargetScript_new.py
new file mode 100755
index 0000000000..011dc7a214
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageBuildTargetScript_new.py
@@ -0,0 +1,317 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/builds/.gitignore',
+        'test_score/test_score/builds/assets/.gitignore',
+        'test_score/test_score/builds/assets/instrumentation.tex',
+        'test_score/test_score/builds/assets/performance-notes.tex',
+        'test_score/test_score/builds/letter-portrait/back-cover.tex',
+        'test_score/test_score/builds/letter-portrait/front-cover.tex',
+        'test_score/test_score/builds/letter-portrait/music.ly',
+        'test_score/test_score/builds/letter-portrait/parts.ly',
+        'test_score/test_score/builds/letter-portrait/preface.tex',
+        'test_score/test_score/builds/letter-portrait/score.tex',
+        'test_score/test_score/builds/parts.ily',
+        'test_score/test_score/builds/segments.ily',
+        'test_score/test_score/builds/segments/.gitignore',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    def test_exists(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--new']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+            with abjad.RedirectedStreams(stdout=self.string_io):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+        Creating build target 'letter-portrait' (8.5in x 11.0in)
+            Path exists: test_score/builds/letter-portrait
+        '''.replace('/', os.path.sep))
+
+    def test_explicit(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--new',
+            '--paper-size', 'a3',
+            '--orientation', 'landscape',
+            ]
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Creating build target 'a3-landscape' (297mm x 420mm)
+            Reading test_score/metadata.json ... OK!
+            Created test_score/builds/a3-landscape
+        '''.replace('/', os.path.sep))
+        path = self.build_path.joinpath('a3-landscape', 'score.tex')
+        self.compare_lilypond_contents(path, r'''
+            \documentclass{article}
+            \usepackage[papersize={420mm, 297mm}]{geometry}
+            \usepackage{pdfpages}
+            \begin{document}
+
+            \includepdf[pages=-]{front-cover.pdf}
+            \includepdf[pages=-]{preface.pdf}
+            \includepdf[angle=-90,pages=-]{music.pdf}
+            \includepdf[pages=-]{back-cover.pdf}
+
+            \end{document}
+        ''')
+
+    def test_force_replace(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['-f', '--new']
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+            with abjad.RedirectedStreams(stdout=self.string_io):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Creating build target 'letter-portrait' (8.5in x 11.0in)
+            Reading test_score/metadata.json ... OK!
+            Created test_score/builds/letter-portrait
+        '''.replace('/', os.path.sep))
+
+    def test_implicit(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--new']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Creating build target 'letter-portrait' (8.5in x 11.0in)
+            Reading test_score/metadata.json ... OK!
+            Created test_score/builds/letter-portrait
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.build_path, self.expected_files)
+        path = self.build_path.joinpath('letter-portrait', 'music.ly')
+        self.compare_lilypond_contents(path, r'''
+            \language "english"
+
+            #(ly:set-option 'relative-includes #t)
+            \include "../../stylesheets/stylesheet.ily"
+
+            #(set-default-paper-size "letter" 'portrait)
+            #(set-global-staff-size 12)
+
+            \layout {
+            }
+
+            \paper {
+            }
+
+            \score {
+                \include "../segments.ily"
+            }
+        ''')
+        path = self.build_path.joinpath('letter-portrait', 'parts.ly')
+        self.compare_lilypond_contents(path, r'''
+            \language "english"
+
+            #(ly:set-option 'relative-includes #t)
+            \include "../../stylesheets/stylesheet.ily"
+            \include "../../stylesheets/parts.ily"
+
+            #(set-default-paper-size "letter" 'portrait)
+            #(set-global-staff-size 12)
+
+            \include "../parts.ily"
+        ''')
+        path = self.build_path.joinpath('letter-portrait', 'score.tex')
+        self.compare_lilypond_contents(path, r'''
+            \documentclass{article}
+            \usepackage[papersize={8.5in, 11.0in}]{geometry}
+            \usepackage{pdfpages}
+            \begin{document}
+
+            \includepdf[pages=-]{front-cover.pdf}
+            \includepdf[pages=-]{preface.pdf}
+            \includepdf[angle=0,pages=-]{music.pdf}
+            \includepdf[pages=-]{back-cover.pdf}
+
+            \end{document}
+        ''')
+        path = self.build_path.joinpath('letter-portrait', 'front-cover.tex')
+        self.compare_lilypond_contents(path, r"""
+        \documentclass[11pt]{report}
+        <BLANKLINE>
+        \usepackage[T1]{fontenc}
+        \usepackage[papersize={8.5in, 11.0in}]{geometry}
+        \usepackage{tikz}
+        \usepackage{xltxtra,fontspec,xunicode}
+        \usetikzlibrary{calc}
+        <BLANKLINE>
+        %\defaultfontfeatures{Scale=MatchLowercase}
+        %\setromanfont[Numbers=Uppercase]{Didot}
+        \newlength{\drop}
+        \parindent=0pt
+        <BLANKLINE>
+        \begin{document}
+            \begin{titlepage}
+        <BLANKLINE>
+                \begin{tikzpicture}[remember picture, overlay]
+                    \draw[line width = 1.6pt]
+                        ($(current page.north west) + (1in,-1in)$)
+                        rectangle
+                        ($(current page.south east) + (-1in,1in)$);
+                    \draw[line width = 0.4pt]
+                        ($(current page.north west) + (1in,-1in) + (2.8pt,-2.8pt)$)
+                        rectangle
+                        ($(current page.south east) + (-1in,1in) + (-2.8pt,2.8pt)$);
+                \end{tikzpicture}
+        <BLANKLINE>
+                \drop=0.1\textheight
+                \centering
+        <BLANKLINE>
+                \vspace*{2\baselineskip}
+        <BLANKLINE>
+                \rule{\textwidth}{1.6pt}\vspace*{-\baselineskip}\vspace*{2pt}
+                \rule{\textwidth}{0.4pt}\\[\baselineskip]
+                {
+                    \fontsize{6cm}{1em}\selectfont
+                    TEST SCORE
+                }
+                \rule{\textwidth}{0.4pt}\vspace*{-\baselineskip}\vspace{3.2pt}
+                \rule{\textwidth}{1.6pt}\\[\baselineskip]
+        <BLANKLINE>
+                \vspace*{2\baselineskip}
+        <BLANKLINE>
+                {
+                    \itshape
+                    Composed by
+                }
+                \\
+                {
+                    \Large
+                    JOSIAH WOLF OBERHOLTZER
+                    \par
+                }
+        <BLANKLINE>
+                \vspace*{2\baselineskip}
+        <BLANKLINE>
+                {
+                    \Large
+                    2016
+                }
+        <BLANKLINE>
+                \vfill
+        <BLANKLINE>
+            \end{titlepage}
+        \end{document}
+        """)
+        path = self.build_path.joinpath('letter-portrait', 'back-cover.tex')
+        self.compare_lilypond_contents(path, r'''
+        \documentclass[11pt]{report}
+
+        \usepackage[utf8]{inputenc}
+        \usepackage{eurosym}
+        \usepackage[papersize={8.5in, 11.0in}]{geometry}
+        \usepackage{tikz}
+        \usepackage{xltxtra,fontspec,xunicode}
+        \usetikzlibrary{calc}
+
+        %\defaultfontfeatures{Scale=MatchLowercase}
+        %\setromanfont[Numbers=Uppercase]{Didot}
+
+        \begin{document}
+            \begin{titlepage}
+
+                \begin{tikzpicture}[remember picture, overlay]
+                    \draw[line width = 1.6pt]
+                        ($(current page.north west) + (1in,-1in)$)
+                        rectangle
+                        ($(current page.south east) + (-1in,1in)$);
+                    \draw[line width = 0.4pt]
+                        ($(current page.north west) + (1in,-1in) + (2.8pt,-2.8pt)$)
+                        rectangle
+                        ($(current page.south east) + (-1in,1in) + (-2.8pt,2.8pt)$);
+                \end{tikzpicture}
+
+                \vfill
+
+                \begin{center}
+
+                \vspace{1em}
+                {
+                    \itshape
+                    Scores available from the composer at\\
+                }
+                {
+                    www.josiahwolfoberholtzer.com\\
+                }
+                \vspace{1em}
+                \euro 750 / \$1000
+
+                \end{center}
+
+            \end{titlepage}
+        \end{document}
+        ''')
+
+    def test_internal_path(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--new']
+        internal_path = self.score_path.joinpath('test_score', 'builds')
+        assert internal_path.exists()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(internal_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Creating build target 'letter-portrait' (8.5in x 11.0in)
+            Reading test_score/metadata.json ... OK!
+            Created test_score/builds/letter-portrait
+        '''.replace('/', os.path.sep))
+
+    def test_named(self):
+        self.create_score()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--new',
+            'World Premiere Version',
+            '--paper-size', 'a3',
+            '--orientation', 'landscape',
+            ]
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+        Creating build target 'world-premiere-version' (297mm x 420mm)
+            Reading test_score/metadata.json ... OK!
+            Created test_score/builds/world-premiere-version
+        '''.replace('/', os.path.sep))
diff --git a/abjad/cli/test/test_cli_ManageBuildTargetScript_render.py b/abjad/cli/test/test_cli_ManageBuildTargetScript_render.py
new file mode 100755
index 0000000000..9d18972cbb
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageBuildTargetScript_render.py
@@ -0,0 +1,218 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_all(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/.gitignore',
+            'test_score/test_score/builds/assets/.gitignore',
+            'test_score/test_score/builds/assets/instrumentation.tex',
+            'test_score/test_score/builds/assets/performance-notes.tex',
+            'test_score/test_score/builds/letter-portrait/back-cover.pdf',
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.pdf',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/music.pdf',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.pdf',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.pdf',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            'test_score/test_score/builds/parts.ily',
+            'test_score/test_score/builds/segments.ily',
+            'test_score/test_score/builds/segments/.gitignore',
+            'test_score/test_score/builds/segments/test-segment.ily',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+        self.create_score()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = ['--render', 'letter-portrait']
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(self.build_path, expected_files)
+        assert open_file_mock.called
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_back_cover(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/letter-portrait/back-cover.pdf',
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+        self.create_score()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        target_path = self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--render', 'letter-portrait',
+            '--back-cover',
+            ]
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(target_path, expected_files)
+        assert open_file_mock.called
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_front_cover(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.pdf',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+        self.create_score()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        target_path = self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--render', 'letter-portrait',
+            '--front-cover',
+            ]
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(target_path, expected_files)
+        assert open_file_mock.called
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_music(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/music.pdf',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+        self.create_score()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        target_path = self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--render', 'letter-portrait',
+            '--music',
+            ]
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(target_path, expected_files)
+        assert open_file_mock.called
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_parts(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/parts-cello.pdf',
+            'test_score/test_score/builds/letter-portrait/parts-viola.pdf',
+            'test_score/test_score/builds/letter-portrait/parts-violin-i.pdf',
+            'test_score/test_score/builds/letter-portrait/parts-violin-ii.pdf',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [
+                _.replace('/', os.path.sep) for _ in expected_files
+                ]
+        self.create_score()
+        self.install_fancy_segment_maker()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        target_path = self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--render', 'letter-portrait',
+            '--parts',
+            ]
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(target_path, expected_files)
+        assert open_file_mock.called
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_preface(self, open_file_mock):
+        expected_files = [
+            'test_score/test_score/builds/letter-portrait/back-cover.tex',
+            'test_score/test_score/builds/letter-portrait/front-cover.tex',
+            'test_score/test_score/builds/letter-portrait/music.ly',
+            'test_score/test_score/builds/letter-portrait/parts.ly',
+            'test_score/test_score/builds/letter-portrait/preface.pdf',
+            'test_score/test_score/builds/letter-portrait/preface.tex',
+            'test_score/test_score/builds/letter-portrait/score.tex',
+            ]
+        if platform.system().lower() == 'windows':
+            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+        self.create_score()
+        self.create_segment('test_segment')
+        self.illustrate_segments()
+        self.collect_segments()
+        target_path = self.create_build_target()
+        script = abjad.cli.ManageBuildTargetScript()
+        command = [
+            '--render', 'letter-portrait',
+            '--preface',
+            ]
+        #with abjad.RedirectedStreams(stdout=self.string_io):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
+            try:
+                script(command)
+            except SystemExit:
+                raise RuntimeError('SystemExit')
+        self.compare_path_contents(target_path, expected_files)
+        assert open_file_mock.called
diff --git a/abjad/cli/test/test_cli_ManageMaterialScript_edit.py b/abjad/cli/test/test_cli_ManageMaterialScript_edit.py
new file mode 100755
index 0000000000..ad6d1cab73
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageMaterialScript_edit.py
@@ -0,0 +1,33 @@
+import abjad
+from abjad import abjad_configuration
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    @mock.patch('abjad.cli.ScorePackageScript._call_subprocess')
+    def test_success(self, call_subprocess_mock):
+        call_subprocess_mock.return_value = 0
+        self.create_score()
+        material_path = self.create_material('test_material')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--edit', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Edit candidates: 'test_material' ...
+        ''')
+        definition_path = material_path.joinpath('definition.py')
+        command = '{} {!s}'.format(
+            abjad_configuration.get_text_editor(),
+            definition_path,
+            )
+        call_subprocess_mock.assert_called_with(command)
diff --git a/abjad/cli/test/test_cli_ManageMaterialScript_illustrate.py b/abjad/cli/test/test_cli_ManageMaterialScript_illustrate.py
new file mode 100755
index 0000000000..8ed3270973
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageMaterialScript_illustrate.py
@@ -0,0 +1,310 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/materials/.gitignore',
+        'test_score/test_score/materials/__init__.py',
+        'test_score/test_score/materials/test_material/__init__.py',
+        'test_score/test_score/materials/test_material/definition.py',
+        'test_score/test_score/materials/test_material/illustration.ly',
+        'test_score/test_score/materials/test_material/illustration.pdf',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    expected_illustration_contents = abjad.String.normalize(
+        r'''
+        \language "english"
+
+        \header {
+            tagline = ##f
+        }
+
+        \layout {}
+
+        \paper {}
+
+        \markup { "An example illustrable material." }
+        '''
+        )
+
+    def test_lilypond_error(self):
+        """
+        Handle failing LilyPond rendering.
+        """
+        self.create_score()
+        material_path = self.create_material('test_material')
+        definition_path = material_path.joinpath('definition.py')
+        with open(str(definition_path), 'w') as file_pointer:
+            file_pointer.write(abjad.String.normalize(r'''
+            from abjad.tools import lilypondfiletools
+
+
+            test_material = lilypondfiletools.LilyPondFile.new()
+            test_material.items.append(r'\this-does-not-exist')
+            '''))
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/test_material/illustration.ly ... OK!
+                Writing test_score/materials/test_material/illustration.pdf ... Failed!
+        '''.replace('/', os.path.sep))
+        illustration_ly_path = material_path.joinpath('illustration.ly')
+        assert illustration_ly_path.exists()
+        self.compare_lilypond_contents(
+            illustration_ly_path, abjad.String.normalize(r'''
+            \language "english"
+
+            \header {
+                tagline = ##f
+            }
+
+            \layout {}
+
+            \paper {}
+
+            \this-does-not-exist
+            '''))
+
+    def test_missing_definition(self):
+        """
+        Handle missing definition.
+        """
+        self.create_score()
+        material_path = self.create_material('test_material')
+        definition_path = material_path.joinpath('definition.py')
+        definition_path.unlink()
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+        '''.replace('/', os.path.sep))
+
+    def test_python_cannot_illustrate(self):
+        """
+        Handle un-illustrables.
+        """
+        self.create_score()
+        material_path = self.create_material('test_material')
+        definition_path = material_path.joinpath('definition.py')
+        with open(str(definition_path), 'w') as file_pointer:
+            file_pointer.write(abjad.String.normalize(r'''
+            test_material = None
+            '''))
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+                Cannot illustrate material of type NoneType.
+        '''.replace('/', os.path.sep))
+
+    def test_python_error_on_illustrate(self):
+        """
+        Handle exceptions inside the Python module on __call__().
+        """
+        self.create_score()
+        material_path = self.create_material('test_material')
+        definition_path = material_path.joinpath('definition.py')
+        with open(str(definition_path), 'w') as file_pointer:
+            file_pointer.write(abjad.String.normalize(r'''
+            from abjad.tools import abctools
+
+
+            class Foo(object):
+                def __illustrate__(self):
+                    raise TypeError('This is fake.')
+
+            test_material = Foo()
+            '''))
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+        '''.replace('/', os.path.sep))
+
+    def test_python_error_on_import(self):
+        """
+        Handle exceptions inside the Python module on import.
+        """
+        self.create_score()
+        material_path = self.create_material('test_material')
+        definition_path = material_path.joinpath('definition.py')
+        with open(str(definition_path), 'a') as file_pointer:
+            file_pointer.write('\n\nfailure = 1 / 0\n')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+        '''.replace('/', os.path.sep))
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_all_materials(self, open_file_mock):
+        self.create_score()
+        self.create_material('material_one')
+        self.create_material('material_two')
+        self.create_material('material_three')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', '*']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: '*' ...
+            Illustrating test_score/materials/material_one/
+                Importing test_score.materials.material_one.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/material_one/illustration.ly ... OK!
+                Writing test_score/materials/material_one/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/material_one/
+            Illustrating test_score/materials/material_three/
+                Importing test_score.materials.material_three.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/material_three/illustration.ly ... OK!
+                Writing test_score/materials/material_three/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/material_three/
+            Illustrating test_score/materials/material_two/
+                Importing test_score.materials.material_two.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/material_two/illustration.ly ... OK!
+                Writing test_score/materials/material_two/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/material_two/
+        '''.replace('/', os.path.sep))
+        assert self.materials_path.joinpath(
+            'material_one',
+            'illustration.pdf',
+            ).exists()
+        assert self.materials_path.joinpath(
+            'material_two',
+            'illustration.pdf',
+            ).exists()
+        assert self.materials_path.joinpath(
+            'material_three',
+            'illustration.pdf',
+            ).exists()
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_filtered_materials(self, open_file_mock):
+        self.create_score()
+        self.create_material('material_one')
+        self.create_material('material_two')
+        self.create_material('material_three')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'material_t*']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: 'material_t*' ...
+            Illustrating test_score/materials/material_three/
+                Importing test_score.materials.material_three.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/material_three/illustration.ly ... OK!
+                Writing test_score/materials/material_three/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/material_three/
+            Illustrating test_score/materials/material_two/
+                Importing test_score.materials.material_two.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/material_two/illustration.ly ... OK!
+                Writing test_score/materials/material_two/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/material_two/
+        '''.replace('/', os.path.sep))
+        assert not self.materials_path.joinpath(
+            'material_one',
+            'illustration.pdf',
+            ).exists()
+        assert self.materials_path.joinpath(
+            'material_two',
+            'illustration.pdf',
+            ).exists()
+        assert self.materials_path.joinpath(
+            'material_three',
+            'illustration.pdf',
+            ).exists()
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_one_material(self, open_file_mock):
+        self.create_score()
+        self.create_material('test_material')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--illustrate', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_material' ...
+            Illustrating test_score/materials/test_material/
+                Importing test_score.materials.test_material.definition
+                    Abjad runtime: ... second...
+                Writing test_score/materials/test_material/illustration.ly ... OK!
+                Writing test_score/materials/test_material/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/materials/test_material/
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.materials_path, self.expected_files)
+        illustration_path = self.materials_path.joinpath(
+            'test_material', 'illustration.ly')
+        self.compare_lilypond_contents(
+            illustration_path,
+            self.expected_illustration_contents,
+            )
diff --git a/abjad/cli/test/test_cli_ManageMaterialScript_list.py b/abjad/cli/test/test_cli_ManageMaterialScript_list.py
new file mode 100755
index 0000000000..b1307f7e9f
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageMaterialScript_list.py
@@ -0,0 +1,41 @@
+import abjad
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    def test_list_materials(self):
+        self.create_score()
+        self.create_material('foo')
+        self.create_material('bar')
+        self.create_material('baz')
+        self.create_material('quux')
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 2
+        self.compare_captured_output(r'''
+        Available materials:
+            Markup:
+                bar [Markup]
+                baz [Markup]
+                foo [Markup]
+                quux [Markup]
+        ''')
+
+    def test_list_materials_no_materials(self):
+        self.create_score()
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 2
+        self.compare_captured_output(r'''
+        Available materials:
+            No materials available.
+        ''')
diff --git a/abjad/cli/test/test_cli_ManageMaterialScript_new.py b/abjad/cli/test/test_cli_ManageMaterialScript_new.py
new file mode 100755
index 0000000000..88c4f1728c
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageMaterialScript_new.py
@@ -0,0 +1,74 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/materials/.gitignore',
+        'test_score/test_score/materials/__init__.py',
+        'test_score/test_score/materials/test_material/__init__.py',
+        'test_score/test_score/materials/test_material/definition.py',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    def test_exists(self):
+        self.create_score()
+        self.create_material('test_material')
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_material('test_material', expect_error=True)
+        self.compare_captured_output(r'''
+            Creating material subpackage 'test_material' ...
+                Path exists: test_score/materials/test_material
+        '''.replace('/', os.path.sep))
+
+    def test_force_replace(self):
+        self.create_score()
+        self.create_material('test_material')
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_material('test_material', force=True)
+        self.compare_captured_output(r'''
+            Creating material subpackage 'test_material' ...
+                Reading test_score/metadata.json ... OK!
+                Created test_score/materials/test_material/
+        '''.replace('/', os.path.sep))
+
+    def test_internal_path(self):
+        self.create_score()
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--new', 'test_material']
+        internal_path = self.score_path.joinpath('test_score', 'builds')
+        assert internal_path.exists()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(internal_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+            Creating material subpackage 'test_material' ...
+                Reading test_score/metadata.json ... OK!
+                Created test_score/materials/test_material/
+        '''.replace('/', os.path.sep))
+
+    def test_success(self):
+        self.create_score()
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--new', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+            Creating material subpackage 'test_material' ...
+                Reading test_score/metadata.json ... OK!
+                Created test_score/materials/test_material/
+        '''.replace('/', os.path.sep))
+        assert self.materials_path.joinpath('test_material').exists()
+        self.compare_path_contents(self.materials_path, self.expected_files)
diff --git a/abjad/cli/test/test_cli_ManageMaterialScript_render.py b/abjad/cli/test/test_cli_ManageMaterialScript_render.py
new file mode 100755
index 0000000000..c9cb9a9124
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageMaterialScript_render.py
@@ -0,0 +1,48 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/materials/.gitignore',
+        'test_score/test_score/materials/__init__.py',
+        'test_score/test_score/materials/test_material/__init__.py',
+        'test_score/test_score/materials/test_material/definition.py',
+        'test_score/test_score/materials/test_material/illustration.ly',
+        'test_score/test_score/materials/test_material/illustration.pdf',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_one_material(self, open_file_mock):
+        self.create_score()
+        material_path = self.create_material('test_material')
+        self.illustrate_material('test_material')
+        pdf_path = material_path.joinpath('illustration.pdf')
+        assert pdf_path.exists()
+        pdf_path.unlink()
+        script = abjad.cli.ManageMaterialScript()
+        command = ['--render', 'test_material']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Rendering candidates: 'test_material' ...
+        Rendering test_score/materials/test_material/
+            Writing test_score/materials/test_material/illustration.pdf ... OK!
+                LilyPond runtime: ... second...
+            Rendered test_score/materials/test_material/
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.materials_path, self.expected_files)
diff --git a/abjad/cli/test/test_cli_ManageScoreScript_new.py b/abjad/cli/test/test_cli_ManageScoreScript_new.py
new file mode 100755
index 0000000000..014d7ddd65
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageScoreScript_new.py
@@ -0,0 +1,113 @@
+import abjad
+import os
+import platform
+import json
+import shutil
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/.gitignore',
+        'test_score/.travis.yml',
+        'test_score/README.md',
+        'test_score/requirements.txt',
+        'test_score/setup.cfg',
+        'test_score/setup.py',
+        'test_score/test_score/__init__.py',
+        'test_score/test_score/__metadata__.py',
+        'test_score/test_score/builds/.gitignore',
+        'test_score/test_score/builds/assets/.gitignore',
+        'test_score/test_score/builds/assets/instrumentation.tex',
+        'test_score/test_score/builds/assets/performance-notes.tex',
+        'test_score/test_score/builds/parts.ily',
+        'test_score/test_score/builds/segments.ily',
+        'test_score/test_score/builds/segments/.gitignore',
+        'test_score/test_score/distribution/.gitignore',
+        'test_score/test_score/etc/.gitignore',
+        'test_score/test_score/materials/.gitignore',
+        'test_score/test_score/materials/__init__.py',
+        'test_score/test_score/metadata.json',
+        'test_score/test_score/segments/.gitignore',
+        'test_score/test_score/segments/__init__.py',
+        'test_score/test_score/stylesheets/.gitignore',
+        'test_score/test_score/stylesheets/nonfirst-segment.ily',
+        'test_score/test_score/stylesheets/parts.ily',
+        'test_score/test_score/stylesheets/stylesheet.ily',
+        'test_score/test_score/test/.gitignore',
+        'test_score/test_score/test/test_materials.py',
+        'test_score/test_score/test/test_segments.py',
+        'test_score/test_score/tools/.gitignore',
+        'test_score/test_score/tools/ScoreTemplate.py',
+        'test_score/test_score/tools/SegmentMaker.py',
+        'test_score/test_score/tools/__init__.py',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    def test_exists(self):
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_score()
+        assert self.score_path.exists()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_score(expect_error=True)
+        assert self.score_path.exists()
+        shutil.rmtree(str(self.score_path))
+        for path in self.test_path.iterdir():
+            assert path in self.directory_items
+        self.compare_captured_output(r'''
+            Creating score package 'Test Score'...
+                Writing test_score/metadata.json
+                Created test_score/
+            Creating score package 'Test Score'...
+                Directory test_score already exists.
+        '''.replace('/', os.path.sep))
+
+    def test_force_replace(self):
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_score()
+        assert self.score_path.exists()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_score(force=True)
+        assert self.score_path.exists()
+        shutil.rmtree(str(self.score_path))
+        for path in self.test_path.iterdir():
+            assert path in self.directory_items
+        self.compare_captured_output(r'''
+            Creating score package 'Test Score'...
+                Writing test_score/metadata.json
+                Created test_score/
+            Creating score package 'Test Score'...
+                Writing test_score/metadata.json
+                Created test_score/
+        '''.replace('/', os.path.sep))
+
+    def test_success(self):
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_score()
+        assert self.score_path.exists()
+        self.compare_path_contents(self.score_path, self.expected_files)
+        score_metadata_path = self.score_path.joinpath(
+            self.score_path.name, 'metadata.json')
+        assert score_metadata_path.exists()
+        with open(str(score_metadata_path), 'r') as file_pointer:
+            metadata = json.loads(file_pointer.read())
+        assert metadata == {
+            'composer_email': 'josiah.oberholtzer@gmail.com',
+            'composer_github': 'josiah-wolf-oberholtzer',
+            'composer_library': 'consort',
+            'composer_name': 'Josiah Wolf Oberholtzer',
+            'composer_website': 'www.josiahwolfoberholtzer.com',
+            'title': 'Test Score',
+            'year': 2016,
+            }
+        shutil.rmtree(str(self.score_path))
+        for path in self.test_path.iterdir():
+            assert path in self.directory_items
+        self.compare_captured_output(r'''
+            Creating score package 'Test Score'...
+                Writing test_score/metadata.json
+                Created test_score/
+        '''.replace('/', os.path.sep))
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_collect.py b/abjad/cli/test/test_cli_ManageSegmentScript_collect.py
new file mode 100755
index 0000000000..659f4ecc6d
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_collect.py
@@ -0,0 +1,97 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/builds/.gitignore',
+        'test_score/test_score/builds/assets/.gitignore',
+        'test_score/test_score/builds/assets/instrumentation.tex',
+        'test_score/test_score/builds/assets/performance-notes.tex',
+        'test_score/test_score/builds/parts.ily',
+        'test_score/test_score/builds/segments.ily',
+        'test_score/test_score/builds/segments/.gitignore',
+        'test_score/test_score/builds/segments/segment-one.ily',
+        'test_score/test_score/builds/segments/segment-three.ily',
+        'test_score/test_score/builds/segments/segment-two.ily',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success(self, open_file_mock):
+        self.create_score()
+        self.create_segment('segment_one')
+        self.create_segment('segment_two')
+        self.create_segment('segment_three')
+        self.illustrate_segments()
+        collect_script = abjad.cli.ManageSegmentScript()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    collect_script(['--collect'])
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Collecting segments:
+            segments/segment_one/illustration.ly --> builds/segments/segment-one.ily
+            segments/segment_three/illustration.ly --> builds/segments/segment-three.ily
+            segments/segment_two/illustration.ly --> builds/segments/segment-two.ily
+            Reading test_score/segments/metadata.json ... OK!
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.build_path, self.expected_files)
+        path = self.build_path.joinpath('segments.ily')
+        self.compare_lilypond_contents(path, r'''
+        {
+            \include "../segments/segment-one.ily"
+            \include "../segments/segment-two.ily"
+            \include "../segments/segment-three.ily"
+        }
+        '''.replace('/', os.path.sep))
+        path = self.build_path.joinpath('segments', 'segment-one.ily')
+        self.compare_lilypond_contents(path, r'''
+        \context Score = "Example Score" <<
+            \context Staff = "Example Staff" {
+                \context Voice = "Example Voice" {
+                    c'4 (
+                    d'4
+                    e'4
+                    f'4 )
+                }
+            }
+        >>
+        ''')
+        path = self.build_path.joinpath('segments', 'segment-two.ily')
+        self.compare_lilypond_contents(path, r'''
+        \context Score = "Example Score" <<
+            \context Staff = "Example Staff" {
+                \context Voice = "Example Voice" {
+                    c'4 (
+                    d'4
+                    e'4
+                    f'4 )
+                }
+            }
+        >>
+        ''')
+        path = self.build_path.joinpath('segments', 'segment-three.ily')
+        self.compare_lilypond_contents(path, r'''
+        \context Score = "Example Score" <<
+            \context Staff = "Example Staff" {
+                \context Voice = "Example Voice" {
+                    c'4 (
+                    d'4
+                    e'4
+                    f'4 )
+                }
+            }
+        >>
+        ''')
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_edit.py b/abjad/cli/test/test_cli_ManageSegmentScript_edit.py
new file mode 100755
index 0000000000..7c475e7880
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_edit.py
@@ -0,0 +1,35 @@
+import abjad
+import os
+from abjad import abjad_configuration
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    @mock.patch('abjad.cli.ScorePackageScript._call_subprocess')
+    def test_success(self, call_subprocess_mock):
+        call_subprocess_mock.return_value = 0
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--edit', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Edit candidates: 'test_segment' ...
+            Reading test_score/segments/metadata.json ... OK!
+        '''.replace('/', os.path.sep))
+        definition_path = segment_path.joinpath('definition.py')
+        command = '{} {!s}'.format(
+            abjad_configuration.get_text_editor(),
+            definition_path,
+            )
+        call_subprocess_mock.assert_called_with(command)
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_illustrate.py b/abjad/cli/test/test_cli_ManageSegmentScript_illustrate.py
new file mode 100755
index 0000000000..1f20acb0b4
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_illustrate.py
@@ -0,0 +1,366 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/segments/.gitignore',
+        'test_score/test_score/segments/__init__.py',
+        'test_score/test_score/segments/metadata.json',
+        'test_score/test_score/segments/test_segment/__init__.py',
+        'test_score/test_score/segments/test_segment/definition.py',
+        'test_score/test_score/segments/test_segment/illustration.ly',
+        'test_score/test_score/segments/test_segment/illustration.pdf',
+        'test_score/test_score/segments/test_segment/metadata.json',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    expected_illustration_contents = abjad.String.normalize(
+        r'''
+        \language "english"
+
+        \include "../../stylesheets/stylesheet.ily"
+
+        \header {
+            tagline = ##f
+        }
+
+        \layout {}
+
+        \paper {}
+
+        \score {
+            \context Score = "Example Score" <<
+                \context Staff = "Example Staff" {
+                    \context Voice = "Example Voice" {
+                        c'4 (
+                        d'4
+                        e'4
+                        f'4 )
+                    }
+                }
+            >>
+        }
+        ''')
+
+    def test_lilypond_error(self):
+        r"""
+        Handle failing LilyPond rendering.
+        """
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        definition_path = segment_path.joinpath('definition.py')
+        with open(str(definition_path), 'w') as file_pointer:
+            file_pointer.write(abjad.String.normalize(r'''
+            from abjad.tools import abctools
+            from abjad.tools import lilypondfiletools
+            from abjad.tools import scoretools
+
+
+            class FaultySegmentMaker(abctools.AbjadObject):
+
+                def run(
+                    self,
+                    metadata=None,
+                    previous_metadata=None,
+                    ):
+                    self.metadata = metadata
+                    lilypond_file = lilypondfiletools.LilyPondFile.new(
+                        scoretools.Staff("c'4 ( d'4 e'4 f'4 )")
+                        )
+                    lilypond_file.items.append(r'\this-does-not-exist')
+                    return lilypond_file
+
+            segment_maker = FaultySegmentMaker()
+            '''))
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_segment' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/test_segment/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/test_segment/metadata.json ... JSON does not exist.
+                Importing test_score.segments.test_segment.definition
+                Writing test_score/segments/test_segment/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/test_segment/illustration.ly ... OK!
+                Writing test_score/segments/test_segment/illustration.pdf ... Failed!
+        '''.replace('/', os.path.sep))
+        illustration_ly_path = segment_path.joinpath('illustration.ly')
+        assert illustration_ly_path.exists()
+        self.compare_lilypond_contents(
+            illustration_ly_path, abjad.String.normalize(r'''
+            \language "english"
+
+            \header {
+                tagline = ##f
+            }
+
+            \layout {}
+
+            \paper {}
+
+            \score {
+                \new Staff {
+                    c'4 (
+                    d'4
+                    e'4
+                    f'4 )
+                }
+            }
+
+            \this-does-not-exist
+            '''))
+
+    def test_missing_definition(self):
+        """
+        Handle missing definition.
+        """
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        definition_path = segment_path.joinpath('definition.py')
+        definition_path.unlink()
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_segment' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/test_segment/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/test_segment/metadata.json ... JSON does not exist.
+                Importing test_score.segments.test_segment.definition
+        '''.replace('/', os.path.sep))
+
+    def test_python_error_on_illustrate(self):
+        """
+        Handle exceptions inside the Python module on __call__().
+        """
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        definition_path = segment_path.joinpath('definition.py')
+        with open(str(definition_path), 'w') as file_pointer:
+            file_pointer.write(abjad.String.normalize(r'''
+            from abjad.tools import abctools
+
+
+            class FaultySegmentMaker(abctools.AbjadObject):
+
+                def __call__(
+                    self,
+                    metadata=None,
+                    previous_metadata=None,
+                    ):
+                    raise TypeError('This is intentionally broken.')
+
+            segment_maker = FaultySegmentMaker()
+            '''))
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_segment' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/test_segment/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/test_segment/metadata.json ... JSON does not exist.
+                Importing test_score.segments.test_segment.definition
+        '''.replace('/', os.path.sep))
+
+    def test_python_error_on_import(self):
+        """
+        Handle exceptions inside the Python module on import.
+        """
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        definition_path = segment_path.joinpath('definition.py')
+        with open(str(definition_path), 'a') as file_pointer:
+            file_pointer.write('\n\nfailure = 1 / 0\n')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 1
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_segment' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/test_segment/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/test_segment/metadata.json ... JSON does not exist.
+                Importing test_score.segments.test_segment.definition
+        '''.replace('/', os.path.sep))
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_all_segments(self, open_file_mock):
+        self.create_score()
+        self.create_segment('segment_one')
+        self.create_segment('segment_two')
+        self.create_segment('segment_three')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', '*']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: '*' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/segment_one/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/segment_one/metadata.json ... JSON does not exist.
+                Importing test_score.segments.segment_one.definition
+                Writing test_score/segments/segment_one/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/segment_one/illustration.ly ... OK!
+                Writing test_score/segments/segment_one/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/segment_one/
+            Illustrating test_score/segments/segment_two/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/segment_one/metadata.json ... OK!
+                Reading test_score/segments/segment_two/metadata.json ... JSON does not exist.
+                Importing test_score.segments.segment_two.definition
+                Writing test_score/segments/segment_two/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/segment_two/illustration.ly ... OK!
+                Writing test_score/segments/segment_two/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/segment_two/
+            Illustrating test_score/segments/segment_three/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/segment_two/metadata.json ... OK!
+                Reading test_score/segments/segment_three/metadata.json ... JSON does not exist.
+                Importing test_score.segments.segment_three.definition
+                Writing test_score/segments/segment_three/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/segment_three/illustration.ly ... OK!
+                Writing test_score/segments/segment_three/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/segment_three/
+        '''.replace('/', os.path.sep))
+        assert self.segments_path.joinpath(
+            'segment_one',
+            'illustration.pdf',
+            ).exists()
+        assert self.segments_path.joinpath(
+            'segment_two',
+            'illustration.pdf',
+            ).exists()
+        assert self.segments_path.joinpath(
+            'segment_three',
+            'illustration.pdf',
+            ).exists()
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_filtered_segments(self, open_file_mock):
+        self.create_score()
+        self.create_segment('segment_one')
+        self.create_segment('segment_two')
+        self.create_segment('segment_three')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'segment_t*']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: 'segment_t*' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/segment_two/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/segment_one/metadata.json ... JSON does not exist.
+                Reading test_score/segments/segment_two/metadata.json ... JSON does not exist.
+                Importing test_score.segments.segment_two.definition
+                Writing test_score/segments/segment_two/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/segment_two/illustration.ly ... OK!
+                Writing test_score/segments/segment_two/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/segment_two/
+            Illustrating test_score/segments/segment_three/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/segment_two/metadata.json ... OK!
+                Reading test_score/segments/segment_three/metadata.json ... JSON does not exist.
+                Importing test_score.segments.segment_three.definition
+                Writing test_score/segments/segment_three/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/segment_three/illustration.ly ... OK!
+                Writing test_score/segments/segment_three/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/segment_three/
+        '''.replace('/', os.path.sep))
+        assert not self.segments_path.joinpath(
+            'segment_one',
+            'illustration.pdf',
+            ).exists()
+        assert self.segments_path.joinpath(
+            'segment_two',
+            'illustration.pdf',
+            ).exists()
+        assert self.segments_path.joinpath(
+            'segment_three',
+            'illustration.pdf',
+            ).exists()
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_one_segment(self, open_file_mock):
+        self.create_score()
+        self.create_segment('test_segment')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--illustrate', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+            Illustration candidates: 'test_segment' ...
+                Reading test_score/segments/metadata.json ... OK!
+            Illustrating test_score/segments/test_segment/
+                Reading test_score/segments/metadata.json ... OK!
+                Reading test_score/segments/test_segment/metadata.json ... JSON does not exist.
+                Importing test_score.segments.test_segment.definition
+                Writing test_score/segments/test_segment/metadata.json
+                    Abjad runtime: ... second...
+                Writing test_score/segments/test_segment/illustration.ly ... OK!
+                Writing test_score/segments/test_segment/illustration.pdf ... OK!
+                    LilyPond runtime: ... second...
+                Illustrated test_score/segments/test_segment/
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.segments_path, self.expected_files)
+        illustration_path = self.segments_path.joinpath(
+            'test_segment', 'illustration.ly')
+        self.compare_lilypond_contents(
+            illustration_path,
+            self.expected_illustration_contents,
+            )
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_list.py b/abjad/cli/test/test_cli_ManageSegmentScript_list.py
new file mode 100755
index 0000000000..30efc11ddb
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_list.py
@@ -0,0 +1,71 @@
+import abjad
+import os
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    def test_list_segments(self):
+        self.create_score()
+        self.create_segment('segment_one')
+        self.create_segment('segment_two')
+        self.create_segment('segment_three')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 2
+        self.compare_captured_output(r'''
+            Available segments:
+                Reading test_score/segments/metadata.json ... OK!
+                segment_one   [1]
+                segment_two   [2]
+                segment_three [3]
+        '''.replace('/', os.path.sep))
+
+    def test_list_segments_no_segments(self):
+        self.create_score()
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 2
+        self.compare_captured_output(r'''
+            Available segments:
+                Reading test_score/segments/metadata.json ... JSON does not exist.
+                No segments available.
+        '''.replace('/', os.path.sep))
+
+    def test_list_segments_unstaged(self):
+        self.create_score()
+        self.create_segment('segment_one')
+        self.create_segment('segment_two')
+        self.create_segment('segment_three')
+        script = abjad.cli.ManageSegmentScript()
+        segment_names = script._read_segments_list_json(
+            self.score_path,
+            verbose=False,
+            )
+        segment_names.remove('segment_two')
+        script._write_segments_list_json(
+            segment_names,
+            score_path=self.score_path,
+            verbose=False,
+            )
+        command = ['--list']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                with self.assertRaises(SystemExit) as context_manager:
+                    script(command)
+                assert context_manager.exception.code == 2
+        self.compare_captured_output(r'''
+            Available segments:
+                Reading test_score/segments/metadata.json ... OK!
+                segment_one   [1]
+                segment_three [2]
+                segment_two
+        '''.replace('/', os.path.sep))
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_metadata.py b/abjad/cli/test/test_cli_ManageSegmentScript_metadata.py
new file mode 100755
index 0000000000..fdac685c63
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_metadata.py
@@ -0,0 +1,135 @@
+import json
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_1(self, open_file_mock):
+        self.create_score()
+        self.install_fancy_segment_maker()
+        path_1 = self.create_segment('segment_one')
+        path_2 = self.create_segment('segment_two')
+        path_3 = self.create_segment('segment_three')
+        self.illustrate_segments()
+        with open(str(path_1.joinpath('metadata.json')), 'r') as file_pointer:
+            metadata_1 = json.loads(file_pointer.read())
+        with open(str(path_2.joinpath('metadata.json')), 'r') as file_pointer:
+            metadata_2 = json.loads(file_pointer.read())
+        with open(str(path_3.joinpath('metadata.json')), 'r') as file_pointer:
+            metadata_3 = json.loads(file_pointer.read())
+        assert metadata_1 == {
+            'first_bar_number': 1,
+            'measure_count': 1,
+            'segment_count': 3,
+            'segment_number': 1,
+            }
+        assert metadata_2 == {
+            'first_bar_number': 2,
+            'measure_count': 1,
+            'segment_count': 3,
+            'segment_number': 2,
+            }
+        assert metadata_3 == {
+            'first_bar_number': 3,
+            'measure_count': 1,
+            'segment_count': 3,
+            'segment_number': 3,
+            }
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_2(self, open_file_mock):
+        self.create_score()
+        self.install_fancy_segment_maker()
+        segment_path = self.create_segment('test_segment')
+        self.illustrate_segment('test_segment')
+        illustration_path = segment_path.joinpath('illustration.ly')
+        self.compare_lilypond_contents(
+            illustration_path,
+            r'''
+            \language "english"
+            <BLANKLINE>
+            \include "../../stylesheets/stylesheet.ily"
+            <BLANKLINE>
+            \header {
+                tagline = ##f
+            }
+            <BLANKLINE>
+            \layout {}
+            <BLANKLINE>
+            \paper {}
+            <BLANKLINE>
+            \score {
+                \context Score = "String Quartet Score"
+                    <<
+                    \context StaffGroup = "String Quartet Staff Group"
+                    <<
+                        \tag #'first-violin
+                        \context Staff = "First Violin Staff"
+                        {
+                            \context Voice = "First Violin Voice"
+                            {
+                                {   % measure
+                                    \time 4/4
+                                    \set Staff.instrumentName = \markup { Violin }   %! ST1
+                                    \set Staff.shortInstrumentName = \markup { Vn. } %! ST1
+                                    \clef "treble" %! ST3
+                                    c'1
+                                    \bar "|." %! SCORE1
+                                }   % measure
+                            }
+                        }
+                        \tag #'second-violin
+                        \context Staff = "Second Violin Staff"
+                        {
+                            \context Voice = "Second Violin Voice"
+                            {
+                                {   % measure
+                                    \time 4/4
+                                    \set Staff.instrumentName = \markup { Violin }   %! ST1
+                                    \set Staff.shortInstrumentName = \markup { Vn. } %! ST1
+                                    \clef "treble" %! ST3
+                                    c'1
+                                    \bar "|." %! SCORE1
+                                }   % measure
+                            }
+                        }
+                        \tag #'viola
+                        \context Staff = "Viola Staff"
+                        {
+                            \context Voice = "Viola Voice"
+                            {
+                                {   % measure
+                                    \time 4/4
+                                    \set Staff.instrumentName = \markup { Viola }   %! ST1
+                                    \set Staff.shortInstrumentName = \markup { Va. } %! ST1
+                                    \clef "alto" %! ST3
+                                    c'1
+                                    \bar "|." %! SCORE1
+                                }   % measure
+                            }
+                        }
+                        \tag #'cello
+                        \context Staff = "Cello Staff"
+                        {
+                            \context Voice = "Cello Voice"
+                            {
+                                {   % measure
+                                    \time 4/4
+                                    \set Staff.instrumentName = \markup { Cello }   %! ST1
+                                    \set Staff.shortInstrumentName = \markup { Vc. } %! ST1
+                                    \clef "bass" %! ST3
+                                    c'1
+                                    \bar "|." %! SCORE1
+                                }   % measure
+                            }
+                        }
+                    >>
+                >>
+            }
+            '''
+            )
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_new.py b/abjad/cli/test/test_cli_ManageSegmentScript_new.py
new file mode 100755
index 0000000000..4e28e5b1fc
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_new.py
@@ -0,0 +1,96 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/segments/.gitignore',
+        'test_score/test_score/segments/__init__.py',
+        'test_score/test_score/segments/metadata.json',
+        'test_score/test_score/segments/test_segment/__init__.py',
+        'test_score/test_score/segments/test_segment/definition.py',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    def test_exists(self):
+        self.create_score()
+        self.create_segment('test_segment')
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_segment('test_segment', expect_error=True)
+        self.compare_captured_output(r'''
+            Creating segment subpackage 'test_segment' ...
+                Path exists: test_score/segments/test_segment
+        '''.replace('/', os.path.sep))
+
+    def test_force_replace(self):
+        self.create_score()
+        self.create_segment('test_segment')
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            self.create_segment('test_segment', force=True)
+        self.compare_captured_output(r'''
+            Creating segment subpackage 'test_segment' ...
+                Reading test_score/metadata.json ... OK!
+                Reading test_score/segments/metadata.json ... OK!
+                Created test_score/segments/test_segment/
+        '''.replace('/', os.path.sep))
+
+    def test_internal_path(self):
+        self.create_score()
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--new', 'test_segment']
+        internal_path = self.score_path.joinpath('test_score', 'builds')
+        assert internal_path.exists()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(internal_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+            Creating segment subpackage 'test_segment' ...
+                Reading test_score/metadata.json ... OK!
+                Reading test_score/segments/metadata.json ... JSON does not exist.
+                Writing test_score/segments/metadata.json
+                Created test_score/segments/test_segment/
+        '''.replace('/', os.path.sep))
+
+    def test_success(self):
+        self.create_score()
+        script = abjad.cli.ManageSegmentScript()
+        try:
+            names = script._read_segments_list_json(
+                self.score_path,
+                verbose=False,
+                )
+            assert names == []
+        except SystemExit:
+            raise RuntimeError('SystemExit')
+        command = ['--new', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit:
+                    raise RuntimeError('SystemExit')
+        self.compare_captured_output(r'''
+            Creating segment subpackage 'test_segment' ...
+                Reading test_score/metadata.json ... OK!
+                Reading test_score/segments/metadata.json ... JSON does not exist.
+                Writing test_score/segments/metadata.json
+                Created test_score/segments/test_segment/
+        '''.replace('/', os.path.sep))
+        assert self.segments_path.joinpath('test_segment').exists()
+        self.compare_path_contents(self.segments_path, self.expected_files)
+        try:
+            names = script._read_segments_list_json(
+                self.score_path,
+                verbose=False,
+                )
+            assert names == ['test_segment']
+        except SystemExit:
+            raise RuntimeError('SystemExit')
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_render.py b/abjad/cli/test/test_cli_ManageSegmentScript_render.py
new file mode 100755
index 0000000000..e2b55b5a4e
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_render.py
@@ -0,0 +1,51 @@
+import abjad
+import os
+import platform
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    expected_files = [
+        'test_score/test_score/segments/.gitignore',
+        'test_score/test_score/segments/__init__.py',
+        'test_score/test_score/segments/metadata.json',
+        'test_score/test_score/segments/test_segment/__init__.py',
+        'test_score/test_score/segments/test_segment/definition.py',
+        'test_score/test_score/segments/test_segment/illustration.ly',
+        'test_score/test_score/segments/test_segment/illustration.pdf',
+        'test_score/test_score/segments/test_segment/metadata.json',
+        ]
+
+    if platform.system().lower() == 'windows':
+        expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+
+    @mock.patch('abjad.IOManager.open_file')
+    def test_success_one_segment(self, open_file_mock):
+        self.create_score()
+        segment_path = self.create_segment('test_segment')
+        self.illustrate_segment('test_segment')
+        pdf_path = segment_path.joinpath('illustration.pdf')
+        assert pdf_path.exists()
+        pdf_path.unlink()
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--render', 'test_segment']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Rendering candidates: 'test_segment' ...
+            Reading test_score/segments/metadata.json ... OK!
+        Rendering test_score/segments/test_segment/
+            Writing test_score/segments/test_segment/illustration.pdf ... OK!
+                LilyPond runtime: ... second...
+            Rendered test_score/segments/test_segment/
+        '''.replace('/', os.path.sep))
+        self.compare_path_contents(self.segments_path, self.expected_files)
diff --git a/abjad/cli/test/test_cli_ManageSegmentScript_stage.py b/abjad/cli/test/test_cli_ManageSegmentScript_stage.py
new file mode 100755
index 0000000000..71334cbcb5
--- /dev/null
+++ b/abjad/cli/test/test_cli_ManageSegmentScript_stage.py
@@ -0,0 +1,68 @@
+import abjad
+import os
+from abjad import abjad_configuration
+from base import ScorePackageScriptTestCase
+try:
+    from unittest import mock
+except ImportError:
+    import mock
+
+
+class Test(ScorePackageScriptTestCase):
+
+    def side_effect(self, command, **keywords):
+        _, file_name = command.split()
+        contents = abjad.String.normalize('''
+        segment_c
+        segment_b
+        segment_a
+        ''')
+        with open(file_name, 'w') as file_pointer:
+            file_pointer.write(contents)
+
+    @mock.patch('abjad.cli.ScorePackageScript._call_subprocess')
+    def test_success(self, call_subprocess_mock):
+        call_subprocess_mock.return_value = 0
+        self.create_score()
+        self.create_segment('segment_a')
+        self.create_segment('segment_b')
+        self.create_segment('segment_c')
+        script = abjad.cli.ManageSegmentScript()
+        command = ['--stage']
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Staging segments:
+            Reading test_score/segments/metadata.json ... OK!
+        Staged:
+            segment_a
+            segment_b
+            segment_c
+        '''.replace('/', os.path.sep))
+        call_subprocess_mock.assert_called_with(
+            '{} segments.txt'.format(abjad_configuration.get_text_editor()),
+            )
+        call_subprocess_mock.side_effect = self.side_effect
+        self.reset_string_io()
+        with abjad.RedirectedStreams(stdout=self.string_io):
+            with abjad.TemporaryDirectoryChange(str(self.score_path)):
+                try:
+                    script(command)
+                except SystemExit as e:
+                    raise RuntimeError('SystemExit: {}'.format(e.code))
+        self.compare_captured_output(r'''
+        Staging segments:
+            Reading test_score/segments/metadata.json ... OK!
+            Writing test_score/segments/metadata.json
+        Staged:
+            segment_c
+            segment_b
+            segment_a
+        '''.replace('/', os.path.sep))
+        call_subprocess_mock.assert_called_with(
+            '{} segments.txt'.format(abjad_configuration.get_text_editor()),
+            )
diff --git a/abjad/cli/test/test_cli_ReplaceScript___init__.py b/abjad/cli/test/test_cli_ReplaceScript___init__.py
new file mode 100755
index 0000000000..9f2201179a
--- /dev/null
+++ b/abjad/cli/test/test_cli_ReplaceScript___init__.py
@@ -0,0 +1,6 @@
+import abjad
+
+
+def test_cli_ReplaceScript___init___01():
+
+    script = abjad.cli.ReplaceScript()
