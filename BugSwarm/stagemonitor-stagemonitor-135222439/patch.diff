diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/AlertingPlugin.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/AlertingPlugin.java
index 69a5ef6227..c8d1edeac9 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/AlertingPlugin.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/AlertingPlugin.java
@@ -227,7 +227,12 @@ public void initializePlugin(StagemonitorPlugin.InitArguments initArguments) thr
 		}
 		logger.info("Using {} for storing incidents.", incidentRepository.getClass().getSimpleName());
 
-		thresholdMonitoringReporter = new ThresholdMonitoringReporter(initArguments.getMetricRegistry(), alertingPlugin, alertSender, incidentRepository, initArguments.getMeasurementSession());
+		thresholdMonitoringReporter = ThresholdMonitoringReporter.forRegistry(initArguments.getMetricRegistry())
+				.alertingPlugin(alertingPlugin)
+				.alertSender(alertSender)
+				.incidentRepository(incidentRepository)
+				.measurementSession(initArguments.getMeasurementSession())
+				.build();
 		thresholdMonitoringReporter.start(alertingPlugin.checkFrequency.getValue(), TimeUnit.SECONDS);
 		SlaCheckCreatingClassPathScanner.onStart(initArguments.getMeasurementSession());
 	}
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/ThresholdMonitoringReporter.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/ThresholdMonitoringReporter.java
index 5dc8b26634..3203757362 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/ThresholdMonitoringReporter.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/ThresholdMonitoringReporter.java
@@ -1,35 +1,31 @@
 package org.stagemonitor.alerting;
 
+import java.util.Collections;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.SortedMap;
-import java.util.concurrent.TimeUnit;
 
 import com.codahale.metrics.Counter;
 import com.codahale.metrics.Gauge;
 import com.codahale.metrics.Histogram;
 import com.codahale.metrics.Meter;
-import com.codahale.metrics.MetricFilter;
-import com.codahale.metrics.ScheduledReporter;
+import com.codahale.metrics.Metric;
 import com.codahale.metrics.Timer;
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.stagemonitor.alerting.alerter.AlertSender;
 import org.stagemonitor.alerting.check.Check;
 import org.stagemonitor.alerting.check.CheckResult;
-import org.stagemonitor.alerting.check.MetricCategory;
 import org.stagemonitor.alerting.incident.Incident;
 import org.stagemonitor.alerting.incident.IncidentRepository;
 import org.stagemonitor.core.MeasurementSession;
 import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
+import org.stagemonitor.core.metrics.metrics2.MetricName;
+import org.stagemonitor.core.metrics.metrics2.ScheduledMetrics2Reporter;
 import org.stagemonitor.core.util.JsonUtils;
 
-public class ThresholdMonitoringReporter extends ScheduledReporter {
+public class ThresholdMonitoringReporter extends ScheduledMetrics2Reporter {
 
 	public static final int OPTIMISTIC_CONCURRENCY_CONTROL_RETRIES = 10;
 	private final Logger logger = LoggerFactory.getLogger(getClass());
@@ -39,43 +35,59 @@
 	private final MeasurementSession measurementSession;
 	private final AlertingPlugin alertingPlugin;
 
-	protected ThresholdMonitoringReporter(Metric2Registry registry, AlertingPlugin alertingPlugin,
-										  AlertSender alertSender, IncidentRepository incidentRepository,
-										  MeasurementSession measurementSession) {
-		super(registry.getMetricRegistry(), "threshold-monitoring-reporter", MetricFilter.ALL, TimeUnit.SECONDS, TimeUnit.MILLISECONDS);
-		this.alertingPlugin = alertingPlugin;
-		this.alertSender = alertSender;
-		this.incidentRepository = incidentRepository;
-		this.measurementSession = measurementSession;
+	public static ThresholdMonitoringReporterBuilder forRegistry(Metric2Registry registry) {
+		return new ThresholdMonitoringReporterBuilder(registry);
+	}
+
+	public ThresholdMonitoringReporter(ThresholdMonitoringReporterBuilder builder) {
+		super(builder);
+		this.alertingPlugin = builder.getAlertingPlugin();
+		this.alertSender = builder.getAlertSender();
+		this.incidentRepository = builder.getIncidentRepository();
+		this.measurementSession = builder.getMeasurementSession();
 	}
 
 	@Override
-	public void report(SortedMap<String, Gauge> gauges, SortedMap<String, Counter> counters,
-					   SortedMap<String, Histogram> histograms, SortedMap<String, Meter> meters,
-					   SortedMap<String, Timer> timers) {
-		ObjectNode metrics = JsonUtils.getMapper().createObjectNode();
-		metrics.set(MetricCategory.GAUGE.getPath(), JsonUtils.toObjectNode(gauges));
-		metrics.set(MetricCategory.COUNTER.getPath(), JsonUtils.toObjectNode(counters));
-		metrics.set(MetricCategory.HISTOGRAM.getPath(), JsonUtils.toObjectNode(histograms));
-		metrics.set(MetricCategory.METER.getPath(), JsonUtils.toObjectNode(meters));
-		metrics.set(MetricCategory.TIMER.getPath(), JsonUtils.toObjectNode(timers));
+	public void reportMetrics(Map<MetricName, Gauge> gauges, Map<MetricName, Counter> counters, Map<MetricName, Histogram> histograms, Map<MetricName, Meter> meters, Map<MetricName, Timer> timers) {
+		Map<String, Map<MetricName, Metric>> metricsGroupedByName = new HashMap<String, Map<MetricName, Metric>>();
+		addMetrics(metricsGroupedByName, gauges);
+		addMetrics(metricsGroupedByName, counters);
+		addMetrics(metricsGroupedByName, histograms);
+		addMetrics(metricsGroupedByName, meters);
+		addMetrics(metricsGroupedByName, timers);
 
 		for (Check check : alertingPlugin.getChecks().values()) {
 			if (measurementSession.getApplicationName().equals(check.getApplication()) && check.isActive()) {
-				checkMetrics(metrics, check);
+				checkMetrics(metricsGroupedByName, check);
+			}
+		}
+	}
+
+	private <T extends Metric> void addMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Map<MetricName, T > gauges) {
+		for (Map.Entry<MetricName, T> entry : gauges.entrySet()) {
+			Map<MetricName, Metric> metricsForName = metricsGroupedByName.get(entry.getKey().getName());
+			if (metricsForName == null) {
+				metricsForName = new HashMap<MetricName, Metric>();
+				metricsGroupedByName.put(entry.getKey().getName(), metricsForName);
 			}
+			metricsForName.put(entry.getKey(), entry.getValue());
 		}
 	}
 
-	private void checkMetrics(JsonNode metrics, Check check) {
+	private void checkMetrics(Map<String, Map<MetricName, Metric>> metricsGroupedByName, Check check) {
 		List<CheckResult> checkResults = new LinkedList<CheckResult>();
 
-		Iterator<Map.Entry<String, JsonNode>> metricsOfCategory = metrics.get(check.getMetricCategory().getPath()).fields();
-		while (metricsOfCategory.hasNext()) {
-			Map.Entry<String, JsonNode> metricTypes = metricsOfCategory.next();
-			if (check.getTarget().matcher(metricTypes.getKey()).matches()) {
-				Map<String, Double> valuesByMetricType = getValuesByMetricType(metricTypes.getValue());
-				checkResults.addAll(check.check(metricTypes.getKey(), valuesByMetricType));
+		Map<MetricName, Metric> metricsOfName = metricsGroupedByName.get(check.getTarget().getName());
+		if (metricsOfName == null) {
+			metricsOfName = Collections.emptyMap();
+		}
+		for (Map.Entry<MetricName, Metric> entry : metricsOfName.entrySet()) {
+			if (entry.getKey().matches(check.getTarget())) {
+				try {
+					checkResults.addAll(check.check(entry.getKey(), asMap(entry.getValue())));
+				} catch (RuntimeException e) {
+					logger.warn(e.getMessage(), e);
+				}
 			}
 		}
 		try {
@@ -85,14 +97,8 @@ private void checkMetrics(JsonNode metrics, Check check) {
 		}
 	}
 
-	private Map<String, Double> getValuesByMetricType(JsonNode metricTypes) {
-		Map<String, Double> metricTypesMap = new HashMap<String, Double>();
-		final Iterator<Map.Entry<String, JsonNode>> fields = metricTypes.fields();
-		while (fields.hasNext()) {
-			Map.Entry<String, JsonNode> stringJsonNodeEntry = fields.next();
-			metricTypesMap.put(stringJsonNodeEntry.getKey(), stringJsonNodeEntry.getValue().asDouble());
-		}
-		return metricTypesMap;
+	private Map<String, Number> asMap(Metric metric) {
+		return JsonUtils.getMapper().convertValue(metric, Map.class);
 	}
 
 	private void addIncident(Check check, List<CheckResult> results) {
@@ -153,4 +159,56 @@ private boolean trySaveOrDeleteIncident(Check check, Incident incident) {
 		return true;
 	}
 
+	public static class ThresholdMonitoringReporterBuilder extends ScheduledMetrics2Reporter.Builder<ThresholdMonitoringReporter, ThresholdMonitoringReporterBuilder> {
+		private AlertSender alertSender;
+		private IncidentRepository incidentRepository;
+		private MeasurementSession measurementSession;
+		private AlertingPlugin alertingPlugin;
+
+		private ThresholdMonitoringReporterBuilder(Metric2Registry registry) {
+			super(registry, "threshold-monitoring-reporter");
+		}
+
+		@Override
+		public ThresholdMonitoringReporter build() {
+			return new ThresholdMonitoringReporter(this);
+		}
+
+		public AlertSender getAlertSender() {
+			return alertSender;
+		}
+
+		public ThresholdMonitoringReporterBuilder alertSender(AlertSender alertSender) {
+			this.alertSender = alertSender;
+			return this;
+		}
+
+		public IncidentRepository getIncidentRepository() {
+			return incidentRepository;
+		}
+
+		public ThresholdMonitoringReporterBuilder incidentRepository(IncidentRepository incidentRepository) {
+			this.incidentRepository = incidentRepository;
+			return this;
+		}
+
+		public MeasurementSession getMeasurementSession() {
+			return measurementSession;
+		}
+
+		public ThresholdMonitoringReporterBuilder measurementSession(MeasurementSession measurementSession) {
+			this.measurementSession = measurementSession;
+			return this;
+		}
+
+		public AlertingPlugin getAlertingPlugin() {
+			return alertingPlugin;
+		}
+
+		public ThresholdMonitoringReporterBuilder alertingPlugin(AlertingPlugin alertingPlugin) {
+			this.alertingPlugin = alertingPlugin;
+			return this;
+		}
+	}
+
 }
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/alerter/AlertSender.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/alerter/AlertSender.java
index d6d7c7cc45..a34653f96f 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/alerter/AlertSender.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/alerter/AlertSender.java
@@ -1,5 +1,7 @@
 package org.stagemonitor.alerting.alerter;
 
+import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -7,7 +9,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.ServiceLoader;
-import java.util.regex.Pattern;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -63,7 +64,7 @@ public Incident sendTestAlert(Subscription subscription, CheckResult.Status stat
 		Check check = new Check();
 		check.setName("Test Check");
 		check.setApplication("testApp");
-		check.setTarget(Pattern.compile("test"));
+		check.setTarget(name("test").build());
 		check.setMetricCategory(MetricCategory.TIMER);
 		check.getWarn().add(new Threshold("mean", Threshold.Operator.GREATER_EQUAL, 1));
 
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SLA.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SLA.java
index 948b1eb959..951b9cc3b3 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SLA.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SLA.java
@@ -6,6 +6,7 @@
 import java.lang.annotation.Target;
 
 import org.stagemonitor.alerting.check.CheckResult;
+import org.stagemonitor.alerting.check.ValueType;
 import org.stagemonitor.alerting.check.Threshold;
 import org.stagemonitor.requestmonitor.MonitorRequests;
 
@@ -32,7 +33,7 @@
 	 * <p/>
 	 * Make sure the number of metrics and thresholds match
 	 */
-	Metric[] metric() default {};
+	ValueType[] metric() default {};
 
 	/**
 	 * The thresholds for the metrics
@@ -54,20 +55,4 @@
 	 */
 	int alertAfterXFailures() default 1;
 
-	enum Metric {
-
-		COUNT("count"), MEAN("mean"), MIN("min"), MAX("max"), STDDEV("stddev"),
-		P50("p50"), P75("p75"), P95("p95"), P98("p98"), P99("p99"), P999("p999"),
-		MEAN_RATE("mean_rate"), M1_RATE("m1_rate"), M5_RATE("m5_rate"), M15_RATE("m15_rate");
-
-		private final String value;
-
-		Metric(String value) {
-			this.value = value;
-		}
-
-		public String getValue() {
-			return value;
-		}
-	}
 }
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScanner.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScanner.java
index 18324603a8..5a9ca8f69f 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScanner.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScanner.java
@@ -5,7 +5,6 @@
 import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.regex.Pattern;
 
 import com.codahale.metrics.annotation.ExceptionMetered;
 import com.codahale.metrics.annotation.Timed;
@@ -18,6 +17,7 @@
 import org.stagemonitor.alerting.check.Check;
 import org.stagemonitor.alerting.check.MetricCategory;
 import org.stagemonitor.alerting.check.Threshold;
+import org.stagemonitor.alerting.check.ValueType;
 import org.stagemonitor.core.MeasurementSession;
 import org.stagemonitor.core.instrument.AbstractClassPathScanner;
 import org.stagemonitor.core.metrics.annotations.ExceptionMeteredTransformer;
@@ -108,9 +108,9 @@ private static void createSlaCheck(SLA slaAnnotation, String fullMethodSignature
 	}
 
 	private static void addResponseTimeCheck(SLA slaAnnotation, String fullMethodSignature, TimerNames timerNames) {
-		SLA.Metric[] metrics = slaAnnotation.metric();
+		ValueType[] valueTypes = slaAnnotation.metric();
 		double[] thresholdValues = slaAnnotation.threshold();
-		if (metrics.length != thresholdValues.length) {
+		if (valueTypes.length != thresholdValues.length) {
 			logger.warn("The number of provided metrics don't match the number of provided thresholds in @SLA {}", fullMethodSignature);
 			return;
 		}
@@ -124,8 +124,8 @@ private static void addResponseTimeCheck(SLA slaAnnotation, String fullMethodSig
 				timerNames.timerMetricName, " (response time)", "responseTime");
 
 		final List<Threshold> thresholds = check.getThresholds(slaAnnotation.severity());
-		for (int i = 0; i < metrics.length; i++) {
-			thresholds.add(new Threshold(metrics[i].getValue(), slaAnnotation.operator(), thresholdValues[i]));
+		for (int i = 0; i < valueTypes.length; i++) {
+			thresholds.add(new Threshold(valueTypes[i].getName(), slaAnnotation.operator(), thresholdValues[i]));
 		}
 
 		addCheckIfStarted(check);
@@ -138,7 +138,7 @@ private static void addErrorRateCheck(SLA slaAnnotation, String fullMethodSignat
 			return;
 		}
 		final Check check = createCheck(slaAnnotation, fullMethodSignature, timerNames.errorRequestName, MetricCategory.METER, timerNames.errorMetricName, " (errors)", "errors");
-		final Threshold t = new Threshold(SLA.Metric.M1_RATE.getValue(), Threshold.Operator.GREATER_EQUAL, slaAnnotation.errorRateThreshold());
+		final Threshold t = new Threshold(ValueType.M1_RATE.getName(), Threshold.Operator.GREATER_EQUAL, slaAnnotation.errorRateThreshold());
 		check.getThresholds(slaAnnotation.severity()).add(t);
 		addCheckIfStarted(check);
 	}
@@ -149,7 +149,7 @@ private static Check createCheck(SLA slaAnnotation, String fullMethodSignature,
 		check.setId(fullMethodSignature + "." + checkIdSuffix);
 		check.setName(requestName + checkNameSuffix);
 		check.setMetricCategory(metricCategory);
-		check.setTarget(Pattern.compile(Pattern.quote(metricName.toGraphiteName())));
+		check.setTarget(metricName);
 		check.setAlertAfterXFailures(slaAnnotation.alertAfterXFailures());
 		return check;
 	}
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Check.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Check.java
index 20e8280fb7..16355807de 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Check.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Check.java
@@ -10,9 +10,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
-import java.util.regex.Pattern;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
+import org.stagemonitor.core.metrics.metrics2.MetricName;
 
 /**
  * A {@link Check} is a named collection of {@link Threshold}s with the same {@link MetricCategory} and target.
@@ -27,7 +27,7 @@
 	private String id = UUID.randomUUID().toString();
 	private String name;
 	private MetricCategory metricCategory;
-	private Pattern target;
+	private MetricName target;
 	private int alertAfterXFailures = 1;
 	private Map<CheckResult.Status, List<Threshold>> thresholds = new LinkedHashMap<CheckResult.Status, List<Threshold>>(){{
 		put(CheckResult.Status.CRITICAL, new LinkedList<Threshold>());
@@ -44,7 +44,7 @@
 	 * @param actualTarget the actual target that matched the {@link #target} pattern
 	 * @return a list of check results (results with OK statuses are omitted)
 	 */
-	public List<CheckResult> check(String actualTarget, Map<String, Double> currentValuesByMetric) {
+	public List<CheckResult> check(MetricName actualTarget, Map<String, Number> currentValuesByMetric) {
 		for (Map.Entry<CheckResult.Status, List<Threshold>> entry : thresholds.entrySet()) {
 			List<CheckResult> results = checkThresholds(entry.getValue(), entry.getKey(), actualTarget, currentValuesByMetric);
 			if (!results.isEmpty()) {
@@ -55,7 +55,7 @@
 	}
 
 	private List<CheckResult> checkThresholds(List<Threshold> thresholds, CheckResult.Status severity,
-											  String actualTarget, Map<String, Double> currentValuesByMetric) {
+											  MetricName actualTarget, Map<String, Number> currentValuesByMetric) {
 		List<CheckResult> results = new ArrayList<CheckResult>(thresholds.size());
 		for (Threshold threshold : thresholds) {
 			CheckResult result = threshold.check(severity, actualTarget, currentValuesByMetric);
@@ -82,11 +82,11 @@ public void setName(String name) {
 		this.name = name;
 	}
 
-	public Pattern getTarget() {
+	public MetricName getTarget() {
 		return target;
 	}
 
-	public void setTarget(Pattern target) {
+	public void setTarget(MetricName target) {
 		this.target = target;
 	}
 
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Threshold.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Threshold.java
index b898bebbb5..1d5ab821f1 100755
--- a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Threshold.java
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/Threshold.java
@@ -4,22 +4,24 @@
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonProperty;
+import org.stagemonitor.core.metrics.metrics2.InfluxDbReporter;
+import org.stagemonitor.core.metrics.metrics2.MetricName;
 
 /**
  * Represents a threshold to check
  */
 public class Threshold {
 
-	private final String metric;
+	private final ValueType valueType;
 	private final Operator operator;
 	private final double thresholdValue;
 
 	@JsonCreator
-	public Threshold(@JsonProperty("metric") String metric, @JsonProperty("operator") Operator operator, @JsonProperty("thresholdValue") double thresholdValue) {
+	public Threshold(@JsonProperty("valueType") String metric, @JsonProperty("operator") Operator operator, @JsonProperty("thresholdValue") double thresholdValue) {
 		if (operator == null) {
 			throw new IllegalArgumentException("Operator may not be null");
 		}
-		this.metric = metric;
+		this.valueType = ValueType.valueOf(metric.toUpperCase());
 		this.operator = operator;
 		this.thresholdValue = thresholdValue;
 	}
@@ -42,20 +44,20 @@ public double getThresholdValue() {
 		return thresholdValue;
 	}
 
-	public String getMetric() {
-		return metric;
+	public ValueType getValueType() {
+		return valueType;
 	}
 
 	public String toString() {
-		return metric + " " + operator.operatorString + " " + thresholdValue;
+		return valueType.getName() + " " + operator.operatorString + " " + thresholdValue;
 	}
 
-	public String getCheckExpressionAsString(String target) {
-		return target + '.' + metric + " " + operator.operatorString + " " + thresholdValue;
+	public String getCheckExpressionAsString(MetricName target) {
+		return InfluxDbReporter.getInfluxDbLineProtocolString(target) + ' ' + valueType.getName() + " " + operator.operatorString + " " + thresholdValue;
 	}
 
-	public CheckResult check(CheckResult.Status severity, String target, Map<String, Double> currentValuesByMetric) {
-		Double actualValue = currentValuesByMetric.get(metric);
+	public CheckResult check(CheckResult.Status severity, MetricName target, Map<String, Number> currentValuesByMetric) {
+		double actualValue = currentValuesByMetric.get(valueType.getName()).doubleValue();
 		if (isExceeded(actualValue)) {
 			return new CheckResult(getCheckExpressionAsString(target), actualValue, severity);
 		}
@@ -66,7 +68,8 @@ public CheckResult check(CheckResult.Status severity, String target, Map<String,
 	 * Represents a boolean operator that can be used to check whether the expression
 	 * <code>actualValue OPERATOR thresholdValue</code> is true or false
 	 */
-	public static enum Operator {
+	// TODO invert operators?
+	public enum Operator {
 
 		LESS("<") {
 			@Override
diff --git a/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/ValueType.java b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/ValueType.java
new file mode 100755
index 0000000000..3e94b3d440
--- /dev/null
+++ b/stagemonitor-alerting/src/main/java/org/stagemonitor/alerting/check/ValueType.java
@@ -0,0 +1,32 @@
+package org.stagemonitor.alerting.check;
+
+public enum ValueType {
+
+	COUNT("count"),
+	MEAN("mean"),
+	MIN("min"),
+	MAX("max"),
+	STDDEV("stddev"),
+	P50("p50"),
+	P75("p75"),
+	P95("p95"),
+	P98("p98"),
+	P99("p99"),
+	P999("p999"),
+	MEAN_RATE("mean_rate"),
+	M1_RATE("m1_rate"),
+	M5_RATE("m5_rate"),
+	M15_RATE("m15_rate"),
+	VALUE("value");
+
+	private final String value;
+
+	ValueType(String value) {
+		this.value = value;
+	}
+
+	public String getName() {
+		return value;
+	}
+
+}
diff --git a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/CheckTest.java b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/CheckTest.java
index b25c6f0ffc..e07e2c9497 100755
--- a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/CheckTest.java
+++ b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/CheckTest.java
@@ -2,9 +2,9 @@
 
 import static java.util.Collections.singletonMap;
 import static org.junit.Assert.assertEquals;
+import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
 
 import java.util.Collections;
-import java.util.regex.Pattern;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -12,6 +12,7 @@
 import org.stagemonitor.alerting.check.CheckResult;
 import org.stagemonitor.alerting.check.MetricCategory;
 import org.stagemonitor.alerting.check.Threshold;
+import org.stagemonitor.alerting.check.ValueType;
 import org.stagemonitor.core.util.JsonUtils;
 
 public class CheckTest {
@@ -28,29 +29,29 @@ public void setUp() {
 
 	@Test
 	public void testCheckOK() throws Exception {
-		assertEquals(0, check.check("test", singletonMap("value", 0d)).size());
+		assertEquals(0, check.check(name("test").build(), singletonMap("value", 0d)).size());
 	}
 
 	@Test
 	public void testCheckWarn() throws Exception {
-		CheckResult result = check.check("test", singletonMap("value", 1.5)).iterator().next();
-		assertEquals("test.value > 1.0", result.getFailingExpression());
+		CheckResult result = check.check(name("test").build(), singletonMap("value", 1.5)).iterator().next();
+		assertEquals("test value > 1.0", result.getFailingExpression());
 		assertEquals(1.5, result.getCurrentValue(), 0);
 		assertEquals(CheckResult.Status.WARN, result.getStatus());
 	}
 
 	@Test
 	public void testCheckError() throws Exception {
-		CheckResult result = check.check("test", singletonMap("value", 2.5)).iterator().next();
-		assertEquals("test.value > 2.0", result.getFailingExpression());
+		CheckResult result = check.check(name("test").build(), singletonMap("value", 2.5)).iterator().next();
+		assertEquals("test value > 2.0", result.getFailingExpression());
 		assertEquals(2.5, result.getCurrentValue(), 0);
 		assertEquals(CheckResult.Status.ERROR, result.getStatus());
 	}
 
 	@Test
 	public void testCheckCritical() throws Exception {
-		CheckResult result = check.check("test", singletonMap("value", 3.5)).iterator().next();
-		assertEquals("test.value > 3.0", result.getFailingExpression());
+		CheckResult result = check.check(name("test").build(), singletonMap("value", 3.5)).iterator().next();
+		assertEquals("test value > 3.0", result.getFailingExpression());
 		assertEquals(3.5, result.getCurrentValue(), 0);
 		assertEquals(CheckResult.Status.CRITICAL, result.getStatus());
 	}
@@ -64,7 +65,7 @@ public void testGetMostSevereStatus() {
 	public void testJson() throws Exception {
 		Check check = new Check();
 		check.setName("Test Timer");
-		check.setTarget(Pattern.compile("test.timer.*"));
+		check.setTarget(name("timer").tag("foo", "bar").tag("qux", "quux").build());
 		check.setMetricCategory(MetricCategory.TIMER);
 		check.setAlertAfterXFailures(2);
 		check.getWarn().add(new Threshold("mean", Threshold.Operator.GREATER_EQUAL, 3));
@@ -72,11 +73,11 @@ public void testJson() throws Exception {
 		final String json = JsonUtils.toJson(check);
 		final Check checkFromJson = JsonUtils.getMapper().readValue(json, Check.class);
 		assertEquals("Test Timer", checkFromJson.getName());
-		assertEquals("test.timer.*", checkFromJson.getTarget().toString());
+		assertEquals(name("timer").tag("foo", "bar").tag("qux", "quux").build(), checkFromJson.getTarget());
 		assertEquals(MetricCategory.TIMER, checkFromJson.getMetricCategory());
 		assertEquals(2, checkFromJson.getAlertAfterXFailures());
 		assertEquals(1, checkFromJson.getWarn().size());
-		assertEquals("mean", checkFromJson.getWarn().get(0).getMetric());
+		assertEquals(ValueType.MEAN, checkFromJson.getWarn().get(0).getValueType());
 		assertEquals(Threshold.Operator.GREATER_EQUAL, checkFromJson.getWarn().get(0).getOperator());
 		assertEquals(3, checkFromJson.getWarn().get(0).getThresholdValue(), 0);
 		assertEquals(0, checkFromJson.getError().size());
diff --git a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/ThresholdMonitoringReporterTest.java b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/ThresholdMonitoringReporterTest.java
index 2e5259cbcc..a24868dcdc 100755
--- a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/ThresholdMonitoringReporterTest.java
+++ b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/ThresholdMonitoringReporterTest.java
@@ -11,20 +11,16 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.stagemonitor.core.metrics.MetricsReporterTestHelper.timer;
+import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
 
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
-import java.util.SortedMap;
-import java.util.TreeMap;
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
-import java.util.regex.Pattern;
 
-import com.codahale.metrics.Counter;
-import com.codahale.metrics.Gauge;
-import com.codahale.metrics.Histogram;
-import com.codahale.metrics.Meter;
 import com.codahale.metrics.Timer;
 import org.junit.Before;
 import org.junit.Test;
@@ -44,6 +40,7 @@
 import org.stagemonitor.core.MeasurementSession;
 import org.stagemonitor.core.configuration.Configuration;
 import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
+import org.stagemonitor.core.metrics.metrics2.MetricName;
 import org.stagemonitor.core.util.JsonUtils;
 
 public class ThresholdMonitoringReporterTest {
@@ -73,8 +70,12 @@ public void setUp() throws Exception {
 		AlertSender alertSender = new AlertSender(configuration, Collections.singletonList(alerter));
 
 		incidentRepository = spy(new ConcurrentMapIncidentRepository(new ConcurrentHashMap<String, Incident>()));
-		thresholdMonitoringReporter = new ThresholdMonitoringReporter(new Metric2Registry(), alertingPlugin,
-				alertSender, incidentRepository, measurementSession);
+		thresholdMonitoringReporter = ThresholdMonitoringReporter.forRegistry(new Metric2Registry())
+				.alertingPlugin(alertingPlugin)
+				.alertSender(alertSender)
+				.incidentRepository(incidentRepository)
+				.measurementSession(measurementSession)
+				.build();
 	}
 
 	@Test
@@ -98,8 +99,8 @@ public void testAlerting() throws Exception {
 		assertEquals(2, checkResults.size());
 
 		CheckResult result = checkResults.get(0);
-		assertEquals("test.timer1.mean >= 5.0", result.getFailingExpression());
-		assertEquals(5.0, result.getCurrentValue(), 0);
+		assertEquals("test_timer,signature=timer3 mean >= 5.0", result.getFailingExpression());
+		assertEquals(6.0, result.getCurrentValue(), 0);
 		assertEquals(CheckResult.Status.WARN, result.getStatus());
 	}
 
@@ -216,7 +217,7 @@ public static Check createCheckCheckingMean(int alertAfterXFailures, long meanMs
 		Check check = new Check();
 		check.setName("Test Timer");
 		check.setApplication("testApp");
-		check.setTarget(Pattern.compile("test.timer.*"));
+		check.setTarget(name("test_timer").build());
 		check.setMetricCategory(MetricCategory.TIMER);
 		check.setAlertAfterXFailures(alertAfterXFailures);
 		check.getWarn().add(new Threshold("mean", Threshold.Operator.GREATER_EQUAL, meanMs));
@@ -228,16 +229,16 @@ private void checkMetrics() {
 	}
 
 	private void checkMetrics(long timer1Mean, long timer2Mean, long timer3Mean) {
-		final SortedMap<String, Timer> timers = new TreeMap<String, Timer>();
-		timers.put("test.timer1", timer(TimeUnit.MILLISECONDS.toNanos(timer1Mean)));
-		timers.put("test.timer2", timer(TimeUnit.MILLISECONDS.toNanos(timer2Mean)));
-		timers.put("test.timer3", timer(TimeUnit.MILLISECONDS.toNanos(timer3Mean)));
-		timers.put("test.some.other.timer", timer(TimeUnit.MILLISECONDS.toNanos(999)));
-		thresholdMonitoringReporter.report(
-				new TreeMap<String, Gauge>(),
-				new TreeMap<String, Counter>(),
-				new TreeMap<String, Histogram>(),
-				new TreeMap<String, Meter>(),
+		final Map<MetricName, Timer> timers = new HashMap<>();
+		timers.put(name("test_timer").tag("signature", "timer1").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer1Mean)));
+		timers.put(name("test_timer").tag("signature", "timer2").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer2Mean)));
+		timers.put(name("test_timer").tag("signature", "timer3").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer3Mean)));
+		timers.put(name("test_other_timer").tag("signature", "timer4").build(), timer(TimeUnit.MILLISECONDS.toNanos(999)));
+		thresholdMonitoringReporter.reportMetrics(
+				new HashMap<>(),
+				new HashMap<>(),
+				new HashMap<>(),
+				new HashMap<>(),
 				timers
 		);
 	}
diff --git a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScannerTest.java b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScannerTest.java
index 11ffd0c739..df0e784990 100755
--- a/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScannerTest.java
+++ b/stagemonitor-alerting/src/test/java/org/stagemonitor/alerting/annotation/SlaCheckCreatingClassPathScannerTest.java
@@ -3,6 +3,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
 
 import java.util.List;
 import java.util.Map;
@@ -16,10 +17,12 @@
 import org.stagemonitor.alerting.AlertingPlugin;
 import org.stagemonitor.alerting.check.Check;
 import org.stagemonitor.alerting.check.CheckResult;
+import org.stagemonitor.alerting.check.ValueType;
 import org.stagemonitor.alerting.check.MetricCategory;
 import org.stagemonitor.alerting.check.Threshold;
 import org.stagemonitor.alerting.incident.Incident;
 import org.stagemonitor.core.Stagemonitor;
+import org.stagemonitor.core.metrics.metrics2.MetricName;
 import org.stagemonitor.requestmonitor.MonitorRequests;
 
 public class SlaCheckCreatingClassPathScannerTest {
@@ -29,7 +32,7 @@
 
 	private static class SlaTestClass {
 		@SLAs({
-				@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0}),
+				@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0}),
 				@SLA(errorRateThreshold = 0)
 		})
 		@MonitorRequests
@@ -42,27 +45,27 @@ void monitorRequestsAnnotationMissing() {
 		}
 
 		@MonitorRequests
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = 0)
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = 0)
 		void tooFewThresholds() {
 		}
 
 		@MonitorRequests(resolveNameAtRuntime = true)
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0})
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0})
 		void slaMonitorRequestsResolveAtRuntime() {
 		}
 
 		@MonitorRequests(requestName = "monitor requests custom name")
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0})
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0})
 		void slaMonitorRequestsCustomName() {
 		}
 
 		@Timed(name = "timed custom name", absolute = true)
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0})
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0})
 		void slaTimedCustomName() {
 		}
 
 		@Timed
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0})
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0})
 		void slaOnTimed() {
 		}
 
@@ -97,33 +100,33 @@ public void setUp() throws Exception {
 	@Test
 	public void testSlaMonitorRequests() throws Exception {
 		testErrorRateCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.monitorSla().errors",
-				"\\Qerror_rate_server.Monitor-Sla.All\\E");
+				name("error_rate_server").tag("request_name", "Monitor Sla").layer("All").build());
 
 		testResponseTimeCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.monitorSla().responseTime",
-				"\\Qresponse_time_server.Monitor-Sla.All\\E");
+				name("response_time_server").tag("request_name", "Monitor Sla").layer("All").build());
 	}
 
-	private void testErrorRateCheck(String checkId, String checkTargetRegex) {
+	private void testErrorRateCheck(String checkId, MetricName checkTarget) {
 		final Check errorRateCheck = checks.get(checkId);
 		assertNotNull(checks.keySet().toString(), errorRateCheck);
 		assertEquals("Alerting-Test", errorRateCheck.getApplication());
 		assertEquals(MetricCategory.METER, errorRateCheck.getMetricCategory());
-		assertEquals(checkTargetRegex, errorRateCheck.getTarget().toString());
+		assertEquals(checkTarget, errorRateCheck.getTarget());
 	}
 
-	private void testResponseTimeCheck(String checkId, String checkTargetRegex) {
+	private void testResponseTimeCheck(String checkId, MetricName checkTarget) {
 		final Check responseTimeChek = checks.get(checkId);
 		assertNotNull(checks.keySet().toString(), responseTimeChek);
 		assertEquals("Alerting-Test", responseTimeChek.getApplication());
 		assertEquals(MetricCategory.TIMER, responseTimeChek.getMetricCategory());
-		assertEquals(checkTargetRegex, responseTimeChek.getTarget().toString());
+		assertEquals(checkTarget, responseTimeChek.getTarget());
 		final List<Threshold> thresholds = responseTimeChek.getThresholds(CheckResult.Status.ERROR);
 		final Threshold p95 = thresholds.get(0);
-		assertEquals("p95", p95.getMetric());
+		assertEquals(ValueType.P95, p95.getValueType());
 		assertEquals(Threshold.Operator.GREATER_EQUAL, p95.getOperator());
 		assertEquals(0, p95.getThresholdValue(), 0);
 		final Threshold max = thresholds.get(1);
-		assertEquals("max", max.getMetric());
+		assertEquals(ValueType.MAX, max.getValueType());
 		assertEquals(Threshold.Operator.GREATER_EQUAL, max.getOperator());
 		assertEquals(0, max.getThresholdValue(), 0);
 	}
@@ -131,25 +134,25 @@ private void testResponseTimeCheck(String checkId, String checkTargetRegex) {
 	@Test
 	public void testSlaCustomName() throws Exception {
 		testResponseTimeCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.slaMonitorRequestsCustomName().responseTime",
-				"\\Qresponse_time_server.monitor-requests-custom-name.All\\E");
+				name("response_time_server").tag("request_name", "monitor requests custom name").layer("All").build());
 	}
 
 	@Test
 	public void testTimedCustomName() throws Exception {
 		testResponseTimeCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.slaTimedCustomName().responseTime",
-				"\\Qtimer.timed-custom-name\\E");
+				name("timer").tag("signature", "timed custom name").build());
 	}
 
 	@Test
 	public void testSlaTimed() throws Exception {
 		testResponseTimeCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.slaOnTimed().responseTime",
-				"\\Qtimer.SlaCheckCreatingClassPathScannerTest$SlaTestClass#slaOnTimed\\E");
+				name("timer").tag("signature", "SlaCheckCreatingClassPathScannerTest$SlaTestClass#slaOnTimed").build());
 	}
 
 	@Test
 	public void testSlaExceptionMetered() throws Exception {
 		testErrorRateCheck("void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$SlaTestClass.slaOnExceptionMetered().errors",
-				"\\Qexception_rate.SlaCheckCreatingClassPathScannerTest$SlaTestClass#slaOnExceptionMetered\\E");
+				name("exception_rate").tag("signature", "SlaCheckCreatingClassPathScannerTest$SlaTestClass#slaOnExceptionMetered").build());
 	}
 
 	@Test
@@ -165,14 +168,14 @@ public void testSlaMonitorRequestsResolveAtRuntime() throws Exception {
 	@Test
 	public void testSlaMonitorRequestsClassLevel() throws Exception {
 		testResponseTimeCheck("public void org.stagemonitor.alerting.annotation.SlaCheckCreatingClassPathScannerTest$ClassLevelMonitorRequestsTestClass.slaMonitorRequestsClassLevel().responseTime",
-				"\\Qresponse_time_server.Sla-Monitor-Requests-Class-Level.All\\E");
+				name("response_time_server").tag("request_name", "Sla Monitor Requests Class Level").layer("All").build());
 	}
 
 	@MonitorRequests
 	private static class ClassLevelMonitorRequestsTestClass {
 		static void makeSureClassIsLoaded() {
 		}
-		@SLA(metric = {SLA.Metric.P95, SLA.Metric.MAX}, threshold = {0, 0})
+		@SLA(metric = {ValueType.P95, ValueType.MAX}, threshold = {0, 0})
 		public void slaMonitorRequestsClassLevel() {
 		}
 	}
diff --git a/stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/MetricName.java b/stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/MetricName.java
index 8e6f01bede..ef15e80f71 100755
--- a/stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/MetricName.java
+++ b/stagemonitor-core/src/main/java/org/stagemonitor/core/metrics/metrics2/MetricName.java
@@ -1,11 +1,15 @@
 package org.stagemonitor.core.metrics.metrics2;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import org.stagemonitor.core.util.GraphiteSanitizer;
 
 /**
@@ -25,11 +29,14 @@
  */
 public class MetricName {
 
+	@JsonIgnore
 	private int hashCode;
 
 	private final String name;
 
+	@JsonIgnore
 	private final List<String> tagKeys;
+	@JsonIgnore
 	private final List<String> tagValues;
 
 	private MetricName(String name, List<String> tagKeys, List<String> tagValues) {
@@ -38,6 +45,17 @@ private MetricName(String name, List<String> tagKeys, List<String> tagValues) {
 		this.tagValues = Collections.unmodifiableList(tagValues);
 	}
 
+	@JsonCreator
+	private MetricName(@JsonProperty("name") String name, @JsonProperty("tags") Map<String, String> tags) {
+		this.name = name;
+		tagKeys = new ArrayList<String>(tags.size());
+		tagValues = new ArrayList<String>(tags.size());
+		for (Map.Entry<String, String> entry : tags.entrySet()) {
+			tagKeys.add(entry.getKey());
+			tagValues.add(entry.getValue());
+		}
+	}
+
 	/**
 	 * Returns a copy of this name and appends a single tag
 	 * <p/>
@@ -76,6 +94,7 @@ public String getName() {
 		return name;
 	}
 
+	@JsonProperty
 	public Map<String, String> getTags() {
 		final Map<String, String> tags = new LinkedHashMap<String, String>();
 		for (int i = 0; i < tagKeys.size(); i++) {
@@ -116,9 +135,8 @@ public boolean equals(Object o) {
 		MetricName that = (MetricName) o;
 
 		if (!name.equals(that.name)) return false;
-		if (!tagKeys.equals(that.tagKeys)) return false;
-		return tagValues.equals(that.tagValues);
-
+		if (tagKeys.size() != that.tagKeys.size()) return false;
+		return containsAllTags(that);
 	}
 
 	@Override
@@ -126,24 +144,38 @@ public int hashCode() {
 		int result = hashCode;
 		if (result == 0) {
 			result = name.hashCode();
-			result = 31 * result + tagKeys.hashCode();
-			result = 31 * result + tagValues.hashCode();
+			result = 31 * result + hashCodeUnordered(tagKeys);
+			result = 31 * result + hashCodeUnordered(tagValues);
 			hashCode = result;
 		}
 		return result;
 	}
 
+	/**
+	 * Calculates the hashcode of a collection.
+	 * <p/>
+	 * Returns the same hash code for two collections with the same elements but a different order.
+	 * @param collection
+	 * @param <T>
+	 * @return
+	 */
+	private static <T> int hashCodeUnordered(Collection<T> collection) {
+		int hashCode = 1;
+		for (T e : collection)
+			hashCode = hashCode + (e==null ? 0 : e.hashCode());
+		return hashCode;
+	}
+
 	public boolean matches(MetricName other) {
-		if (name.equals(other.name)) {
-			return containsAllTags(other.getTags());
-		} else {
-			return false;
-		}
+		return name.equals(other.name) && containsAllTags(other);
 	}
 
-	private boolean containsAllTags(Map<String, String> tags) {
-		for (Map.Entry<String, String> entry : tags.entrySet()) {
-			if (!entry.getValue().equals(this.getTags().get(entry.getKey()))) {
+	private boolean containsAllTags(MetricName other) {
+		List<String> otherTagKeys = other.getTagKeys();
+		for (int i = 0; i < otherTagKeys.size(); i++) {
+			String key = otherTagKeys.get(i);
+			final int index = tagKeys.indexOf(key);
+			if (index == -1 || !other.tagValues.get(i).equals(tagValues.get(index))) {
 				return false;
 			}
 		}
diff --git a/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/MetricNameTest.java b/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/MetricNameTest.java
index 0abba6ba3f..c19840b7a6 100755
--- a/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/MetricNameTest.java
+++ b/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/MetricNameTest.java
@@ -1,7 +1,6 @@
 package org.stagemonitor.core.metrics.metrics2;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
 import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
 
 import org.junit.Test;
@@ -11,6 +10,12 @@
 	@Test
 	public void testEquals() {
 		assertEquals(name("foo").tag("bar", "baz").tag("qux", "quux").build(), name("foo").tag("bar", "baz").tag("qux", "quux").build());
-		assertNotEquals(name("foo").tag("qux", "quux").tag("bar", "baz").build(), name("foo").tag("bar", "baz").tag("qux", "quux").build());
+		assertEquals(name("foo").tag("qux", "quux").tag("bar", "baz").build(), name("foo").tag("bar", "baz").tag("qux", "quux").build());
+	}
+
+	@Test
+	public void testHashCode() {
+		assertEquals(name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode(), name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode());
+		assertEquals(name("foo").tag("qux", "quux").tag("bar", "baz").build().hashCode(), name("foo").tag("bar", "baz").tag("qux", "quux").build().hashCode());
 	}
 }
\ No newline at end of file
diff --git a/stagemonitor-web/src/test/java/org/stagemonitor/web/metrics/StagemonitorMetricsServletTest.java b/stagemonitor-web/src/test/java/org/stagemonitor/web/metrics/StagemonitorMetricsServletTest.java
index 729224b514..324497aff2 100755
--- a/stagemonitor-web/src/test/java/org/stagemonitor/web/metrics/StagemonitorMetricsServletTest.java
+++ b/stagemonitor-web/src/test/java/org/stagemonitor/web/metrics/StagemonitorMetricsServletTest.java
@@ -49,8 +49,8 @@ public void getMeter() throws Exception {
 		registry.meter(name("foo").tag("bar", "baz").build()).mark();
 		final MockHttpServletResponse resp = new MockHttpServletResponse();
 		servlet.doGet(new MockHttpServletRequest(), resp);
-		final double m1_rate = JsonUtils.getMapper().readTree(resp.getContentAsString()).get(0).get("m1_rate").doubleValue();
-		assertTrue("Expected m1 rate of > 0, but got " + m1_rate, m1_rate > 0);
+		final double mean_rate = JsonUtils.getMapper().readTree(resp.getContentAsString()).get(0).get("mean_rate").doubleValue();
+		assertTrue("Expected m1 rate of > 0, but got " + mean_rate, mean_rate > 0);
 	}
 
 }
\ No newline at end of file
