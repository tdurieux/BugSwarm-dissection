diff --git a/checkstyle-suppressions.xml b/checkstyle-suppressions.xml
index f609d3dac7..3c023625b6 100755
--- a/checkstyle-suppressions.xml
+++ b/checkstyle-suppressions.xml
@@ -15,9 +15,8 @@ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->
-
 <!DOCTYPE suppressions PUBLIC "-//Puppy Crawl//DTD Suppressions 1.1//EN" "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
 <suppressions>
-    <suppress checks="JavadocMethod" files=".*/test/.*"/>
-    <suppress checks="JavadocPackage" files=".*/test/.*"/>
+    <suppress checks="JavadocMethod" files=".*[/\\]test[/\\].*"/>
+    <suppress checks="JavadocPackage" files=".*[/\\]test[/\\].*"/>
 </suppressions>
diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
index 4635a54aa2..91c0451fe1 100755
--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
@@ -297,25 +297,24 @@ public void testIndexOf_charInt() {
         
         //LANG-1300 tests go here
         final int CODE_POINT = 0x2070E;
-    	StringBuilder builder = new StringBuilder();
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(0, StringUtils.indexOf(builder, CODE_POINT, 0));
-    	assertEquals(0, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(2, StringUtils.indexOf(builder, CODE_POINT, 1));
-    	assertEquals(2, StringUtils.indexOf(builder.toString(), CODE_POINT, 1));
-    	//inner branch on the supplementary character block
-    	char[] tmp = {(char) 55361};
-    	builder = new StringBuilder();
-    	builder.append(tmp);
-    	assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 0));
-    	assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(1, StringUtils.indexOf(builder, CODE_POINT, 0));
-    	assertEquals(1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
-    	assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 2));
+        StringBuilder builder = new StringBuilder();
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(0, StringUtils.indexOf(builder, CODE_POINT, 0));
+        assertEquals(0, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(2, StringUtils.indexOf(builder, CODE_POINT, 1));
+        assertEquals(2, StringUtils.indexOf(builder.toString(), CODE_POINT, 1));
+        // inner branch on the supplementary character block
+        char[] tmp = { (char) 55361 };
+        builder = new StringBuilder();
+        builder.append(tmp);
+        assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 0));
+        assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(1, StringUtils.indexOf(builder, CODE_POINT, 0));
+        assertEquals(1, StringUtils.indexOf(builder.toString(), CODE_POINT, 0));
+        assertEquals(-1, StringUtils.indexOf(builder, CODE_POINT, 2));
         assertEquals(-1, StringUtils.indexOf(builder.toString(), CODE_POINT, 2));
-        
     }
 
     @Test
@@ -453,7 +452,6 @@ public void testIndexOfAnyBut_StringCharArray() {
         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", 'b','y'));
         assertEquals(-1, StringUtils.indexOfAnyBut("aba", 'a', 'b'));
         assertEquals(0, StringUtils.indexOfAnyBut("aba", 'z'));
-
     }
 
     @Test
@@ -550,30 +548,26 @@ public void testLastIndexOf_charInt() {
         
         //LANG-1300 addition test
         final int CODE_POINT = 0x2070E;
-    	StringBuilder builder = new StringBuilder();
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
-    	assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 1));
+        StringBuilder builder = new StringBuilder();
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
+        assertEquals(0, StringUtils.lastIndexOf(builder, CODE_POINT, 1));
         assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 2));
 
-
-
-    	builder.append("aaaaa");
-    	assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 4));
-    	//inner branch on the supplementary character block
-    	char[] tmp = {(char) 55361};
-    	builder = new StringBuilder();
-    	builder.append(tmp);
-    	assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
-    	builder.appendCodePoint(CODE_POINT);
-    	assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0 ));
+        builder.append("aaaaa");
+        assertEquals(2, StringUtils.lastIndexOf(builder, CODE_POINT, 4));
+        // inner branch on the supplementary character block
+        char[] tmp = { (char) 55361 };
+        builder = new StringBuilder();
+        builder.append(tmp);
+        assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
+        builder.appendCodePoint(CODE_POINT);
+        assertEquals(-1, StringUtils.lastIndexOf(builder, CODE_POINT, 0));
         assertEquals(1, StringUtils.lastIndexOf(builder, CODE_POINT, 1 ));
         assertEquals(-1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 0));
         assertEquals(1, StringUtils.lastIndexOf(builder.toString(), CODE_POINT, 1));
-
-
     }
 
     @Test
@@ -786,9 +780,8 @@ public void testOrdinalIndexOf() {
         assertEquals(2, StringUtils.ordinalIndexOf("abababab", "abab", 2));
         assertEquals(4, StringUtils.ordinalIndexOf("abababab", "abab", 3));
         assertEquals(-1, StringUtils.ordinalIndexOf("abababab", "abab", 4));
-
     }
-    
+
     @Test
     public void testLANG1193() {
         assertEquals(0, StringUtils.ordinalIndexOf("abc", "ab", 1));        
