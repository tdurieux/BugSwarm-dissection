diff --git a/src/main/java/bammerbom/ultimatecore/sponge/config/datafiles/PlayerDataFile.java b/src/main/java/bammerbom/ultimatecore/sponge/config/datafiles/PlayerDataFile.java
new file mode 100755
index 0000000000..fc15f64359
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/config/datafiles/PlayerDataFile.java
@@ -0,0 +1,61 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.config.datafiles;
+
+import bammerbom.ultimatecore.sponge.UltimateCore;
+import ninja.leaping.configurate.commented.CommentedConfigurationNode;
+import ninja.leaping.configurate.hocon.HoconConfigurationLoader;
+import ninja.leaping.configurate.loader.ConfigurationLoader;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.UUID;
+
+public class PlayerDataFile {
+    private static File path = new File(UltimateCore.get().getDataFolder().toFile().getPath() + "/playerdata");
+
+    public static ConfigurationLoader<CommentedConfigurationNode> getLoader(UUID uuid) {
+        if (!path.exists()) {
+            path.mkdirs();
+        }
+        File file = new File(path, uuid.toString() + ".data");
+        try {
+            if (!file.exists()) {
+                file.createNewFile();
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return HoconConfigurationLoader.builder().setFile(file).build();
+    }
+
+    public static CommentedConfigurationNode get(UUID uuid) {
+        try {
+            return getLoader(uuid).load();
+        } catch (IOException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }
+}
