diff --git a/pychron/dvc/tasks/__init__.py b/pychron/dvc/tasks/__init__.py
index 9671591067..f04b9da848 100755
--- a/pychron/dvc/tasks/__init__.py
+++ b/pychron/dvc/tasks/__init__.py
@@ -17,8 +17,23 @@
 # ============= enthought library imports =======================
 # ============= standard library imports ========================
 # ============= local library imports  ==========================
+import os
 
+from pychron.paths import paths
 
+
+def list_local_repos():
+    for i in os.listdir(paths.repository_dataset_dir):
+        if i.startswith('.'):
+            continue
+        elif i.startswith('~'):
+            continue
+
+        d = os.path.join(paths.repository_dataset_dir, i)
+        if os.path.isdir(d):
+            gd = os.path.join(d, '.git')
+            if os.path.isdir(gd):
+                yield i
 # ============= EOF =============================================
 
 
diff --git a/pychron/dvc/tasks/dvc_plugin.py b/pychron/dvc/tasks/dvc_plugin.py
index bed8686861..1cb884eedb 100755
--- a/pychron/dvc/tasks/dvc_plugin.py
+++ b/pychron/dvc/tasks/dvc_plugin.py
@@ -15,6 +15,11 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import time
+
+import os
+from git import Repo, GitCommandError
+from traits.api import List
 # ============= standard library imports ========================
 # ============= local library imports  ==========================
 from envisage.ui.tasks.task_extension import TaskExtension
@@ -23,18 +28,22 @@
 
 from pychron.dvc.dvc import DVC
 from pychron.dvc.dvc_persister import DVCPersister
+from pychron.dvc.tasks import list_local_repos
 from pychron.dvc.tasks.actions import WorkOfflineAction, UseOfflineDatabase, ShareChangesAction, SyncMetaDataAction
 from pychron.dvc.tasks.dvc_preferences import DVCPreferencesPane, \
     DVCDBConnectionPreferencesPane, DVCExperimentPreferencesPane
 from pychron.dvc.tasks.repo_task import ExperimentRepoTask
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.git.hosts import IGitHost
+from pychron.paths import paths
 
 
 class DVCPlugin(BaseTaskPlugin):
     name = 'DVC'
     _fetched = False
 
+    background_processes = List(contributes_to='pychron.background_processes')
+
     def start(self):
         super(DVCPlugin, self).start()
 
@@ -79,19 +88,8 @@ def test_dvc_fetch_meta(self):
 
         return ret, err
 
-    def _service_offers_default(self):
-        # p = {'dvc': self.dvc_factory()}
-        # self.debug('DDDDD {}'.format(p))
-        so = self.service_offer_factory(protocol=DVCPersister,
-                                        factory=DVCPersister,
-                                        properties={'dvc': self.dvc_factory()})
-
-        so2 = self.service_offer_factory(protocol=DVC,
-                                         factory=self.dvc_factory)
-
-        return [so, so2]
-
-    def dvc_factory(self):
+    # private
+    def _dvc_factory(self):
         d = DVC(application=self.application)
         # d.initialize()
 
@@ -102,32 +100,44 @@ def _repo_factory(self):
         r = ExperimentRepoTask(dvc=dvc)
         return r
 
+    def _fetch(self):
+        period = 60
+        while 1:
+            for name in list_local_repos():
+                r = Repo(os.path.join(paths.repository_dataset_dir, name))
+                try:
+                    r.git.fetch()
+                except GitCommandError, e:
+                    self.warning('error examining {}. {}'.format(name, e))
+
+            time.sleep(period)
+
+    # defaults
+    def _background_processes_default(self):
+        return [('fetch', self._fetch)]
+
+    def _service_offers_default(self):
+        # p = {'dvc': self.dvc_factory()}
+        # self.debug('DDDDD {}'.format(p))
+        so = self.service_offer_factory(protocol=DVCPersister,
+                                        factory=DVCPersister,
+                                        properties={'dvc': self._dvc_factory()})
+
+        so2 = self.service_offer_factory(protocol=DVC,
+                                         factory=self._dvc_factory)
+
+        return [so, so2]
+
     def _preferences_default(self):
         return self._preferences_factory('dvc')
 
     def _preferences_panes_default(self):
         return [DVCPreferencesPane, DVCDBConnectionPreferencesPane, DVCExperimentPreferencesPane]
 
-    # def _tasks_default(self):
-    #     ts = [TaskFactory(id='pychron.canvas_designer',
-    #                       name='Canvas Designer',
-    #                       factory=self._task_factory,
-    #                       accelerator='Ctrl+Shift+D',
-    #     )]
-    #     return ts
     def _tasks_default(self):
         return [TaskFactory(id='pychron.experiment_repo.task',
                             name='Experiment Repositories',
                             factory=self._repo_factory)]
-        # def start(self):
-        # add = not os.path.isfile(paths.meta_db)
-        #
-        # db = DVCDatabase()
-        #     repo = MetaRepo()
-        #
-        #     if add:
-        #         repo.add(db.path, commit=False)
-        #         repo.commit('added {}'.format(db.path))
 
     def _task_extensions_default(self):
         actions = [SchemaAddition(factory=WorkOfflineAction,
diff --git a/pychron/dvc/tasks/repo_task.py b/pychron/dvc/tasks/repo_task.py
index 63cc1b0d5d..5c0b36afd0 100755
--- a/pychron/dvc/tasks/repo_task.py
+++ b/pychron/dvc/tasks/repo_task.py
@@ -25,6 +25,7 @@
 
 # ============= local library imports  ==========================
 from pychron.core.progress import progress_loader
+from pychron.dvc.tasks import list_local_repos
 from pychron.dvc.tasks.actions import CloneAction, AddBranchAction, CheckoutBranchAction, PushAction, PullAction, \
     FindChangesAction
 from pychron.dvc.tasks.panes import RepoCentralPane, SelectionPane
@@ -90,7 +91,7 @@ def activated(self):
         self.repository_names = org.repo_names
 
     def refresh_local_names(self):
-        self.local_names = [RepoItem(name=i) for i in sorted(self.list_repos())]
+        self.local_names = [RepoItem(name=i) for i in sorted(list_local_repos())]
 
     def find_changes(self, remote='origin', branch='master'):
         self.debug('find changes')
@@ -116,19 +117,6 @@ def func(item, prog, i, n):
         progress_loader(names, func)
         self.local_names = sorted(self.local_names, key=lambda k: k.dirty, reverse=True)
 
-    def list_repos(self):
-        for i in os.listdir(paths.repository_dataset_dir):
-            if i.startswith('.'):
-                continue
-            elif i.startswith('~'):
-                continue
-
-            d = os.path.join(paths.repository_dataset_dir, i)
-            if os.path.isdir(d):
-                gd = os.path.join(d, '.git')
-                if os.path.isdir(gd):
-                    yield i
-
     def pull(self):
         self._repo.smart_pull(quiet=False)
 
diff --git a/pychron/envisage/tasks/tasks_plugin.py b/pychron/envisage/tasks/tasks_plugin.py
index c52ba16cf5..97c43ef321 100755
--- a/pychron/envisage/tasks/tasks_plugin.py
+++ b/pychron/envisage/tasks/tasks_plugin.py
@@ -17,6 +17,7 @@
 # ============= enthought library imports =======================
 import hashlib
 import random
+from threading import Thread
 
 from envisage.extension_point import ExtensionPoint
 from envisage.ui.tasks.action.exit_action import ExitAction
@@ -52,6 +53,7 @@ class PychronTasksPlugin(BasePlugin):
     available_task_extensions = ExtensionPoint(List, id='pychron.available_task_extensions')
 
     my_tips = List(contributes_to='pychron.plugin.help_tips')
+    background_processes = ExtensionPoint(List, id='pychron.background_processes')
 
     # def _application_changed(self):
     #     # defaults = (('use_advanced_ui', False), ('show_random_tip', True))
@@ -60,13 +62,30 @@ class PychronTasksPlugin(BasePlugin):
     #         self._set_preference_defaults(defaults, 'pychron.general')
     #     except AttributeError, e:
     #         print 'exception', e
-
     def start(self):
         self.info('Writing plugin file defaults')
         paths.write_file_defaults(self.file_defaults)
 
         self._set_user()
         self._random_tip()
+        self._start_background_processes()
+
+    def _start_background_processes(self):
+        self.info('starting background processes')
+        print self.background_processes
+        for i, p in enumerate(self.background_processes):
+            print i, p
+            if isinstance(p, tuple):
+                name, func = p
+            else:
+                func = p
+                name = 'Background{:02n}'.format(i)
+
+            if hasattr(func, '__call__'):
+                print 'asdfas', func, name
+                t = Thread(target=func, name=name)
+                t.setDaemon(True)
+                t.start()
 
     def _set_user(self):
         self.application.preferences.set('pychron.general.username', globalv.username)
diff --git a/pychron/processing/tests/plateau.py b/pychron/processing/tests/plateau.py
index 70ee1a2ad8..fef9273741 100755
--- a/pychron/processing/tests/plateau.py
+++ b/pychron/processing/tests/plateau.py
@@ -110,7 +110,7 @@ def test_find_plateaus_exclude_pass(self):
     def _get_test_data_exclude_pass(self):
         ages = [7, 1, 1, 1, 1, 6, 7]
         errors = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
-        signals = [1, 1, 1, 1, 1, 1, 100]
+        signals = [1, 1, 1, 1, 1, 1, 1]
         exclude = [6]
         idx = (1, 4)
         return ages, errors, signals, exclude, idx
