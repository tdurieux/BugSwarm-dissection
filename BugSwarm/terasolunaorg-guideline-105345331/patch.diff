diff --git a/source/ArchitectureInDetail/DataAccessJpa.rst b/source/ArchitectureInDetail/DataAccessJpa.rst
index 86aca86c07..50969e0c1c 100755
--- a/source/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source/ArchitectureInDetail/DataAccessJpa.rst
@@ -4199,7 +4199,7 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'") // (1)
+    @Where(clause = "is_logical_delete = false") // (1)
     public class Order implements Serializable {
         // ...
         @Id
@@ -4235,7 +4235,7 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
     * - | (2)
       - | ``@Where`` アノテーションで指定した条件が追加されている。
 
-- 標準的なキーワード``true``、``false``、``unknown``などを登録するためのDialectを拡張する
+- 標準的なキーワード ``true`` 、``false`` 、``unknown`` などを登録するためのDialectを拡張する
 
  .. code-block:: java
 
@@ -4258,10 +4258,10 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
     * - Sr. No.
       - Description
     * - | (1)
-      - | Hibernateは標準的なSQLキーワード``true``、``false``、``unknown``などを登録することができません。これらは、データベース特定のDialectを拡張することによって登録することができます。
+      - | Hibernateは標準的なSQLキーワード ``true`` 、``false`` 、``unknown`` などを登録することができません。これらは、データベース特定のDialectを拡張することによって登録することができます。
         | 例、postgresqlデータベースのデーフォルトDialectは``org.hibernate.dialect.PostgreSQL9Dialect``となります。
     * - | (2)
-      - | 標準的なSQLキーワード``true``、``false``、``unknown``などを登録する。
+      - | 標準的なSQLキーワード ``true`` 、``false`` 、``unknown`` などを登録する。
 
 - 拡張したDialectを設定する
 
@@ -4304,7 +4304,7 @@ Repositoryインタフェースのメソッド呼び出して取得したEntity
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'")
+    @Where(clause = "is_logical_delete = false")
     public class Order implements Serializable {
         // ...
         @Id
@@ -4312,7 +4312,7 @@ Repositoryインタフェースのメソッド呼び出して取得したEntity
 
         @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
         @OrderBy
-        @Where(clause="is_logical_delete = 'false'") // (1)
+        @Where(clause="is_logical_delete = false") // (1)
         private Set<OrderItem> orderItems;
         // ...
 
diff --git a/source_en/ArchitectureInDetail/DataAccessJpa.rst b/source_en/ArchitectureInDetail/DataAccessJpa.rst
index 7d713ce123..26138c2639 100755
--- a/source_en/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source_en/ArchitectureInDetail/DataAccessJpa.rst
@@ -4280,7 +4280,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'") // (1)
+    @Where(clause = "is_logical_delete = false") // (1)
     public class Order implements Serializable {
         // ...
         @Id
@@ -4315,7 +4315,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
         | The WHERE clause should be specified in SQL instead of JPQL i.e. it is necessary to specify the column name instead of the property name of Java object.
     * - | (2)
       - | The condition specified with ``@Where`` annotation is added.
-
+      
 - Extending Dialect to register standard keywords such as ``true``, ``false`` and ``unknown``.
 
  .. code-block:: java
@@ -4363,7 +4363,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
       - Description
     * - | (3)
       - | The extended Dialect is set as the value of ``databasePlatform`` property in JPA Vendor Adapter of EntityManager.
-
+      
  .. note:: **Class that can be specified**
 
     ``@Where`` annotation is valid only in the class with ``@Entity``.
@@ -4385,7 +4385,7 @@ The method for adding common conditions for JPQL is shown below. JPQL is used fo
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'")
+    @Where(clause = "is_logical_delete = false")
     public class Order implements Serializable {
         // ...
         @Id
@@ -4393,7 +4393,7 @@ The method for adding common conditions for JPQL is shown below. JPQL is used fo
 
         @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
         @OrderBy
-        @Where(clause="is_logical_delete = 'false'") // (1)
+        @Where(clause="is_logical_delete = false") // (1)
         private Set<OrderItem> orderItems;
         // ...
 
