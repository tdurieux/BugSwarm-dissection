diff --git a/verktyg/http/cookies.py b/verktyg/http/cookies.py
index 29a4791e2b..480353dd8a 100755
--- a/verktyg/http/cookies.py
+++ b/verktyg/http/cookies.py
@@ -240,7 +240,7 @@ def dump_cookie(key, value='', max_age=None, expires=None, path='/',
     value = value.encode(charset)
 
     if path is not None:
-        path = iri_to_uri(path, charset)
+        path = iri_to_uri(path)
     domain = _make_cookie_domain(domain)
     if isinstance(max_age, timedelta):
         max_age = (max_age.days * 60 * 60 * 24) + max_age.seconds
diff --git a/verktyg/responses.py b/verktyg/responses.py
index 18e153d7e6..3427649229 100755
--- a/verktyg/responses.py
+++ b/verktyg/responses.py
@@ -506,7 +506,7 @@ def get_wsgi_headers(self, environ):
             if isinstance(location, str):
                 # Safe conversion is necessary here as we might redirect
                 # to a broken URI scheme (for instance itms-services).
-                location = iri_to_uri(location, safe_conversion=True)
+                location = iri_to_uri(location)
 
             if self.autocorrect_location_header:
                 current_url = get_current_url(environ, root_only=True)
diff --git a/verktyg/test.py b/verktyg/test.py
index 53ffab5599..0e03280ed2 100755
--- a/verktyg/test.py
+++ b/verktyg/test.py
@@ -319,7 +319,7 @@ def __init__(self, path='/', base_url=None, query_string=None,
         self.charset = charset
         self.path = iri_to_uri(path)
         if base_url is not None:
-            base_url = url_fix(iri_to_uri(base_url, charset), charset)
+            base_url = url_fix(base_url)
         self.base_url = base_url
         if isinstance(query_string, (bytes, str)):
             self.query_string = query_string
diff --git a/verktyg/testsuite/test_urls.py b/verktyg/testsuite/test_urls.py
index 82e112036b..2f44d846ce 100755
--- a/verktyg/testsuite/test_urls.py
+++ b/verktyg/testsuite/test_urls.py
@@ -1,12 +1,13 @@
-# -*- coding: utf-8 -*-
 """
-    tests.urls
-    ~~~~~~~~~~
+    verktyg.testsuite.test_urls
+    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
     URL helper tests.
 
-    :copyright: (c) 2014 by Armin Ronacher.
-    :license: BSD, see LICENSE for more details.
+    :copyright:
+        (c) 2016 Ben Mather, based on Werkzeug, see AUTHORS for more details.
+    :license:
+        BSD, see LICENSE for more details.
 """
 import unittest
 
@@ -106,20 +107,6 @@ def test_iri_support(self):
             'http://xn--f-1gaa.com:8080/bam/baz'
         )
 
-    def test_iri_safe_conversion(self):
-        self.assertEqual(
-            urls.iri_to_uri('magnet:?foo=bar'),
-            'magnet:?foo=bar'
-        )
-        self.assertEqual(
-            urls.iri_to_uri('itms-service://?foo=bar'),
-            'itms-service:?foo=bar'
-        )
-        self.assertEqual(
-            urls.iri_to_uri('itms-service://?foo=bar', safe_conversion=True),
-            'itms-service://?foo=bar'
-        )
-
     def test_iri_safe_quoting(self):
         uri = 'http://xn--f-1gaa.com/%2F%25?q=%C3%B6&x=%3D%25#%25'
         iri = 'http://föö.com/%2F%25?q=ö&x=%3D%25#%25'
diff --git a/verktyg/umbilical b/verktyg/umbilical
new file mode 100755
index 0000000000..8c0e3161bf
--- /dev/null
+++ b/verktyg/umbilical
@@ -0,0 +1,30 @@
+werkzeug._compat.iter_bytes
+werkzeug._compat.make_literal_wrapper
+werkzeug._compat.reraise
+werkzeug._compat.text_type
+werkzeug._compat.to_bytes
+werkzeug._compat.to_native
+werkzeug._compat.to_unicode
+werkzeug._compat.wsgi_decoding_dance
+werkzeug._compat.wsgi_encoding_dance
+werkzeug._compat.wsgi_get_bytes
+werkzeug._internal._DictAccessorProperty
+werkzeug._internal._empty_stream
+werkzeug._internal._encode_idna
+werkzeug._internal._get_environ
+werkzeug._internal._missing
+werkzeug._internal._parse_signature
+werkzeug.formparser.FormDataParser
+werkzeug.formparser.default_stream_factory
+werkzeug.test.EnvironBuilder
+werkzeug.urls.iri_to_uri
+werkzeug.urls.uri_to_iri
+werkzeug.urls.url_decode
+werkzeug.urls.url_encode
+werkzeug.urls.url_fix
+werkzeug.urls.url_join
+werkzeug.urls.url_parse
+werkzeug.urls.url_quote
+werkzeug.urls.url_unparse
+werkzeug.urls.url_unquote
+werkzeug.useragents.UserAgent
diff --git a/verktyg/urls.py b/verktyg/urls.py
index e0ea356d7f..ab8462b44a 100755
--- a/verktyg/urls.py
+++ b/verktyg/urls.py
@@ -1,21 +1,17 @@
-# -*- coding: utf-8 -*-
 """
     werkzeug.urls
     ~~~~~~~~~~~~~
 
-    :copyright: (c) 2014 by the Werkzeug Team, see AUTHORS for more details.
-    :license: BSD, see LICENSE for more details.
-
-
-
-
+    :copyright:
+        (c) 2016 Ben Mather, based on Werkzeug, see AUTHORS for more details.
+    :license:
+        BSD, see LICENSE for more details.
 """
 from urllib.parse import (
     urlsplit, urlunsplit,
     quote as urlquote, quote_plus as urlquote_plus,
 )
 
-from werkzeug._compat import to_unicode, to_native
 from werkzeug._internal import _encode_idna, _decode_idna
 
 
@@ -66,49 +62,7 @@ def _safe_urlunquote(string, charset='utf-8', errors='replace', unsafe=''):
     return rv
 
 
-def url_fix(s, charset='utf-8'):
-    r"""Sometimes you get an URL by a user that just isn't a real URL because
-    it contains unsafe characters like ' ' and so on. This function can fix
-    some of the problems in a similar way browsers handle data entered by the
-    user:
-
-    >>> url_fix(u'http://de.wikipedia.org/wiki/Elf (Begriffskl\xe4rung)')
-    'http://de.wikipedia.org/wiki/Elf%20(Begriffskl%C3%A4rung)'
-
-    :param s:
-        The string with the URL to fix.
-    :param charset:
-        The target charset for the URL if the url was given as unicode string.
-    """
-    # First step is to convert backslashes (which are invalid in URLs anyways)
-    # to slashes.  This is consistent with what Chrome does.
-    s = s.replace('\\', '/')
-
-    # For the specific case that we look like a malformed windows URL
-    # we want to fix this up manually:
-    if (
-        s.startswith('file://') and
-        s[7:8].isalpha() and
-        s[8:10] in (':/', '|/')
-    ):
-        s = 'file:///' + s[7:]
-
-    url = urlsplit(s)
-    path = urlquote(
-        url.path, encoding=charset, safe='/%+$!*\'(),'
-    )
-    qs = urlquote_plus(
-        url.query, encoding=charset, safe=':&%=+$!*\'(),'
-    )
-    anchor = urlquote_plus(
-        url.fragment, encoding=charset, safe=':&%=+$!*\'(),'
-    )
-    return urlunsplit(
-        (url.scheme, url.encode_netloc(), path, qs, anchor)
-    )
-
-
-def uri_to_iri(uri, charset='utf-8', errors='replace'):
+def uri_to_iri(uri, errors='replace'):
     r"""Converts a URI in a given charset to a IRI.
 
     Examples for URI versus IRI:
@@ -131,7 +85,7 @@ def uri_to_iri(uri, charset='utf-8', errors='replace'):
         The error handling on decode.
     """
     assert isinstance(uri, str)
-    uri = urlsplit(to_unicode(uri, charset))
+    uri = urlsplit(uri)
 
     host = _decode_idna(uri.hostname) if uri.hostname else ''
     if ':' in host:
@@ -147,14 +101,14 @@ def uri_to_iri(uri, charset='utf-8', errors='replace'):
     if uri.username or uri.password:
         if uri.username:
             username = _safe_urlunquote(
-                uri.username, charset='utf-8', errors='strict', unsafe='/:%'
+                uri.username, errors='strict', unsafe='/:%'
             )
         else:
             username = ''
 
         if uri.password:
             password = _safe_urlunquote(
-                uri.password, charset='utf-8', errors='strict', unsafe='/:%'
+                uri.password, errors='strict', unsafe='/:%'
             )
             auth = '%s:%s' % (username, password)
         else:
@@ -163,98 +117,77 @@ def uri_to_iri(uri, charset='utf-8', errors='replace'):
         netloc = '%s@%s' % (auth, netloc)
 
     path = _safe_urlunquote(
-        uri.path, charset=charset, errors=errors, unsafe='%/;?'
+        uri.path, errors=errors, unsafe='%/;?'
     )
     query = _safe_urlunquote(
-        uri.query, charset=charset, errors=errors, unsafe='%;/?:@&=+,$#'
+        uri.query, errors=errors, unsafe='%;/?:@&=+,$#'
     )
     fragment = _safe_urlunquote(
-        uri.fragment, charset=charset, errors=errors, unsafe='%;/?:@&=+,$#'
+        uri.fragment, errors=errors, unsafe='%;/?:@&=+,$#'
     )
     return urlunsplit(
         (uri.scheme, netloc, path, query, fragment)
     )
 
 
-def iri_to_uri(iri, errors='strict', safe_conversion=False):
-    r"""Converts any unicode based IRI to an acceptable ASCII URI. Werkzeug always
-    uses utf-8 URLs internally because this is what browsers and HTTP do as
-    well. In some places where it accepts an URL it also accepts a unicode IRI
-    and converts it into a URI.
-
-    Examples for IRI versus URI:
-
-    >>> iri_to_uri(u'http://☃.net/')
-    'http://xn--n3h.net/'
-    >>> iri_to_uri(u'http://üser:pässword@☃.net/påth')
-    'http://%C3%BCser:p%C3%A4ssword@xn--n3h.net/p%C3%A5th'
-
-    There is a general problem with IRI and URI conversion with some
-    protocols that appear in the wild that are in violation of the URI
-    specification.  In places where Werkzeug goes through a forced IRI to
-    URI conversion it will set the `safe_conversion` flag which will
-    not perform a conversion if the end result is already ASCII.  This
-    can mean that the return value is not an entirely correct URI but
-    it will not destroy such invalid URLs in the process.
-
-    As an example consider the following two IRIs::
-
-        magnet:?xt=uri:whatever
-        itms-services://?action=download-manifest
-
-    The internal representation after parsing of those URLs is the same
-    and there is no way to reconstruct the original one.  If safe
-    conversion is enabled however this function becomes a noop for both of
-    those strings as they both can be considered URIs.
-
-    :param iri:
-        The IRI to convert.
-    :param charset:
-        The charset for the URI.
-    :param safe_conversion:
-        Indicates if a safe conversion should take place.  For more information
-        see the explanation above.
-    """
-    assert isinstance(iri, str)
-    if safe_conversion:
-        try:
-            native_iri = to_native(iri)
-            ascii_iri = to_native(iri).encode('ascii')
-            if ascii_iri.split() == [ascii_iri]:
-                return native_iri
-        except UnicodeError:
-            pass
-
-    iri = urlsplit(iri)
-
-    host = _encode_idna(iri.hostname).decode('ascii') if iri.hostname else ''
+def _encode_netloc(components):
+    host = ''
+    if components.hostname:
+        host = _encode_idna(components.hostname).decode('ascii')
     if ':' in host:
         host = '[%s]' % host
 
     netloc = host
 
-    if iri.port:
-        if not 0 <= int(iri.port) <= 65535:
+    if components.port:
+        if not 0 <= int(components.port) <= 65535:
             raise ValueError('Invalid port')
-        netloc = '%s:%s' % (netloc, iri.port)
+        netloc = '%s:%s' % (netloc, components.port)
 
-    if iri.username or iri.password:
-        if iri.username:
+    if components.username or components.password:
+        if components.username:
             username = urlquote(
-                iri.username, safe='/:%'
+                components.username, safe='/:%'
             )
         else:
             username = ''
 
-        if iri.password:
+        if components.password:
             password = urlquote(
-                iri.password, safe='/:%'
+                components.password, safe='/:%'
             )
             auth = '%s:%s' % (username, password)
         else:
             auth = username
 
         netloc = '%s@%s' % (auth, netloc)
+    return netloc
+
+
+def iri_to_uri(iri):
+    r"""Converts any unicode based IRI to an acceptable ASCII URI. Verktyg
+    always uses utf-8 URLs internally because this is what browsers and HTTP do
+    as well. In some places where it accepts an URL it also accepts a unicode
+    IRI and converts it into a URI.
+
+    Examples for IRI versus URI:
+
+    >>> iri_to_uri(u'http://☃.net/')
+    'http://xn--n3h.net/'
+    >>> iri_to_uri(u'http://üser:pässword@☃.net/påth')
+    'http://%C3%BCser:p%C3%A4ssword@xn--n3h.net/p%C3%A5th'
+
+    :param iri:
+        The IRI to convert.
+
+    :returns:
+        The equivalent URI as an ascii only string object.
+    """
+    assert isinstance(iri, str)
+
+    iri = urlsplit(iri)
+
+    netloc = _encode_netloc(iri)
 
     path = urlquote(
         iri.path, safe='/:~+%'
@@ -269,3 +202,49 @@ def iri_to_uri(iri, errors='strict', safe_conversion=False):
     return urlunsplit(
         (iri.scheme, netloc, path, query, fragment)
     )
+
+
+def url_fix(s, charset='utf-8'):
+    r"""Sometimes you get an URL by a user that just isn't a real URL because
+    it contains unsafe characters like ' ' and so on. This function can fix
+    some of the problems in a similar way browsers handle data entered by the
+    user:
+
+    >>> url_fix(u'http://de.wikipedia.org/wiki/Elf (Begriffskl\xe4rung)')
+    'http://de.wikipedia.org/wiki/Elf%20(Begriffskl%C3%A4rung)'
+
+    :param s:
+        The string with the URL to fix.
+    :param charset:
+        The target charset for the URL if the url was given as unicode string.
+    """
+    # First step is to convert backslashes (which are invalid in URLs anyways)
+    # to slashes.  This is consistent with what Chrome does.
+    s = s.replace('\\', '/')
+
+    # For the specific case that we look like a malformed windows URL
+    # we want to fix this up manually:
+    if (
+        s.startswith('file://') and
+        s[7:8].isalpha() and
+        s[8:10] in (':/', '|/')
+    ):
+        s = 'file:///' + s[7:]
+
+    url = urlsplit(s)
+
+    netloc = _encode_netloc(url)
+
+    path = urlquote(
+        url.path, encoding=charset, safe='/%+$!*\'(),'
+    )
+    qs = urlquote_plus(
+        url.query, encoding=charset, safe=':&%=+$!*\'(),'
+    )
+    anchor = urlquote_plus(
+        url.fragment, encoding=charset, safe=':&%=+$!*\'(),'
+    )
+
+    return urlunsplit(
+        (url.scheme, netloc, path, qs, anchor)
+    )
diff --git a/verktyg/utils.py b/verktyg/utils.py
index 4c1a5cfc01..c02954dfc1 100755
--- a/verktyg/utils.py
+++ b/verktyg/utils.py
@@ -192,7 +192,7 @@ def redirect(location, code=302, Response=None):
         # Safe conversion is necessary here as we might redirect
         # to a broken URI scheme (for instance itms-services).
         from verktyg.urls import iri_to_uri
-        location = iri_to_uri(location, safe_conversion=True)
+        location = iri_to_uri(location)
     response = Response(
         '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n'
         '<title>Redirecting...</title>\n'
diff --git a/verktyg/wsgi.py b/verktyg/wsgi.py
index 243b78615e..7d071c97e9 100755
--- a/verktyg/wsgi.py
+++ b/verktyg/wsgi.py
@@ -329,8 +329,10 @@ def peek_path_info(environ, charset='utf-8', errors='replace'):
                           charset, errors, allow_none_charset=True)
 
 
-def extract_path_info(environ_or_baseurl, path_or_url, charset='utf-8',
-                      errors='replace', collapse_http_schemes=True):
+def extract_path_info(
+            environ_or_baseurl, path_or_url,
+            errors='replace', collapse_http_schemes=True
+        ):
     """Extracts the path info from the given URL (or WSGI environment) and
     path.  The path info returned is a unicode string, not a bytestring
     suitable for a WSGI environment.  The URLs might also be IRIs.
@@ -351,19 +353,18 @@ def extract_path_info(environ_or_baseurl, path_or_url, charset='utf-8',
 
     Instead of providing a base URL you can also pass a WSGI environment.
 
-    :param environ_or_baseurl: a WSGI environment dict, a base URL or
-                               base IRI.  This is the root of the
-                               application.
-    :param path_or_url: an absolute path from the server root, a
-                        relative path (in which case it's the path info)
-                        or a full URL.  Also accepts IRIs and unicode
-                        parameters.
-    :param charset: the charset for byte data in URLs
-    :param errors: the error handling on decode
-    :param collapse_http_schemes: if set to `False` the algorithm does
-                                  not assume that http and https on the
-                                  same server point to the same
-                                  resource.
+    :param environ_or_baseurl:
+        A WSGI environment dict, a base URL or base IRI.  This is the root of
+        the application.
+    :param path_or_url:
+        An absolute path from the server root, a relative path (in which case
+        it's the path info) or a full URL.  Also accepts IRIs and unicode
+        parameters.
+    :param errors:
+        The error handling on decode.
+    :param collapse_http_schemes:
+        If set to `False` the algorithm does not assume that http and https on
+        the same server point to the same resource.
     """
     def _normalize_netloc(scheme, netloc):
         parts = netloc.split(u'@', 1)[-1].split(u':', 1)
@@ -382,11 +383,11 @@ def _normalize_netloc(scheme, netloc):
         return netloc
 
     # make sure whatever we are working on is a IRI and parse it
-    path = uri_to_iri(path_or_url, charset, errors)
+    path = uri_to_iri(path_or_url, errors=errors)
     if isinstance(environ_or_baseurl, dict):
         environ_or_baseurl = get_current_url(environ_or_baseurl,
                                              root_only=True)
-    base_iri = uri_to_iri(environ_or_baseurl, charset, errors)
+    base_iri = uri_to_iri(environ_or_baseurl, errors=errors)
     base_scheme, base_netloc, base_path = urlsplit(base_iri)[:3]
     cur_scheme, cur_netloc, cur_path, = urlsplit(
         urljoin(base_iri, path)
