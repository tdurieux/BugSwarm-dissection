diff --git a/pom.xml b/pom.xml
index a9f9b0148f..e4efddfece 100755
--- a/pom.xml
+++ b/pom.xml
@@ -173,6 +173,7 @@
     <maven.site.plugin.version>3.4</maven.site.plugin.version>
     <maven.findbugs.plugin.version>3.0.2</maven.findbugs.plugin.version>
     <maven.pmd.plugin.version>3.5</maven.pmd.plugin.version>
+    <maven.jacoco.plugin.version>0.7.5.201505241946</maven.jacoco.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
     <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
     <java.version>1.7</java.version>
@@ -248,6 +249,13 @@
       <scope>test</scope>
     </dependency>
 
+    <dependency>
+      <groupId>org.jacoco</groupId>
+      <artifactId>org.jacoco.agent</artifactId>
+      <version>${maven.jacoco.plugin.version}</version>
+      <scope>test</scope>
+      <classifier>runtime</classifier>
+    </dependency>
   </dependencies>
 
   <build>
@@ -605,6 +613,9 @@
         <version>2.18.1</version>
         <configuration>
           <argLine>-Duser.language=en -Duser.country=US -XX:-UseSplitVerifier</argLine>
+          <systemPropertyVariables>
+            <jacoco-agent.destfile>${project.build.directory}/jacoco/jacoco.exec</jacoco-agent.destfile>
+          </systemPropertyVariables>
           <additionalClasspathElements>
             <additionalClasspathElement>src/test/resources-noncompilable</additionalClasspathElement>
           </additionalClasspathElements>
@@ -836,6 +847,29 @@
         </configuration>
       </plugin>
 
+      <plugin>
+        <groupId>org.jacoco</groupId>
+        <artifactId>jacoco-maven-plugin</artifactId>
+        <version>${maven.jacoco.plugin.version}</version>
+        <configuration>
+            <dataFile>${project.build.directory}/jacoco/jacoco.exec</dataFile>
+          <excludes>
+            <exclude>com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask*.class</exclude>
+            <exclude>com/puppycrawl/tools/checkstyle/doclets/*.class</exclude>
+            <exclude>com/puppycrawl/tools/checkstyle/grammars/*.class</exclude>
+            <exclude>com/puppycrawl/tools/checkstyle/grammars/javadoc/*.class</exclude>
+            <exclude>com/puppycrawl/tools/checkstyle/gui/*.class</exclude>
+          </excludes>
+        </configuration>
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>report</report>
+            </reports>
+          </reportSet>
+        </reportSets>
+      </plugin>
+
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jxr-plugin</artifactId>
@@ -924,6 +958,9 @@
             <!-- Excluded due to checkstyle's issue #549 until http://jira.codehaus.org/browse/MTAGLIST-69 will be fixed -->
             <excludedPage>taglist.html</excludedPage>
           </excludedPages>
+          <excludedHttpStatusErrors>
+            <excludedHttpStatusError>401</excludedHttpStatusError>
+          </excludedHttpStatusErrors>
           <excludedLinks>
             <excludedLink>reports/google-style/guava</excludedLink>
             <excludedLink>reports/javadoc/openjdk8</excludedLink>
@@ -938,18 +975,27 @@
             <excludedLink>**/com/puppycrawl/**</excludedLink>
             <!-- Excluded due to checkstyle's issue #549 until https://issues.apache.org/jira/browse/MJAVADOC-428 will be fixed -->
             <excludedLink>http://docs.oracle.com/javase/7/docs/api/org/xml/sax/helpers.DefaultHandler.html?*</excludedLink>
-            <!-- Excluded due to Maven Surefire Plugin's issue #1173: https://issues.apache.org/jira/browse/SUREFIRE-1173-->
+            <!-- Excluded due to Maven Enforcer Plugin's issue #234: https://issues.apache.org/jira/browse/MENFORCER-234-->
             <excludedLink>http://maven.apache.org/enforcer/maven-enforcer-plugin</excludedLink>
+            <!-- Excluded due to Maven Surefire Plugin's issue #1173: https://issues.apache.org/jira/browse/SUREFIRE-1173-->
             <excludedLink>http://maven.apache.org/surefire/maven-failsafe-plugin</excludedLink>
             <excludedLink>http://maven.apache.org/surefire/maven-surefire-plugin</excludedLink>
             <excludedLink>http://maven.apache.org/surefire/maven-surefire-report-plugin</excludedLink>
+            <!-- Excluded due to Maven Codehaus Plugin's issue #4: https://github.com/mojohaus/mojohaus.github.io/issues/4-->
             <excludedLink>http://mojo.codehaus.org/antlr-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven Build Helper Plugin's issue #3: https://github.com/mojohaus/build-helper-maven-plugin/issues/3-->
             <excludedLink>http://mojo.codehaus.org/build-helper-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven Cobertura Plugin's issue #5: https://github.com/mojohaus/cobertura-maven-plugin/issues/5-->
             <excludedLink>http://mojo.codehaus.org/cobertura-maven-plugin/</excludedLink>
+            <!-- Excluded due to Maven JDepend Plugin's issue #2: https://github.com/mojohaus/jdepend-maven-plugin/issues/2-->
             <excludedLink>http://mojo.codehaus.org/jdepend-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven Taglist Plugin's issue #3: https://github.com/mojohaus/taglist-maven-plugin/issues/3-->
             <excludedLink>http://mojo.codehaus.org/taglist-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven XML Plugin's issue #1: https://github.com/mojohaus/xml-maven-plugin/issues/1-->
             <excludedLink>http://mojo.codehaus.org/xml-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven ANTLR4 Plugin's issue #978: https://github.com/antlr/antlr4/issues/978-->
             <excludedLink>http://www.antlr.org/antlr4-maven-plugin</excludedLink>
+            <!-- Excluded due to Maven Release Plugin's issue #919: https://issues.apache.org/jira/browse/MRELEASE-919-->
             <excludedLink>http://maven.apache.org/plugins/maven-release-plugin/</excludedLink>
             <!-- Excluded, because the link is generated by sonar's maven report plugin and we
             can not correct the link while it will not be changed in effective pom.xml of the plugin
@@ -964,9 +1010,6 @@
             <!-- Excluded due to linkcheck's issue #23: https://issues.apache.org/jira/browse/MLINKCHECK-23-->
             <excludedLink>http://www.kclee.com/clemens/java/javancss</excludedLink>
           </excludedLinks>
-          <excludedHttpStatusErrors>
-            <excludedHttpStatusError>401</excludedHttpStatusError>
-          </excludedHttpStatusErrors>
         </configuration>
       </plugin>
 
@@ -1079,6 +1122,230 @@
 
     </profile>
 
+    <profile>
+      <id>jacoco-check</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.jacoco</groupId>
+            <artifactId>jacoco-maven-plugin</artifactId>
+            <version>${maven.jacoco.plugin.version}</version>
+            <executions>
+              <execution>
+                <id>default-instrument</id>
+                <goals>
+                  <goal>instrument</goal>
+                </goals>
+                <phase>test-compile</phase>
+              </execution>
+              <execution>
+                <id>default-restore-instrumented-classes</id>
+                <goals>
+                  <goal>restore-instrumented-classes</goal>
+                </goals>
+              </execution>
+              <execution>
+                <id>default-report</id>
+                <phase>site</phase>
+                <goals>
+                  <goal>report</goal>
+                </goals>
+              </execution>
+              <execution>
+                <id>default-check</id>
+                <goals>
+                  <goal>check</goal>
+                </goals>
+                <configuration>
+                  <dataFile>${project.build.directory}/jacoco/jacoco.exec</dataFile>
+                  <excludes>
+                    <exclude>com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask*.class</exclude>
+                    <exclude>com/puppycrawl/tools/checkstyle/doclets/*.class</exclude>
+                    <exclude>com/puppycrawl/tools/checkstyle/grammars/*.class</exclude>
+                    <exclude>com/puppycrawl/tools/checkstyle/grammars/javadoc/*.class</exclude>
+                    <exclude>com/puppycrawl/tools/checkstyle/gui/*.class</exclude>
+                  </excludes>
+                  <rules>
+                    <rule>
+                      <element>BUNDLE</element>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.99</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.99</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>PACKAGE</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.99</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.97</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>PACKAGE</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.93</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.93</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.93</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.82</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.header.AbstractHeaderCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.90</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.90</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.Main</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.92</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.84</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.PropertyCacheFile</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.97</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>1.00</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.TreeWalker.AstState</include></includes>
+                      <limits><limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.76</minimum></limit></limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.DefaultLogger</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.97</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>1.00</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.TranslationCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.82</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.81</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.88</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.76</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.88</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.94</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.74</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.83</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.RegularClass</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.62</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.83</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.Token</include></includes>
+                      <limits><limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.62</minimum></limit></limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.ClassResolver</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.91</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.83</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.ClassAlias</include></includes>
+                      <limits><limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.39</minimum></limit></limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.96</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>1.00</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractTypeAwareCheck.AbstractClassInfo</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.69</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.50</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.AbstractDeclarationCollector</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>1.00</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.94</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.UniqueProperties</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>1.00</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.75</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils</include></includes>
+                      <limits>
+                        <limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.99</minimum></limit>
+                        <limit><counter>BRANCH</counter><value>COVEREDRATIO</value><minimum>0.98</minimum></limit>
+                      </limits>
+                    </rule>
+                    <rule>
+                      <element>CLASS</element>
+                      <includes><include>com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocUtils.JavadocTagType</include></includes>
+                      <limits><limit><counter>LINE</counter><value>COVEREDRATIO</value><minimum>0.81</minimum></limit></limits>
+                    </rule>
+                  </rules>
+                </configuration>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+
     <profile>
       <id>cobertura-check</id>
       <activation>
diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index ca14ae1042..d7ef41c17f 100755
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -30,7 +30,7 @@
 
 public abstract class BaseCheckTestSupport
 {
-    /** a brief logger that only display info about errors */
+    /** A brief logger that only display info about errors */
     protected static class BriefLogger
         extends DefaultLogger
     {
@@ -46,8 +46,8 @@ public void fileFinished(AuditEvent evt) {}
         public void fileStarted(AuditEvent evt) {}
     }
 
-    protected final ByteArrayOutputStream BAOS = new ByteArrayOutputStream();
-    protected final PrintStream stream = new PrintStream(BAOS);
+    protected final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    protected final PrintStream stream = new PrintStream(baos);
     protected final Properties props = new Properties();
 
     public static DefaultConfiguration createCheckConfig(Class<?> aClazz)
@@ -134,7 +134,7 @@ protected void verify(Checker aC,
 
         // process each of the lines
         final ByteArrayInputStream bais =
-            new ByteArrayInputStream(BAOS.toByteArray());
+            new ByteArrayInputStream(baos.toByteArray());
         final LineNumberReader lnr =
             new LineNumberReader(new InputStreamReader(bais));
 
@@ -147,7 +147,7 @@ protected void verify(Checker aC,
             parseInt = parseInt.substring(0, parseInt.indexOf(":"));
             int lineNumber = Integer.parseInt(parseInt);
 			Integer integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;
-            assertEquals("error message " + i, (long) integer, (long) lineNumber);
+            assertEquals("error message " + i, (long) integer, lineNumber);
         }
 
         assertEquals("unexpected output: " + lnr.readLine(),
@@ -200,11 +200,11 @@ public String getCheckMessage(Map<String, String> messages, String messageKey, O
        return null;
    }
 
-   private static String removeDeviceFromPathOnWindows(String string) {
+   private static String removeDeviceFromPathOnWindows(String path) {
        String os = System.getProperty("os.name", "Unix");
        if (os.startsWith("Windows")) {
-           return string.substring(string.indexOf(":") + 1);
+           return path.substring(path.indexOf(":") + 1);
        }
-       return string;
+       return path;
    }
 }
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
index e4a9725e71..b5d3796335 100755
--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
@@ -18,7 +18,7 @@
 
 public class ConfigurationBuilder extends BaseCheckTestSupport {
 
-	private File ROOT;
+	private File root;
 
 	private List<File> files = new ArrayList<>();
 
@@ -32,9 +32,9 @@
 
 	public ConfigurationBuilder(File aROOT)
 			throws CheckstyleException, IOException {
-		this.ROOT = aROOT;
+		root = aROOT;
 		config = getConfigurationFromXML(xmlName, System.getProperties());
-		listFiles(files, ROOT, "java");
+		listFiles(files, root, "java");
 	}
 
 	private static Configuration getConfigurationFromXML(String aConfigName,
@@ -66,7 +66,7 @@ public Configuration getCheckConfig(String aCheckName) {
 	}
 
 	public String getFilePath(String aFileName) {
-		String absoluteRootPath = ROOT.getAbsolutePath();
+		String absoluteRootPath = root.getAbsolutePath();
 		String rootPath = absoluteRootPath.substring(0,
 				absoluteRootPath.lastIndexOf("src"));
 		for (File file : files) {
@@ -90,8 +90,8 @@ private static void listFiles(final List<File> files, final File folder,
 		}
 	}
 
-	public File getROOT() {
-		return ROOT;
+	public File getRoot() {
+		return root;
 	}
 
 	public List<File> getFiles() {
@@ -102,7 +102,11 @@ public File getROOT() {
 		int lineNumber = 1;
 	    List<Integer> result = new ArrayList<>();
 	    try(BufferedReader br = new BufferedReader(new FileReader(aFileName))) {
-	        for(String line; (line = br.readLine()) != null; ) {
+	        while (true) {
+	            String line = br.readLine();
+	            if (line == null) {
+	                break;
+	            }
 	            if (warnPattern.matcher(line).find()) {
 	            	result.add(lineNumber);
 	            }
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
index 3ac4b49f88..214ee8fa40 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
@@ -56,7 +56,7 @@ public void fileTabTest() throws IOException, Exception {
     /**
      * Creates a configuration that is functionally close to that in the docs.
      */
-    private DefaultConfiguration createConfig(boolean verbose)
+    private static DefaultConfiguration createConfig(boolean verbose)
     {
         final DefaultConfiguration checkConfig =
             createCheckConfig(FileTabCharacterCheck.class);
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
index 66bc6d0e4b..ae38994945 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
@@ -13,7 +13,7 @@
 
 public class ParameterNameTest extends BaseCheckTestSupport{
 
-	private String msgKey = "name.invalidPattern";
+	private static final String MSG_KEY = "name.invalidPattern";
 	private static String format;
 	private static ConfigurationBuilder builder;
 	private static Configuration checkConfig;
@@ -29,18 +29,18 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
     public void parameterNameTest() throws IOException, Exception {
 
         final String[] expected = {
-            "8:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "$arg1", format),
-            "9:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "ar$g2", format),
-            "10:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "arg3$", format),
-            "11:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "a_rg4", format),
-            "12:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "_arg5", format),
-            "13:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "arg6_", format),
-            "14:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "aArg7", format),
-            "15:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "aArg8", format),
-            "16:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "aar_g", format),
-            "26:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "bB", format),
-            "49:22: " + getCheckMessage(checkConfig.getMessages(), msgKey, "llll_llll", format),
-            "50:21: " + getCheckMessage(checkConfig.getMessages(), msgKey, "bB", format),
+            "8:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "$arg1", format),
+            "9:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "ar$g2", format),
+            "10:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "arg3$", format),
+            "11:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "a_rg4", format),
+            "12:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "_arg5", format),
+            "13:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "arg6_", format),
+            "14:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "aArg7", format),
+            "15:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "aArg8", format),
+            "16:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "aar_g", format),
+            "26:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "bB", format),
+            "49:22: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "llll_llll", format),
+            "50:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "bB", format),
         };
 
         String filePath = builder.getFilePath("ParameterNameInput_Simple");
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
index 2d9cc8a806..7266858deb 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
@@ -14,9 +14,9 @@
 
 public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport{
 
+    private static final String MSG_KEY = "abbreviation.as.word";
     private static ConfigurationBuilder builder;
     private Class<AbbreviationAsWordInNameCheck> clazz = AbbreviationAsWordInNameCheck.class;
-    private String msgKey = "abbreviation.as.word";
     private static Configuration checkConfig;
     
     @BeforeClass
@@ -29,7 +29,7 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
     public void abbreviationAsWordInNameTest() throws IOException, Exception {
 
         int maxCapitalCount = 1;
-        String msg = getCheckMessage(clazz, msgKey, maxCapitalCount);
+        String msg = getCheckMessage(clazz, MSG_KEY, maxCapitalCount);
 
         final String[] expected = {
             "50: " + msg,
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorInput.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorInput.java
index f7491bda5d..119cf49d46 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorInput.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorInput.java
@@ -107,8 +107,8 @@ public int compareTo(InputEmptyLineSeparatorCheck aObject) //ok
     }
 }
 
-class Class { //ok
-    private Class() {} //ok
+class Clazz { //ok
+    private Clazz() {} //ok
 } 
 class Class2{ //warn
     public int compareTo(InputEmptyLineSeparatorCheck aObject) //ok
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index be532cd2cd..88ec46acc8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -59,26 +59,26 @@
     /** Logger for Checker */
     private static final Log LOG = LogFactory.getLog(Checker.class);
 
-    /** maintains error count */
+    /** Maintains error count */
     private final SeverityLevelCounter counter = new SeverityLevelCounter(
             SeverityLevel.ERROR);
 
-    /** vector of listeners */
+    /** Vector of listeners */
     private final List<AuditListener> listeners = Lists.newArrayList();
 
-    /** vector of fileset checks */
+    /** Vector of fileset checks */
     private final List<FileSetCheck> fileSetChecks = Lists.newArrayList();
 
-    /** class loader to resolve classes with. **/
+    /** Class loader to resolve classes with. **/
     private ClassLoader classLoader = Thread.currentThread()
             .getContextClassLoader();
 
-    /** the basedir to strip off in filenames */
+    /** The basedir to strip off in filenames */
     private String basedir;
 
-    /** locale country to report messages  **/
+    /** Locale country to report messages  **/
     private String localeCountry = Locale.getDefault().getCountry();
-    /** locale language to report messages  **/
+    /** Locale language to report messages  **/
     private String localeLanguage = Locale.getDefault().getLanguage();
 
     /** The factory for instantiating submodules */
@@ -87,13 +87,13 @@
     /** The classloader used for loading Checkstyle module classes. */
     private ClassLoader moduleClassLoader;
 
-    /** the context of all child components */
+    /** The context of all child components */
     private Context childContext;
 
     /** The audit event filters */
     private final FilterSet filters = new FilterSet();
 
-    /** the file extensions that are accepted */
+    /** The file extensions that are accepted */
     private String[] fileExtensions = ArrayUtils.EMPTY_STRING_ARRAY;
 
     /**
@@ -292,7 +292,7 @@ public void setBasedir(String basedir) {
         this.basedir = basedir;
     }
 
-    /** notify all listeners about the audit start */
+    /** Notify all listeners about the audit start */
     protected void fireAuditStarted() {
         final AuditEvent evt = new AuditEvent(this);
         for (final AuditListener listener : listeners) {
@@ -300,7 +300,7 @@ protected void fireAuditStarted() {
         }
     }
 
-    /** notify all listeners about the audit end */
+    /** Notify all listeners about the audit end */
     protected void fireAuditFinished() {
         final AuditEvent evt = new AuditEvent(this);
         for (final AuditListener listener : listeners) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index 3f629948c0..20fde23206 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -57,49 +57,49 @@
     /** Logger for ConfigurationLoader. */
     private static final Log LOG = LogFactory.getLog(ConfigurationLoader.class);
 
-    /** the public ID for version 1_0 of the configuration dtd */
+    /** The public ID for version 1_0 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_0 =
         "-//Puppy Crawl//DTD Check Configuration 1.0//EN";
 
-    /** the resource for version 1_0 of the configuration dtd */
+    /** The resource for version 1_0 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/configuration_1_0.dtd";
 
-    /** the public ID for version 1_1 of the configuration dtd */
+    /** The public ID for version 1_1 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Check Configuration 1.1//EN";
 
-    /** the resource for version 1_1 of the configuration dtd */
+    /** The resource for version 1_1 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/configuration_1_1.dtd";
 
-    /** the public ID for version 1_2 of the configuration dtd */
+    /** The public ID for version 1_2 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_2 =
         "-//Puppy Crawl//DTD Check Configuration 1.2//EN";
 
-    /** the resource for version 1_2 of the configuration dtd */
+    /** The resource for version 1_2 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_2 =
         "com/puppycrawl/tools/checkstyle/configuration_1_2.dtd";
 
-    /** the public ID for version 1_3 of the configuration dtd */
+    /** The public ID for version 1_3 of the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_3 =
         "-//Puppy Crawl//DTD Check Configuration 1.3//EN";
 
-    /** the resource for version 1_3 of the configuration dtd */
+    /** The resource for version 1_3 of the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_3 =
         "com/puppycrawl/tools/checkstyle/configuration_1_3.dtd";
 
-    /** the SAX document handler */
+    /** The SAX document handler */
     private final InternalLoader saxHandler;
 
-    /** property resolver **/
+    /** Property resolver **/
     private final PropertyResolver overridePropsResolver;
-    /** the loaded configurations **/
+    /** The loaded configurations **/
     private final Deque<DefaultConfiguration> configStack = new ArrayDeque<>();
-    /** the Configuration that is being built */
+    /** The Configuration that is being built */
     private Configuration configuration;
 
-    /** flags if modules with the severity 'ignore' should be omitted. */
+    /** Flags if modules with the severity 'ignore' should be omitted. */
     private final boolean omitIgnoredModules;
 
     /**
@@ -367,12 +367,6 @@ private static void parsePropertyString(String value,
                 prev = pos + 1;
             }
             else if (value.charAt(pos + 1) != '{') {
-                //peek ahead to see if the next char is a property or not
-                //not a property: insert the char as a literal
-                /*
-                fragments.addElement(value.substring(pos + 1, pos + 2));
-                prev = pos + 2;
-                */
                 if (value.charAt(pos + 1) == '$') {
                     //backwards compatibility two $ map to one mode
                     fragments.add("$");
@@ -414,23 +408,23 @@ else if (value.charAt(pos + 1) != '{') {
      */
     private final class InternalLoader
         extends AbstractLoader {
-        /** module elements */
+        /** Module elements */
         private static final String MODULE = "module";
-        /** name attribute */
+        /** Name attribute */
         private static final String NAME = "name";
-        /** property element */
+        /** Property element */
         private static final String PROPERTY = "property";
-        /** value attribute */
+        /** Value attribute */
         private static final String VALUE = "value";
-        /** default attribute */
+        /** Default attribute */
         private static final String DEFAULT = "default";
-        /** name of the severity property */
+        /** Name of the severity property */
         private static final String SEVERITY = "severity";
-        /** name of the message element */
+        /** Name of the message element */
         private static final String MESSAGE = "message";
-        /** name of the message element */
+        /** Name of the message element */
         private static final String METADATA = "metadata";
-        /** name of the key attribute */
+        /** Name of the key attribute */
         private static final String KEY = "key";
 
         /**
@@ -440,7 +434,6 @@ else if (value.charAt(pos + 1) != '{') {
          */
         public InternalLoader()
             throws SAXException, ParserConfigurationException {
-            // super(DTD_PUBLIC_ID_1_1, DTD_RESOURCE_NAME_1_1);
             super(createIdToResourceNameMap());
         }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
index 318324c319..9681287be1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java
@@ -40,13 +40,13 @@
     /** The name of this configuration */
     private final String name;
 
-    /** the list of child Configurations */
+    /** The list of child Configurations */
     private final List<Configuration> children = Lists.newArrayList();
 
-    /** the map from attribute names to attribute values */
+    /** The map from attribute names to attribute values */
     private final Map<String, String> attributeMap = Maps.newHashMap();
 
-    /** the map containing custom messages. */
+    /** The map containing custom messages. */
     private final Map<String, String> messages = Maps.newHashMap();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultContext.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultContext.java
index 4fbbad8621..4daf9c6a65 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultContext.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultContext.java
@@ -31,7 +31,7 @@
  * @author lkuehne
  */
 public final class DefaultContext implements Context {
-    /** stores the context entries */
+    /** Stores the context entries */
     private final Map<String, Object> entries = Maps.newHashMap();
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 1d31012ac4..498ae4ec4b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -43,17 +43,17 @@
 public class DefaultLogger
     extends AutomaticBean
     implements AuditListener {
-    /** cushion for avoiding StringBuffer.expandCapacity */
+    /** Cushion for avoiding StringBuffer.expandCapacity */
     private static final int BUFFER_CUSHION = 12;
 
-    /** where to write info messages **/
+    /** Where to write info messages **/
     private final PrintWriter infoWriter;
-    /** close info stream after use */
+    /** Close info stream after use */
     private final boolean closeInfo;
 
-    /** where to write error messages **/
+    /** Where to write error messages **/
     private final PrintWriter errorWriter;
-    /** close error stream after use */
+    /** Close error stream after use */
     private final boolean closeError;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index ea861cd524..16fed05a97 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -394,15 +394,15 @@ private static Options buildOptions() {
 
     /** Helper structure to clear show what is required for Checker to run. **/
     private static class CliOptions {
-        /** properties file location */
+        /** Properties file location */
         private String propertiesLocation;
-        /** config file location */
+        /** Config file location */
         private String configLocation;
-        /** output format */
+        /** Output format */
         private String format;
-        /** output file location */
+        /** Output file location */
         private String outputLocation;
-        /** list of file to validate */
+        /** List of file to validate */
         private List<File> files;
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index 85f6835f9d..ae9d2efe97 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -46,11 +46,11 @@
  */
 public final class PackageNamesLoader
     extends AbstractLoader {
-    /** the public ID for the configuration dtd */
+    /** The public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID =
         "-//Puppy Crawl//DTD Package Names 1.0//EN";
 
-    /** the resource for the configuration dtd */
+    /** The resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME =
         "com/puppycrawl/tools/checkstyle/packages_1_0.dtd";
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 688db3bc88..3bf5f815f3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import java.lang.reflect.Constructor;
 import java.util.Set;
 
 import org.apache.commons.logging.Log;
@@ -36,10 +37,10 @@
     /** Logger for PackageObjectFactory. */
     private static final Log LOG = LogFactory.getLog(PackageObjectFactory.class);
 
-    /** a list of package names to prepend to class names */
+    /** A list of package names to prepend to class names */
     private final Set<String> packages;
 
-    /** the class loader used to load Checkstyle core and custom modules. */
+    /** The class loader used to load Checkstyle core and custom modules. */
     private final ClassLoader moduleClassLoader;
 
     /**
@@ -112,7 +113,9 @@ private Object createObject(String className)
         throws CheckstyleException {
         try {
             final Class<?> clazz = Class.forName(className, true, moduleClassLoader);
-            return clazz.getDeclaredConstructor().newInstance();
+            final Constructor<?> declaredConstructor = clazz.getDeclaredConstructor();
+            declaredConstructor.setAccessible(true);
+            return declaredConstructor.newInstance();
         }
         catch (final ReflectiveOperationException exception) {
             throw new CheckstyleException("Unable to find class for " + className, exception);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
index 7fdffd5e03..ad1710b3ce 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
@@ -29,7 +29,7 @@
  */
 public final class PropertiesExpander
     implements PropertyResolver {
-    /** the underlying Properties object. */
+    /** The underlying Properties object. */
     private final Properties properties = new Properties();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
index 39cd14bd6b..ac5c38cb1c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
@@ -57,25 +57,25 @@
      */
     private static final String CONFIG_HASH_KEY = "configuration*?";
 
-    /** hex digits */
+    /** Hex digits */
     private static final char[] HEX_CHARS = {
         '0', '1', '2', '3', '4', '5', '6', '7',
         '8', '9', 'A', 'B', 'C', 'D', 'E', 'F',
     };
 
-    /** mask for last byte */
+    /** Mask for last byte */
     private static final int MASK_0X0F = 0x0F;
 
-    /** bit shift */
+    /** Bit shift */
     private static final int SHIFT_4 = 4;
 
-    /** the details on files **/
+    /** The details on files **/
     private final Properties details = new Properties();
 
-    /** configuration object **/
+    /** Configuration object **/
     private final Configuration config;
 
-    /** file name of cache **/
+    /** File name of cache **/
     private final String fileName;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
index 89133fbdbc..e74075405c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
@@ -31,7 +31,7 @@
  * @author Oliver Burn
  */
 public final class ScopeUtils {
-    /** prevent instantiation */
+    /** Prevent instantiation */
     private ScopeUtils() {
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
index 748f8fa157..827e9c1665 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java
@@ -80,39 +80,39 @@
         WITH_COMMENTS
     }
 
-    /** default distance between tab stops */
+    /** Default distance between tab stops */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
-    /** logger for debug purpose */
+    /** Logger for debug purpose */
     private static final Log LOG = LogFactory.getLog(TreeWalker.class);
 
-    /** maps from token name to ordinary checks */
+    /** Maps from token name to ordinary checks */
     private final Multimap<String, Check> tokenToOrdinaryChecks =
         HashMultimap.create();
 
-    /** maps from token name to comment checks */
+    /** Maps from token name to comment checks */
     private final Multimap<String, Check> tokenToCommentChecks =
             HashMultimap.create();
 
-    /** registered ordinary checks, that don't use comment nodes */
+    /** Registered ordinary checks, that don't use comment nodes */
     private final Set<Check> ordinaryChecks = Sets.newHashSet();
 
-    /** registered comment checks */
+    /** Registered comment checks */
     private final Set<Check> commentChecks = Sets.newHashSet();
 
-    /** the distance between tab stops */
+    /** The distance between tab stops */
     private int tabWidth = DEFAULT_TAB_WIDTH;
 
-    /** cache file **/
+    /** Cache file **/
     private PropertyCacheFile cache;
 
-    /** class loader to resolve classes with. **/
+    /** Class loader to resolve classes with. **/
     private ClassLoader classLoader;
 
-    /** context of child components */
+    /** Context of child components */
     private Context childContext;
 
-    /** a factory for creating submodules (i.e. the Checks) */
+    /** A factory for creating submodules (i.e. the Checks) */
     private ModuleFactory moduleFactory;
 
     /**
@@ -266,7 +266,7 @@ private void registerCheck(Check check)
                 else {
                     throw new CheckstyleException("Token \""
                         + token + "\" was not found in Acceptable tokens list"
-                                + " in check " + check);
+                                + " in check " + check.getClass().getName());
                 }
             }
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 7286ab092b..1856cf4c78 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -45,9 +45,9 @@
  */
 public final class Utils {
 
-    /** maps from a token name to value */
+    /** Maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
-    /** maps from a token value to name */
+    /** Maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     /** Array of all token IDs */
@@ -84,7 +84,7 @@
         TOKEN_IDS = ArrayUtils.toPrimitive(ids);
     }
 
-    /** stop instances being created **/
+    /** Stop instances being created **/
     private Utils() {
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
index acbd7adee1..a258bd7b06 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -42,20 +42,20 @@
 public class XMLLogger
     extends AutomaticBean
     implements AuditListener {
-    /** decimal radix */
+    /** Decimal radix */
     private static final int BASE_10 = 10;
 
-    /** hex radix */
+    /** Hex radix */
     private static final int BASE_16 = 16;
 
-    /** some known entities to detect */
+    /** Some known entities to detect */
     private static final String[] ENTITIES = {"gt", "amp", "lt", "apos",
                                               "quot", };
 
-    /** close output stream in auditFinished */
+    /** Close output stream in auditFinished */
     private final boolean closeStream;
 
-    /** helper writer that allows easy encoding and printing */
+    /** Helper writer that allows easy encoding and printing */
     private PrintWriter writer;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index 2951d7dcee..7fb0ec4a90 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -60,42 +60,42 @@
  * @author Oliver Burn
  */
 public class CheckstyleAntTask extends Task {
-    /** poor man's enum for an xml formatter */
+    /** Poor man's enum for an xml formatter */
     private static final String E_XML = "xml";
-    /** poor man's enum for an plain formatter */
+    /** Poor man's enum for an plain formatter */
     private static final String E_PLAIN = "plain";
 
-    /** class path to locate class files */
+    /** Class path to locate class files */
     private Path classpath;
 
-    /** name of file to check */
+    /** Name of file to check */
     private String fileName;
 
-    /** config file containing configuration */
+    /** Config file containing configuration */
     private String configLocation;
 
-    /** whether to fail build on violations */
+    /** Whether to fail build on violations */
     private boolean failOnViolation = true;
 
-    /** property to set on violations */
+    /** Property to set on violations */
     private String failureProperty;
 
-    /** contains the filesets to process */
+    /** Contains the filesets to process */
     private final List<FileSet> fileSets = Lists.newArrayList();
 
-    /** contains the formatters to log to */
+    /** Contains the formatters to log to */
     private final List<Formatter> formatters = Lists.newArrayList();
 
-    /** contains the Properties to override */
+    /** Contains the Properties to override */
     private final List<Property> overrideProps = Lists.newArrayList();
 
-    /** the name of the properties file */
+    /** The name of the properties file */
     private File propertiesFile;
 
-    /** the maximum number of errors that are tolerated. */
+    /** The maximum number of errors that are tolerated. */
     private int maxErrors;
 
-    /** the maximum number of warnings that are tolerated. */
+    /** The maximum number of warnings that are tolerated. */
     private int maxWarnings = Integer.MAX_VALUE;
 
     /**
@@ -476,7 +476,7 @@ private Properties createOverridingProperties() {
      * @author Oliver Burn
      */
     public static class FormatterType extends EnumeratedAttribute {
-        /** my possible values */
+        /** My possible values */
         private static final String[] VALUES = {E_XML, E_PLAIN};
 
         @Override
@@ -490,9 +490,9 @@ private Properties createOverridingProperties() {
      * @author Oliver Burn
      */
     public static class Formatter {
-        /** the formatter type */
+        /** The formatter type */
         private FormatterType formatterType;
-        /** the file to output to */
+        /** The file to output to */
         private File toFile;
         /** Whether or not the write to the named file. */
         private boolean useFile = true;
@@ -573,9 +573,9 @@ private AuditListener createXMLLogger(Task task) throws IOException {
      * Represents a property that consists of a key and value.
      */
     public static class Property {
-        /** the property key */
+        /** The property key */
         private String key;
-        /** the property value */
+        /** The property value */
         private String value;
 
         /** @return the property key */
@@ -606,7 +606,7 @@ public void setFile(File file) {
 
     /** Represents a custom listener. */
     public static class Listener {
-        /** classname of the listener class */
+        /** Classname of the listener class */
         private String classname;
 
         /** @return the classname */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
index 72b51955ca..bbdb62a707 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -38,10 +38,10 @@
     /** The dispatcher errors are fired to. */
     private MessageDispatcher messageDispatcher;
 
-    /** the file extensions that are accepted by this filter */
+    /** The file extensions that are accepted by this filter */
     private String[] fileExtensions = {};
 
-    /** collects the error messages */
+    /** Collects the error messages */
     private final LocalizedMessages messages = new LocalizedMessages();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
index 039161f416..5d3969edd9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java
@@ -51,9 +51,9 @@
  */
 public abstract class AbstractLoader
     extends DefaultHandler {
-    /** maps public id to resolve to esource name for the DTD */
+    /** Maps public id to resolve to esource name for the DTD */
     private final Map<String, String> publicIdToResourceNameMap;
-    /** parser to read XML files **/
+    /** Parser to read XML files **/
     private final XMLReader parser;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
index 0c20f91e46..33f791c5ab 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
@@ -30,10 +30,10 @@
  */
 public abstract class AbstractViolationReporter
     extends AutomaticBean {
-    /** the severity level of any violations found */
+    /** The severity level of any violations found */
     private SeverityLevel severityLevel = SeverityLevel.ERROR;
 
-    /** the identifier of the reporter */
+    /** The identifier of the reporter */
     private String id;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
index def551635d..86da3e7234 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
@@ -42,9 +42,9 @@
     extends EventObject {
     /** Record a version. */
     private static final long serialVersionUID = -3774725606973812736L;
-    /** filename event associated with **/
+    /** Filename event associated with **/
     private final String fileName;
-    /** message associated with the event **/
+    /** Message associated with the event **/
     private final LocalizedMessage message;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 2687259b0e..7259445369 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -50,7 +50,7 @@
  */
 public class AutomaticBean
     implements Configurable, Contextualizable {
-    /** the configuration of this bean */
+    /** The configuration of this bean */
     private Configuration configuration;
 
     /**
@@ -115,14 +115,12 @@ private static BeanUtilsBean createBeanUtilsBean() {
      * is called for each {@link Configuration#getChildren child Configuration}
      * of {@code configuration}.
      *
-     * @param config {@inheritDoc}
-     * @throws CheckstyleException {@inheritDoc}
      * @see Configurable
      */
     @Override
     public final void configure(Configuration config)
         throws CheckstyleException {
-        this.configuration = config;
+        configuration = config;
 
         final String[] attributes = config.getAttributeNames();
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index 3ef8f6f138..8292f221e5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -35,19 +35,19 @@
  * your own checks</a>
  */
 public abstract class Check extends AbstractViolationReporter {
-    /** default tab width for column reporting */
+    /** Default tab width for column reporting */
     private static final int DEFAULT_TAB_WIDTH = 8;
 
-    /** the current file contents */
+    /** The current file contents */
     private FileContents fileContents;
 
-    /** the tokens the check is interested in */
+    /** The tokens the check is interested in */
     private final Set<String> tokens = Sets.newHashSet();
 
-    /** the object for collecting messages. */
+    /** The object for collecting messages. */
     private LocalizedMessages messages;
 
-    /** the tab width for column reporting */
+    /** The tab width for column reporting */
     private int tabWidth = DEFAULT_TAB_WIDTH; // meaningful default
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Comment.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Comment.java
index 36c484b396..25b75f617c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Comment.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Comment.java
@@ -25,19 +25,19 @@
  * @author o_sukhodolsky
  */
 public class Comment implements TextBlock {
-    /** text of the comment. */
+    /** Text of the comment. */
     private final String[] text;
 
-    /** number of first line of the comment. */
+    /** Number of first line of the comment. */
     private final int firstLine;
 
-    /** number of last line of the comment. */
+    /** Number of last line of the comment. */
     private final int lastLine;
 
-    /** number of first column of the comment. */
+    /** Number of first column of the comment. */
     private final int firstCol;
 
-    /** number of last column of the comment. */
+    /** Number of last column of the comment. */
     private final int lastCol;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index d0bc3b5fa6..4b8b340062 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -40,19 +40,19 @@
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -2580884815577559874L;
 
-    /** constant to indicate if not calculated the child count */
+    /** Constant to indicate if not calculated the child count */
     private static final int NOT_INITIALIZED = Integer.MIN_VALUE;
 
-    /** the line number **/
+    /** The line number **/
     private int lineNo = NOT_INITIALIZED;
-    /** the column number **/
+    /** The column number **/
     private int columnNo = NOT_INITIALIZED;
 
-    /** number of children */
+    /** Number of children */
     private int childCount = NOT_INITIALIZED;
-    /** the parent token */
+    /** The parent token */
     private DetailAST parent;
-    /** previous sibling */
+    /** Previous sibling */
     private DetailAST previousSibling;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 398154267a..1640ed23cc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -42,21 +42,21 @@
      * itself -- no code.
      */
     private static final String MATCH_SINGLELINE_COMMENT_PAT = "^\\s*//.*$";
-    /** compiled regexp to match a single-line comment line */
+    /** Compiled regexp to match a single-line comment line */
     private static final Pattern MATCH_SINGLELINE_COMMENT = Pattern
             .compile(MATCH_SINGLELINE_COMMENT_PAT);
 
-    /** the file name */
+    /** The file name */
     private final String fileName;
 
-    /** the text */
+    /** The text */
     private final FileText text;
 
-    /** map of the Javadoc comments indexed on the last line of the comment.
+    /** Map of the Javadoc comments indexed on the last line of the comment.
      * The hack is it assumes that there is only one Javadoc comment per line.
      */
     private final Map<Integer, TextBlock> javadocComments = Maps.newHashMap();
-    /** map of the C++ comments indexed on the first line of the comment. */
+    /** Map of the C++ comments indexed on the first line of the comment. */
     private final Map<Integer, TextBlock> cppComments =
         Maps.newHashMap();
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index 6d24b05798..214523de70 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -161,7 +161,7 @@ public FileText(File file, String charsetName) throws IOException {
             }
             textLines.add(line);
         }
-        this.lines = textLines.toArray(new String[textLines.size()]);
+        lines = textLines.toArray(new String[textLines.size()]);
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
index b3edda405a..e602aecbbd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FilterSet.java
@@ -33,7 +33,7 @@
  */
 public class FilterSet
     implements Filter {
-    /** filter set */
+    /** Filter set */
     private final Set<Filter> filters = Sets.newHashSet();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
index 0890867f25..0f5fff96f3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java
@@ -40,14 +40,14 @@
  * @see TokenTypes#IDENT
  **/
 public final class FullIdent {
-    /** the list holding subsequent elements of identifier **/
+    /** The list holding subsequent elements of identifier **/
     private final List<String> elements = new ArrayList<>();
-    /** the line number **/
+    /** The line number **/
     private int lineNo;
-    /** the column number **/
+    /** The column number **/
     private int colNo;
 
-    /** hide default constructor */
+    /** Hide default constructor */
     private FullIdent() {
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
index 9f48fdfa3c..881e74831d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfo.java
@@ -341,9 +341,9 @@ public boolean isValidOn(final DetailAST ast) {
         TokenTypes.ANNOTATION_DEF,
     };
 
-    /** holds tag text to tag enum mappings **/
+    /** Holds tag text to tag enum mappings **/
     private static final Map<String, JavadocTagInfo> TEXT_TO_TAG;
-    /** holds tag name to tag enum mappings **/
+    /** Holds tag name to tag enum mappings **/
     private static final Map<String, JavadocTagInfo> NAME_TO_TAG;
 
     static {
@@ -366,11 +366,11 @@ public boolean isValidOn(final DetailAST ast) {
         Arrays.sort(DEF_TOKEN_TYPES_DEPRECATED);
     }
 
-    /** the tag text **/
+    /** The tag text **/
     private final String text;
-    /** the tag name **/
+    /** The tag name **/
     private final String name;
-    /** the tag type **/
+    /** The tag type **/
     private final Type type;
 
     /**
@@ -496,10 +496,10 @@ public String toString() {
      * @author Travis Schneeberger
      */
     public enum Type {
-        /** block type. **/
+        /** Block type. **/
         BLOCK,
 
-        /** inline type. **/
+        /** Inline type. **/
         INLINE
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
index 4c8b34eb45..d28fd36408 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java
@@ -51,7 +51,7 @@
     /** Required for serialization. */
     private static final long serialVersionUID = 5675176836184862150L;
 
-    /** the locale to localise messages to **/
+    /** The locale to localise messages to **/
     private static Locale sLocale = Locale.getDefault();
 
     /**
@@ -61,33 +61,33 @@
     private static final Map<String, ResourceBundle> BUNDLE_CACHE =
         Collections.synchronizedMap(new HashMap<String, ResourceBundle>());
 
-    /** the default severity level if one is not specified */
+    /** The default severity level if one is not specified */
     private static final SeverityLevel DEFAULT_SEVERITY = SeverityLevel.ERROR;
 
-    /** the line number **/
+    /** The line number **/
     private final int lineNo;
-    /** the column number **/
+    /** The column number **/
     private final int colNo;
 
-    /** the severity level **/
+    /** The severity level **/
     private final SeverityLevel severityLevel;
 
-    /** the id of the module generating the message. */
+    /** The id of the module generating the message. */
     private final String moduleId;
 
-    /** key for the message format **/
+    /** Key for the message format **/
     private final String key;
 
-    /** arguments for MessageFormat **/
+    /** Arguments for MessageFormat **/
     private final Object[] args;
 
-    /** name of the resource bundle to get messages from **/
+    /** Name of the resource bundle to get messages from **/
     private final String bundle;
 
-    /** class of the source for this LocalizedMessage */
+    /** Class of the source for this LocalizedMessage */
     private final Class<?> sourceClass;
 
-    /** a custom message overriding the default message from the bundle. */
+    /** A custom message overriding the default message from the bundle. */
     private final String customMessage;
 
     /**
@@ -389,18 +389,18 @@ public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat
             else {
                 stream = aLoader.getResourceAsStream(resourceName);
             }
-            ResourceBundle bundle = null;
+            ResourceBundle resourceBundle = null;
             if (stream != null) {
                 final Reader streamReader = new InputStreamReader(stream, "UTF-8");
                 try {
                     // Only this line is changed to make it to read properties files as UTF-8.
-                    bundle = new PropertyResourceBundle(streamReader);
+                    resourceBundle = new PropertyResourceBundle(streamReader);
                 }
                 finally {
                     stream.close();
                 }
             }
-            return bundle;
+            return resourceBundle;
         }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java
index c5ab6a9adc..1b64f878f3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java
@@ -29,7 +29,7 @@
  * @author Oliver Burn
  */
 public final class LocalizedMessages {
-    /** contains the messages logged **/
+    /** Contains the messages logged **/
     private final Set<LocalizedMessage> messages = Sets.newTreeSet();
 
     /** @return the logged messages **/
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
index 63e44ed404..40fd9fbf12 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java
@@ -29,17 +29,17 @@
  * @author Mehmet Can Cömert
  */
 public enum Scope {
-    /** nothing scope. */
+    /** Nothing scope. */
     NOTHING,
-    /** public scope. */
+    /** Public scope. */
     PUBLIC,
-    /** protected scope. */
+    /** Protected scope. */
     PROTECTED,
-    /** package or default scope. */
+    /** Package or default scope. */
     PACKAGE,
-    /** private scope. */
+    /** Private scope. */
     PRIVATE,
-    /** anonymous inner scope. */
+    /** Anonymous inner scope. */
     ANONINNER;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevel.java
index 5001389107..a7174e7353 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevel.java
@@ -35,13 +35,13 @@
  * @author Mehmet Can Cömert
  */
 public enum SeverityLevel {
-    /** security level ignore. */
+    /** Security level ignore. */
     IGNORE,
-    /** security level info. */
+    /** Security level info. */
     INFO,
-    /** security level warning. */
+    /** Security level warning. */
     WARNING,
-    /** security level error. */
+    /** Security level error. */
     ERROR;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
index b9acfa9a10..e989445e5b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java
@@ -35,13 +35,6 @@
     // The following three types are never part of an AST,
     // left here as a reminder so nobody will read them accidentally
 
-    /* * token representing a NULL_TREE_LOOKAHEAD */
-    // public static final int NULL_TREE_LOOKAHEAD = 3;
-    /* * token representing a BLOCK */
-    // public static final int BLOCK = 4;
-    /* * token representing a VOCAB */
-    // public static final int VOCAB = 149;
-
     // These are the types that can actually occur in an AST
     // it makes sense to register Checks for these types
 
@@ -1091,13 +1084,6 @@
      * @see #SUPER_CTOR_CALL
      **/
     public static final int CTOR_CALL = GeneratedJavaTokenTypes.CTOR_CALL;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #PACKAGE_DEF
-     **/
-    //public static final int LITERAL_PACKAGE =
-    //    GeneratedJavaTokenTypes.LITERAL_package;
 
     /**
      * The statement terminator (<code>;</code>).  Depending on the
@@ -1110,21 +1096,7 @@
      * @see #LITERAL_FOR
      **/
     public static final int SEMI = GeneratedJavaTokenTypes.SEMI;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #IMPORT
-     **/
-    // public static final int LITERAL_IMPORT =
-    //     GeneratedJavaTokenTypes.LITERAL_import;
 
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #INDEX_OP
-     * @see #ARRAY_DECLARATOR
-     **/
-    //public static final int LBRACK = GeneratedJavaTokenTypes.LBRACK;
     /**
      * The <code>]</code> symbol.
      *
@@ -1356,14 +1328,6 @@
     public static final int LITERAL_CLASS =
         GeneratedJavaTokenTypes.LITERAL_class;
 
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #EXTENDS_CLAUSE
-     **/
-    //public static final int LITERAL_EXTENDS =
-    //    GeneratedJavaTokenTypes.LITERAL_extends;
-
     /**
      * The <code>interface</code> keyword. This token appears in
      * interface definition.
@@ -1399,13 +1363,6 @@
      * @see #IMPLEMENTS_CLAUSE
      **/
     public static final int COMMA = GeneratedJavaTokenTypes.COMMA;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #IMPLEMENTS_CLAUSE
-     **/
-    // public static final int LITERAL_IMPLEMENTS =
-    //     GeneratedJavaTokenTypes.LITERAL_implements;
 
     /**
      * A left parenthesis (<code>(</code>).
@@ -2685,65 +2642,6 @@
      * @see #NUM_FLOAT
      **/
     public static final int NUM_DOUBLE = GeneratedJavaTokenTypes.NUM_DOUBLE;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see <a
-     * href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.6">Java
-     * Language Specification, &sect;3.6</a>
-     * @see FileContents
-     **/
-    //public static final int WS = GeneratedJavaTokenTypes.WS;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see <a
-     * href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.7">Java
-     * Language Specification, &sect;3.7</a>
-     * @see FileContents
-     **/
-    //public static final int SL_COMMENT = GeneratedJavaTokenTypes.SL_COMMENT;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see <a
-     * href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.7">Java
-     * Language Specification, &sect;3.7</a>
-     * @see FileContents
-     **/
-    //public static final int ML_COMMENT = GeneratedJavaTokenTypes.ML_COMMENT;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see <a
-     * href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.6">Java
-     * Language Specification, &sect;3.10.6</a>
-     * @see #CHAR_LITERAL
-     * @see #STRING_LITERAL
-     **/
-    //public static final int ESC = GeneratedJavaTokenTypes.ESC;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #NUM_INT
-     * @see #NUM_LONG
-     **/
-    //public static final int HEX_DIGIT = GeneratedJavaTokenTypes.HEX_DIGIT;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #NUM_FLOAT
-     * @see #NUM_DOUBLE
-     **/
-    //public static final int EXPONENT = GeneratedJavaTokenTypes.EXPONENT;
-    /* *
-     * This token does not appear in the tree.
-     *
-     * @see #NUM_FLOAT
-     * @see #NUM_DOUBLE
-     **/
-    // public static final int FLOAT_SUFFIX =
-    //     GeneratedJavaTokenTypes.FLOAT_SUFFIX;
 
     /**
      * The <code>assert</code> keyword.  This is only for Java 1.4 and
@@ -3480,7 +3378,7 @@
     public static final int COMMENT_CONTENT =
             GeneratedJavaTokenTypes.COMMENT_CONTENT;
 
-    /** prevent instantiation */
+    /** Prevent instantiation */
     private TokenTypes() {
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
index a2a59232a5..b5fc6db1b8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
@@ -244,14 +244,14 @@ protected LexicalFrame(LexicalFrame parent) {
             varNames = Sets.newHashSet();
         }
 
-        /** add a name to the frame.
+        /** Add a name to the frame.
          * @param nameToAdd the name we're adding
          */
         void addName(String nameToAdd) {
             varNames.add(nameToAdd);
         }
 
-        /** check whether the frame contains a given name.
+        /** Check whether the frame contains a given name.
          * @param nameToFind the name we're looking for
          * @return whether it was found
          */
@@ -259,7 +259,7 @@ boolean contains(String nameToFind) {
             return varNames.contains(nameToFind);
         }
 
-        /** check whether the frame contains a given name.
+        /** Check whether the frame contains a given name.
          * @param nameToFind the name we're looking for
          * @return whether it was found
          */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
index a6708cbf4a..cb4f7382b0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
@@ -36,11 +36,11 @@
  */
 public abstract class AbstractFormatCheck
     extends Check {
-    /** the flags to create the regular expression with */
+    /** The flags to create the regular expression with */
     private int compileFlags;
-    /** the regexp to match against */
+    /** The regexp to match against */
     private Pattern regexp;
-    /** the format string of the regexp */
+    /** The format string of the regexp */
     private String format;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
index e04265c23a..88be0f0db7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
@@ -39,7 +39,7 @@
     extends Check {
     /** Since I cannot get this by going <tt>T.class</tt>. */
     private final Class<T> optionClass;
-    /** the policy to enforce */
+    /** The policy to enforce */
     private T option;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 38823a8f49..2127f3afd7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -44,10 +44,10 @@
  */
 @Deprecated
 public abstract class AbstractTypeAwareCheck extends Check {
-    /** imports details **/
+    /** Imports details **/
     private final Set<String> imports = Sets.newHashSet();
 
-    /** full identifier for package of the method **/
+    /** Full identifier for package of the method **/
     private FullIdent packageFullIdent;
 
     /** Name of current class. */
@@ -414,15 +414,14 @@ public final Token getName() {
     }
 
     /** Represents regular classes/enumes. */
-    @SuppressWarnings("deprecation")
     private static final class RegularClass extends AbstractClassInfo {
-        /** name of surrounding class. */
+        /** Name of surrounding class. */
         private final String surroundingClass;
-        /** is class loadable. */
+        /** Is class loadable. */
         private boolean loadable = true;
         /** {@code Class} object of this class if it's loadable. */
         private Class<?> classObj;
-        /** the check we use to resolve classes. */
+        /** The check we use to resolve classes. */
         private final AbstractTypeAwareCheck check;
 
         /**
@@ -491,8 +490,7 @@ public String toString() {
 
         @Override
         public String toString() {
-            return "ClassAlias[alias " + getName()
-                + " for " + classInfo + "]";
+            return "ClassAlias[alias " + getName() + " for " + classInfo.getName() + "]";
         }
     }
 
@@ -500,11 +498,11 @@ public String toString() {
      * Represents text element with location in the text.
      */
     protected static class Token {
-        /** token's column number. */
+        /** Token's column number. */
         private final int column;
-        /** token's line number. */
+        /** Token's line number. */
         private final int line;
-        /** token's text. */
+        /** Token's text. */
         private final String text;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
index 3db654edca..39d5d8818d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
@@ -32,7 +32,7 @@
  * @author lkuehne
  */
 public class ArrayTypeStyleCheck extends Check {
-    /** controls whether to use Java or C style */
+    /** Controls whether to use Java or C style */
     private boolean javaStyle = true;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
index 4ce49b764c..44ca307ce5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java
@@ -36,16 +36,25 @@
  */
 public final class CheckUtils {
     // constants for parseDouble()
-    /** octal radix */
+    /** Octal radix */
     private static final int BASE_8 = 8;
 
-    /** decimal radix */
+    /** Decimal radix */
     private static final int BASE_10 = 10;
 
-    /** hex radix */
+    /** Hex radix */
     private static final int BASE_16 = 16;
 
-    /** prevent instances */
+    /** Maximum children allowed in setter/getter */
+    private static final int SETTER_GETTER_MAX_CHILDREN = 7;
+
+    /** Maximum nodes allowed in a body of setter */
+    private static final int SETTER_BODY_SIZE = 3;
+
+    /** Maximum nodes allowed in a body of getter */
+    private static final int GETTER_BODY_SIZE = 2;
+
+    /** Prevent instances */
     private CheckUtils() {
     }
 
@@ -305,4 +314,97 @@ public static DetailAST getFirstNode(final DetailAST node) {
 
         return typeParams;
     }
+
+    /**
+     * Returns whether an AST represents a setter method.
+     * @param ast the AST to check with
+     * @return whether the AST represents a setter method
+     */
+    public static boolean isSetterMethod(final DetailAST ast) {
+        // Check have a method with exactly 7 children which are all that
+        // is allowed in a proper setter method which does not throw any
+        // exceptions.
+        if (ast.getType() != TokenTypes.METHOD_DEF
+                || ast.getChildCount() != SETTER_GETTER_MAX_CHILDREN) {
+            return false;
+        }
+
+        // Should I handle only being in a class????
+
+        // Check the name matches format setX...
+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
+        final String name = type.getNextSibling().getText();
+        if (!name.matches("^set[A-Z].*")) { // Depends on JDK 1.4
+            return false;
+        }
+
+        // Check the return type is void
+        if (type.getChildCount(TokenTypes.LITERAL_VOID) == 0) {
+            return false;
+        }
+
+        // Check that is had only one parameter
+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
+        if (params.getChildCount(TokenTypes.PARAMETER_DEF) != 1) {
+            return false;
+        }
+
+        // Now verify that the body consists of:
+        // SLIST -> EXPR -> ASSIGN
+        // SEMI
+        // RCURLY
+        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
+        if (slist == null || slist.getChildCount() != SETTER_BODY_SIZE) {
+            return false;
+        }
+
+        final DetailAST expr = slist.getFirstChild();
+        return expr.getFirstChild().getType() == TokenTypes.ASSIGN;
+    }
+
+    /**
+     * Returns whether an AST represents a getter method.
+     * @param ast the AST to check with
+     * @return whether the AST represents a getter method
+     */
+    public static boolean isGetterMethod(final DetailAST ast) {
+        // Check have a method with exactly 7 children which are all that
+        // is allowed in a proper getter method which does not throw any
+        // exceptions.
+        if (ast.getType() != TokenTypes.METHOD_DEF
+                || ast.getChildCount() != SETTER_GETTER_MAX_CHILDREN) {
+            return false;
+        }
+
+        // Check the name matches format of getX or isX. Technically I should
+        // check that the format isX is only used with a boolean type.
+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
+        final String name = type.getNextSibling().getText();
+        if (!name.matches("^(is|get)[A-Z].*")) { // Depends on JDK 1.4
+            return false;
+        }
+
+        // Check the return type is void
+        if (type.getChildCount(TokenTypes.LITERAL_VOID) > 0) {
+            return false;
+        }
+
+        // Check that is had only one parameter
+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
+        if (params.getChildCount(TokenTypes.PARAMETER_DEF) > 0) {
+            return false;
+        }
+
+        // Now verify that the body consists of:
+        // SLIST -> RETURN
+        // RCURLY
+        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
+        if (slist == null || slist.getChildCount() != GETTER_BODY_SIZE) {
+            return false;
+        }
+
+        final DetailAST expr = slist.getFirstChild();
+        return expr.getType() == TokenTypes.LITERAL_RETURN;
+
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
index 1ae78790f0..a21c96cf56 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java
@@ -30,11 +30,11 @@
  * @author Oliver Burn
  */
 public class ClassResolver {
-    /** name of the package to check if the class belongs to **/
+    /** Name of the package to check if the class belongs to **/
     private final String pkg;
-    /** set of imports to check against **/
+    /** Set of imports to check against **/
     private final Set<String> imports;
-    /** use to load classes **/
+    /** Use to load classes **/
     private final ClassLoader loader;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index d93f587a91..646508b409 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -192,21 +192,21 @@
      */
     public static final String MSG_KEY_SUM_MAX = "descendant.token.sum.max";
 
-    /** minimum depth */
+    /** Minimum depth */
     private int minimumDepth;
-    /** maximum depth */
+    /** Maximum depth */
     private int maximumDepth = Integer.MAX_VALUE;
-    /** minimum number */
+    /** Minimum number */
     private int minimumNumber;
-    /** maximum number */
+    /** Maximum number */
     private int maximumNumber = Integer.MAX_VALUE;
     /** Whether to sum the number of tokens found. */
     private boolean sumTokenCounts;
-    /** limited tokens */
+    /** Limited tokens */
     private int[] limitedTokens = ArrayUtils.EMPTY_INT_ARRAY;
-    /** error message when minimum count not reached */
+    /** Error message when minimum count not reached */
     private String minimumMessage;
-    /** error message when maximum count exceeded */
+    /** Error message when maximum count exceeded */
     private String maximumMessage;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
index d6604be67c..fd592c3077 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java
@@ -44,7 +44,7 @@
     /** System default line separators. **/
     SYSTEM(System.getProperty("line.separator"));
 
-    /** the line separator representation */
+    /** The line separator representation */
     private final byte[] lineSeparator;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
index 4ef00f13bb..913fecce0d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java
@@ -73,7 +73,7 @@
      */
     public static final String MSG_KEY_NO_NEWLINE_EOF = "noNewlineAtEOF";
 
-    /** the line separator to check against. */
+    /** The line separator to check against. */
     private LineSeparatorOption lineSeparator = LineSeparatorOption.SYSTEM;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
index fb5346243b..d0f48f834e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java
@@ -31,7 +31,7 @@
  * @author maxvetrenko
  */
 public class OuterTypeFilenameCheck extends Check {
-    /** indicates whether the first token has been seen in the file. */
+    /** Indicates whether the first token has been seen in the file. */
     private boolean seenFirstToken;
 
     /** Current file name*/
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index a0bc3879d6..d7dde22ae9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -56,13 +56,13 @@
      */
     public static final String CHECKSTYLE_PREFIX = "checkstyle:";
 
-    /** java.lang namespace prefix, which is stripped from SuppressWarnings */
+    /** Java.lang namespace prefix, which is stripped from SuppressWarnings */
     private static final String JAVA_LANG_PREFIX = "java.lang.";
 
-    /** suffix to be removed from subclasses of Check */
+    /** Suffix to be removed from subclasses of Check */
     private static final String CHECK_SUFFIX = "Check";
 
-    /** a map from check source names to suppression aliases */
+    /** A map from check source names to suppression aliases */
     private static final Map<String, String> CHECK_ALIAS_MAP = new HashMap<>();
 
     /**
@@ -423,17 +423,17 @@ private static String getStringExpr(DetailAST ast) {
             "Expression or annotation array initializer AST expected: " + ast);
     }
 
-    /** records a particular suppression for a region of a file */
+    /** Records a particular suppression for a region of a file */
     private static class Entry {
-        /** the source name of the suppressed check */
+        /** The source name of the suppressed check */
         private final String checkName;
-        /** the suppression region for the check - first line */
+        /** The suppression region for the check - first line */
         private final int firstLine;
-        /** the suppression region for the check - first column */
+        /** The suppression region for the check - first column */
         private final int firstColumn;
-        /** the suppression region for the check - last line */
+        /** The suppression region for the check - last line */
         private final int lastLine;
-        /** the suppression region for the check - last column */
+        /** The suppression region for the check - last column */
         private final int lastColumn;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index cb713429c1..afae087c81 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -107,10 +107,10 @@
      */
     public static final String MSG_KEY = "trailing.comments";
 
-    /** default format for allowed blank line. */
+    /** Default format for allowed blank line. */
     private static final String DEFAULT_FORMAT = "^[\\s\\}\\);]*$";
 
-    /** pattern for legal trailing comment. */
+    /** Pattern for legal trailing comment. */
     private Pattern legalComment;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index 284a3037ac..e76cb726f2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -48,16 +48,16 @@
      */
     public static final String MSG_KEY = "uncommented.main";
 
-    /** the pattern to exclude classes from the check */
+    /** The pattern to exclude classes from the check */
     private String excludedClasses = "^$";
-    /** compiled regexp to exclude classes from check */
+    /** Compiled regexp to exclude classes from check */
     private Pattern excludedClassesPattern =
         Utils.createPattern(excludedClasses);
-    /** current class name */
+    /** Current class name */
     private String currentClass;
-    /** current package */
+    /** Current package */
     private FullIdent packageName;
-    /** class definition depth */
+    /** Class definition depth */
     private int classDepth;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index 0bd0b2ec3f..709a1ecab1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -96,18 +96,18 @@
     /** {@link Deprecated Deprecated} annotation name */
     private static final String DEPRECATED = "Deprecated";
 
-    /** fully-qualified {@link Deprecated Deprecated} annotation name */
+    /** Fully-qualified {@link Deprecated Deprecated} annotation name */
     private static final String FQ_DEPRECATED = "java.lang." + DEPRECATED;
 
-    /** compiled regexp to match Javadoc tag with no argument * */
+    /** Compiled regexp to match Javadoc tag with no argument * */
     private static final Pattern MATCH_DEPRECATED =
         Utils.createPattern("@(deprecated)\\s+\\S");
 
-    /** compiled regexp to match first part of multilineJavadoc tags * */
+    /** Compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_DEPRECATED_MULTILINE_START =
         Utils.createPattern("@(deprecated)\\s*$");
 
-    /** compiled regexp to look for a continuation of the comment * */
+    /** Compiled regexp to look for a continuation of the comment * */
     private static final Pattern MATCH_DEPRECATED_MULTILINE_CONT =
         Utils.createPattern("(\\*/|@|[^\\s\\*])");
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
index 4ec82dd751..f047ab496d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
@@ -92,10 +92,10 @@
     /** {@link Override Override} annotation name */
     private static final String OVERRIDE = "Override";
 
-    /** fully-qualified {@link Override Override} annotation name */
+    /** Fully-qualified {@link Override Override} annotation name */
     private static final String FQ_OVERRIDE = "java.lang." + OVERRIDE;
 
-    /** compiled regexp to match Javadoc tags with no argument and {} * */
+    /** Compiled regexp to match Javadoc tags with no argument and {} * */
     private static final Pattern MATCH_INHERITDOC =
         Utils.createPattern("\\{\\s*@(inheritDoc)\\s*\\}");
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 9731e30c3b..ebeedd6cff 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -95,21 +95,6 @@
      */
     public static final String MSG_KEY_LINE_BREAK_AFTER = "line.break.after";
 
-    /**
-     * Default maximum line length.
-     * @deprecated since 6.10 release, option maxLineLength is not required for the Check.
-     */
-    @Deprecated
-    private static final int DEFAULT_MAX_LINE_LENGTH = 80;
-
-    /**
-     * Maximum line length.
-     * @deprecated since 6.10 release, option is not required for the Check.
-     */
-    @Deprecated
-    @SuppressWarnings("unused")
-    private int maxLineLength = DEFAULT_MAX_LINE_LENGTH;
-
     /** If true, Check will ignore enums*/
     private boolean ignoreEnums = true;
 
@@ -128,7 +113,7 @@ public LeftCurlyCheck() {
      */
     @Deprecated
     public void setMaxLineLength(int maxLineLength) {
-        this.maxLineLength = maxLineLength;
+        // do nothing, option is deprecated
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java
index ad6deafe2f..9babf989a6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyOption.java
@@ -37,9 +37,9 @@
 
     /**
      * Represents the policy that if the brace will fit on the first line of
-     * the statement, then apply <code>EOL</code> rule.
-     * Otherwise apply the <code>NL</code> rule.
-     * <code>NLOW</code> is a mnemonic for "new line on wrap".
+     * the statement, then apply {@code EOL} rule.
+     * Otherwise apply the {@code NL} rule.
+     * {@code NLOW} is a mnemonic for "new line on wrap".
      *
      * <p> For the example above Checkstyle will enforce:
      *
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index bc1e5cdb8d..4df0dfde10 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -180,14 +180,14 @@ private boolean isSkipStatement(DetailAST statement) {
     /**
      * Checks if current statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * if (obj.isValid()) return true;
-     * </code>
+     * }
      * </p>
      * <p>
-     * <code>
+     * {@code
      * while (obj.isValid()) return true;
-     * </code>
+     * }
      * </p>
      * @param statement if, for, while, do-while, lambda, else, case, default statements.
      * @return true if current statement is single-line statement.
@@ -247,9 +247,9 @@ private static boolean isSingleLineWhile(DetailAST literalWhile) {
     /**
      * Checks if current do-while statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * do this.notify(); while (o != null);
-     * </code>
+     * }
      * </p>
      * @param literalDo {@link TokenTypes#LITERAL_DO do-while statement}.
      * @return true if current do-while statement is single-line statement.
@@ -267,9 +267,9 @@ private static boolean isSingleLineDoWhile(DetailAST literalDo) {
     /**
      * Checks if current for statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * for (int i = 0; ; ) this.notify();
-     * </code>
+     * }
      * </p>
      * @param literalFor {@link TokenTypes#LITERAL_FOR for statement}.
      * @return true if current for statement is single-line statement.
@@ -290,9 +290,9 @@ else if (literalFor.getParent().getType() == TokenTypes.SLIST
     /**
      * Checks if current if statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * if (obj.isValid()) return true;
-     * </code>
+     * }
      * </p>
      * @param literalIf {@link TokenTypes#LITERAL_IF if statement}.
      * @return true if current if statement is single-line statement.
@@ -317,9 +317,9 @@ private static boolean isSingleLineIf(DetailAST literalIf) {
     /**
      * Checks if current lambda statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * Runnable r = () -> System.out.println("Hello, world!");
-     * </code>
+     * }
      * </p>
      * @param lambda {@link TokenTypes#LAMBDA lambda statement}.
      * @return true if current lambda statement is single-line statement.
@@ -361,9 +361,9 @@ private static boolean isSingleLineCase(DetailAST literalCase) {
     /**
      * Checks if current default statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * default: doSomeStuff();
-     * </code>
+     * }
      * </p>
      * @param literalDefault {@link TokenTypes#LITERAL_DEFAULT default statement}.
      * @return true if current default statement is single-line statement.
@@ -381,9 +381,9 @@ private static boolean isSingleLineDefault(DetailAST literalDefault) {
     /**
      * Checks if current else statement is single-line statement, e.g.:
      * <p>
-     * <code>
+     * {@code
      * else doSomeStuff();
-     * </code>
+     * }
      * </p>
      * @param literalElse {@link TokenTypes#LITERAL_ELSE else statement}.
      * @return true if current else statement is single-line statement.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java
index 4e14b0ffdb..fd1075a7c2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java
@@ -28,9 +28,9 @@
  * @author <a href="mailto:simon@redhillconsulting.com.au">Simon Harris</a>
  */
 public abstract class AbstractNestedDepthCheck extends Check {
-    /** maximum allowed nesting depth */
+    /** Maximum allowed nesting depth */
     private int max;
-    /** current nesting depth */
+    /** Current nesting depth */
     private int depth;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index 45ad85ce00..42c3288a8d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -45,7 +45,7 @@
      */
     public static final String MSG_KEY = "missing.super.call";
 
-    /** stack of methods */
+    /** Stack of methods */
     private final Deque<MethodNode> methodStack = Lists.newLinkedList();
 
     @Override
@@ -194,10 +194,10 @@ private boolean isOverridingMethod(DetailAST ast) {
      * @author Rick Giles
      */
     private static class MethodNode {
-        /** method definition */
+        /** Method definition */
         private final DetailAST method;
 
-        /** true if the overriding method calls the super method */
+        /** True if the overriding method calls the super method */
         private boolean callingSuper;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
index ccb4ad9384..4409275c7a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java
@@ -62,35 +62,35 @@
  *
  * <p>
  * For example:
- * <pre><code>
+ * <pre>{@code
  *     class K {
  *         int a;
  *         void m(){}
  *         K(){}  &lt;-- "Constructor definition in wrong order"
  *         int b; &lt;-- "Instance variable definition in wrong order"
  *     }
- * </code></pre>
+ * }</pre>
  *
  * <p>
  * With <b>ignoreConstructors</b> option:
- * <pre><code>
+ * <pre>{@code
  *     class K {
  *         int a;
  *         void m(){}
  *         K(){}
  *         int b; &lt;-- "Instance variable definition in wrong order"
  *     }
- * </code></pre>
+ * }</pre>
  *
  * <p>
  * With <b>ignoreConstructors</b> option and without a method definition in a source class:
- * <pre><code>
+ * <pre>{@code
  *     class K {
  *         int a;
  *         K(){}
  *         int b; &lt;-- "Instance variable definition in wrong order"
  *     }
- * </code></pre>
+ * }</pre>
  *
  * <p>
  * An example of how to configure the check is:
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 4589b964cc..84ad553c97 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -59,10 +59,10 @@
      */
     public static final String MSG_KEY = "equals.noHashCode";
 
-    /** maps OBJ_BLOCK to the method definition of equals() */
+    /** Maps OBJ_BLOCK to the method definition of equals() */
     private final Map<DetailAST, DetailAST> objBlockEquals = Maps.newHashMap();
 
-    /** the set of OBJ_BLOCKs that contain a definition of hashCode() */
+    /** The set of OBJ_BLOCKs that contain a definition of hashCode() */
     private final Set<DetailAST> objBlockWithHashCode = Sets.newHashSet();
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
index 78315b596b..5bff52ce2d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
@@ -173,7 +173,8 @@ private static boolean isZero(DetailAST expr) {
             case TokenTypes.NUM_INT:
             case TokenTypes.NUM_LONG:
                 final String text = expr.getText();
-                return CheckUtils.parseDouble(text, type) == 0.0;
+                return Double.compare(
+                    CheckUtils.parseDouble(text, type), 0.0) == 0;
             default:
                 return false;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
index 63c062ef9d..ecf9e6f70b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java
@@ -135,15 +135,15 @@
      */
     public static final String MSG_KEY = "hidden.field";
 
-    /** stack of sets of field names,
+    /** Stack of sets of field names,
      * one for each class of a set of nested classes.
      */
-    private FieldFrame currentFrame;
+    private FieldFrame frame;
 
-    /** pattern for names of variables and parameters to ignore. */
+    /** Pattern for names of variables and parameters to ignore. */
     private Pattern regexp;
 
-    /** controls whether to check the parameter of a property setter method */
+    /** Controls whether to check the parameter of a property setter method */
     private boolean ignoreSetter;
 
     /**
@@ -154,10 +154,10 @@
      */
     private boolean setterCanReturnItsClass;
 
-    /** controls whether to check the parameter of a constructor */
+    /** Controls whether to check the parameter of a constructor */
     private boolean ignoreConstructorParameter;
 
-    /** controls whether to check the parameter of abstract methods. */
+    /** Controls whether to check the parameter of abstract methods. */
     private boolean ignoreAbstractMethods;
 
     @Override
@@ -190,7 +190,7 @@
 
     @Override
     public void beginTree(DetailAST rootAST) {
-        currentFrame = new FieldFrame(null, true, null);
+        frame = new FieldFrame(null, true, null);
     }
 
     @Override
@@ -232,7 +232,7 @@ private void visitOtherTokens(DetailAST ast, int type) {
         else {
             frameName = null;
         }
-        final FieldFrame frame = new FieldFrame(currentFrame, isStaticInnerType, frameName);
+        final FieldFrame newFrame = new FieldFrame(frame, isStaticInnerType, frameName);
 
         //add fields to container
         final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
@@ -246,17 +246,17 @@ private void visitOtherTokens(DetailAST ast, int type) {
                     final DetailAST mods =
                         child.findFirstToken(TokenTypes.MODIFIERS);
                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {
-                        frame.addStaticField(name);
+                        newFrame.addStaticField(name);
                     }
                     else {
-                        frame.addInstanceField(name);
+                        newFrame.addInstanceField(name);
                     }
                 }
                 child = child.getNextSibling();
             }
         }
         // push container
-        currentFrame = frame;
+        frame = newFrame;
     }
 
     @Override
@@ -265,7 +265,7 @@ public void leaveToken(DetailAST ast) {
             || ast.getType() == TokenTypes.ENUM_DEF
             || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {
             //pop
-            currentFrame = currentFrame.getParent();
+            frame = frame.getParent();
         }
     }
 
@@ -300,8 +300,8 @@ private void processVariable(DetailAST ast) {
      * @return true if static or instance field
      */
     private boolean isStaticOrOnstanceField(DetailAST ast, String name) {
-        return currentFrame.containsStaticField(name)
-            || !inStatic(ast) && currentFrame.containsInstanceField(name);
+        return frame.containsStaticField(name)
+                || !inStatic(ast) && frame.containsInstanceField(name);
     }
 
     /**
@@ -384,7 +384,7 @@ private boolean isSetterMethod(DetailAST aMethodAST, String aName) {
             final DetailAST typeAST = aMethodAST.findFirstToken(TokenTypes.TYPE);
             final String returnType = typeAST.getFirstChild().getText();
             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)
-                || setterCanReturnItsClass && currentFrame.embeddedIn(returnType)) {
+                    || setterCanReturnItsClass && frame.embeddedIn(returnType)) {
                 // this method has signature
                 //
                 //     void set${Name}(${anyType} ${name})
@@ -461,7 +461,7 @@ private boolean isIgnoredParamOfAbstractMethod(DetailAST ast) {
 
     /**
      * Set the ignore format to the specified regular expression.
-     * @param format a <code>String</code> value
+     * @param format a {@code String} value
      */
     public void setIgnoreFormat(String format) {
         regexp = Utils.createPattern(format);
@@ -518,19 +518,19 @@ public void setIgnoreAbstractMethods(
      * @author Rick Giles
      */
     private static class FieldFrame {
-        /** name of the frame, such name of the class or enum declaration */
+        /** Name of the frame, such name of the class or enum declaration */
         private final String frameName;
 
-        /** is this a static inner type */
+        /** Is this a static inner type */
         private final boolean staticType;
 
-        /** parent frame. */
+        /** Parent frame. */
         private final FieldFrame parent;
 
-        /** set of instance field names */
+        /** Set of instance field names */
         private final Set<String> instanceFields = Sets.newHashSet();
 
-        /** set of static field names */
+        /** Set of static field names */
         private final Set<String> staticFields = Sets.newHashSet();
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
index 4a2f416df2..2004832b7b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java
@@ -76,16 +76,16 @@
     /** Set of fully qualified classnames. E.g. "java.lang.Boolean" */
     private final Set<String> illegalClasses = Sets.newHashSet();
 
-    /** name of the package */
+    /** Name of the package */
     private String pkgName;
 
-    /** the imports for the file */
+    /** The imports for the file */
     private final Set<FullIdent> imports = Sets.newHashSet();
 
-    /** the class names defined in the file */
+    /** The class names defined in the file */
     private final Set<String> classNames = Sets.newHashSet();
 
-    /** the instantiations in the file */
+    /** The instantiations in the file */
     private final Set<DetailAST> instantiations = Sets.newHashSet();
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java
index 559ec12b1f..415df9c04d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java
@@ -62,10 +62,10 @@
         "finalize",
     };
 
-    /** property for ignoring overridden methods. */
+    /** Property for ignoring overridden methods. */
     private boolean ignoreOverriddenMethods = true;
 
-    /** methods which should be ignored. */
+    /** Methods which should be ignored. */
     private final Set<String> ignoredMethodNames = Sets.newHashSet();
 
     /** Creates new instance of the check. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 17bf16ecfc..4f589bed94 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -130,13 +130,13 @@
         "getEnvironment",
     };
 
-    /** illegal classes. */
+    /** Illegal classes. */
     private final Set<String> illegalClassNames = Sets.newHashSet();
-    /** legal abstract classes. */
+    /** Legal abstract classes. */
     private final Set<String> legalAbstractClassNames = Sets.newHashSet();
-    /** methods which should be ignored. */
+    /** Methods which should be ignored. */
     private final Set<String> ignoredMethodNames = Sets.newHashSet();
-    /** check methods and fields with only corresponding modifiers. */
+    /** Check methods and fields with only corresponding modifiers. */
     private List<Integer> memberModifiers;
 
     /** Creates new instance of the check. */
@@ -262,9 +262,9 @@ private void visitImport(DetailAST importAst) {
     /**
      * Checks if current import is star import. E.g.:
      * <p>
-     * <code>
+     * {@code
      * import java.util.*;
-     * </code>
+     * }
      * </p>
      * @param importAst {@link TokenTypes#IMPORT Import}
      * @return true if it is star import
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index fc3cec0235..d3402a10e4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -167,7 +167,7 @@
         TokenTypes.MINUS,
     };
 
-    /** the numbers to ignore in the check, sorted */
+    /** The numbers to ignore in the check, sorted */
     private double[] ignoreNumbers = {-1, 0, 1, 2};
 
     /** Whether to ignore magic numbers in a hash code method. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
index 721309197a..4479991a61 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedForDepthCheck.java
@@ -49,7 +49,7 @@
      */
     public static final String MSG_KEY = "nested.for.depth";
 
-    /** default allowed nesting depth. */
+    /** Default allowed nesting depth. */
     private static final int DEFAULT_MAX = 1;
 
     /** Creates new check instance with default allowed nesting depth. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java
index f9d1537601..086ecbb04c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java
@@ -36,7 +36,7 @@
      */
     public static final String MSG_KEY = "nested.if.depth";
 
-    /** default allowed nesting depth. */
+    /** Default allowed nesting depth. */
     private static final int DEFAULT_MAX = 1;
 
     /** Creates new check instance with default allowed nesting depth. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
index caa33edfbb..3b5a8dd4a9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java
@@ -34,7 +34,7 @@
      */
     public static final String MSG_KEY = "nested.try.depth";
 
-    /** default allowed nesting depth */
+    /** Default allowed nesting depth */
     private static final int DEFAULT_MAX = 1;
 
     /** Creates new check instance with default allowed nesting depth. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java
index f804afba91..8a196a03ae 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java
@@ -42,7 +42,7 @@
     /** Line number used to log violation when no AST nodes are present in file. */
     private static final int DEFAULT_LINE_NUMBER = 1;
 
-    /** is package defined. */
+    /** Is package defined. */
     private boolean defined;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 4e9dcd552c..fe03f343ae 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -68,9 +68,9 @@
      */
     public static final String MSG_VARIABLE = "require.this.variable";
 
-    /** whether we should check fields usage. */
+    /** Whether we should check fields usage. */
     private boolean checkFields = true;
-    /** whether we should check methods usage. */
+    /** Whether we should check methods usage. */
     private boolean checkMethods = true;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index 7bba62391b..c4518380d3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -104,18 +104,18 @@ public void leaveToken(DetailAST ast) {
         }
     }
 
-    /** maintains information about class' ctors */
+    /** Maintains information about class' ctors */
     private static final class ClassDesc {
-        /** is class declared as final */
+        /** Is class declared as final */
         private final boolean declaredAsFinal;
 
-        /** is class declared as abstract */
+        /** Is class declared as abstract */
         private final boolean declaredAsAbstract;
 
-        /** does class have non-provate ctors */
+        /** Does class have non-provate ctors */
         private boolean withNonPrivateCtor;
 
-        /** does class have private ctors */
+        /** Does class have private ctors */
         private boolean withPrivateCtor;
 
         /**
@@ -130,12 +130,12 @@ public void leaveToken(DetailAST ast) {
             this.declaredAsAbstract = declaredAsAbstract;
         }
 
-        /** adds private ctor. */
+        /** Adds private ctor. */
         void reportPrivateCtor() {
             withPrivateCtor = true;
         }
 
-        /** adds non-private ctor. */
+        /** Adds non-private ctor. */
         void reportNonPrivateCtor() {
             withNonPrivateCtor = true;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index eb3dc094e3..80ff7240e5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -111,20 +111,20 @@ private static boolean isStatic(DetailAST ast) {
      * Details of class that are required for validation
      */
     private static class Details {
-        /** class ast */
+        /** Class ast */
         private final DetailAST ast;
-        /** result of details gathering */
+        /** Result of details gathering */
         private boolean hasMethodOrField;
-        /** result of details gathering */
+        /** Result of details gathering */
         private boolean hasNonStaticMethodOrField;
-        /** result of details gathering */
+        /** Result of details gathering */
         private boolean hasNonPrivateStaticMethodOrField;
-        /** result of details gathering */
+        /** Result of details gathering */
         private boolean hasDefaultCtor;
-        /** result of details gathering */
+        /** Result of details gathering */
         private boolean hasPublicCtor;
 
-        /** c-tor
+        /** C-tor
          * @param ast class ast
          * */
         Details(DetailAST ast) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
index 47c1af0c37..fb4ab5ada1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java
@@ -50,7 +50,7 @@
      */
     public static final String MSG_KEY = "interface.type";
 
-    /** flag to control whether marker interfaces are allowed. */
+    /** Flag to control whether marker interfaces are allowed. */
     private boolean allowMarkerInterfaces = true;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
index d023a99a0f..3d6a469ef1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java
@@ -60,13 +60,13 @@
      */
     public static final String MSG_KEY = "throws.count";
 
-    /** default value of max property */
+    /** Default value of max property */
     private static final int DEFAULT_MAX = 4;
 
-    /** whether private methods must be ignored **/
+    /** Whether private methods must be ignored **/
     private boolean ignorePrivateMethods = true;
 
-    /** maximum allowed throws statements */
+    /** Maximum allowed throws statements */
     private int max;
 
     /** Creates new instance of the check. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 8247596fcc..0e8e1fa8b0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -270,13 +270,13 @@
         "com.google.common.annotations.VisibleForTesting"
     );
 
-    /** contains explicit access modifiers. */
+    /** Contains explicit access modifiers. */
     private static final String[] EXPLICIT_MODS = {"public", "private", "protected"};
 
-    /** whether protected members are allowed */
+    /** Whether protected members are allowed */
     private boolean protectedAllowed;
 
-    /** whether package visible members are allowed */
+    /** Whether package visible members are allowed */
     private boolean packageAllowed;
 
     /**
@@ -288,7 +288,7 @@
      */
     private String publicMemberFormat = "^serialVersionUID$";
 
-    /** regexp for public members that should be ignored */
+    /** Regexp for public members that should be ignored */
     private Pattern publicMemberPattern = Pattern.compile(publicMemberFormat);
 
     /** List of ignore annotations canonical names. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 7a5f447c36..5104eaf3e8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -56,7 +56,7 @@
     /** Name of a charset to use for loading the header from a file. */
     private String charset = System.getProperty("file.encoding", "UTF-8");
 
-    /** the lines of the header file. */
+    /** The lines of the header file. */
     private final List<String> readerLines = Lists.newArrayList();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
index 26a7447f9c..3a17e95d01 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
@@ -45,10 +45,10 @@
      */
     public static final String MSG_MISMATCH = "header.mismatch";
 
-    /** empty array to avoid instantiations. */
+    /** Empty array to avoid instantiations. */
     private static final int[] EMPTY_INT_ARRAY = new int[0];
 
-    /** the header lines to ignore in the check, sorted. */
+    /** The header lines to ignore in the check, sorted. */
     private int[] ignoreLines = EMPTY_INT_ARRAY;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
index 2c4c3fd56c..ebad40c375 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
@@ -42,13 +42,13 @@
  * @author o_sukhodolsky
  */
 public class RegexpHeaderCheck extends AbstractHeaderCheck {
-    /** empty array to avoid instantiations. */
+    /** Empty array to avoid instantiations. */
     private static final int[] EMPTY_INT_ARRAY = new int[0];
 
-    /** the compiled regular expressions */
+    /** The compiled regular expressions */
     private final List<Pattern> headerRegexps = Lists.newArrayList();
 
-    /** the header lines to repeat (0 or more) in the check, sorted. */
+    /** The header lines to repeat (0 or more) in the check, sorted. */
     private int[] multiLines = EMPTY_INT_ARRAY;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
index e48c93d5e6..f1600f0680 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java
@@ -72,13 +72,13 @@
      */
     public static final String MSG_KEY = "import.avoidStar";
 
-    /** the packages/classes to exempt from this check. */
+    /** The packages/classes to exempt from this check. */
     private final List<String> excludes = Lists.newArrayList();
 
-    /** whether to allow all class imports */
+    /** Whether to allow all class imports */
     private boolean allowClassImports;
 
-    /** whether to allow all static member imports */
+    /** Whether to allow all static member imports */
     private boolean allowStaticMemberImports;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
index 52a40ce152..0038915bf0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java
@@ -73,7 +73,7 @@
      */
     public static final String MSG_KEY = "import.avoidStatic";
 
-    /** the classes/static members to exempt from this check. */
+    /** The classes/static members to exempt from this check. */
     private String[] excludes = ArrayUtils.EMPTY_STRING_ARRAY;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
index d2be9072be..f83f1ed139 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java
@@ -66,7 +66,7 @@
      */
     public static final String MSG_KEY = "import.illegal";
 
-    /** list of illegal packages */
+    /** List of illegal packages */
     private String[] illegalPkgs;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
index 363d3217ba..552053eaf3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java
@@ -42,23 +42,23 @@
  * @author Oliver Burn
  */
 final class ImportControlLoader extends AbstractLoader {
-    /** the public ID for the configuration dtd */
+    /** The public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_0 =
         "-//Puppy Crawl//DTD Import Control 1.0//EN";
 
-    /** the public ID for the configuration dtd */
+    /** The public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Import Control 1.1//EN";
 
-    /** the resource for the configuration dtd */
+    /** The resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/checks/imports/import_control_1_0.dtd";
 
-    /** the resource for the configuration dtd */
+    /** The resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/checks/imports/import_control_1_1.dtd";
 
-    /** the map to lookup the resource name by the id */
+    /** The map to lookup the resource name by the id */
     private static final Map<String, String> DTD_RESOURCE_BY_ID = new HashMap<>();
 
     /** Used to hold the {@link PkgControl} objects. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 05e01ea7ae..158ef623fe 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -190,7 +190,7 @@
      */
     public static final String MSG_ORDERING = "import.ordering";
 
-    /** the special wildcard that catches all remaining groups. */
+    /** The special wildcard that catches all remaining groups. */
     private static final String WILDCARD_GROUP_NAME = "*";
 
     /** List of import groups specified by the user. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
index 428add90b5..169fcfee6b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java
@@ -72,11 +72,11 @@
      */
     public static final String MSG_DUPLICATE = "import.duplicate";
 
-    /** name of package in file */
+    /** Name of package in file */
     private String pkgName;
-    /** set of the imports */
+    /** Set of the imports */
     private final Set<FullIdent> imports = Sets.newHashSet();
-    /** set of static imports */
+    /** Set of static imports */
     private final Set<FullIdent> staticImports = Sets.newHashSet();
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
index 9ad4c58ea8..56cfe15170 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
@@ -59,25 +59,25 @@
      */
     public static final String MSG_KEY = "import.unused";
 
-    /** regex to match class names. */
+    /** Regex to match class names. */
     private static final Pattern CLASS_NAME = Pattern.compile(
            "((:?[\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*)");
-    /** regex to match the first class name. */
+    /** Regex to match the first class name. */
     private static final Pattern FIRST_CLASS_NAME = Pattern.compile(
            "^" + CLASS_NAME);
-    /** regex to match argument names. */
+    /** Regex to match argument names. */
     private static final Pattern ARGUMENT_NAME = Pattern.compile(
            "[(,]\\s*" + CLASS_NAME.pattern());
 
-    /** flag to indicate when time to start collecting references. */
+    /** Flag to indicate when time to start collecting references. */
     private boolean collect;
-    /** flag whether to process Javdoc comments. */
+    /** Flag whether to process Javdoc comments. */
     private boolean processingJavadoc;
 
-    /** set of the imports. */
+    /** Set of the imports. */
     private final Set<FullIdent> imports = Sets.newHashSet();
 
-    /** set of references - possibly to imports or other things. */
+    /** Set of references - possibly to imports or other things. */
     private final Set<String> referenced = Sets.newHashSet();
 
     public void setProcessJavadoc(boolean value) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index d8e4964b61..b5a7f81806 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -61,16 +61,16 @@
      */
     private final IndentationCheck indentCheck;
 
-    /** the AST which is handled by this handler */
+    /** The AST which is handled by this handler */
     private final DetailAST mainAst;
 
-    /** name used during output to user */
+    /** Name used during output to user */
     private final String typeName;
 
-    /** containing AST handler */
+    /** Containing AST handler */
     private final AbstractExpressionHandler parent;
 
-    /** indentation amount for this handler */
+    /** Indentation amount for this handler */
     private IndentLevel level;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
index 1b1bd094e0..7cdea70c52 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java
@@ -40,7 +40,7 @@
     private final Map<Integer, Constructor<?>> typeHandlers =
         Maps.newHashMap();
 
-    /** cache for created method call handlers */
+    /** Cache for created method call handlers */
     private final Map<DetailAST, AbstractExpressionHandler> createdHandlers =
         Maps.newHashMap();
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
index 2761f3690c..8f7c11fc9e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
@@ -28,7 +28,7 @@
  * @author o_sukhodolsky
  */
 public class IndentLevel {
-    /** set of acceptable indentation levels. */
+    /** Set of acceptable indentation levels. */
     private final BitSet levels = new BitSet();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
index 8b948449cc..f3bb88a520 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java
@@ -83,22 +83,22 @@
     /** Default indentation amount - based on Sun */
     private static final int DEFAULT_INDENTATION = 4;
 
-    /** how many tabs or spaces to use */
+    /** How many tabs or spaces to use */
     private int basicOffset = DEFAULT_INDENTATION;
 
-    /** how much to indent a case label */
-    private int caseIndentationAmount = DEFAULT_INDENTATION;
+    /** How much to indent a case label */
+    private int caseIndent = DEFAULT_INDENTATION;
 
-    /** how far brace should be indented when on next line */
+    /** How far brace should be indented when on next line */
     private int braceAdjustment;
 
-    /** how far throws should be indented when on next line */
-    private int throwsIndentationAmount = DEFAULT_INDENTATION;
+    /** How far throws should be indented when on next line */
+    private int throwsIndent = DEFAULT_INDENTATION;
 
-    /** how much to indent an array initialization when on next line */
-    private int arrayInitIndentationAmount = DEFAULT_INDENTATION;
+    /** How much to indent an array initialization when on next line */
+    private int arrayInitIndent = DEFAULT_INDENTATION;
 
-    /** how far continuation line should be indented when line-wrapping is present */
+    /** How far continuation line should be indented when line-wrapping is present */
     private int lineWrappingIndentation = DEFAULT_INDENTATION;
 
     /**
@@ -108,10 +108,10 @@
      */
     private boolean forceStrictCondition;
 
-    /** handlers currently in use */
+    /** Handlers currently in use */
     private final Deque<AbstractExpressionHandler> handlers = new ArrayDeque<>();
 
-    /** factory from which handlers are distributed */
+    /** Factory from which handlers are distributed */
     private final HandlerFactory handlerFactory = new HandlerFactory();
 
     /**
@@ -172,7 +172,7 @@ public int getBraceAdjustment() {
      * @param amount   the case indentation level
      */
     public void setCaseIndent(int amount) {
-        caseIndentationAmount = amount;
+        caseIndent = amount;
     }
 
     /**
@@ -181,7 +181,7 @@ public void setCaseIndent(int amount) {
      * @return the case indentation level
      */
     public int getCaseIndent() {
-        return caseIndentationAmount;
+        return caseIndent;
     }
 
     /**
@@ -190,7 +190,7 @@ public int getCaseIndent() {
      * @param throwsIndent the throws indentation level
      */
     public void setThrowsIndent(int throwsIndent) {
-        throwsIndentationAmount = throwsIndent;
+        this.throwsIndent = throwsIndent;
     }
 
     /**
@@ -199,7 +199,7 @@ public void setThrowsIndent(int throwsIndent) {
      * @return the throws indentation level
      */
     public int getThrowsIndent() {
-        return throwsIndentationAmount;
+        return throwsIndent;
     }
 
     /**
@@ -208,7 +208,7 @@ public int getThrowsIndent() {
      * @param arrayInitIndent the array initialisation indentation level
      */
     public void setArrayInitIndent(int arrayInitIndent) {
-        arrayInitIndentationAmount = arrayInitIndent;
+        this.arrayInitIndent = arrayInitIndent;
     }
 
     /**
@@ -217,7 +217,7 @@ public void setArrayInitIndent(int arrayInitIndent) {
      * @return the initialisation indentation level
      */
     public int getArrayInitIndent() {
-        return arrayInitIndentationAmount;
+        return arrayInitIndent;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
index 6b6ee27579..9008f87923 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
@@ -40,10 +40,10 @@
     /** The comment line of text where this tag appears. */
     private final String text;
 
-    /** if this tag is self-closed. */
+    /** If this tag is self-closed. */
     private final boolean closedTag;
 
-    /** if the tag is incomplete. */
+    /** If the tag is incomplete. */
     private final boolean incomplete;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 42d800897d..29e72f4a06 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -28,8 +28,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import antlr.collections.AST;
-
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.ScopeUtils;
@@ -102,15 +100,15 @@
      */
     public static final String MSG_DUPLICATE_TAG = "javadoc.duplicateTag";
 
-    /** compiled regexp to match Javadoc tags that take an argument * */
+    /** Compiled regexp to match Javadoc tags that take an argument * */
     private static final Pattern MATCH_JAVADOC_ARG =
         Utils.createPattern("@(throws|exception|param)\\s+(\\S+)\\s+\\S*");
 
-    /** compiled regexp to match first part of multilineJavadoc tags * */
+    /** Compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_JAVADOC_ARG_MULTILINE_START =
         Utils.createPattern("@(throws|exception|param)\\s+(\\S+)\\s*$");
 
-    /** compiled regexp to look for a continuation of the comment * */
+    /** Compiled regexp to look for a continuation of the comment * */
     private static final Pattern MATCH_JAVADOC_MULTILINE_CONT =
         Utils.createPattern("(\\*/|@|[^\\s\\*])");
 
@@ -119,29 +117,23 @@
     /** Multiline finished at next Javadoc * */
     private static final String NEXT_TAG = "@";
 
-    /** compiled regexp to match Javadoc tags with no argument * */
+    /** Compiled regexp to match Javadoc tags with no argument * */
     private static final Pattern MATCH_JAVADOC_NOARG =
         Utils.createPattern("@(return|see)\\s+\\S");
-    /** compiled regexp to match first part of multilineJavadoc tags * */
+    /** Compiled regexp to match first part of multilineJavadoc tags * */
     private static final Pattern MATCH_JAVADOC_NOARG_MULTILINE_START =
         Utils.createPattern("@(return|see)\\s*$");
-    /** compiled regexp to match Javadoc tags with no argument and {} * */
+    /** Compiled regexp to match Javadoc tags with no argument and {} * */
     private static final Pattern MATCH_JAVADOC_NOARG_CURLY =
         Utils.createPattern("\\{\\s*@(inheritDoc)\\s*\\}");
 
-    /** Maximum children allowed * */
-    private static final int MAX_CHILDREN = 7;
-
-    /** Maximum children allowed * */
-    private static final int BODY_SIZE = 3;
-
     /** Default value of minimal amount of lines in method to demand documentation presence.*/
     private static final int DEFAULT_MIN_LINE_COUNT = -1;
 
-    /** the visibility scope where Javadoc comments are checked * */
+    /** The visibility scope where Javadoc comments are checked * */
     private Scope scope = Scope.PRIVATE;
 
-    /** the visibility scope where Javadoc comments shouldn't be checked * */
+    /** The visibility scope where Javadoc comments shouldn't be checked * */
     private Scope excludeScope;
 
     /** Minimal amount of lines in method to demand documentation presence.*/
@@ -436,7 +428,7 @@ protected final void logLoadError(Token ident) {
     protected boolean isMissingJavadocAllowed(final DetailAST ast) {
         return allowMissingJavadoc
             || allowMissingPropertyJavadoc
-                && (isSetterMethod(ast) || isGetterMethod(ast))
+                && (CheckUtils.isSetterMethod(ast) || CheckUtils.isGetterMethod(ast))
             || matchesSkipRegex(ast);
     }
 
@@ -927,104 +919,11 @@ else if (allowThrowsTagsForSubclasses) {
         }
     }
 
-    /**
-     * Returns whether an AST represents a setter method.
-     * @param ast the AST to check with
-     * @return whether the AST represents a setter method
-     */
-    private static boolean isSetterMethod(final DetailAST ast) {
-        // Check have a method with exactly 7 children which are all that
-        // is allowed in a proper setter method which does not throw any
-        // exceptions.
-        if (ast.getType() != TokenTypes.METHOD_DEF
-                || ast.getChildCount() != MAX_CHILDREN) {
-            return false;
-        }
-
-        // Should I handle only being in a class????
-
-        // Check the name matches format setX...
-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
-        final String name = type.getNextSibling().getText();
-        if (!name.matches("^set[A-Z].*")) { // Depends on JDK 1.4
-            return false;
-        }
-
-        // Check the return type is void
-        if (type.getChildCount(TokenTypes.LITERAL_VOID) == 0) {
-            return false;
-        }
-
-        // Check that is had only one parameter
-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
-        if (params.getChildCount(TokenTypes.PARAMETER_DEF) != 1) {
-            return false;
-        }
-
-        // Now verify that the body consists of:
-        // SLIST -> EXPR -> ASSIGN
-        // SEMI
-        // RCURLY
-        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
-        if (slist == null || slist.getChildCount() != BODY_SIZE) {
-            return false;
-        }
-
-        final AST expr = slist.getFirstChild();
-        return expr.getFirstChild().getType() == TokenTypes.ASSIGN;
-    }
-
-    /**
-     * Returns whether an AST represents a getter method.
-     * @param ast the AST to check with
-     * @return whether the AST represents a getter method
-     */
-    private static boolean isGetterMethod(final DetailAST ast) {
-        // Check have a method with exactly 7 children which are all that
-        // is allowed in a proper getter method which does not throw any
-        // exceptions.
-        if (ast.getType() != TokenTypes.METHOD_DEF
-                || ast.getChildCount() != MAX_CHILDREN) {
-            return false;
-        }
-
-        // Check the name matches format of getX or isX. Technically I should
-        // check that the format isX is only used with a boolean type.
-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);
-        final String name = type.getNextSibling().getText();
-        if (!name.matches("^(is|get)[A-Z].*")) { // Depends on JDK 1.4
-            return false;
-        }
-
-        // Check the return type is void
-        if (type.getChildCount(TokenTypes.LITERAL_VOID) > 0) {
-            return false;
-        }
-
-        // Check that is had only one parameter
-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
-        if (params.getChildCount(TokenTypes.PARAMETER_DEF) > 0) {
-            return false;
-        }
-
-        // Now verify that the body consists of:
-        // SLIST -> RETURN
-        // RCURLY
-        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);
-        if (slist == null || slist.getChildCount() != 2) {
-            return false;
-        }
-
-        final AST expr = slist.getFirstChild();
-        return expr.getType() == TokenTypes.LITERAL_RETURN;
-
-    }
-
     /** Stores useful information about declared exception. */
     private static class ExceptionInfo {
-        /** does the exception have throws tag associated with. */
+        /** Does the exception have throws tag associated with. */
         private boolean found;
-        /** class information associated with this exception. */
+        /** Class information associated with this exception. */
         private final AbstractClassInfo classInfo;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index e4550ca5c9..d83250408c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -85,7 +85,7 @@
     /** The scope to check. */
     private Scope scope = Scope.PRIVATE;
 
-    /** the visibility scope where Javadoc comments shouldn't be checked **/
+    /** The visibility scope where Javadoc comments shouldn't be checked **/
     private Scope excludeScope;
 
     /** Format for matching the end of a sentence. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
index 2c53574ce6..e0656c221e 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java
@@ -26,13 +26,13 @@
  * @author Oliver Burn
  */
 public class JavadocTag {
-    /** the line number of the tag **/
+    /** The line number of the tag **/
     private final int lineNo;
-    /** the column number of the tag **/
+    /** The column number of the tag **/
     private final int columnNo;
-    /** an optional first argument. For example the parameter name. **/
+    /** An optional first argument. For example the parameter name. **/
     private final String firstArg;
-    /** the JavadocTagInfo representing this tag **/
+    /** The JavadocTagInfo representing this tag **/
     private final JavadocTagInfo tagInfo;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
index 6d398c9e27..a210aff6da 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -82,24 +82,24 @@
      */
     public static final String UNUSED_TAG_GENERAL = "javadoc.unusedTagGeneral";
 
-    /** the scope to check for */
+    /** The scope to check for */
     private Scope scope = Scope.PRIVATE;
-    /** the visibility scope where Javadoc comments shouldn't be checked **/
+    /** The visibility scope where Javadoc comments shouldn't be checked **/
     private Scope excludeScope;
-    /** compiled regexp to match author tag content **/
+    /** Compiled regexp to match author tag content **/
     private Pattern authorFormatPattern;
-    /** compiled regexp to match version tag content **/
+    /** Compiled regexp to match version tag content **/
     private Pattern versionFormatPattern;
-    /** regexp to match author tag content */
+    /** Regexp to match author tag content */
     private String authorFormat;
-    /** regexp to match version tag content */
+    /** Regexp to match version tag content */
     private String versionFormat;
     /**
      * controls whether to ignore errors when a method has type parameters but
      * does not have matching param tags in the javadoc. Defaults to false.
      */
     private boolean allowMissingParamTags;
-    /** controls whether to flag errors for unknown tags. Defaults to false. */
+    /** Controls whether to flag errors for unknown tags. Defaults to false. */
     private boolean allowUnknownTags;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
index 7416029939..2ccd964334 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java
@@ -41,9 +41,9 @@
  * @author Lyle Hanson
  */
 public final class JavadocUtils {
-    /** maps from a token name to value */
+    /** Maps from a token name to value */
     private static final ImmutableMap<String, Integer> TOKEN_NAME_TO_VALUE;
-    /** maps from a token value to name */
+    /** Maps from a token value to name */
     private static final String[] TOKEN_VALUE_TO_NAME;
 
     // Using reflection gets all token names and values from JavadocTokenTypes class
@@ -84,7 +84,7 @@
         TOKEN_VALUE_TO_NAME = tempTokenValueToName;
     }
 
-    /** prevent instantiation */
+    /** Prevent instantiation */
     private JavadocUtils() {
     }
 
@@ -171,11 +171,11 @@ else if (tagType == JavadocTagType.ALL || tagType == JavadocTagType.INLINE) {
      * The type of Javadoc tag we want returned.
      */
     public enum JavadocTagType {
-        /** block type. */
+        /** Block type. */
         BLOCK,
-        /** inline type. */
+        /** Inline type. */
         INLINE,
-        /** all validTags. */
+        /** All validTags. */
         ALL
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
index acad026faf..783860dfab 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java
@@ -44,13 +44,13 @@
      */
     public static final String JAVADOC_MISSING = "javadoc.missing";
 
-    /** the scope to check */
+    /** The scope to check */
     private Scope scope = Scope.PRIVATE;
 
-    /** the visibility scope where Javadoc comments shouldn't be checked **/
+    /** The visibility scope where Javadoc comments shouldn't be checked **/
     private Scope excludeScope;
 
-    /** the pattern to ignore variable name */
+    /** The pattern to ignore variable name */
     private Pattern ignoreNamePattern;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
index 4138e2225e..c40d5a33e6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
@@ -70,7 +70,7 @@
      */
     private List<String> ignoredTags = new ArrayList<>();
 
-    /** whether inline tags must be ignored **/
+    /** Whether inline tags must be ignored **/
     private boolean ignoreInlineTags = true;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index ce47892708..eaea6414ad 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -267,9 +267,9 @@ private static Point getNextCharPos(String[] text, Point from) {
      * @author o_sukholsky
      */
     private static final class Point {
-        /** line number. */
+        /** Line number. */
         private final int line;
-        /** column number.*/
+        /** Column number.*/
         private final int column;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
index dd1637020c..e9350cd3d2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java
@@ -86,16 +86,16 @@
      */
     public static final String TAG_FORMAT = "type.tagFormat";
 
-    /** compiled regexp to match tag **/
+    /** Compiled regexp to match tag **/
     private Pattern tagRE;
-    /** compiled regexp to match tag content **/
+    /** Compiled regexp to match tag content **/
     private Pattern tagFormatRE;
 
-    /** regexp to match tag */
+    /** Regexp to match tag */
     private String tag;
-    /** regexp to match tag content */
+    /** Regexp to match tag content */
     private String tagFormat;
-    /** the severity level of found tag reports */
+    /** The severity level of found tag reports */
     private SeverityLevel tagSeverityLevel = SeverityLevel.INFO;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
index fe5fd2b382..3f726fff4c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -65,7 +65,7 @@
     private Set<String> excludedClasses = DEFAULT_EXCLUDED_CLASSES;
     /** Allowed complexity. */
     private int max;
-    /** package of the file we check. */
+    /** Package of the file we check. */
     private String packageName;
 
     /** Stack of contexts. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
index 660399b2f6..64aac59de0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
@@ -35,16 +35,16 @@
  */
 public abstract class AbstractComplexityCheck
     extends Check {
-    /** the initial current value */
+    /** The initial current value */
     private static final BigInteger INITIAL_VALUE = BigInteger.ONE;
 
-    /** stack of values - all but the current value */
+    /** Stack of values - all but the current value */
     private final Deque<BigInteger> valueStack = new ArrayDeque<>();
 
-    /** the current value */
+    /** The current value */
     private BigInteger currentValue = BigInteger.ZERO;
 
-    /** threshold to report error for */
+    /** Threshold to report error for */
     private int max;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheck.java
index c33266c53e..57840e78e5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheck.java
@@ -37,7 +37,7 @@
      */
     public static final String MSG_KEY = "classFanOutComplexity";
 
-    /** default value of max value. */
+    /** Default value of max value. */
     private static final int DEFAULT_MAX = 20;
 
     /** Creates new instance of this check. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
index ddf8e567d7..05f0ee996c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java
@@ -44,7 +44,7 @@
      */
     public static final String MSG_KEY = "cyclomaticComplexity";
 
-    /** default allowed complexity */
+    /** Default allowed complexity */
     private static final int DEFAULT_VALUE = 10;
 
     /** Create an instance. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index 4e38b54ef8..b6a82e1f9c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -58,25 +58,25 @@
      */
     public static final String MSG_FILE = "ncss.file";
 
-    /** default constant for max file ncss */
+    /** Default constant for max file ncss */
     private static final int FILE_MAX_NCSS = 2000;
 
-    /** default constant for max file ncss */
+    /** Default constant for max file ncss */
     private static final int CLASS_MAX_NCSS = 1500;
 
-    /** default constant for max method ncss */
+    /** Default constant for max method ncss */
     private static final int METHOD_MAX_NCSS = 50;
 
-    /** maximum ncss for a complete source file */
+    /** Maximum ncss for a complete source file */
     private int fileMaximum = FILE_MAX_NCSS;
 
-    /** maximum ncss for a class */
+    /** Maximum ncss for a class */
     private int classMaximum = CLASS_MAX_NCSS;
 
-    /** maximum ncss for a method */
+    /** Maximum ncss for a method */
     private int methodMaximum = METHOD_MAX_NCSS;
 
-    /** list containing the stacked counters */
+    /** List containing the stacked counters */
     private Deque<Counter> counters;
 
     @Override
@@ -371,7 +371,7 @@ private static boolean isExpressionCountable(DetailAST ast) {
      * Class representing a counter,
      */
     private static class Counter {
-        /** the counters internal integer */
+        /** The counters internal integer */
         private int ivCount;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index c01730b7e5..d5ed3f6217 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -56,10 +56,10 @@
     /** Default format for abstract class names */
     private static final String DEFAULT_FORMAT = "^Abstract.+$";
 
-    /** whether to ignore checking the modifier */
+    /** Whether to ignore checking the modifier */
     private boolean ignoreModifier;
 
-    /** whether to ignore checking the name */
+    /** Whether to ignore checking the name */
     private boolean ignoreName;
 
     /** Creates new instance of the check. */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
index 09690af1c7..9120e66299 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -201,7 +201,7 @@ public void beginTree(DetailAST rootAST) {
         findMatch();
     }
 
-    /** recursive method that finds the matches. */
+    /** Recursive method that finds the matches. */
     private void findMatch() {
 
         final boolean foundMatch = matcher.find();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
index 0573935cc6..6c1094a9c7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java
@@ -64,10 +64,10 @@
      */
     public static final String MSG_KEY = "maxLen.anonInner";
 
-    /** default maximum number of lines */
+    /** Default maximum number of lines */
     private static final int DEFAULT_MAX = 20;
 
-    /** maximum number of lines */
+    /** Maximum number of lines */
     private int max = DEFAULT_MAX;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
index 6408a87159..21ea5e0125 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java
@@ -40,10 +40,10 @@
      */
     public static final String MSG_KEY = "executableStatementCount";
 
-    /** default threshold */
+    /** Default threshold */
     private static final int DEFAULT_MAX = 30;
 
-    /** threshold to report error for */
+    /** Threshold to report error for */
     private int max;
 
     /** Stack of method contexts. */
@@ -213,7 +213,7 @@ public Context(DetailAST ast) {
          * @param addition the count increment.
          */
         public void addCount(int addition) {
-            this.count += addition;
+            count += addition;
         }
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheck.java
index 81cea7cf6b..2518acc304 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheck.java
@@ -62,10 +62,10 @@
      */
     public static final String MSG_KEY = "maxLen.file";
 
-    /** default maximum number of lines */
+    /** Default maximum number of lines */
     private static final int DEFAULT_MAX_LINES = 2000;
 
-    /** the maximum number of lines */
+    /** The maximum number of lines */
     private int maxFileLength = DEFAULT_MAX_LINES;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index 3c99907baa..72f72ce982 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -83,13 +83,13 @@
      */
     public static final String MSG_KEY = "maxLineLen";
 
-    /** default maximum number of columns in a line */
+    /** Default maximum number of columns in a line */
     private static final int DEFAULT_MAX_COLUMNS = 80;
 
-    /** the maximum number of columns in a line */
+    /** The maximum number of columns in a line */
     private int max = DEFAULT_MAX_COLUMNS;
 
-    /** the regexp when long lines are ignored */
+    /** The regexp when long lines are ignored */
     private Pattern ignorePattern;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
index 772097cde5..514ffc7bfa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java
@@ -68,7 +68,7 @@
      */
     public static final String MSG_MANY_METHODS = "too.many.methods";
 
-    /** default maximum number of methods */
+    /** Default maximum number of methods */
     private static final int DEFAULT_MAX_METHODS = 100;
     /** Maximum private methods. */
     private int maxPrivate = DEFAULT_MAX_METHODS;
@@ -216,9 +216,9 @@ public void setMaxTotal(int value) {
     private static class MethodCounter {
         /** Maintains the counts. */
         private final Map<Scope, Integer> counts = new EnumMap<>(Scope.class);
-        /** indicated is an interface, in which case all methods are public */
+        /** Indicated is an interface, in which case all methods are public */
         private final boolean inInterface;
-        /** tracks the total. */
+        /** Tracks the total. */
         private int total;
 
         /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
index 080cb3e8ff..04012cea1a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java
@@ -64,13 +64,13 @@
      */
     public static final String MSG_KEY = "maxLen.method";
 
-    /** default maximum number of lines */
+    /** Default maximum number of lines */
     private static final int DEFAULT_MAX_LINES = 150;
 
-    /** whether to ignore empty lines and single line comments */
+    /** Whether to ignore empty lines and single line comments */
     private boolean countEmpty = true;
 
-    /** the maximum number of lines */
+    /** The maximum number of lines */
     private int max = DEFAULT_MAX_LINES;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
index c86a7f5866..92942516d1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java
@@ -76,16 +76,16 @@
     /** {@link Override Override} annotation name */
     private static final String OVERRIDE = "Override";
 
-    /** canonical {@link Override Override} annotation name */
+    /** Canonical {@link Override Override} annotation name */
     private static final String CANONICAL_OVERRIDE = "java.lang." + OVERRIDE;
 
-    /** default maximum number of allowed parameters */
+    /** Default maximum number of allowed parameters */
     private static final int DEFAULT_MAX_PARAMETERS = 7;
 
-    /** the maximum number of allowed parameters */
+    /** The maximum number of allowed parameters */
     private int max = DEFAULT_MAX_PARAMETERS;
 
-    /** ignore overridden methods */
+    /** Ignore overridden methods */
     private boolean ignoreOverriddenMethods;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index bb43768f54..dc96acae79 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -179,7 +179,7 @@
     private boolean allowEmptyTypes;
     /** Whether or not empty loops are allowed*/
     private boolean allowEmptyLoops;
-    /** whether or not to ignore a colon in a enhanced for loop */
+    /** Whether or not to ignore a colon in a enhanced for loop */
     private boolean ignoreEnhancedForColon = true;
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
index af6d40ea52..8a363338fe 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java
@@ -35,7 +35,7 @@
  * @author o_sukhodolsky
  */
 class CSVFilter implements IntFilter {
-    /** filter set */
+    /** Filter set */
     private final Set<IntFilter> filters = Sets.newHashSet();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java
index cbf2366d2f..d0667b63da 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java
@@ -24,7 +24,7 @@
  * @author Rick Giles
  */
 class IntMatchFilter implements IntFilter {
-    /** the matching Integer */
+    /** The matching Integer */
     private final int matchValue;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
index 16f9ad0fc9..ee523980e8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java
@@ -26,10 +26,10 @@
  * @author Rick Giles
  */
 class IntRangeFilter implements IntFilter {
-    /** lower bound of the range */
+    /** Lower bound of the range */
     private final Integer lowerBound;
 
-    /** upper bound of the range */
+    /** Upper bound of the range */
     private final Integer upperBound;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java
index e14a1d39ba..d3168dd4e1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java
@@ -33,10 +33,10 @@
 public class SeverityMatchFilter
     extends AutomaticBean
     implements Filter {
-    /** the severity level to accept */
+    /** The severity level to accept */
     private SeverityLevel severityLevel = SeverityLevel.ERROR;
 
-    /** whether to accept or reject on severity matches */
+    /** Whether to accept or reject on severity matches */
     private boolean acceptOnMatch = true;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
index 17d0246377..44e9f7828a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java
@@ -41,28 +41,28 @@
  */
 public class SuppressElement
     implements Filter {
-    /** the regexp to match file names against */
+    /** The regexp to match file names against */
     private final Pattern fileRegexp;
 
-    /** the pattern for file names*/
+    /** The pattern for file names*/
     private final String filePattern;
 
-    /** the regexp to match check names against */
+    /** The regexp to match check names against */
     private Pattern checkRegexp;
 
-    /** the pattern for check class names*/
+    /** The pattern for check class names*/
     private String checkPattern;
 
-    /** module id filter. */
+    /** Module id filter. */
     private String moduleId;
 
-    /** line number filter */
+    /** Line number filter */
     private CSVFilter lineFilter;
 
     /** CSV for line number filter */
     private String linesCSV;
 
-    /** column number filter */
+    /** Column number filter */
     private CSVFilter columnFilter;
 
     /** CSV for column number filter */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
index bff01f42c7..34d132015a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java
@@ -37,7 +37,7 @@
 public class SuppressionFilter
     extends AutomaticBean
     implements Filter {
-    /** set of individual suppresses */
+    /** Set of individual suppresses */
     private FilterSet filters = new FilterSet();
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
index b33170554c..a6bf4e56ed 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java
@@ -46,16 +46,16 @@
  */
 public final class SuppressionsLoader
     extends AbstractLoader {
-    /** the public ID for the configuration dtd */
+    /** The public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_0 =
         "-//Puppy Crawl//DTD Suppressions 1.0//EN";
-    /** the resource for the configuration dtd */
+    /** The resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_0 =
         "com/puppycrawl/tools/checkstyle/suppressions_1_0.dtd";
-    /** the public ID for the configuration dtd */
+    /** The public ID for the configuration dtd */
     private static final String DTD_PUBLIC_ID_1_1 =
         "-//Puppy Crawl//DTD Suppressions 1.1//EN";
-    /** the resource for the configuration dtd */
+    /** The resource for the configuration dtd */
     private static final String DTD_RESOURCE_NAME_1_1 =
         "com/puppycrawl/tools/checkstyle/suppressions_1_1.dtd";
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
index 2404006f8b..b22636aea2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java
@@ -33,9 +33,9 @@
 public class CodeSelector {
     /** DetailAST node*/
     private final DetailAST ast;
-    /** editor */
+    /** Editor */
     private final JTextArea editor;
-    /** mapping */
+    /** Mapping */
     private final List<Integer> lines2position;
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
index 3909ac42f7..e24b1c378f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
@@ -216,7 +216,7 @@ static void remove(Component component, boolean recursive) {
     /**
      * Implement this inner interface to listen for when files are dropped. For example
      * your class declaration may begin like this:
-     * <code><pre>
+     * {@code <pre>
      *      public class MyClass implements FileDrop.Listener
      *      ...
      *      public void filesDropped( File[] files )
@@ -224,11 +224,11 @@ static void remove(Component component, boolean recursive) {
      *          ...
      *      }   // end filesDropped
      *      ...
-     * </pre></code>
+     * </pre>}
      *
      * @since 1.0
      */
-    public interface Listener {
+    interface Listener {
         /**
          * This method is called when files have been successfully dropped.
          *
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 8d74dc06db..7ff7d39bf8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -194,7 +194,7 @@ public void setLinePositionMap(List<Integer> linePositionMap) {
         /** Last table/tree row asked to renderer. */
         private int visibleRow;
 
-        /** creates a new instance */
+        /** Creates a new instance */
         public TreeTableCellRenderer(TreeModel model) {
             super(model);
         }
@@ -279,7 +279,7 @@ public Component getTableCellRendererComponent(JTable table,
      * TreeTableCellEditor implementation. Component returned is the
      * JTree.
      */
-    public class TreeTableCellEditor extends AbstractCellEditor implements
+    private class TreeTableCellEditor extends AbstractCellEditor implements
             TableCellEditor {
         @Override
         public Component getTableCellEditorComponent(JTable table,
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
index 539ea4a967..66cd294da6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
@@ -42,7 +42,7 @@
     private final JTreeTable treeTable;
 
     public ListToTreeSelectionModelWrapper(JTreeTable jTreeTable) {
-        this.treeTable = jTreeTable;
+        treeTable = jTreeTable;
         getListSelectionModel().addListSelectionListener(createListSelectionListener());
     }
 
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
index 39b0ba5751..c79e8a8db3 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
@@ -14,4 +14,4 @@ custom.import.order=Import statement for ''{2}'' is in the wrong order. Should b
 custom.import.order.line.separator=''{0}'' should be separated from previous import group.
 custom.import.order.lex=Wrong lexicographical order for ''{0}'' import. Should be before ''{1}''.
 custom.import.order.nongroup.import=Imports without groups should be placed at the end of the import list: ''{0}''.
-custom.import.order.nongroup.expected=Import statement for ''{2}'' is in the wrong order. Should be in the ''{0}'' group, expecting not assigned imports on this line.
+custom.import.order.nongroup.expected=Import statement for ''{1}'' is in the wrong order. Should be in the ''{0}'' group, expecting not assigned imports on this line.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AnnotationUtilityTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AnnotationUtilityTest.java
index 311dd7f209..9ffc976872 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AnnotationUtilityTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AnnotationUtilityTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle;
 
 import static com.puppycrawl.tools.checkstyle.TestUtils.assertUtilsClassHasPrivateConstructor;
+import static org.junit.Assert.assertEquals;
 
 import java.lang.reflect.InvocationTargetException;
 
@@ -37,7 +38,7 @@ public void testIsProperUtilsClass() throws ReflectiveOperationException {
             assertUtilsClassHasPrivateConstructor(AnnotationUtility.class);
         }
         catch (InvocationTargetException ex) {
-            Assert.assertTrue("do not instantiate.".equals(ex.getCause().getMessage()));
+            assertEquals("do not instantiate.", ex.getCause().getMessage());
         }
     }
 
@@ -48,7 +49,7 @@ public void testContainsAnnotationNull() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the ast is null".equals(ex.getMessage()));
+            assertEquals("the ast is null", ex.getMessage());
         }
     }
 
@@ -59,7 +60,7 @@ public void testContainsAnnotationNull2() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the ast is null".equals(ex.getMessage()));
+            assertEquals("the ast is null", ex.getMessage());
         }
     }
 
@@ -100,7 +101,7 @@ public void testAnnotationHolderNull() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the ast is null".equals(ex.getMessage()));
+            assertEquals("the ast is null", ex.getMessage());
         }
     }
 
@@ -111,7 +112,7 @@ public void testAnnotationNull() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the ast is null".equals(ex.getMessage()));
+            assertEquals("the ast is null", ex.getMessage());
         }
     }
 
@@ -122,7 +123,7 @@ public void testAnnotationNull2() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the annotation is null".equals(ex.getMessage()));
+            assertEquals("the annotation is null", ex.getMessage());
         }
     }
 
@@ -133,8 +134,7 @@ public void testAnnotationEmpty() throws ReflectiveOperationException {
             Assert.fail();
         }
         catch (IllegalArgumentException ex) {
-            Assert.assertTrue("the annotation is empty or spaces"
-                    .equals(ex.getMessage()));
+            assertEquals("the annotation is empty or spaces", ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
index ec8fe78a71..a4c3acf9f2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
@@ -44,8 +44,8 @@ public void fileStarted(AuditEvent evt) {
         }
     }
 
-    protected final ByteArrayOutputStream BAOS = new ByteArrayOutputStream();
-    protected final PrintStream stream = new PrintStream(BAOS);
+    protected final ByteArrayOutputStream baos = new ByteArrayOutputStream();
+    protected final PrintStream stream = new PrintStream(baos);
     protected final Properties props = new Properties();
 
     public static DefaultConfiguration createCheckConfig(Class<?> clazz) {
@@ -122,7 +122,7 @@ protected void verify(Checker c,
 
         // process each of the lines
         final ByteArrayInputStream bais =
-                new ByteArrayInputStream(BAOS.toByteArray());
+                new ByteArrayInputStream(baos.toByteArray());
         final LineNumberReader lnr =
                 new LineNumberReader(new InputStreamReader(bais));
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
index f1c1b3f08c..fc087718a6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -42,8 +42,8 @@
     @Test
     public void testDestroy() throws Exception {
         final DebugChecker c = new DebugChecker();
-        final DebugAuditAdapter aa = new DebugAuditAdapter();
-        c.addListener(aa);
+        final DebugAuditAdapter auditAdapter = new DebugAuditAdapter();
+        c.addListener(auditAdapter);
         final DebugFilter f = new DebugFilter();
         c.addFilter(f);
 
@@ -60,68 +60,68 @@ public void testDestroy() throws Exception {
                 new Object[] {"arg"}, null, getClass(), null));
         c.fireErrors("Some File Name", msgs);
 
-        assertFalse("Checker.destroy() doesn't remove listeners.", aa.wasCalled());
+        assertFalse("Checker.destroy() doesn't remove listeners.", auditAdapter.wasCalled());
         assertFalse("Checker.destroy() doesn't remove filters.", f.wasCalled());
     }
 
     @Test
     public void testAddListener() throws Exception {
         final DebugChecker c = new DebugChecker();
-        final DebugAuditAdapter aa = new DebugAuditAdapter();
-        c.addListener(aa);
+        final DebugAuditAdapter auditAdapter = new DebugAuditAdapter();
+        c.addListener(auditAdapter);
 
         // Let's try fire some events
         c.fireAuditStarted();
-        assertTrue("Checker.fireAuditStarted() doesn't call listener", aa.wasCalled());
+        assertTrue("Checker.fireAuditStarted() doesn't call listener", auditAdapter.wasCalled());
 
-        aa.resetListener();
+        auditAdapter.resetListener();
         c.fireAuditFinished();
-        assertTrue("Checker.fireAuditFinished() doesn't call listener", aa.wasCalled());
+        assertTrue("Checker.fireAuditFinished() doesn't call listener", auditAdapter.wasCalled());
 
-        aa.resetListener();
+        auditAdapter.resetListener();
         c.fireFileStarted("Some File Name");
-        assertTrue("Checker.fireFileStarted() doesn't call listener", aa.wasCalled());
+        assertTrue("Checker.fireFileStarted() doesn't call listener", auditAdapter.wasCalled());
 
-        aa.resetListener();
+        auditAdapter.resetListener();
         c.fireFileFinished("Some File Name");
-        assertTrue("Checker.fireFileFinished() doesn't call listener", aa.wasCalled());
+        assertTrue("Checker.fireFileFinished() doesn't call listener", auditAdapter.wasCalled());
 
-        aa.resetListener();
+        auditAdapter.resetListener();
         final TreeSet<LocalizedMessage> msgs = Sets.newTreeSet();
         msgs.add(new LocalizedMessage(0, 0, "a Bundle", "message.key",
                 new Object[] {"arg"}, null, getClass(), null));
         c.fireErrors("Some File Name", msgs);
-        assertTrue("Checker.fireErrors() doesn't call listener", aa.wasCalled());
+        assertTrue("Checker.fireErrors() doesn't call listener", auditAdapter.wasCalled());
     }
 
     @Test
     public void testRemoveListener() throws Exception {
         final DebugChecker c = new DebugChecker();
-        final DebugAuditAdapter aa = new DebugAuditAdapter();
+        final DebugAuditAdapter auditAdapter = new DebugAuditAdapter();
         final DebugAuditAdapter aa2 = new DebugAuditAdapter();
-        c.addListener(aa);
+        c.addListener(auditAdapter);
         c.addListener(aa2);
-        c.removeListener(aa);
+        c.removeListener(auditAdapter);
 
         // Let's try fire some events
         c.fireAuditStarted();
         assertTrue("Checker.fireAuditStarted() doesn't call listener", aa2.wasCalled());
-        assertFalse("Checker.fireAuditStarted() does call removed listener", aa.wasCalled());
+        assertFalse("Checker.fireAuditStarted() does call removed listener", auditAdapter.wasCalled());
 
         aa2.resetListener();
         c.fireAuditFinished();
         assertTrue("Checker.fireAuditFinished() doesn't call listener", aa2.wasCalled());
-        assertFalse("Checker.fireAuditFinished() does call removed listener", aa.wasCalled());
+        assertFalse("Checker.fireAuditFinished() does call removed listener", auditAdapter.wasCalled());
 
         aa2.resetListener();
         c.fireFileStarted("Some File Name");
         assertTrue("Checker.fireFileStarted() doesn't call listener", aa2.wasCalled());
-        assertFalse("Checker.fireFileStarted() does call removed listener", aa.wasCalled());
+        assertFalse("Checker.fireFileStarted() does call removed listener", auditAdapter.wasCalled());
 
         aa2.resetListener();
         c.fireFileFinished("Some File Name");
         assertTrue("Checker.fireFileFinished() doesn't call listener", aa2.wasCalled());
-        assertFalse("Checker.fireFileFinished() does call removed listener", aa.wasCalled());
+        assertFalse("Checker.fireFileFinished() does call removed listener", auditAdapter.wasCalled());
 
         aa2.resetListener();
         final TreeSet<LocalizedMessage> msgs = Sets.newTreeSet();
@@ -129,7 +129,7 @@ public void testRemoveListener() throws Exception {
                 new Object[] {"arg"}, null, getClass(), null));
         c.fireErrors("Some File Name", msgs);
         assertTrue("Checker.fireErrors() doesn't call listener", aa2.wasCalled());
-        assertFalse("Checker.fireErrors() does call removed listener", aa.wasCalled());
+        assertFalse("Checker.fireErrors() does call removed listener", auditAdapter.wasCalled());
 
     }
 
@@ -186,8 +186,8 @@ public void testFileExtensions() throws Exception {
     public void testSetters() throws Exception {
         // all  that is set by reflection, so just make code coverage be happy
         final Checker c = new Checker();
-        c.setClassLoader(this.getClass().getClassLoader());
-        c.setClassloader(this.getClass().getClassLoader());
+        c.setClassLoader(getClass().getClassLoader());
+        c.setClassloader(getClass().getClassLoader());
         c.setBasedir("some");
         c.setSeverity("ignore");
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index 1b0181ca2a..551a25362b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -36,6 +36,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.xml.sax.Attributes;
@@ -416,7 +417,7 @@ public void testConfigWithIgnore() throws CheckstyleException {
                         new PropertiesExpander(new Properties()), true);
 
         final Configuration[] children = config.getChildren();
-        assertTrue(children[0].getChildren().length == 0);
+        assertEquals(0, children[0].getChildren().length);
     }
 
     @Test
@@ -429,7 +430,7 @@ public void testConfigCheckerWithIgnore() throws CheckstyleException {
                         new PropertiesExpander(new Properties()), true);
 
         final Configuration[] children = config.getChildren();
-        assertTrue(children.length == 0);
+        assertEquals(0, children.length);
     }
 
     @Test
@@ -441,7 +442,7 @@ public void testLoadConfiguration_WrongURL() throws CheckstyleException {
                             new PropertiesExpander(new Properties()), true);
 
             final Configuration[] children = config.getChildren();
-            assertTrue(children[0].getChildren().length == 0);
+            assertEquals(0, children[0].getChildren().length);
             fail("Exception is expected");
         }
         catch (CheckstyleException ex) {
@@ -452,16 +453,12 @@ public void testLoadConfiguration_WrongURL() throws CheckstyleException {
     @Test
     @SuppressWarnings("unchecked")
     public void testLoadConfiguration_URISyntaxException() throws CheckstyleException {
-        mockStatic(ConfigurationLoader.class);
+        mockStatic(ConfigurationLoader.class, Mockito.CALLS_REAL_METHODS);
 
         PropertiesExpander expander = new PropertiesExpander(new Properties());
 
         when(ConfigurationLoader.class.getResource("config_with_ignore.xml"))
                 .thenThrow(URISyntaxException.class);
-        when(ConfigurationLoader.loadConfiguration("config_with_ignore.xml",
-                expander,
-                true))
-                .thenCallRealMethod();
 
         try {
             ConfigurationLoader.loadConfiguration(
@@ -487,7 +484,7 @@ public void testLoadConfiguration_Deprecated() throws CheckstyleException {
                             new PropertiesExpander(new Properties()), true);
 
             final Configuration[] children = config.getChildren();
-            assertTrue(children[0].getChildren().length == 0);
+            assertEquals(0, children[0].getChildren().length);
         }
         catch (CheckstyleException ex) {
             fail("unexpected exception");
@@ -518,7 +515,7 @@ public void testLoadConfigurationFromClassPath() throws CheckstyleException {
                             new PropertiesExpander(new Properties()), true);
 
             final Configuration[] children = config.getChildren();
-            assertTrue(children[0].getChildren().length == 0);
+            assertEquals(0, children[0].getChildren().length);
         }
         catch (CheckstyleException ex) {
             fail("unexpected exception");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DebugAuditAdapter.java b/src/test/java/com/puppycrawl/tools/checkstyle/DebugAuditAdapter.java
index 082af011e2..f5f840de88 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/DebugAuditAdapter.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DebugAuditAdapter.java
@@ -9,7 +9,7 @@
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 
 class DebugAuditAdapter implements AuditListener {
-    /** keeps track of the number of errors */
+    /** Keeps track of the number of errors */
     private boolean called;
 
     public boolean wasCalled() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DefaultConfigurationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/DefaultConfigurationTest.java
index ab6fbdab38..765f2f8ca1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/DefaultConfigurationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DefaultConfigurationTest.java
@@ -19,7 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
-import org.junit.Assert;
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 
 public class DefaultConfigurationTest {
@@ -28,10 +29,10 @@
     public void testRemoveChild() {
         DefaultConfiguration config = new DefaultConfiguration("Myconfig");
         DefaultConfiguration configChild = new DefaultConfiguration("childConfig");
-        Assert.assertTrue(config.getChildren().length == 0);
+        assertEquals(0, config.getChildren().length);
         config.addChild(configChild);
-        Assert.assertTrue(config.getChildren().length == 1);
+        assertEquals(1, config.getChildren().length);
         config.removeChild(configChild);
-        Assert.assertTrue(config.getChildren().length == 0);
+        assertEquals(0, config.getChildren().length);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 8925da7074..71b7c64230 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -64,6 +64,7 @@ public void testVersionPrint()
             throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("Checkstyle version: null" + System.lineSeparator(),
                         systemOut.getLog());
@@ -78,6 +79,7 @@ public void testWrongArgument()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 String usage = String.format("Unrecognized option: -w%n"
                     + "usage: java com.puppycrawl.tools.checkstyle.Main [options] -c <config.xml>%n"
@@ -100,6 +102,7 @@ public void testNoConfigSpecified()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("Must specify a config XML file." + System.lineSeparator(),
                         systemOut.getLog());
@@ -114,6 +117,7 @@ public void testNonExistingTargetFile()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("Must specify files to process, found 0." + System.lineSeparator(),
                         systemOut.getLog());
@@ -128,6 +132,7 @@ public void testNonExistingConfigFile()
             throws Exception {
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("unable to find src/main/resources/non_existing_config.xml%n"
                                 + "Checkstyle ends with 1 errors.%n"),
@@ -143,6 +148,7 @@ public void checkAssertion() {
     public void testNonExistingOutputFormat() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("Invalid output format. "
                         + "Found 'xmlp' but expected 'plain' or 'xml'.%n"), systemOut.getLog());
@@ -157,6 +163,7 @@ public void checkAssertion() {
     public void testExistingTargetFile() throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("Starting audit...%n"
                         + "Audit done.%n"), systemOut.getLog());
@@ -171,6 +178,7 @@ public void checkAssertion() {
     public void testExistingTargetFileXmlOutput() throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() throws IOException {
                 String currentPath = new File(".").getCanonicalPath();
                 String expectedPath = currentPath
@@ -196,6 +204,7 @@ public void checkAssertion() throws IOException {
     public void testExistingTargetFilePlainOutput() throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("Starting audit...%n"
                         + "Audit done.%n"), systemOut.getLog());
@@ -211,6 +220,7 @@ public void checkAssertion() {
     public void testExistingTargetFileWithViolations() throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() throws IOException {
                 String currentPath = new File(".").getCanonicalPath();
                 String expectedPath = currentPath
@@ -235,6 +245,7 @@ public void testExistingTargetFileWithError()
             throws Exception {
         exit.expectSystemExitWithStatus(2);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() throws IOException {
                 String currentPath = new File(".").getCanonicalPath();
                 String expectedPath = currentPath
@@ -260,6 +271,7 @@ public void testExistingTargetFilePlainOutputToNonExistingFile()
             throws Exception {
 
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("", systemOut.getLog());
                 assertEquals("", systemErr.getLog());
@@ -276,6 +288,7 @@ public void testExistingTargetFilePlainOutputToFile()
             throws Exception {
         final File file = temporaryFolder.newFile("file.output");
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("", systemOut.getLog());
                 assertEquals("", systemErr.getLog());
@@ -295,6 +308,7 @@ public void testExistingTargetFilePlainOutputToFileWithoutRwPermissions()
         assertTrue(file.setWritable(false, false));
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() throws IOException {
                 assertEquals("Permission denied : '" + file.getCanonicalPath() + "'."
                         + System.lineSeparator(), systemOut.getLog());
@@ -319,6 +333,7 @@ public void testExistingTargetFilePlainOutputToFileWithoutReadAndRwPermissions()
         assertTrue(file.setWritable(false, false));
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() throws IOException {
                 assertEquals("Permission denied : '" + file.getCanonicalPath() + "'."
                         + System.lineSeparator(), systemOut.getLog());
@@ -336,6 +351,7 @@ public void testExistingTargetFilePlainOutputProperties()
             throws Exception {
         //exit.expectSystemExitWithStatus(0);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("Starting audit...%n"
                         + "Audit done.%n"), systemOut.getLog());
@@ -353,6 +369,7 @@ public void testExistingTargetFilePlainOutputNonexistingProperties()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals("Could not find file 'nonexisting.properties'."
                         + System.lineSeparator(), systemOut.getLog());
@@ -370,6 +387,7 @@ public void testExistingIncorrectConfigFile()
             throws Exception {
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(new Assertion() {
+            @Override
             public void checkAssertion() {
                 assertEquals(String.format("unable to parse configuration stream - Content is not allowed in prolog.:7:1%n"
                         + "Checkstyle ends with 1 errors.%n"), systemOut.getLog());
@@ -464,7 +482,7 @@ public void testExistingDirectoryWithViolations() throws Exception {
         };
 
         exit.checkAssertionAfterwards(new Assertion() {
-            public void checkAssertion() throws IOException {
+            @Override public void checkAssertion() throws IOException {
                 String currentPath = new File(".").getCanonicalPath();
                 String expectedPath = currentPath
                         + "/src/test/resources/com/puppycrawl/tools/checkstyle/metrics/"
@@ -502,7 +520,7 @@ public void testListFiles_notFile() throws Exception {
         when(fileMock.isFile()).thenReturn(false);
 
         List<File> result = (List<File>) method.invoke(null, fileMock);
-        assertTrue(result.size() == 0);
+        assertEquals(0, result.size());
     }
 
     @Test
@@ -519,6 +537,6 @@ public void testListFiles_DirectoryWithNull() throws Exception {
         when(fileMock.listFiles()).thenReturn(null);
 
         List<File> result = (List<File>) method.invoke(null, fileMock);
-        assertTrue(result.size() == 0);
+        assertEquals(0, result.size());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java b/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java
index 62166bb612..d82fb8986c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TestUtils.java
@@ -24,7 +24,7 @@
 
 import org.junit.Assert;
 
-public class TestUtils {
+public final class TestUtils {
 
     private TestUtils() {
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 47fbb0f14e..9a5aa7b617 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -294,7 +294,7 @@ public void testProcessWithRecognitionException() throws Exception {
         treeWalker.processFiltered(file, lines);
     }
 
-    public static class BadJavaDocCheck extends Check {
+    private static class BadJavaDocCheck extends Check {
         @Override
         public int[] getDefaultTokens() {
             return getAcceptableTokens();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
index e57b90e1aa..a939256344 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
@@ -151,7 +151,7 @@ public void testAddError() throws IOException {
         final LocalizedMessage message =
             new LocalizedMessage(1, 1,
                 "messages.properties", "key", null, SeverityLevel.ERROR, null,
-                this.getClass(), null);
+                    getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "Test.java", message);
         logger.addError(ev);
         logger.auditFinished(null);
@@ -168,7 +168,7 @@ public void testAddErrorOnZeroColumns() throws IOException {
         final LocalizedMessage message =
                 new LocalizedMessage(1, 0,
                         "messages.properties", "key", null, SeverityLevel.ERROR, null,
-                        this.getClass(), null);
+                        getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "Test.java", message);
         logger.addError(ev);
         logger.auditFinished(null);
@@ -185,7 +185,7 @@ public void testAddIgnored() throws IOException {
         final LocalizedMessage message =
                 new LocalizedMessage(1, 1,
                         "messages.properties", "key", null, SeverityLevel.IGNORE, null,
-                        this.getClass(), null);
+                        getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "Test.java", message);
         logger.addError(ev);
         logger.auditFinished(null);
@@ -200,7 +200,7 @@ public void testAddException()
         logger.auditStarted(null);
         final LocalizedMessage message =
             new LocalizedMessage(1, 1,
-                "messages.properties", null, null, null, this.getClass(), null);
+                "messages.properties", null, null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "Test.java", message);
         logger.addException(ev, new TestException());
         logger.auditFinished(null);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
index ef414fc6a1..5b621f5216 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
@@ -24,7 +24,6 @@
 import java.util.SortedSet;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -36,22 +35,7 @@
  * @author lkuehne
  */
 public class AbstractViolationReporterTest extends BaseCheckTestSupport {
-    private final Check emptyCheck = new Check() {
-        @Override
-        public int[] getDefaultTokens() {
-            return ArrayUtils.EMPTY_INT_ARRAY;
-        }
-
-        @Override
-        public int[] getAcceptableTokens() {
-            return ArrayUtils.EMPTY_INT_ARRAY;
-        }
-
-        @Override
-        public int[] getRequiredTokens() {
-            return ArrayUtils.EMPTY_INT_ARRAY;
-        }
-    };
+    private final Check emptyCheck = new EmptyCheck();
 
     @Test
     public void testGetMessageBundleWithPackage() {
@@ -83,7 +67,7 @@ public void testCustomMessage() throws Exception {
         emptyCheck.log(0, "msgKey");
 
         SortedSet<LocalizedMessage> messages = collector.getMessages();
-        Assert.assertTrue(messages.size() == 1);
+        assertEquals(1, messages.size());
         assertEquals("This is a custom message.", messages.first()
                 .getMessage());
     }
@@ -100,7 +84,7 @@ public void testCustomMessageWithParameters() throws Exception {
         emptyCheck.log(0, "msgKey", "TestParam");
 
         SortedSet<LocalizedMessage> messages = collector.getMessages();
-        Assert.assertTrue(messages.size() == 1);
+        assertEquals(1, messages.size());
 
         assertEquals("This is a custom message with TestParam.",
                 messages.first().getMessage());
@@ -118,10 +102,27 @@ public void testCustomMessageWithParametersNegative() throws Exception {
         emptyCheck.log(0, "msgKey", "TestParam");
 
         SortedSet<LocalizedMessage> messages = collector.getMessages();
-        Assert.assertTrue(messages.size() == 1);
+        assertEquals(1, messages.size());
 
         //we expect an exception here because of the bogus custom message
         //format
         messages.first().getMessage();
     }
+
+    private static class EmptyCheck extends Check {
+        @Override
+        public int[] getDefaultTokens() {
+            return ArrayUtils.EMPTY_INT_ARRAY;
+        }
+
+        @Override
+        public int[] getAcceptableTokens() {
+            return ArrayUtils.EMPTY_INT_ARRAY;
+        }
+
+        @Override
+        public int[] getRequiredTokens() {
+            return ArrayUtils.EMPTY_INT_ARRAY;
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
index 3b986d360e..f9ee63971a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
@@ -98,7 +98,7 @@ public void testContextualize_ConversionException() {
     }
 
     @SuppressWarnings("unused")
-    public static class TestBean extends AutomaticBean {
+    private static class TestBean extends AutomaticBean {
 
         private String privateField;
 
@@ -115,7 +115,7 @@ public void setVal(int val) {
         }
 
         public void setExceptionalMethod(String value) {
-            throw new IllegalStateException("for UT");
+            throw new IllegalStateException(wrong);
         }
 
         public void setName(String name) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
index f0b141cdee..cdab379c68 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
@@ -110,7 +110,7 @@ public void testTreeStructure() throws Exception {
         checkDir(new File("src/test/resources/com/puppycrawl/tools/checkstyle"));
     }
 
-    private void checkDir(File dir) throws Exception {
+    private static void checkDir(File dir) throws Exception {
         File[] files = dir.listFiles(new FileFilter() {
                 @Override
                 public boolean accept(File file) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
index 1c1b52230e..9699bc9798 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
@@ -23,7 +23,7 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
-import java.util.Arrays;
+import java.util.Collections;
 
 import org.junit.Test;
 
@@ -41,7 +41,7 @@ public void testDeprecatedCtor() {
     public void testCppCommentNotIntersect() {
         // just to make UT coverage 100%
         FileContents o = new FileContents(
-                FileText.fromLines(new File("filename"), Arrays.asList("  //  ")));
+                FileText.fromLines(new File("filename"), Collections.singletonList("  //  ")));
         o.reportCppComment(1, 2);
         assertFalse(o.hasIntersectionWithComment(1, 0, 1, 1));
     }
@@ -50,7 +50,7 @@ public void testCppCommentNotIntersect() {
     public void testCppCommentIntersect() {
         // just to make UT coverage 100%
         FileContents o = new FileContents(
-                FileText.fromLines(new File("filename"), Arrays.asList("  //   ")));
+                FileText.fromLines(new File("filename"), Collections.singletonList("  //   ")));
         o.reportCppComment(1, 2);
         assertTrue(o.hasIntersectionWithComment(1, 5, 1, 6));
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
index 240dc6cccb..662c904fb3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/JavadocTagInfoTest.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -28,6 +29,40 @@
 
 public class JavadocTagInfoTest {
 
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testJavadocTagInfoValueOf() {
+        JavadocTagInfo tag = JavadocTagInfo.valueOf("AUTHOR");
+        assertEquals(JavadocTagInfo.AUTHOR, tag);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testTypeValueOf() {
+        JavadocTagInfo.Type type = JavadocTagInfo.Type.valueOf("BLOCK");
+        assertEquals(JavadocTagInfo.Type.BLOCK, type);
+    }
+
+    /* Additional test for jacoco, since values()
+     * is generated by javac and jacoco reports that
+     * values() is uncovered.
+     */
+    @Test
+    public void testTypeValues() {
+        JavadocTagInfo.Type[] expected = new JavadocTagInfo.Type[] {
+            JavadocTagInfo.Type.BLOCK,
+            JavadocTagInfo.Type.INLINE,
+        };
+        JavadocTagInfo.Type[] actual = JavadocTagInfo.Type.values();
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testAuthor() {
         final DetailAST ast = new DetailAST();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
index 4425a6bda2..bffe6c9b61 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
@@ -32,6 +32,17 @@
  * @author Mehmet Can Cömert
  */
 public class ScopeTest {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testScopeValueOf() {
+        Scope scope = Scope.valueOf("PRIVATE");
+        assertEquals(Scope.PRIVATE, scope);
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void testMisc() {
         final Scope o = Scope.getInstance("public");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
index d530ac44da..2628ea7703 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
@@ -19,7 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
-import org.junit.Assert;
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 
 public class SeverityLevelCounterTest {
@@ -33,17 +34,17 @@ public void testCtorException() {
     public void testAddException() {
         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);
         final AuditEvent event = new AuditEvent(this, "ATest.java", null);
-        Assert.assertTrue(counter.getCount() == 0);
+        assertEquals(0, counter.getCount());
         counter.addException(event, new IllegalStateException());
-        Assert.assertTrue(counter.getCount() == 1);
+        assertEquals(1, counter.getCount());
     }
 
     @Test
     public void testAddExceptionWarning() {
         final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.WARNING);
         final AuditEvent event = new AuditEvent(this, "ATest.java", null);
-        Assert.assertTrue(counter.getCount() == 0);
+        assertEquals(0, counter.getCount());
         counter.addException(event, new IllegalStateException());
-        Assert.assertTrue(counter.getCount() == 0);
+        assertEquals(0, counter.getCount());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelTest.java
index e2f1ac9d5f..699d2976a3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelTest.java
@@ -31,6 +31,17 @@
  * @author Mehmet Can Cömert
  */
 public class SeverityLevelTest {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testSeverityLevelValueOf() {
+        SeverityLevel level = SeverityLevel.valueOf("INFO");
+        assertEquals(SeverityLevel.INFO, level);
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void testMisc() {
         final SeverityLevel o = SeverityLevel.getInstance("info");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
index 5b88a6e1de..4213eca1aa 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
@@ -20,7 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks;
 
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
@@ -70,7 +70,7 @@ public void testGetAcceptableTockens() {
         int[] expected = {TokenTypes.ARRAY_DECLARATOR };
         ArrayTypeStyleCheck check = new ArrayTypeStyleCheck();
         int[] actual = check.getAcceptableTokens();
-        assertTrue(actual.length == 1);
+        assertEquals(1, actual.length);
         assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
index 881c7eebb7..4cce14d575 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
@@ -30,7 +30,7 @@
 
 public class AvoidEscapedUnicodeCharactersCheckTest extends BaseCheckTestSupport {
 
-    private final String MSG = getCheckMessage("forbid.escaped.unicode.char");
+    private final String msg = getCheckMessage("forbid.escaped.unicode.char");
 
     @Test
     public void testGetRequiredTokens() {
@@ -48,32 +48,32 @@ public void testDefault() throws Exception {
         DefaultConfiguration checkConfig =
                 createCheckConfig(AvoidEscapedUnicodeCharactersCheck.class);
         final String[] expected = {
-            "7: " + MSG,
-            "9: " + MSG,
-            "11: " + MSG,
-            "15: " + MSG,
-            "16: " + MSG,
-            "20: " + MSG,
-            "24: " + MSG,
-            "25: " + MSG,
-            "27: " + MSG,
-            "31: " + MSG,
-            "32: " + MSG,
-            "33: " + MSG,
-            "34: " + MSG,
-            "42: " + MSG,
-            "59: " + MSG,
-            "60: " + MSG,
-            "61: " + MSG,
-            "62: " + MSG,
-            "72: " + MSG,
-            "73: " + MSG,
-            "74: " + MSG,
-            "75: " + MSG,
-            "76: " + MSG,
-            "77: " + MSG,
-            "79: " + MSG,
-            "82: " + MSG,
+            "7: " + msg,
+            "9: " + msg,
+            "11: " + msg,
+            "15: " + msg,
+            "16: " + msg,
+            "20: " + msg,
+            "24: " + msg,
+            "25: " + msg,
+            "27: " + msg,
+            "31: " + msg,
+            "32: " + msg,
+            "33: " + msg,
+            "34: " + msg,
+            "42: " + msg,
+            "59: " + msg,
+            "60: " + msg,
+            "61: " + msg,
+            "62: " + msg,
+            "72: " + msg,
+            "73: " + msg,
+            "74: " + msg,
+            "75: " + msg,
+            "76: " + msg,
+            "77: " + msg,
+            "79: " + msg,
+            "82: " + msg,
         };
         verify(checkConfig, getPath("InputAvoidEscapedUnicodeCharactersCheck.java"), expected);
     }
@@ -84,29 +84,29 @@ public void testAllowEscapesForControlCharacterst() throws Exception {
                 createCheckConfig(AvoidEscapedUnicodeCharactersCheck.class);
         checkConfig.addAttribute("allowEscapesForControlCharacters", "true");
         final String[] expected = {
-            "7: " + MSG,
-            "9: " + MSG,
-            "11: " + MSG,
-            "15: " + MSG,
-            "16: " + MSG,
-            "24: " + MSG,
-            "25: " + MSG,
-            "31: " + MSG,
-            "32: " + MSG,
-            "33: " + MSG,
-            "34: " + MSG,
-            "42: " + MSG,
-            "59: " + MSG,
-            "60: " + MSG,
-            "61: " + MSG,
-            "62: " + MSG,
-            "73: " + MSG,
-            "74: " + MSG,
-            "75: " + MSG,
-            "76: " + MSG,
-            "77: " + MSG,
-            "79: " + MSG,
-            "82: " + MSG,
+            "7: " + msg,
+            "9: " + msg,
+            "11: " + msg,
+            "15: " + msg,
+            "16: " + msg,
+            "24: " + msg,
+            "25: " + msg,
+            "31: " + msg,
+            "32: " + msg,
+            "33: " + msg,
+            "34: " + msg,
+            "42: " + msg,
+            "59: " + msg,
+            "60: " + msg,
+            "61: " + msg,
+            "62: " + msg,
+            "73: " + msg,
+            "74: " + msg,
+            "75: " + msg,
+            "76: " + msg,
+            "77: " + msg,
+            "79: " + msg,
+            "82: " + msg,
         };
         verify(checkConfig, getPath("InputAvoidEscapedUnicodeCharactersCheck.java"), expected);
     }
@@ -117,24 +117,24 @@ public void testAllowByTailComment() throws Exception {
                 createCheckConfig(AvoidEscapedUnicodeCharactersCheck.class);
         checkConfig.addAttribute("allowByTailComment", "true");
         final String[] expected = {
-            "7: " + MSG,
-            "15: " + MSG,
-            "24: " + MSG,
-            "31: " + MSG,
-            "33: " + MSG,
-            "34: " + MSG,
-            "59: " + MSG,
-            "60: " + MSG,
-            "61: " + MSG,
-            "62: " + MSG,
-            "72: " + MSG,
-            "73: " + MSG,
-            "74: " + MSG,
-            "75: " + MSG,
-            "76: " + MSG,
-            "77: " + MSG,
-            "79: " + MSG,
-            "82: " + MSG,
+            "7: " + msg,
+            "15: " + msg,
+            "24: " + msg,
+            "31: " + msg,
+            "33: " + msg,
+            "34: " + msg,
+            "59: " + msg,
+            "60: " + msg,
+            "61: " + msg,
+            "62: " + msg,
+            "72: " + msg,
+            "73: " + msg,
+            "74: " + msg,
+            "75: " + msg,
+            "76: " + msg,
+            "77: " + msg,
+            "79: " + msg,
+            "82: " + msg,
         };
         verify(checkConfig, getPath("InputAvoidEscapedUnicodeCharactersCheck.java"), expected);
     }
@@ -145,15 +145,15 @@ public void testAllowAllCharactersEscaped() throws Exception {
                 createCheckConfig(AvoidEscapedUnicodeCharactersCheck.class);
         checkConfig.addAttribute("allowIfAllCharactersEscaped", "true");
         final String[] expected = {
-            "7: " + MSG,
-            "9: " + MSG,
-            "11: " + MSG,
-            "15: " + MSG,
-            "16: " + MSG,
-            "31: " + MSG,
-            "32: " + MSG,
-            "33: " + MSG,
-            "42: " + MSG,
+            "7: " + msg,
+            "9: " + msg,
+            "11: " + msg,
+            "15: " + msg,
+            "16: " + msg,
+            "31: " + msg,
+            "32: " + msg,
+            "33: " + msg,
+            "42: " + msg,
         };
         verify(checkConfig, getPath("InputAvoidEscapedUnicodeCharactersCheck.java"), expected);
     }
@@ -164,18 +164,18 @@ public void allowNonPrintableEscapes() throws Exception {
                 createCheckConfig(AvoidEscapedUnicodeCharactersCheck.class);
         checkConfig.addAttribute("allowNonPrintableEscapes", "true");
         final String[] expected = {
-            "7: " + MSG,
-            "9: " + MSG,
-            "11: " + MSG,
-            "15: " + MSG,
-            "16: " + MSG,
-            "24: " + MSG,
-            "25: " + MSG,
-            "31: " + MSG,
-            "32: " + MSG,
-            "33: " + MSG,
-            "34: " + MSG,
-            "42: " + MSG,
+            "7: " + msg,
+            "9: " + msg,
+            "11: " + msg,
+            "15: " + msg,
+            "16: " + msg,
+            "24: " + msg,
+            "25: " + msg,
+            "31: " + msg,
+            "32: " + msg,
+            "33: " + msg,
+            "34: " + msg,
+            "42: " + msg,
         };
         verify(checkConfig, getPath("InputAvoidEscapedUnicodeCharactersCheck.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
index e6afb194ab..9937ba7729 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
@@ -93,7 +93,7 @@ public void testProcessCallsFinishBeforeCallingDestroy() throws Exception {
                 TestFileSetCheck.isFileContentAvailable());
     }
 
-    public static class TestFileSetCheck extends AbstractFileSetCheck {
+    private static class TestFileSetCheck extends AbstractFileSetCheck {
         private static boolean destroyed;
         private static boolean fileContentAvailable;
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
index 3900e81c55..1f5033978d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
@@ -21,7 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck.MSG_KEY;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
@@ -58,7 +58,7 @@ public void testGetAcceptableTokens() {
         int[] expected = {TokenTypes.COMMENT_CONTENT };
         TodoCommentCheck check = new TodoCommentCheck();
         int[] actual = check.getAcceptableTokens();
-        assertTrue(actual.length == 1);
+        assertEquals(1, actual.length);
         assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index 89230f6b7a..732a450fb2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.IO_EXCEPTION_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.MSG_KEY;
+import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -51,6 +52,16 @@ public void setUp() {
         checkConfig = createCheckConfig(UniquePropertiesCheck.class);
     }
 
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testLineSeparatorOptionValueOf() {
+        LineSeparatorOption option = LineSeparatorOption.valueOf("CR");
+        assertEquals(LineSeparatorOption.CR, option);
+    }
+
     /**
      * Tests the ordinal work of a check.
      */
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
index e855745f0a..b74d10c128 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
@@ -21,7 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.UpperEllCheck.MSG_KEY;
 import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
@@ -55,7 +55,7 @@ public void testAcceptableTockens() {
         int[] expected = {TokenTypes.NUM_LONG };
         UpperEllCheck check = new UpperEllCheck();
         int[] actual = check.getAcceptableTokens();
-        assertTrue(actual.length == 1);
+        assertEquals(1, actual.length);
         assertArrayEquals(expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java
index 2cc9d07abe..0482e2d107 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java
@@ -24,6 +24,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_PARENS_PRESENT;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT;
+import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 
@@ -36,6 +37,40 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class AnnotationUseStyleTest extends BaseCheckTestSupport {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testElementStyleValueOf() {
+        AnnotationUseStyleCheck.ElementStyle option =
+            AnnotationUseStyleCheck.ElementStyle.valueOf("COMPACT");
+        assertEquals(AnnotationUseStyleCheck.ElementStyle.COMPACT, option);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testTrailingArrayCommaValueOf() {
+        AnnotationUseStyleCheck.TrailingArrayComma option =
+            AnnotationUseStyleCheck.TrailingArrayComma.valueOf("ALWAYS");
+        assertEquals(AnnotationUseStyleCheck.TrailingArrayComma.ALWAYS, option);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testClosingParensValueOf() {
+        AnnotationUseStyleCheck.ClosingParens option =
+            AnnotationUseStyleCheck.ClosingParens.valueOf("ALWAYS");
+        assertEquals(AnnotationUseStyleCheck.ClosingParens.ALWAYS, option);
+    }
+
     /**
      * Test that annotation parens are always present.
      */
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
index 5aef30b17b..60cf817b94 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck.MSG_KEY_ANNOTATION_MISSING_OVERRIDE;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck.MSG_KEY_TAG_NOT_VALID_ON;
+import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 
@@ -240,7 +241,7 @@ public void testGetAcceptableTockens() throws Exception {
         int[] expectedTokens = {TokenTypes.METHOD_DEF };
         MissingOverrideCheck check = new MissingOverrideCheck();
         int[] actual = check.getAcceptableTokens();
-        Assert.assertTrue(actual.length == 1);
+        assertEquals(1, actual.length);
         Assert.assertArrayEquals(expectedTokens, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
index 88b855d59b..f1931f40fb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.MSG_KEY_BLOCK_EMPTY;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck.MSG_KEY_BLOCK_NO_STMT;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
@@ -29,6 +30,17 @@
 
 public class EmptyBlockCheckTest
     extends BaseCheckTestSupport {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testBlockOptionValueOf() {
+        BlockOption option = BlockOption.valueOf("TEXT");
+        assertEquals(BlockOption.TEXT, option);
+    }
+
     @Test
     public void testDefault()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
index 548f589801..2c35965a0e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
@@ -23,6 +23,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_NEW;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS;
 import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
 
 import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Assert;
@@ -41,6 +42,16 @@ public void setUp() {
         checkConfig = createCheckConfig(LeftCurlyCheck.class);
     }
 
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testLeftCurlyOptionValueOf() {
+        LeftCurlyOption option = LeftCurlyOption.valueOf("NL");
+        assertEquals(LeftCurlyOption.NL, option);
+    }
+
     @Test
     public void testGetRequiredTokens() {
         LeftCurlyCheck checkObj = new LeftCurlyCheck();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
index 31318b2fcb..b7aa48f716 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
@@ -23,6 +23,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_NEW;
 import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_SAME;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -38,6 +39,16 @@ public void setUp() {
         checkConfig = createCheckConfig(RightCurlyCheck.class);
     }
 
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testRightCurlyOptionValueOf() {
+        RightCurlyOption option = RightCurlyOption.valueOf("ALONE");
+        assertEquals(RightCurlyOption.ALONE, option);
+    }
+
     @Test
     public void testDefault() throws Exception {
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
index ed4eba3021..224d8498b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
@@ -103,7 +103,7 @@ public void testDefault()
         verify(checkConfig, getPath("InputHiddenField.java"), expected);
     }
 
-    /** tests ignoreFormat property */
+    /** Tests ignoreFormat property */
     @Test
     public void testIgnoreFormat()
         throws Exception {
@@ -144,7 +144,7 @@ public void testIgnoreFormat()
         verify(checkConfig, getPath("InputHiddenField.java"), expected);
     }
 
-    /** tests ignoreSetter property */
+    /** Tests ignoreSetter property */
     @Test
     public void testIgnoreSetter()
         throws Exception {
@@ -187,7 +187,7 @@ public void testIgnoreSetter()
         verify(checkConfig, getPath("InputHiddenField.java"), expected);
     }
 
-    /** tests ignoreSetter and setterCanReturnItsClass properties */
+    /** Tests ignoreSetter and setterCanReturnItsClass properties */
     @Test
     public void testIgnoreChainSetter()
         throws Exception {
@@ -229,7 +229,7 @@ public void testIgnoreChainSetter()
         verify(checkConfig, getPath("InputHiddenField.java"), expected);
     }
 
-    /** tests ignoreConstructorParameter property */
+    /** Tests ignoreConstructorParameter property */
     @Test
     public void testIgnoreConstructorParameter()
         throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
index 496c3a3586..a8a7d0e2a6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
@@ -70,7 +70,7 @@ public void testUtilClassPrivateCtor() throws Exception {
         verify(checkConfig, getPath("design" + File.separator + "UtilityClassConstructorPrivate.java"), expected);
     }
 
-    /** nonstatic methods - always OK */
+    /** Nonstatic methods - always OK */
     @Test
     public void testNonUtilClass() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/GuardTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/GuardTest.java
index cf6f1f74b0..7ee4b133d2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/GuardTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/GuardTest.java
@@ -19,12 +19,39 @@
 
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
 import org.junit.Test;
 
 public class GuardTest {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testAccessResultValueOf() {
+        AccessResult result = AccessResult.valueOf("ALLOWED");
+        assertEquals(AccessResult.ALLOWED, result);
+    }
+
+    /* Additional test for jacoco, since values()
+     * is generated by javac and jacoco reports that
+     * values() is uncovered.
+     */
+    @Test
+    public void testAccessResultValues() {
+        AccessResult[] actual = AccessResult.values();
+        AccessResult[] expected = new AccessResult[] {
+            AccessResult.ALLOWED,
+            AccessResult.DISALLOWED,
+            AccessResult.UNKNOWN,
+        };
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testPkgGuard1() {
         final Guard g = new Guard(true, false, "pkg", false, false);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
index 91b6256568..68bcfe0a2e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck.MSG_ORDERING;
 import static com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck.MSG_SEPARATION;
+import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 
@@ -42,6 +43,17 @@
 @RunWith(PowerMockRunner.class)
 @PrepareForTest(ImportOrderOption.class)
 public class ImportOrderCheckTest extends BaseCheckTestSupport {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testImportOrderOptionValueOf() {
+        ImportOrderOption option = ImportOrderOption.valueOf("TOP");
+        assertEquals(ImportOrderOption.TOP, option);
+    }
+
     @Test
     public void testDefault() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index 41a83b744c..86bad0d9a5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -81,7 +81,7 @@ public void testWithMultipleChecks() throws Exception {
         verify(checker, getPath("javadoc/InputCorrectJavaDocParagraphCheck.java"), expected);
     }
 
-    public static class TempCheck extends AbstractJavadocCheck {
+    private static class TempCheck extends AbstractJavadocCheck {
 
         @Override
         public int[] getDefaultJavadocTokens() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java
index ef6eb1f7ad..3e560f61be 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java
@@ -271,7 +271,7 @@ private void compareTrees(ParseTree t1, ParseTree t2) {
         Assert.assertEquals(t1.toStringTree(parser), t2.toStringTree(parser));
     }
 
-    public static class FailOnErrorListener extends BaseErrorListener {
+    private static class FailOnErrorListener extends BaseErrorListener {
         @Override
         public void syntaxError(
                 Recognizer<?, ?> aRecognizer, Object aOffendingSymbol,
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagTest.java
index ebf7a3ce35..c9d06f9af0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagTest.java
@@ -19,11 +19,40 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
 public class JavadocTagTest {
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testJavadocTagTypeValueOf() {
+        JavadocUtils.JavadocTagType enumConst =
+            JavadocUtils.JavadocTagType.valueOf("ALL");
+        assertEquals(JavadocUtils.JavadocTagType.ALL, enumConst);
+    }
+
+    /* Additional test for jacoco, since values()
+     * is generated by javac and jacoco reports that
+     * values() is uncovered.
+     */
+    @Test
+    public void testJavadocTagTypeValues() {
+        JavadocUtils.JavadocTagType[] enumConstants =
+            JavadocUtils.JavadocTagType.values();
+        JavadocUtils.JavadocTagType[] expected = new JavadocUtils.JavadocTagType[] {
+            JavadocUtils.JavadocTagType.BLOCK,
+            JavadocUtils.JavadocTagType.INLINE,
+            JavadocUtils.JavadocTagType.ALL,
+        };
+        assertArrayEquals(expected, enumConstants);
+    }
+
     @Test
     public void testToString() {
         JavadocTag javadocTag = new JavadocTag(0, 1, "author", "firstArg");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
index 1b5775580f..2450729cdf 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java
@@ -204,7 +204,7 @@ protected void verify(Checker c,
 
         // process each of the lines
         final ByteArrayInputStream bais =
-            new ByteArrayInputStream(BAOS.toByteArray());
+            new ByteArrayInputStream(baos.toByteArray());
         final LineNumberReader lnr =
             new LineNumberReader(new InputStreamReader(bais));
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
index bf7c34acd5..631f21e9b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
@@ -22,6 +22,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_NOT_PRECEDED;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_PRECEDED;
 import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Assert;
 import org.junit.Before;
@@ -72,6 +73,26 @@ public void testGetAcceptableTokens() {
             TokenTypes.FOR_INIT,
         };
         Assert.assertNotNull(actual);
-        assertArrayEquals(expected, actual);
+        Assert.assertArrayEquals(expected, actual);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testPadOptionValueOf() {
+        PadOption option = PadOption.valueOf("NOSPACE");
+        assertEquals(PadOption.NOSPACE, option);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testWrapOptionValueOf() {
+        WrapOption option = WrapOption.valueOf("EOL");
+        assertEquals(WrapOption.EOL, option);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
index 64765a43d3..4c3baa0af5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
@@ -47,7 +47,7 @@ public void testAllBlockComments() throws Exception {
         Assert.assertTrue(ALL_COMMENTS.isEmpty());
     }
 
-    public static class BlockCommentListenerCheck extends Check {
+    private static class BlockCommentListenerCheck extends Check {
         @Override
         public boolean isCommentNodesRequired() {
             return true;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
index 6b53989a2f..6e0ff03b2e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
@@ -46,7 +46,7 @@ public void testAllBlockComments() throws Exception {
         Assert.assertTrue(ALL_COMMENTS.isEmpty());
     }
 
-    public static class SinglelineCommentListenerCheck extends Check {
+    private static class SinglelineCommentListenerCheck extends Check {
         @Override
         public boolean isCommentNodesRequired() {
             return true;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java
index 73f3de17d4..ba4c920688 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java
@@ -19,7 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.filters;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Before;
@@ -67,26 +69,26 @@ public void testEqualsAndHashCode() {
     @Test
     public void testGetFilters() {
         filter.addFilter(new IntMatchFilter(0));
-        assertTrue("size is the same", filter.getFilters().size() == 1);
+        assertEquals("size is the same", 1, filter.getFilters().size());
     }
 
     @Test
     public void testToString() {
         filter.addFilter(new IntMatchFilter(0));
-        assertTrue("toString works", filter.toString() != null);
+        assertNotNull("toString works", filter.toString());
     }
 
     @Test
     public void testGetFilters2() {
         FilterSet filterSet = new FilterSet();
         filterSet.addFilter(new SeverityMatchFilter());
-        assertTrue("size is the same", filterSet.getFilters().size() == 1);
+        assertEquals("size is the same", 1, filterSet.getFilters().size());
     }
 
     @Test
     public void testToString2() {
         FilterSet filterSet = new FilterSet();
         filterSet.addFilter(new SeverityMatchFilter());
-        assertTrue("size is the same", filterSet.toString() != null);
+        assertNotNull("size is the same", filterSet.toString());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilterTest.java
index f20db6500f..82a35ffac1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilterTest.java
@@ -39,12 +39,11 @@ public void testDefault() {
         SeverityLevel level = SeverityLevel.ERROR;
         LocalizedMessage message =
             new LocalizedMessage(0, 0, "", "", null,
-                level, null, this.getClass(), null);
+                level, null, getClass(), null);
         final AuditEvent ev2 = new AuditEvent(this, "ATest.java", message);
         assertTrue("level:" + level, filter.accept(ev2));
         level = SeverityLevel.INFO;
-        message = new LocalizedMessage(0, 0, "", "", null, level, null, this
-                .getClass(), null);
+        message = new LocalizedMessage(0, 0, "", "", null, level, null, getClass(), null);
         final AuditEvent ev3 = new AuditEvent(this, "ATest.java", message);
         assertFalse("level:" + level, filter.accept(ev3));
     }
@@ -58,12 +57,11 @@ public void testSeverity() {
         SeverityLevel level = SeverityLevel.ERROR;
         LocalizedMessage message =
             new LocalizedMessage(0, 0, "", "", null,
-                level, null, this.getClass(), null);
+                level, null, getClass(), null);
         final AuditEvent ev2 = new AuditEvent(this, "ATest.java", message);
         assertFalse("level:" + level, filter.accept(ev2));
         level = SeverityLevel.INFO;
-        message = new LocalizedMessage(0, 0, "", "", null, level, null, this
-                .getClass(), null);
+        message = new LocalizedMessage(0, 0, "", "", null, level, null, getClass(), null);
         final AuditEvent ev3 = new AuditEvent(this, "ATest.java", message);
         assertTrue("level:" + level, filter.accept(ev3));
     }
@@ -78,12 +76,11 @@ public void testAcceptOnMatch() {
         SeverityLevel level = SeverityLevel.ERROR;
         LocalizedMessage message =
             new LocalizedMessage(0, 0, "", "", null,
-                level, null, this.getClass(), null);
+                level, null, getClass(), null);
         final AuditEvent ev2 = new AuditEvent(this, "ATest.java", message);
         assertTrue("level:" + level, filter.accept(ev2));
         level = SeverityLevel.INFO;
-        message = new LocalizedMessage(0, 0, "", "", null, level, null, this
-                .getClass(), null);
+        message = new LocalizedMessage(0, 0, "", "", null, level, null, getClass(), null);
         final AuditEvent ev3 = new AuditEvent(this, "ATest.java", message);
         assertFalse("level:" + level, filter.accept(ev3));
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java
index e288e2e654..3ca521d9f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java
@@ -53,7 +53,7 @@ public void testDecideDefault() {
     @Test
     public void testDecideLocalizedMessage() {
         LocalizedMessage message =
-            new LocalizedMessage(0, 0, "", "", null, null, this.getClass(), null);
+            new LocalizedMessage(0, 0, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         //deny because there are matches on file and check names
         assertFalse("Names match", filter.accept(ev));
@@ -62,7 +62,7 @@ public void testDecideLocalizedMessage() {
     @Test
     public void testDecideByLine() {
         LocalizedMessage message =
-            new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+            new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         //deny because there are matches on file name, check name, and line
         filter.setLines("1-10");
@@ -76,7 +76,7 @@ public void testDecideByLine() {
     @Test
     public void testDecideByColumn() {
         LocalizedMessage message =
-            new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+            new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         //deny because there are matches on file name, check name, and column
         filter.setColumns("1-10");
@@ -88,7 +88,7 @@ public void testDecideByColumn() {
     @Test
     public void testDecideByFileNameAndModuleMatching_FileNameNull() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, null, message);
         assertTrue(filter.accept(ev));
     }
@@ -102,7 +102,7 @@ public void testDecideByFileNameAndModuleMatching_MessageNull() {
     @Test
     public void testDecideByFileNameAndModuleMatching_ModuleNull() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, "MyModule", this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, "MyModule", getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         filter.setModuleId(null);
         assertFalse(filter.accept(ev));
@@ -111,7 +111,7 @@ public void testDecideByFileNameAndModuleMatching_ModuleNull() {
     @Test
     public void testDecideByFileNameAndModuleMatching_ModuleEqual() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, "MyModule", this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, "MyModule", getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         filter.setModuleId("MyModule");
         assertFalse(filter.accept(ev));
@@ -120,7 +120,7 @@ public void testDecideByFileNameAndModuleMatching_ModuleEqual() {
     @Test
     public void testDecideByFileNameAndModuleMatching_ModuleNotEqual() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, "TheirModule", this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, "TheirModule", getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         filter.setModuleId("MyModule");
         assertTrue(filter.accept(ev));
@@ -129,7 +129,7 @@ public void testDecideByFileNameAndModuleMatching_ModuleNotEqual() {
     @Test
     public void testDecideByFileNameAndModuleMatching_RegExpNotMatch() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "T1est", message);
         assertTrue(filter.accept(ev));
     }
@@ -137,7 +137,7 @@ public void testDecideByFileNameAndModuleMatching_RegExpNotMatch() {
     @Test
     public void testDecideByFileNameAndModuleMatching_RegExpMatch() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "TestSUFFIX", message);
         SuppressElement filterWithoutChecks = new SuppressElement("Test");
         assertFalse(filterWithoutChecks.accept(ev));
@@ -146,7 +146,7 @@ public void testDecideByFileNameAndModuleMatching_RegExpMatch() {
     @Test
     public void testDecideByFileNameAndModuleMatching_CheckRegExpNotMatch() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
         filter.setChecks("NON_EXISTING_CHECK");
         assertTrue(filter.accept(ev));
@@ -155,9 +155,9 @@ public void testDecideByFileNameAndModuleMatching_CheckRegExpNotMatch() {
     @Test
     public void testDecideByFileNameAndModuleMatching_CheckRegExpMatch() {
         LocalizedMessage message =
-                new LocalizedMessage(10, 10, "", "", null, null, this.getClass(), null);
+                new LocalizedMessage(10, 10, "", "", null, null, getClass(), null);
         final AuditEvent ev = new AuditEvent(this, "ATest.java", message);
-        filter.setChecks(this.getClass().getCanonicalName());
+        filter.setChecks(getClass().getCanonicalName());
         assertFalse(filter.accept(ev));
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index af472756cb..1b4cce03cc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -280,7 +280,7 @@ public void testAcceptNullFileContents() {
         final LocalizedMessage message =
             new LocalizedMessage(1, 1,
                 "messages.properties", "key", null, SeverityLevel.ERROR, null,
-                this.getClass(), null);
+                    getClass(), null);
         final AuditEvent auditEvent = new AuditEvent(this, "Test.java", message);
         SuppressionCommentFilter filter = new SuppressionCommentFilter();
         Assert.assertTrue(filter.accept(auditEvent));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
index 8ffc002d23..9167195d5e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
@@ -26,31 +26,39 @@
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 
-import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.regex.PatternSyntaxException;
 
 import org.junit.Assume;
+import org.junit.Rule;
 import org.junit.Test;
+import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
-import org.powermock.reflect.Whitebox;
 import org.xml.sax.InputSource;
 
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.FilterSet;
 
 /**
  * Tests SuppressionsLoader.
  * @author Rick Giles
+ * @author <a href="mailto:andreyselkin@gmail.com">Andrei Selkin</a>
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ SuppressionsLoader.class, SuppressionsLoaderTest.class })
-public class SuppressionsLoaderTest {
+public class SuppressionsLoaderTest extends BaseCheckTestSupport {
+
+    @Rule
+    public ExpectedException thrown = ExpectedException.none();
+
     @Test
     public void testNoSuppressions()
         throws CheckstyleException {
@@ -187,45 +195,35 @@ private static boolean isInternetReachable() {
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void testUnableToFindSuppressions() throws Exception {
-        mockStatic(SuppressionsLoader.class);
+        Class<SuppressionsLoader> loaderClass = SuppressionsLoader.class;
+        Method loadSuppressions =
+            loaderClass.getDeclaredMethod("loadSuppressions", InputSource.class, String.class);
+        loadSuppressions.setAccessible(true);
 
-        String fileName = "suppressions_none.xml";
-        InputSource source = mock(InputSource.class);
+        String sourceName = "suppressions_none.xml";
+        InputSource inputSource = new InputSource(sourceName);
 
-        when(source.getByteStream()).thenThrow(FileNotFoundException.class);
-        when(SuppressionsLoader.class, "loadSuppressions", source, fileName).thenCallRealMethod();
+        thrown.expect(CheckstyleException.class);
+        thrown.expectMessage("unable to find " + sourceName);
 
-        try {
-            Whitebox.invokeMethod(SuppressionsLoader.class, "loadSuppressions", source, fileName);
-            fail("Exception is expected");
-        }
-        catch (CheckstyleException ex) {
-            assertTrue(ex.getCause() instanceof  FileNotFoundException);
-            assertEquals("unable to find " + fileName, ex.getMessage());
-        }
+        loadSuppressions.invoke(loaderClass, inputSource, sourceName);
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void testUnableToReadSuppressions() throws Exception {
-        mockStatic(SuppressionsLoader.class);
+        Class<SuppressionsLoader> loaderClass = SuppressionsLoader.class;
+        Method loadSuppressions =
+            loaderClass.getDeclaredMethod("loadSuppressions", InputSource.class, String.class);
+        loadSuppressions.setAccessible(true);
 
-        String fileName = "suppressions_none.xml";
-        InputSource source = mock(InputSource.class);
+        String sourceName = "suppressions_none.xml";
+        InputSource inputSource = new InputSource();
 
-        when(source.getByteStream()).thenThrow(IOException.class);
-        when(SuppressionsLoader.class, "loadSuppressions", source, fileName).thenCallRealMethod();
+        thrown.expect(CheckstyleException.class);
+        thrown.expectMessage("unable to read " + sourceName);
 
-        try {
-            Whitebox.invokeMethod(SuppressionsLoader.class, "loadSuppressions", source, fileName);
-            fail("Exception is expected");
-        }
-        catch (CheckstyleException ex) {
-            assertTrue(ex.getCause() instanceof  IOException);
-            assertEquals("unable to read " + fileName, ex.getMessage());
-        }
+        loadSuppressions.invoke(loaderClass, inputSource, sourceName);
     }
 
     @Test
@@ -273,15 +271,12 @@ public void testLoadFromClasspath()
     @Test
     @SuppressWarnings("unchecked")
     public void testloadSuppressionsURISyntaxException() throws Exception {
-        mockStatic(SuppressionsLoader.class);
-
         URL configUrl = mock(URL.class);
         String fileName = "suppressions_none.xml";
 
-        when(SuppressionsLoader.class.getResource(fileName)).thenReturn(configUrl);
         when(configUrl.toURI()).thenThrow(URISyntaxException.class);
-        when(SuppressionsLoader.loadSuppressions(fileName))
-                .thenCallRealMethod();
+        mockStatic(SuppressionsLoader.class, Mockito.CALLS_REAL_METHODS);
+        when(SuppressionsLoader.class.getResource(fileName)).thenReturn(configUrl);
 
         try {
             SuppressionsLoader.loadSuppressions(fileName);
