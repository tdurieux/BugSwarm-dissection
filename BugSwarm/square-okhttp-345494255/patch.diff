diff --git a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
index 3bcf049bca..b958146242 100755
--- a/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/http2/HttpOverHttp2Test.java
@@ -1182,9 +1182,9 @@ private int countFrames(List<String> logs, String message) {
    * <p>This test uses proxy tunnels to get a hook while a connection is being established.
    */
   @Test public void concurrentHttp2ConnectionsDeduplicated() throws Exception {
-    if (protocol != Protocol.H2C) {
-      server.useHttps(sslClient.socketFactory, true);
-    }
+    if (protocol == Protocol.H2C) return; // skip
+
+    server.useHttps(sslClient.socketFactory, true);
 
     // Force a fresh connection pool for the test.
     client.connectionPool().evictAll();
diff --git a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
index 15484131d4..e91918fc8c 100755
--- a/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
+++ b/okhttp/src/main/java/okhttp3/internal/http2/Http2Codec.java
@@ -90,6 +90,7 @@
   final StreamAllocation streamAllocation;
   private final Http2Connection connection;
   private Http2Stream stream;
+  private final boolean useH2C;
 
   public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation streamAllocation,
       Http2Connection connection) {
@@ -97,6 +98,9 @@ public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation
     this.chain = chain;
     this.streamAllocation = streamAllocation;
     this.connection = connection;
+
+    // cache this so we don't do linear scans on every call
+    useH2C = client.protocols().contains(Protocol.H2C);
   }
 
   @Override public Sink createRequestBody(Request request, long contentLength) {
@@ -124,7 +128,7 @@ public Http2Codec(OkHttpClient client, Interceptor.Chain chain, StreamAllocation
   @Override public Response.Builder readResponseHeaders(boolean expectContinue) throws IOException {
     List<Header> headers = stream.takeResponseHeaders();
     Response.Builder responseBuilder = readHttp2HeadersList(headers);
-    if (client.protocols().contains(Protocol.H2C)) {
+    if (useH2C) {
       responseBuilder.protocol(Protocol.H2C);
     }
     if (expectContinue && Internal.instance.code(responseBuilder) == HTTP_CONTINUE) {
