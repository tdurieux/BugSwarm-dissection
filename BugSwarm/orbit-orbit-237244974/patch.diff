diff --git a/actors/core/src/main/java/cloud/orbit/actors/extensions/ActorConstructionExtension.java b/actors/core/src/main/java/cloud/orbit/actors/extensions/ActorConstructionExtension.java
index 16e2def0f7..0e69920235 100755
--- a/actors/core/src/main/java/cloud/orbit/actors/extensions/ActorConstructionExtension.java
+++ b/actors/core/src/main/java/cloud/orbit/actors/extensions/ActorConstructionExtension.java
@@ -41,15 +41,5 @@
      * @param concreteClass concrete class of actor instance to construct
      * @return instance of concreteClass
      */
-    default <T> T newInstance(Class<T> concreteClass)
-    {
-        try
-        {
-            return concreteClass.newInstance();
-        }
-        catch (Exception ex)
-        {
-            throw new UncheckedException(ex);
-        }
-    }
+    <T> T newInstance(Class<T> concreteClass);
 }
diff --git a/actors/runtime/src/main/java/cloud/orbit/actors/Stage.java b/actors/runtime/src/main/java/cloud/orbit/actors/Stage.java
index a26e27d1e0..68beeff4ae 100755
--- a/actors/runtime/src/main/java/cloud/orbit/actors/Stage.java
+++ b/actors/runtime/src/main/java/cloud/orbit/actors/Stage.java
@@ -43,6 +43,7 @@
 import cloud.orbit.actors.concurrent.MultiExecutionSerializer;
 import cloud.orbit.actors.concurrent.WaitFreeMultiExecutionSerializer;
 import cloud.orbit.actors.extensions.ActorClassFinder;
+import cloud.orbit.actors.extensions.ActorConstructionExtension;
 import cloud.orbit.actors.extensions.ActorDeactivationExtension;
 import cloud.orbit.actors.extensions.ActorExtension;
 import cloud.orbit.actors.extensions.DefaultLoggerExtension;
@@ -62,6 +63,7 @@
 import cloud.orbit.actors.runtime.AsyncStreamReference;
 import cloud.orbit.actors.runtime.BasicRuntime;
 import cloud.orbit.actors.runtime.ClusterHandler;
+import cloud.orbit.actors.runtime.DefaultActorConstructionExtension;
 import cloud.orbit.actors.runtime.DefaultDescriptorFactory;
 import cloud.orbit.actors.runtime.DefaultHandlers;
 import cloud.orbit.actors.runtime.DefaultInvocationHandler;
@@ -749,6 +751,17 @@ else if (extension.getAfterHandlerName() != null)
             extensions.add(lifetimeExtension);
         }
 
+        ActorConstructionExtension actorConstructionExtension = extensions.stream()
+                .filter(p -> p instanceof ActorConstructionExtension)
+                .map(p -> (ActorConstructionExtension) p)
+                .findFirst().orElse(null);
+
+        if (actorConstructionExtension == null)
+        {
+            actorConstructionExtension = new DefaultActorConstructionExtension();
+            extensions.add(actorConstructionExtension);
+        }
+
         logger.debug("Starting messaging...");
         messaging.start();
         logger.debug("Starting hosting...");
diff --git a/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultActorConstructionExtension.java b/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultActorConstructionExtension.java
new file mode 100755
index 0000000000..8a952d6f09
--- /dev/null
+++ b/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultActorConstructionExtension.java
@@ -0,0 +1,51 @@
+/*
+ Copyright (C) 2017 Electronic Arts Inc.  All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+
+ 1.  Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+ 2.  Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+ 3.  Neither the name of Electronic Arts, Inc. ("EA") nor the names of
+     its contributors may be used to endorse or promote products derived
+     from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY ELECTRONIC ARTS AND ITS CONTRIBUTORS "AS IS" AND ANY
+ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ DISCLAIMED. IN NO EVENT SHALL ELECTRONIC ARTS OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package cloud.orbit.actors.runtime;
+
+import cloud.orbit.actors.extensions.ActorConstructionExtension;
+import cloud.orbit.exception.UncheckedException;
+
+/**
+ * Created by joeh on 2017-05-29.
+ */
+public class DefaultActorConstructionExtension implements ActorConstructionExtension
+{
+    @Override
+    public <T> T newInstance(final Class<T> concreteClass)
+    {
+        try
+        {
+            return concreteClass.newInstance();
+        }
+        catch (Exception ex)
+        {
+            throw new UncheckedException(ex);
+        }
+    }
+}
