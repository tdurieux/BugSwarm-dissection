diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Drupal_profile.json b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Drupal_profile.json
new file mode 100644
index 000000000..ba6d81c79
--- /dev/null
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Drupal_profile.json
@@ -0,0 +1,25 @@
+{
+  "name": "Drupal",
+  "ruleKeys": [
+    "S101",
+    "S103",
+    "S105",
+    "S113",
+    "S115",
+    "S116",
+    "S117",
+    "S121",
+    "S1105",
+    "S1109",
+    "S1131",
+    "S1757",
+    "S1765",
+    "S1779",
+    "S1780",
+    "S1784",
+    "S1788",
+    "S1793",
+    "S1808",
+    "S2003"
+  ]
+}
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/PSR-2_profile.json b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/PSR-2_profile.json
new file mode 100644
index 000000000..a901b7ce6
--- /dev/null
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/PSR-2_profile.json
@@ -0,0 +1,24 @@
+{
+  "name": "PSR-2",
+  "ruleKeys": [
+    "S100",
+    "S101",
+    "S103",
+    "S105",
+    "S113",
+    "S115",
+    "S128",
+    "S1124",
+    "S1131",
+    "S1757",
+    "S1765",
+    "S1766",
+    "S1779",
+    "S1780",
+    "S1781",
+    "S1784",
+    "S1788",
+    "S1793",
+    "S1808"
+  ]
+}
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S100.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S100.html
index 6a5291639..b9f96615c 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S100.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S100.html
@@ -1,6 +1,6 @@
 <p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
 <h2>Noncompliant Code Example</h2>
-<p>With default provided regular expression: <code>^[a-z][_a-zA-Z0-9]*$</code>:</p>
+<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
 <pre>
 function DoSomething(){...}
 </pre>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S101.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S101.html
index 6484d077f..00ca77050 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S101.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S101.html
@@ -1,5 +1,5 @@
-<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class
-names match a provided regular expression.</p>
+<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
+expression.</p>
 <h2>Noncompliant Code Example</h2>
 <p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
 <pre>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S105.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S105.html
index 283e44122..116918878 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S105.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S105.html
@@ -1,3 +1,3 @@
 <p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
-<p>So the use of tabulation character must be banned.</p>
+<p>So the use of the tabulation character must be banned.</p>
 
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1105.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1105.html
index 737305841..6393f45ab 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1105.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1105.html
@@ -1,5 +1,5 @@
-<p>Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate. This rule makes it mandatory to place
-open curly braces at the end of lines of code.</p>
+<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
+line of code.</p>
 <h2>Noncompliant Code Example</h2>
 <pre>
 if(condition)
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S113.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S113.html
index f1be99394..5c9fcea94 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S113.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S113.html
@@ -1,4 +1,4 @@
-<p>Some tools such as Git work better when files end with an empty line.</p>
+<p>Some tools work better when files end with an empty line.</p>
 <p>This rule simply generates an issue if it is missing.</p>
 <p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
 <pre>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S117.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S117.html
index 1c27570b2..fb7de9984 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S117.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S117.html
@@ -1,5 +1,5 @@
-<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local
-variable and function parameter names match a provided regular expression.</p>
+<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
+not match the provided regular expression.</p>
 <h2>Noncompliant Code Example</h2>
 <p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
 <pre>
@@ -15,3 +15,4 @@ <h2>Compliant Solution</h2>
   ...
 }
 </pre>
+
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S121.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S121.html
index c4def56c8..97c8a73ad 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S121.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S121.html
@@ -1,16 +1,13 @@
 <p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
 <h2>Noncompliant Code Example</h2>
 <pre>
-// the two statements seems to be attached to the if statement, but that is only true for the first one:
-if (condition)
+if (condition)  // Noncompliant
   executeSomething();
-  checkSomething();
 </pre>
 <h2>Compliant Solution</h2>
 <pre>
 if (condition) {
   executeSomething();
-  checkSomething();
 }
 </pre>
 <h2>See</h2>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1264.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1264.html
index 366b415a5..5417c90ff 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1264.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1264.html
@@ -1,5 +1,5 @@
-<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code>
-loop should be used instead to increase readability. </p>
+<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
+<code>while</code> loop should be used instead to increase readability. </p>
 <h2>Noncompliant Code Example</h2>
 <pre>
 for (;condition;) { /*...*/ }
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S134.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S134.html
index 5c7cc19dc..4c3b6a6a3 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S134.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S134.html
@@ -1,4 +1,4 @@
-<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making
+<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
 what's known as "Spaghetti code".</p>
 <p>Such code is hard to read, refactor and therefore maintain.</p>
 <h2>Noncompliant Code Example</h2>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1488.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1488.html
index c9d861722..30b67e7f4 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1488.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1488.html
@@ -4,14 +4,14 @@
 know exactly what will be returned.</p>
 <h2>Noncompliant Code Example</h2>
 <pre>
-function compute_duration_in_milliseconds() {
+function computeDurationInMilliseconds() {
   $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;
   return $duration;
 }
 </pre>
 <h2>Compliant Solution</h2>
 <pre>
-function compute_duration_in_milliseconds() {
+function computeDurationInMilliseconds() {
   return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;
 }
 </pre>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1763.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1763.html
index e3025ff3f..6bd0560a7 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1763.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1763.html
@@ -42,9 +42,13 @@ <h2>Compliant Solution</h2>
 </pre>
 <h2>See</h2>
 <ul>
+  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
+  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
   <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
+  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
   <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
   <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
+  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
   <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
   executed </li>
   <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1871.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1871.html
index d73031929..c85a85fab 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1871.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S1871.html
@@ -1,8 +1,6 @@
-<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure with the same
-implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an
-<code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other. </p>
-<p>Moreover when the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the
-condition. Either the operator itself is pointless, or a mistake was made in coding it.</p>
+<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
+best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
+be combined, or for a <code>switch</code>, one should fall through to the other. </p>
 <h2>Noncompliant Code Example</h2>
 <pre>
 switch ($i) {
@@ -104,4 +102,7 @@ <h2>Compliant Solution</h2>
 
 int b = a ? 12 &gt; 4 : 8;
 </pre>
+<h2>Exceptions</h2>
+<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
+single line of code with or without a following <code>break</code>.</p>
 
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2681.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2681.html
index 3943e2e08..168d9e69a 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2681.html
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2681.html
@@ -1,7 +1,7 @@
 <p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
 misleading and induce bugs. </p>
-<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the
-omission of curly braces means the lines will be unconditionally executed once.</p>
+<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
+the omission of curly braces means the lines will be unconditionally executed once.</p>
 <h2>Noncompliant Code Example</h2>
 <pre>
 if ($condition)
@@ -9,6 +9,11 @@ <h2>Noncompliant Code Example</h2>
   secondAction();  // Noncompliant; executed unconditionally
 thirdAction();
 
+if($condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally
+
+if($condition) firstActionInBlock();  // Noncompliant
+  secondAction();  // Executed unconditionally
+
 $str = null;
 for ($i = 0; $i &lt; count($array); $i++)
   $str = $array[$i];
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Sonar_way_profile.json b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Sonar_way_profile.json
index a8e66d71d..44efaafd7 100644
--- a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Sonar_way_profile.json
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/Sonar_way_profile.json
@@ -2,7 +2,6 @@
   "name": "Sonar way",
   "ruleKeys": [
     "S101",
-    "S104",
     "S105",
     "S107",
     "S108",
@@ -10,7 +9,6 @@
     "S114",
     "S115",
     "S121",
-    "S122",
     "S125",
     "S127",
     "S131",
@@ -18,7 +16,6 @@
     "S905",
     "S907",
     "S1066",
-    "S1067",
     "S1068",
     "S1109",
     "S1116",
@@ -30,7 +27,6 @@
     "S1142",
     "S1144",
     "S1145",
-    "S1151",
     "S1172",
     "S1185",
     "S1192",
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileDefinitionTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileDefinitionTest.java
index fe121bbc8..4eba22d86 100644
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileDefinitionTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileDefinitionTest.java
@@ -46,9 +46,9 @@ public void should_create_sonar_way_profile() {
 
     assertThat(profile.getLanguage()).isEqualTo(Php.KEY);
     assertThat(profile.getName()).isEqualTo(PHPProfileDefinition.SONAR_WAY_PROFILE);
-    assertThat(profile.getActiveRulesByRepository(CheckList.REPOSITORY_KEY)).hasSize(62);
+    assertThat(profile.getActiveRulesByRepository(CheckList.REPOSITORY_KEY)).hasSize(58);
     assertThat(validation.hasErrors()).isFalse();
-    assertThat(profile.getActiveRules()).hasSize(63);
+    assertThat(profile.getActiveRules()).hasSize(59);
     assertThat(profile.getActiveRules()).extracting("ruleKey").contains("DuplicatedBlocks");
   }
 
