diff --git a/mypy/checker.py b/mypy/checker.py
index de9ea5a7b8..ae6ce80c66 100755
--- a/mypy/checker.py
+++ b/mypy/checker.py
@@ -70,7 +70,8 @@
 DeferredNode = NamedTuple(
     'DeferredNode',
     [
-        ('node', Union[FuncDef, MypyFile]),  # In batch mode only FuncDef is supported
+        # In batch mode only FuncDef and LambdaExpr are supported
+        ('node', Union[FuncDef, LambdaExpr, MypyFile]),
         ('context_type_name', Optional[str]),  # Name of the surrounding class (for error messages)
         ('active_typeinfo', Optional[TypeInfo]),  # And its TypeInfo (for semantic analysis
                                                   # self type handling)
@@ -203,7 +204,7 @@ def check_second_pass(self, todo: List[DeferredNode] = None) -> bool:
         else:
             assert not self.deferred_nodes
         self.deferred_nodes = []
-        done = set()  # type: Set[Union[FuncDef, MypyFile]]
+        done = set()  # type: Set[Union[FuncDef, LambdaExpr, MypyFile]]
         for node, type_name, active_typeinfo in todo:
             if node in done:
                 continue
@@ -216,9 +217,11 @@ def check_second_pass(self, todo: List[DeferredNode] = None) -> bool:
                     self.check_partial(node)
         return True
 
-    def check_partial(self, node: Union[FuncDef, MypyFile]) -> None:
+    def check_partial(self, node: Union[FuncDef, LambdaExpr, MypyFile]) -> None:
         if isinstance(node, MypyFile):
             self.check_top_level(node)
+        elif isinstance(node, LambdaExpr):
+            self.expr_checker.accept(node)
         else:
             self.accept(node)
 
