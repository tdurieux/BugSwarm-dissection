diff --git a/contract/src/test/java/org/semanticweb/owlapi/examples/Examples.java b/contract/src/test/java/org/semanticweb/owlapi/examples/Examples.java
index 84f3e8842f..ad04422288 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/examples/Examples.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/examples/Examples.java
@@ -1404,51 +1404,6 @@ public void shouldExtractModules() throws Exception {
         // The module can now be saved as usual
     }
 
-    /**
-     * This example shows how to extract modules.
-     * 
-     * @throws Exception
-     *         exception
-     */
-    @Test
-    public void shouldExtractADModules() throws Exception {
-        // Create our manager
-        OWLOntologyManager man = OWLManager.createOWLOntologyManager();
-        // Load the Koala ontology
-        OWLOntology ont = load(man);
-        // We want to extract a module for all toppings. We therefore have to
-        // generate a seed signature that contains "Quokka" and its
-        // subclasses. We start by creating a signature that consists of
-        // "Quokka".
-        OWLClass toppingCls = df.getOWLClass(ont.getOntologyID().getOntologyIRI().get() + "#Quokka");
-        Set<OWLEntity> sig = new HashSet<OWLEntity>();
-        sig.add(toppingCls);
-        // We now add all subclasses (direct and indirect) of the chosen
-        // classes. Ideally, it should be done using a DL reasoner, in order to
-        // take inferred subclass relations into account. We are using the
-        // structural reasoner of the OWL API for simplicity.
-        Set<OWLEntity> seedSig = new HashSet<OWLEntity>();
-        OWLReasoner reasoner = new StructuralReasoner(ont, new SimpleConfiguration(), BufferingMode.NON_BUFFERING);
-        for (OWLEntity ent : sig) {
-            seedSig.add(ent);
-            if (OWLClass.class.isAssignableFrom(ent.getClass())) {
-                NodeSet<OWLClass> subClasses = reasoner.getSubClasses((OWLClass) ent, false);
-                seedSig.addAll(asList(subClasses.entities()));
-            }
-        }
-        // We now extract a locality-based module. For most reuse purposes, the
-        // module type should be STAR -- this yields the smallest possible
-        // locality-based module. These modules guarantee that all entailments
-        // of the original ontology that can be formulated using only terms from
-        // the seed signature or the module will also be entailments of the
-        // module. In easier words, the module preserves all knowledge of the
-        // ontology about the terms in the seed signature or the module.
-        SyntacticLocalityModuleExtractor sme = new SyntacticLocalityModuleExtractor(man, ont, ModuleType.STAR);
-        IRI moduleIRI = IRI.create("urn:test:QuokkaModule.owl");
-        OWLOntology mod = sme.extractAsOntology(seedSig, moduleIRI);
-        // The module can now be saved as usual
-    }
-
     /**
      * The following example uses entities and axioms that are used in the OWL
      * Primer. The purpose of this example is to illustrate some of the methods
diff --git a/contract/src/test/java/uk/ac/manchester/owl/owlapi/tutorialowled2011/TutorialSnippetsTestCase.java b/contract/src/test/java/uk/ac/manchester/owl/owlapi/tutorialowled2011/TutorialSnippetsTestCase.java
index 75e463d424..216c41ebc2 100755
--- a/contract/src/test/java/uk/ac/manchester/owl/owlapi/tutorialowled2011/TutorialSnippetsTestCase.java
+++ b/contract/src/test/java/uk/ac/manchester/owl/owlapi/tutorialowled2011/TutorialSnippetsTestCase.java
@@ -14,7 +14,7 @@
 
 import static org.junit.Assert.*;
 import static org.semanticweb.owlapi.search.EntitySearcher.getAnnotationObjects;
-import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.*;
+import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.asUnorderedSet;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -48,8 +48,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import uk.ac.manchester.cs.atomicdecomposition.AtomicDecomposition;
-import uk.ac.manchester.cs.atomicdecomposition.AtomicDecompositionImpl;
 import uk.ac.manchester.cs.owlapi.modularity.ModuleType;
 import uk.ac.manchester.cs.owlapi.modularity.SyntacticLocalityModuleExtractor;
 
@@ -616,42 +614,9 @@ public void testModularization() throws OWLException {
         seedSig.addAll(sig);
         // We now extract a locality-based module. STAR provides the smallest
         // ones
-        Set<OWLAxiom> mod = getTraditionalModule(m, o, seedSig);
-        assertNotNull(mod);
-    }
-
-    @Test
-    public void testModularizationWithAtomicDecomposition() throws OWLException {
-        OWLOntologyManager m = create();
-        OWLOntology o = loadPizzaOntology(m);
-        // extract a module for all toppings.
-        // start by creating a signature that consists of "Quokka".
-        OWLClass quokkaCls = df.getOWLClass(KOALA_IRI + "#Quokka");
-        Set<OWLEntity> sig = new HashSet<>();
-        sig.add(quokkaCls);
-        // We now add all subclasses (direct and indirect) of the chosen
-        // classes.
-        OWLReasoner reasoner = reasonerFactory.createNonBufferingReasoner(o);
-        Set<OWLEntity> seedSig = asUnorderedSet(sig.stream().filter(e -> e.isOWLClass())
-            .flatMap(e -> reasoner.getSubClasses(e.asOWLClass(), false).entities()));
-        seedSig.addAll(sig);
-        // We now extract a locality-based module. STAR provides the smallest
-        // ones
-        Set<OWLAxiom> mod = getADModule(o, sig);
-        assertNotNull(mod);
-        assertEquals(mod, getTraditionalModule(m, o, seedSig));
-    }
-
-    protected Set<OWLAxiom> getTraditionalModule(OWLOntologyManager m, OWLOntology o, Set<OWLEntity> seedSig) {
         SyntacticLocalityModuleExtractor sme = new SyntacticLocalityModuleExtractor(m, o, ModuleType.STAR);
         Set<OWLAxiom> mod = sme.extract(seedSig);
-        return mod;
-    }
-
-    protected Set<OWLAxiom> getADModule(OWLOntology o, Set<OWLEntity> sig) {
-        AtomicDecomposition ad = new AtomicDecompositionImpl(o);
-        Set<OWLAxiom> mod = asSet(ad.getModule(sig.stream(), false, ModuleType.STAR));
-        return mod;
+        assertNotNull(mod);
     }
 
     @Test
