diff --git a/mypy/checker.py b/mypy/checker.py
index 7517e7e798..dd2183b431 100644
--- a/mypy/checker.py
+++ b/mypy/checker.py
@@ -711,9 +711,8 @@ def check_overlapping_op_methods(self,
                 self.check_overlapping_op_methods(
                     reverse_type, reverse_name, reverse_class,
                     item, forward_name, forward_base, context)
-        else:
-            # TODO what about this?
-            assert False, 'Forward operator method type is not CallableType'
+        elif not isinstance(forward_type, AnyType):
+            self.msg.forward_operator_not_callable(forward_name, context)
 
     def check_inplace_operator_method(self, defn: FuncBase) -> None:
         """Check an inplace operator method such as __iadd__.
diff --git a/mypy/messages.py b/mypy/messages.py
index da46fc86cc..1b38ecdbe5 100644
--- a/mypy/messages.py
+++ b/mypy/messages.py
@@ -777,6 +777,11 @@ def operator_method_signatures_overlap(
                       forward_method, forward_class),
                   context)
 
+    def forward_operator_not_callable(
+            self, forward_method: str, context: Context) -> None:
+        self.fail('Forward operator "{}" is not callable'.format(
+            forward_method), context)
+
     def signatures_incompatible(self, method: str, other_method: str,
                                 context: Context) -> None:
         self.fail('Signatures of "{}" and "{}" are incompatible'.format(
diff --git a/mypy/test/data/check-classes.test b/mypy/test/data/check-classes.test
index c9076d7217..d21174b843 100644
--- a/mypy/test/data/check-classes.test
+++ b/mypy/test/data/check-classes.test
@@ -1015,6 +1015,33 @@ class C:
     def __radd__(self, x: Any) -> int: pass
 [out]
 
+[case testReverseOperatorMethodForwardIsAny]
+from typing import Any
+def deco(f: Any) -> Any: return f
+class C:
+    @deco
+    def __add__(self, other: C) -> C: return C()
+    def __radd__(self, other: C) -> C: return C()
+[out]
+
+[case testReverseOperatorMethodForwardIsAny2]
+from typing import Any
+def deco(f: Any) -> Any: return f
+class C:
+    __add__ = None  # type: Any
+    def __radd__(self, other: C) -> C: return C()
+[out]
+
+[case testReverseOperatorMethodForwardIsAny3]
+from typing import Any
+def deco(f: Any) -> Any: return f
+class C:
+    __add__ = 42
+    def __radd__(self, other: C) -> C: return C()
+[out]
+main: note: In member "__radd__" of class "C":
+main:5: error: Forward operator "__add__" is not callable
+
 [case testOverloadedReverseOperatorMethodArgumentType]
 from typing import overload, Any
 class A:
