diff --git a/README.rst b/README.rst
index cbe53f76b..3063319c2 100644
--- a/README.rst
+++ b/README.rst
@@ -131,7 +131,7 @@ announced on the `announcements mailing list
 
 
 Tornado is one of `Facebook's open source technologies
-<http://developers.facebook.com/opensource/>`_. It is available under
+<https://code.facebook.com/opensource/>`_. It is available under
 the `Apache License, Version 2.0
 <http://www.apache.org/licenses/LICENSE-2.0.html>`_.
 
diff --git a/appveyor.yml b/appveyor.yml
index 98837bb66..be30b3c50 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -1,5 +1,8 @@
 # Appveyor is Windows CI: https://ci.appveyor.com/project/bdarnell/tornado
 environment:
+  global:
+    TORNADO_EXTENSION: "1"
+
   # We only build with 3.5 because it works out of the box, while other
   # versions require lots of machinery.
   matrix:
diff --git a/maint/requirements.txt b/maint/requirements.txt
index 76198f8ce..a3080c450 100644
--- a/maint/requirements.txt
+++ b/maint/requirements.txt
@@ -1,5 +1,5 @@
 # Frozen pip requirements for tools used in the development of tornado.
-# This list is for python 3.4; for 2.7 add:
+# This list is for python 3.5; for 2.7 add:
 # - backports.ssl-match-hostname
 # - futures
 # - mock
@@ -7,33 +7,40 @@
 # Use virtualenv instead of venv; tox seems to get confused otherwise.
 
 # Tornado's required dependencies
-certifi==14.5.14
+certifi==2015.9.6.2
 
 # Tornado's optional dependencies
-Twisted==15.0.0
-# pip on python 3.4 currently has trouble installing pycares.
-#pycares==0.6.1
+Twisted==15.4.0
+pycares==1.0.0
 pycurl==7.19.5.1
 
 # Other useful tools
-Sphinx==1.2.3
-autopep8==1.1
-coverage==3.7.1
-flake8==2.3.0
-pep8==1.6.0
-pyflakes==0.8.1
-sphinx-rtd-theme==0.1.6
-tox==1.8.1
-twine==1.4.0
-virtualenv==12.0.7
+Sphinx==1.3.1
+autopep8==1.2.1
+coverage==4.0
+flake8==2.4.1
+pep8==1.6.2
+pyflakes==1.0.0
+sphinx-rtd-theme==0.1.9
+tox==2.1.1
+twine==1.6.2
+virtualenv==13.1.2
 
 # Indirect dependencies
-Jinja2==2.7.3
-MarkupSafe==0.23
-Pygments==2.0.2
+alabaster==0.7.6
+Babel==2.1.1
 docutils==0.12
-mccabe==0.3
+Jinja2==2.8
+MarkupSafe==0.23
+mccabe==0.3.1
 pkginfo==1.2.1
-py==1.4.26
-requests==2.5.1
+pluggy==0.3.1
+py==1.4.30
+Pygments==2.0.2
+pytz==2015.6
+requests==2.7.0
+requests-toolbelt==0.4.0
+six==1.9.0
+snowballstemmer==1.2.0
+wheel==0.24.0
 zope.interface==4.1.2
diff --git a/maint/test/cython/cythonapp_test.py b/maint/test/cython/cythonapp_test.py
index c3312de41..0af465abb 100644
--- a/maint/test/cython/cythonapp_test.py
+++ b/maint/test/cython/cythonapp_test.py
@@ -1,10 +1,3 @@
-try:
-    import backports_abc
-except ImportError:
-    raise
-else:
-    backports_abc.patch()
-
 from tornado.testing import AsyncTestCase, gen_test
 from tornado.util import ArgReplacer
 import unittest
diff --git a/maint/test/cython/tox.ini b/maint/test/cython/tox.ini
index 38949d52f..8f5b20b1d 100644
--- a/maint/test/cython/tox.ini
+++ b/maint/test/cython/tox.ini
@@ -5,8 +5,8 @@ envlist = py27,py32,py33,py34,py35
 [testenv]
 deps =
      ../../..
-     Cython>= 0.23.1
-     backports_abc
+     Cython>=0.23.3
+     backports_abc>=0.4
      singledispatch
 commands = python -m unittest cythonapp_test
 # Most of these are defaults, but if you specify any you can't fall back
diff --git a/tornado/curl_httpclient.py b/tornado/curl_httpclient.py
index 9c9481688..baa616ba0 100644
--- a/tornado/curl_httpclient.py
+++ b/tornado/curl_httpclient.py
@@ -389,15 +389,22 @@ def write_function(chunk):
 
         # Handle curl's cryptic options for every individual HTTP method
         if request.method == "GET":
+            # Even with `allow_nonstandard_methods` we disallow GET with a
+            # body. While the spec doesn't forbid clients from sending a body,
+            # it arguably disallows the server from doing anything with them.
             if request.body is not None:
                 raise ValueError('Body must be None for GET request')
-        elif request.method in ("POST", "PUT") or request.body:
-            if request.body is None:
+        if request.method in ("POST", "PUT") or request.body:
+            # Fail in case POST or PUT method has no body, unless the user has
+            # opted out of sanity checks with allow_nonstandard_methods.
+            if request.body is not None:
+                request_buffer = BytesIO(utf8(request.body))
+            elif not request.allow_nonstandard_methods:
                 raise ValueError(
-                    'Body must not be None for "%s" request'
-                    % request.method)
-
-            request_buffer = BytesIO(utf8(request.body))
+                    'Body must not be None for method %s (unless '
+                    'allow_nonstandard_methods is true)' % request.method)
+            else:
+                request_buffer = BytesIO()
 
             def ioctl(cmd):
                 if cmd == curl.IOCMD_RESTARTREAD:
@@ -405,10 +412,10 @@ def ioctl(cmd):
             curl.setopt(pycurl.READFUNCTION, request_buffer.read)
             curl.setopt(pycurl.IOCTLFUNCTION, ioctl)
             if request.method == "POST":
-                curl.setopt(pycurl.POSTFIELDSIZE, len(request.body))
+                curl.setopt(pycurl.POSTFIELDSIZE, len(request.body or ''))
             else:
                 curl.setopt(pycurl.UPLOAD, True)
-                curl.setopt(pycurl.INFILESIZE, len(request.body))
+                curl.setopt(pycurl.INFILESIZE, len(request.body or ''))
 
         if request.auth_username is not None:
             userpwd = "%s:%s" % (request.auth_username, request.auth_password or '')
diff --git a/tornado/gen.py b/tornado/gen.py
index 10189b8d3..31521b332 100644
--- a/tornado/gen.py
+++ b/tornado/gen.py
@@ -102,15 +102,18 @@ def get(self):
     from collections.abc import Generator as GeneratorType  # py35+
 except ImportError:
     try:
-        from collections import Generator as GeneratorType  # py2 with backports_abc
+        from backports_abc import Generator as GeneratorType
     except ImportError:
         from types import GeneratorType
 
 try:
     from inspect import isawaitable  # py35+
 except ImportError:
-    def isawaitable(x):
-        return False
+    try:
+        from backports_abc import isawaitable
+    except ImportError:
+        def isawaitable(x):
+            return False
 
 try:
     import builtins  # py3
diff --git a/tornado/iostream.py b/tornado/iostream.py
index 0bad0acd6..4e304f890 100644
--- a/tornado/iostream.py
+++ b/tornado/iostream.py
@@ -1282,7 +1282,7 @@ def _do_ssl_handshake(self):
             # those errors quiet as well.
             # https://groups.google.com/forum/?fromgroups#!topic/python-tornado/ApucKJat1_0
             if (self._is_connreset(err) or
-                err.args[0] in (errno.EBADF, errno.ENOTCONN)):
+                    err.args[0] in (errno.EBADF, errno.ENOTCONN)):
                 return self.close(exc_info=True)
             raise
         except AttributeError:
diff --git a/tornado/test/auth_test.py b/tornado/test/auth_test.py
index 3ed40e45b..59c96b232 100644
--- a/tornado/test/auth_test.py
+++ b/tornado/test/auth_test.py
@@ -142,10 +142,10 @@ def get(self):
                 code=self.get_argument("code"))
             self.write(user)
         else:
-                yield self.authorize_redirect(
-                    redirect_uri=self.request.full_url(),
-                    client_id=self.settings["facebook_api_key"],
-                    extra_params={"scope": "read_stream,offline_access"})
+            yield self.authorize_redirect(
+                redirect_uri=self.request.full_url(),
+                client_id=self.settings["facebook_api_key"],
+                extra_params={"scope": "read_stream,offline_access"})
 
 
 class FacebookServerAccessTokenHandler(RequestHandler):
@@ -514,9 +514,9 @@ def get(self):
         assert self.get_argument('access_token') == 'fake-access-token'
         # return a fake user
         self.finish({
-                'name': 'Foo',
-                'email': 'foo@example.com'
-                })
+            'name': 'Foo',
+            'email': 'foo@example.com'
+        })
 
 
 class GoogleOAuth2Test(AsyncHTTPTestCase):
diff --git a/tornado/test/curl_httpclient_test.py b/tornado/test/curl_httpclient_test.py
index 3ac21f4d7..d06a7bd2a 100644
--- a/tornado/test/curl_httpclient_test.py
+++ b/tornado/test/curl_httpclient_test.py
@@ -121,3 +121,4 @@ def test_custom_reason(self):
     def test_fail_custom_reason(self):
         response = self.fetch('/custom_fail_reason')
         self.assertEqual(str(response.error), "HTTP 400: Custom reason")
+
diff --git a/tornado/test/gen_test.py b/tornado/test/gen_test.py
index d37e09365..744dc4046 100644
--- a/tornado/test/gen_test.py
+++ b/tornado/test/gen_test.py
@@ -411,9 +411,9 @@ def test_multi_exceptions(self):
 
         # Exception logging may be explicitly quieted.
         with self.assertRaises(RuntimeError):
-                yield gen.Multi([self.async_exception(RuntimeError("error 1")),
-                                 self.async_exception(RuntimeError("error 2"))],
-                                quiet_exceptions=RuntimeError)
+            yield gen.Multi([self.async_exception(RuntimeError("error 1")),
+                             self.async_exception(RuntimeError("error 2"))],
+                            quiet_exceptions=RuntimeError)
 
     @gen_test
     def test_multi_future_exceptions(self):
@@ -430,10 +430,10 @@ def test_multi_future_exceptions(self):
 
         # Exception logging may be explicitly quieted.
         with self.assertRaises(RuntimeError):
-                yield gen.multi_future(
-                    [self.async_exception(RuntimeError("error 1")),
-                     self.async_exception(RuntimeError("error 2"))],
-                    quiet_exceptions=RuntimeError)
+            yield gen.multi_future(
+                [self.async_exception(RuntimeError("error 1")),
+                 self.async_exception(RuntimeError("error 2"))],
+                quiet_exceptions=RuntimeError)
 
     def test_arguments(self):
         @gen.engine
@@ -938,6 +938,7 @@ def inner(iteration):
 
         self.finished = True
 
+
 class GenSequenceHandler(RequestHandler):
     @asynchronous
     @gen.engine
@@ -1324,7 +1325,6 @@ def test_iterator_async_await(self):
         yield namespace['f']()
         self.assertTrue(self.finished)
 
-
     @gen_test
     def test_no_ref(self):
         # In this usage, there is no direct hard reference to the
diff --git a/tornado/test/httpclient_test.py b/tornado/test/httpclient_test.py
index 3c6d4c6b9..dcf6decb1 100644
--- a/tornado/test/httpclient_test.py
+++ b/tornado/test/httpclient_test.py
@@ -483,6 +483,24 @@ def test_body_sanity_checks(self):
 
         self.assertTrue('must not be None' in str(context.exception))
 
+    @gen_test
+    def test_ignore_body_sanity_checks_when_allow_nonstandard_methods(self):
+        all_methods_url = self.get_url('/all_methods')
+        for method in ('POST', 'PUT'):
+            response = yield self.http_client.fetch(
+                all_methods_url, method=method, body=None,
+                allow_nonstandard_methods=True)
+            self.assertEqual(response.code, 200)
+            self.assertIsNone(response.request.body)
+
+        # Don't test for GET with a body. Curl client does not allow it.
+        for method in ('PATCH', 'DELETE', 'OPTIONS'):
+            response = yield self.http_client.fetch(
+                all_methods_url, method=method, body=utf8(method),
+                allow_nonstandard_methods=True)
+            self.assertEqual(response.code, 200)
+            self.assertEqual(response.body, utf8(method))
+
     # This test causes odd failures with the combination of
     # curl_httpclient (at least with the version of libcurl available
     # on ubuntu 12.04), TwistedIOLoop, and epoll.  For POST (but not PUT),
diff --git a/tornado/test/httpserver_test.py b/tornado/test/httpserver_test.py
index b445032af..859d817d0 100644
--- a/tornado/test/httpserver_test.py
+++ b/tornado/test/httpserver_test.py
@@ -177,12 +177,12 @@ def test_missing_key(self):
         self.assertRaises((ValueError, IOError),
                           HTTPServer, application, ssl_options={
                               "certfile": "/__mising__.crt",
-                          })
+        })
         self.assertRaises((ValueError, IOError),
                           HTTPServer, application, ssl_options={
                               "certfile": existing_certificate,
                               "keyfile": "/__missing__.key"
-                          })
+        })
 
         # This actually works because both files exist
         HTTPServer(application, ssl_options={
diff --git a/tornado/test/httputil_test.py b/tornado/test/httputil_test.py
index b74fdcbf1..3f25f3eed 100644
--- a/tornado/test/httputil_test.py
+++ b/tornado/test/httputil_test.py
@@ -319,6 +319,7 @@ def test_setdefault(self):
         self.assertEqual(headers['quux'], 'xyzzy')
         self.assertEqual(sorted(headers.get_all()), [('Foo', 'bar'), ('Quux', 'xyzzy')])
 
+
 class FormatTimestampTest(unittest.TestCase):
     # Make sure that all the input types are supported.
     TIMESTAMP = 1359312200.503611
diff --git a/tornado/test/ioloop_test.py b/tornado/test/ioloop_test.py
index c914b1c74..0711282e3 100644
--- a/tornado/test/ioloop_test.py
+++ b/tornado/test/ioloop_test.py
@@ -441,7 +441,6 @@ def f():
             # Now that the loop is stopped, it is no longer current.
             self.assertIsNone(IOLoop.current(instance=False))
 
-
     def test_force_current(self):
         self.io_loop = IOLoop(make_current=True)
         self.assertIs(self.io_loop, IOLoop.current())
diff --git a/tornado/test/log_test.py b/tornado/test/log_test.py
index 8bc65e558..df493bcdc 100644
--- a/tornado/test/log_test.py
+++ b/tornado/test/log_test.py
@@ -24,7 +24,6 @@
 import sys
 import tempfile
 import warnings
-import time
 
 from tornado.escape import utf8
 from tornado.log import LogFormatter, define_logging_options, enable_pretty_logging
diff --git a/tornado/test/queues_test.py b/tornado/test/queues_test.py
index 519dd6ae9..e8f66c611 100644
--- a/tornado/test/queues_test.py
+++ b/tornado/test/queues_test.py
@@ -12,8 +12,6 @@
 
 from datetime import timedelta
 from random import random
-import sys
-import textwrap
 
 from tornado import gen, queues
 from tornado.gen import TimeoutError
diff --git a/tornado/test/simple_httpclient_test.py b/tornado/test/simple_httpclient_test.py
index 5214c1e45..d478071f3 100644
--- a/tornado/test/simple_httpclient_test.py
+++ b/tornado/test/simple_httpclient_test.py
@@ -107,7 +107,7 @@ def get(self):
             # level so we have to go around it.
             stream = self.request.connection.detach()
             stream.write(b"HTTP/1.0 200 OK\r\n\r\n"
-                               b"hello")
+                         b"hello")
             stream.close()
         else:
             self.finish('HTTP/1 required')
@@ -668,22 +668,22 @@ class MaxBodySizeTest(AsyncHTTPTestCase):
     def get_app(self):
         class SmallBody(RequestHandler):
             def get(self):
-                self.write("a"*1024*64)
+                self.write("a" * 1024 * 64)
 
         class LargeBody(RequestHandler):
             def get(self):
-                self.write("a"*1024*100)
+                self.write("a" * 1024 * 100)
 
         return Application([('/small', SmallBody),
                             ('/large', LargeBody)])
 
     def get_http_client(self):
-        return SimpleAsyncHTTPClient(io_loop=self.io_loop, max_body_size=1024*64)
+        return SimpleAsyncHTTPClient(io_loop=self.io_loop, max_body_size=1024 * 64)
 
     def test_small_body(self):
         response = self.fetch('/small')
         response.rethrow()
-        self.assertEqual(response.body, b'a'*1024*64)
+        self.assertEqual(response.body, b'a' * 1024 * 64)
 
     def test_large_body(self):
         with ExpectLog(gen_log, "Malformed HTTP message from None: Content-Length too long"):
@@ -696,15 +696,15 @@ def get_app(self):
 
         class LargeBody(RequestHandler):
             def get(self):
-                self.write("a"*1024*100)
+                self.write("a" * 1024 * 100)
 
         return Application([('/large', LargeBody)])
 
     def get_http_client(self):
         # 100KB body with 64KB buffer
-        return SimpleAsyncHTTPClient(io_loop=self.io_loop, max_body_size=1024*100, max_buffer_size=1024*64)
+        return SimpleAsyncHTTPClient(io_loop=self.io_loop, max_body_size=1024 * 100, max_buffer_size=1024 * 64)
 
     def test_large_body(self):
         response = self.fetch('/large')
         response.rethrow()
-        self.assertEqual(response.body, b'a'*1024*100)
+        self.assertEqual(response.body, b'a' * 1024 * 100)
diff --git a/tornado/test/tcpserver_test.py b/tornado/test/tcpserver_test.py
index 84c950769..d85076a44 100644
--- a/tornado/test/tcpserver_test.py
+++ b/tornado/test/tcpserver_test.py
@@ -18,7 +18,7 @@ class TestServer(TCPServer):
             def handle_stream(self, stream, address):
                 yield gen.moment
                 stream.close()
-                1/0
+                1 / 0
 
         server = client = None
         try:
diff --git a/tornado/test/template_test.py b/tornado/test/template_test.py
index 0c8eb51cb..031b2f540 100644
--- a/tornado/test/template_test.py
+++ b/tornado/test/template_test.py
@@ -272,7 +272,7 @@ class ParseErrorDetailTest(unittest.TestCase):
     def test_details(self):
         loader = DictLoader({
             "foo.html": "\n\n{{",
-            })
+        })
         with self.assertRaises(ParseError) as cm:
             loader.load("foo.html")
         self.assertEqual("Missing end expression }} at foo.html:3",
@@ -448,7 +448,7 @@ def test_whitespace_by_loader(self):
         templates = {
             "foo.html": "\t\tfoo\n\n",
             "bar.txt": "\t\tbar\n\n",
-            }
+        }
         loader = DictLoader(templates, whitespace='all')
         self.assertEqual(loader.load("foo.html").generate(), b"\t\tfoo\n\n")
         self.assertEqual(loader.load("bar.txt").generate(), b"\t\tbar\n\n")
diff --git a/tornado/test/web_test.py b/tornado/test/web_test.py
index 3acbbfd95..f04db9597 100644
--- a/tornado/test/web_test.py
+++ b/tornado/test/web_test.py
@@ -1638,10 +1638,10 @@ def test_known_error(self):
 class BuggyLoggingTest(SimpleHandlerTestCase):
     class Handler(RequestHandler):
         def get(self):
-            1/0
+            1 / 0
 
         def log_exception(self, typ, value, tb):
-            1/0
+            1 / 0
 
     def test_buggy_log_exception(self):
         # Something gets logged even though the application's
