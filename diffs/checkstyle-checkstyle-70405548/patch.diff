diff --git a/.travis.yml b/.travis.yml
index d3769f08c2..b5e582af07 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -9,11 +9,11 @@ matrix:
   include:
     # unit tests (openjdk7, oraclejdk7 and oraclejdk8)
     - jdk: openjdk7
-      env: DESC="tests" CMD="mvn clean integration-test" COVERAGE_CMD=""
+      env: DESC="tests" CMD="mvn clean integration-test failsafe:verify" COVERAGE_CMD=""
     - jdk: oraclejdk7
-      env: DESC="tests" CMD="mvn clean integration-test" COVERAGE_CMD=""
+      env: DESC="tests" CMD="mvn clean integration-test failsafe:verify" COVERAGE_CMD=""
     - jdk: oraclejdk8
-      env: DESC="tests" CMD="mvn clean integration-test" COVERAGE_CMD=""
+      env: DESC="tests" CMD="mvn clean integration-test failsafe:verify" COVERAGE_CMD=""
 
     # checkstyle (openjdk7, oraclejdk7 and oraclejdk8)
     - jdk: openjdk7
diff --git a/config/build.xml b/config/build.xml
index b57331db8f..2488312039 100644
--- a/config/build.xml
+++ b/config/build.xml
@@ -1,5 +1,5 @@
 <project name="checkstyle" default="checkstyle.checkstyle" basedir=".">
-  <!-- Building by ANT is no longer formerly supported. Use Maven instead!! ->
+  <!-- Building by ANT is no longer formerly supported. Use Maven instead!! -->
 
   <!-- set global properties for this build -->
   <property name="target.dir" value="${basedir}/target" />
diff --git a/pom.xml b/pom.xml
index 5f43b1837a..0045e93932 100644
--- a/pom.xml
+++ b/pom.xml
@@ -718,6 +718,55 @@
         </executions>
       </plugin>
 
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>xml-maven-plugin</artifactId>
+        <version>1.0</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>validate</goal>
+            </goals>
+          </execution>
+        </executions>
+        <configuration>
+          <validationSets>
+            <validationSet>
+              <dir>config</dir>
+              <excludes>
+                <exclude>java.header</exclude>
+              </excludes>
+            </validationSet>
+            <validationSet>
+              <dir>src/site/resources/files</dir>
+              <systemId>src/main/resources/com/puppycrawl/tools/checkstyle/suppressions_1_0.dtd</systemId>
+            </validationSet> 
+<!--        Commented till #1341 https://github.com/checkstyle/checkstyle/issues/1341
+            <validationSet>
+              <dir>src/site</dir>
+              <includes>
+                <include>site.xml</include>
+              </includes>
+              <systemId>http://maven.apache.org/xsd/decoration-1.0.0.xsd</systemId>
+            </validationSet>       --> 
+            <validationSet>
+              <dir>src/main/resources</dir>
+              <includes>
+                <include>checkstyle_packages.xml</include>
+              </includes>
+              <systemId>src/main/resources/com/puppycrawl/tools/checkstyle/packages_1_0.dtd</systemId>
+            </validationSet>
+            <validationSet>
+              <dir>src/main/resources</dir>
+              <includes>
+                <include>google_checks.xml</include>
+                <include>sun_checks.xml</include>
+              </includes>
+              <systemId>src/main/resources/com/puppycrawl/tools/checkstyle/configuration_1_3.dtd</systemId>
+            </validationSet>
+          </validationSets>
+        </configuration>
+      </plugin>
     </plugins>
   </build>
 
@@ -1108,7 +1157,6 @@
             <regex><pattern>.*.checks.coding.IllegalTokenTextCheck</pattern><branchRate>60</branchRate><lineRate>92</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalTypeCheck</pattern><branchRate>93</branchRate><lineRate>94</lineRate></regex>
             <regex><pattern>.*.checks.coding.InnerAssignmentCheck</pattern><branchRate>88</branchRate><lineRate>100</lineRate></regex>
-            <regex><pattern>.*.checks.coding.MissingCtorCheck</pattern><branchRate>75</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.coding.ModifiedControlVariableCheck</pattern><branchRate>91</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.coding.MultipleStringLiteralsCheck</pattern><branchRate>90</branchRate><lineRate>96</lineRate></regex>
             <regex><pattern>.*.checks.coding.MultipleVariableDeclarationsCheck</pattern><branchRate>96</branchRate><lineRate>100</lineRate></regex>
@@ -1153,15 +1201,14 @@
             <regex><pattern>.*.checks.javadoc.AbstractJavadocCheck</pattern><branchRate>90</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.AbstractJavadocCheck\$.*</pattern><branchRate>50</branchRate><lineRate>68</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.AtclauseOrderCheck</pattern><branchRate>88</branchRate><lineRate>88</lineRate></regex>
-            <regex><pattern>.*.checks.javadoc.HtmlTag</pattern><branchRate>75</branchRate><lineRate>90</lineRate></regex>
-            <regex><pattern>.*.checks.javadoc.JavadocMethodCheck</pattern><branchRate>90</branchRate><lineRate>96</lineRate></regex>
+            <regex><pattern>.*.checks.javadoc.JavadocMethodCheck</pattern><branchRate>91</branchRate><lineRate>98</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.JavadocPackageCheck</pattern><branchRate>80</branchRate><lineRate>95</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.JavadocParagraphCheck</pattern><branchRate>92</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.JavadocStyleCheck</pattern><branchRate>89</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.JavadocTagContinuationIndentationCheck</pattern><branchRate>81</branchRate><lineRate>86</lineRate></regex>
-            <regex><pattern>.*.checks.javadoc.JavadocTypeCheck</pattern><branchRate>95</branchRate><lineRate>91</lineRate></regex>
-            <regex><pattern>.*.checks.javadoc.JavadocUtils</pattern><branchRate>83</branchRate><lineRate>91</lineRate></regex>
-            <regex><pattern>.*.checks.javadoc.JavadocVariableCheck</pattern><branchRate>93</branchRate><lineRate>90</lineRate></regex>
+            <regex><pattern>.*.checks.javadoc.JavadocTypeCheck</pattern><branchRate>95</branchRate><lineRate>93</lineRate></regex>
+            <regex><pattern>.*.checks.javadoc.JavadocUtils</pattern><branchRate>94</branchRate><lineRate>98</lineRate></regex>
+            <regex><pattern>.*.checks.javadoc.JavadocVariableCheck</pattern><branchRate>93</branchRate><lineRate>92</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.SummaryJavadocCheck</pattern><branchRate>93</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.TagParser</pattern><branchRate>92</branchRate><lineRate>98</lineRate></regex>
             <regex><pattern>.*.checks.javadoc.WriteTagCheck</pattern><branchRate>100</branchRate><lineRate>91</lineRate></regex>
diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index 3fb266eb13..1ef2a44aca 100644
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -37,9 +37,9 @@ public void fileFinished(AuditEvent evt) {}
         public void fileStarted(AuditEvent evt) {}
     }
 
-    protected final ByteArrayOutputStream mBAOS = new ByteArrayOutputStream();
-    protected final PrintStream mStream = new PrintStream(mBAOS);
-    protected final Properties mProps = new Properties();
+    protected final ByteArrayOutputStream BAOS = new ByteArrayOutputStream();
+    protected final PrintStream stream = new PrintStream(BAOS);
+    protected final Properties props = new Properties();
 
     public static DefaultConfiguration createCheckConfig(Class<?> aClazz)
     {
@@ -60,7 +60,7 @@ protected Checker createChecker(Configuration aCheckConfig)
         c.setLocaleLanguage(locale.getLanguage());
         c.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
         c.configure(dc);
-        c.addListener(new BriefLogger(mStream));
+        c.addListener(new BriefLogger(stream));
         return c;
     }
 
@@ -118,14 +118,14 @@ protected void verify(Checker aC,
                           Integer[] aWarnsExpected)
         throws Exception
     {
-        mStream.flush();
+        stream.flush();
         final List<File> theFiles = Lists.newArrayList();
         Collections.addAll(theFiles, aProcessedFiles);
         final int errs = aC.process(theFiles);
 
         // process each of the lines
         final ByteArrayInputStream bais =
-            new ByteArrayInputStream(mBAOS.toByteArray());
+            new ByteArrayInputStream(BAOS.toByteArray());
         final LineNumberReader lnr =
             new LineNumberReader(new InputStreamReader(bais));
        
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
new file mode 100644
index 0000000000..64aa134312
--- /dev/null
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
@@ -0,0 +1,37 @@
+package com.google.checkstyle.test.base;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.Checker;
+import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
+import com.puppycrawl.tools.checkstyle.api.Configuration;
+
+public class ConfigValidationTest extends BaseCheckTestSupport {
+
+    static ConfigurationBuilder builder;
+
+    @BeforeClass
+    public static void setConfigurationBuilder() throws CheckstyleException, IOException {
+        builder = new ConfigurationBuilder(new File("src/it/"));
+    }
+
+    @Test
+    public void testGoogleChecks() throws IOException, Exception {
+        final Configuration checkerConfig = builder.config;
+        final Checker c = new Checker();
+        c.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
+        c.configure(checkerConfig);
+        c.addListener(new BriefLogger(stream));
+
+        final List<File> files = builder.getFiles();
+        
+        //runs over all input files;
+        //as severity level is "warning", no errors expected
+        verify(c, files.toArray(new File[files.size()]), "", new String[0], null);
+    }
+}
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
index d30805357c..a161343c94 100644
--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
@@ -20,23 +20,23 @@
 
 public class ConfigurationBuilder extends BaseCheckTestSupport {
 
-	private File mROOT;
+	private File ROOT;
 
-	private List<File> mFiles = new ArrayList<File>();
+	private List<File> files = new ArrayList<File>();
 
-	Configuration mConfig;
+	Configuration config;
 	
-	URL mUrl;
+	URL url;
 	
-	String mXmlName = "/google_checks.xml";
+	String xmlName = "/google_checks.xml";
 	
 	Pattern warnPattern = Utils.createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]warn[*]/");
-	
+
 	public ConfigurationBuilder(File aROOT)
 			throws CheckstyleException, IOException {
-		this.mROOT = aROOT;
-		mConfig = getConfigurationFromXML(mXmlName, System.getProperties());
-		listFiles(mFiles, mROOT, "java");
+		this.ROOT = aROOT;
+		config = getConfigurationFromXML(xmlName, System.getProperties());
+		listFiles(files, ROOT, "java");
 	}
 
 	private Configuration getConfigurationFromXML(String aConfigName,
@@ -53,25 +53,25 @@ private Configuration getConfigurationFromXML(String aConfigName,
 	}
 
 	public Configuration getCheckConfig(String aCheckName) {
-		for (Configuration config : mConfig.getChildren()) {
-			if ("TreeWalker".equals(config.getName())) {
-				for (Configuration checkConfig : config.getChildren()) {
+		for (Configuration currentConfig : config.getChildren()) {
+			if ("TreeWalker".equals(currentConfig.getName())) {
+				for (Configuration checkConfig : currentConfig.getChildren()) {
 					if (aCheckName.equals(checkConfig.getName())) {
 						return checkConfig;
 					}
 				}
-			} else if (aCheckName.equals(config.getName())) {
-				return config;
+			} else if (aCheckName.equals(currentConfig.getName())) {
+				return currentConfig;
 			}
 		}
 		return null;
 	}
 
 	public String getFilePath(String aFileName) {
-		String absoluteRootPath = mROOT.getAbsolutePath();
+		String absoluteRootPath = ROOT.getAbsolutePath();
 		String rootPath = absoluteRootPath.substring(0,
 				absoluteRootPath.lastIndexOf("src"));
-		for (File file : mFiles) {
+		for (File file : files) {
 			if (file.toString().endsWith(aFileName+".java")) {
 				return rootPath + file.toString();
 			}
@@ -93,7 +93,11 @@ private static void listFiles(final List<File> files, final File folder,
 	}
 
 	public File getROOT() {
-		return mROOT;
+		return ROOT;
+	}
+
+	public List<File> getFiles() {
+            return files;
 	}
 
 	public Integer[] getLinesWithWarn(String aFileName) throws IOException {
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
index 4d7c1d5b0b..50e49ad52c 100644
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
@@ -5,6 +5,7 @@
 
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.Ignore;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
 import com.google.checkstyle.test.base.ConfigurationBuilder;
@@ -21,6 +22,7 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
         builder = new ConfigurationBuilder(new File("src/it/"));
     }
 
+    @Ignore
     @Test
     public void oneStatmentTest() throws IOException, Exception {
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
index 69dd353e71..f2fa9db52d 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
@@ -22,7 +22,6 @@
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-
 import com.puppycrawl.tools.checkstyle.checks.DescendantTokenCheck;
 
 /**
@@ -65,15 +64,16 @@ public MissingCtorCheck() {
         return getDefaultTokens();
     }
 
+    @Override
+    public int[] getRequiredTokens() {
+        return getDefaultTokens();
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
-        if (modifiers != null
-            && modifiers.branchContains(TokenTypes.ABSTRACT)) {
-            // should apply the check to abstract class
-            return;
+        if (!modifiers.branchContains(TokenTypes.ABSTRACT)) {
+            super.visitToken(ast);
         }
-
-        super.visitToken(ast);
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
index 21a8b4a6be..35f69c6fc4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
@@ -69,4 +69,9 @@ public MissingSwitchDefaultCheck() {
     public int[] getAcceptableTokens() {
         return getDefaultTokens();
     }
+
+    @Override
+    public int[] getRequiredTokens() {
+        return getDefaultTokens();
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
index 9ed947b304..f27ae8e387 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/HtmlTag.java
@@ -57,8 +57,7 @@
      */
     HtmlTag(String id, int lineNo, int position, boolean closedTag,
             boolean incomplete, String text) {
-        this.id = !"".equals(id) && id.charAt(0) == '/'
-            ? id.substring(1) : id;
+        this.id = id;
         this.lineNo = lineNo;
         this.position = position;
         this.text = text;
diff --git a/src/main/resources/google_checks.xml b/src/main/resources/google_checks.xml
index a79e244575..95b7dd32bc 100644
--- a/src/main/resources/google_checks.xml
+++ b/src/main/resources/google_checks.xml
@@ -195,8 +195,9 @@
             <message key="name.invalidPattern"
              value="Method name ''{0}'' must match pattern ''{1}''."/>
         </module>
-        <module name="SingleLineJavadoc"/>
+        <module name="SingleLineJavadoc">
             <property name="ignoreInlineTags" value="false"/>
+        </module>
         <module name="EmptyCatchBlock">
             <property name="exceptionVariableName" value="expected"/>
         </module>
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
index c1ecfc4142..836b309c23 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
@@ -26,6 +26,7 @@
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.MSG_RETURN_EXPECTED;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.MSG_UNUSED_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.MSG_UNUSED_TAG_GENERAL;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
@@ -35,6 +36,7 @@
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Scope;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class JavadocMethodCheckTest extends BaseCheckTestSupport {
     private DefaultConfiguration checkConfig;
@@ -45,6 +47,20 @@ public void setUp() {
         checkConfig.addAttribute("validateThrows", "true");
     }
 
+    @Test
+    public void testGetAcceptableTokens() {
+        JavadocMethodCheck javadocMethodCheck = new JavadocMethodCheck();
+
+        int[] actual = javadocMethodCheck.getAcceptableTokens();
+        int[] expected = new int[]{
+            TokenTypes.METHOD_DEF,
+            TokenTypes.CTOR_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+        };
+
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void extendAnnotationTest() throws Exception {
         DefaultConfiguration config = createCheckConfig(JavadocMethodCheck.class);
@@ -357,6 +373,27 @@ public void testAllowMissingJavadoc() throws Exception {
                                     + "InputNoJavadoc.java"), expected);
     }
 
+    @Test
+    public void testAllowMissingJavadocTags() throws Exception {
+        checkConfig.addAttribute("allowMissingParamTags", "true");
+        checkConfig.addAttribute("allowMissingThrowsTags", "true");
+        checkConfig.addAttribute("allowMissingReturnTag", "true");
+        final String[] expected = {};
+        verify(checkConfig, getPath("javadoc" + File.separator
+                                    + "InputMissingJavadocTags.java"), expected);
+    }
+
+    @Test
+    public void testDoAllowMissingJavadocTagsByDefault() throws Exception {
+        final String[] expected = {
+            "10: " + getCheckMessage(MSG_RETURN_EXPECTED),
+            "20:26: " + getCheckMessage(MSG_EXCPECTED_TAG, "@param", "number"),
+            "30:42: " + getCheckMessage(MSG_EXCPECTED_TAG, "@throws", "ThreadDeath"),
+        };
+        verify(checkConfig, getPath("javadoc" + File.separator
+                + "InputMissingJavadocTags.java"), expected);
+    }
+
     @Test
     public void testSetterGetterOff() throws Exception {
         final String[] expected = {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
index e4c1013a3a..3dc768737f 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
@@ -24,9 +24,11 @@
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck.TAG_FORMAT;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck.UNKNOWN_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck.UNUSED_TAG;
+import static org.junit.Assert.assertArrayEquals;
 
 import java.io.File;
 
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
@@ -42,6 +44,22 @@
  * Window>Preferences>Java>Code Generation.
  */
 public class JavadocTypeCheckTest extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetAcceptableTokens() {
+        JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();
+
+        int[] actual = javadocTypeCheck.getAcceptableTokens();
+        int[] expected = new int[]{
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.ANNOTATION_DEF,
+        };
+
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testTags() throws Exception {
         final DefaultConfiguration checkConfig =
@@ -336,7 +354,7 @@ public void testBadTagSuppress() throws Exception {
         final String[] expected = {
         };
         verify(checkConfig,
-               getPath("javadoc" + File.separator + "InputBadTag.java"),
-               expected);
+                getPath("javadoc" + File.separator + "InputBadTag.java"),
+                expected);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtilsTest.java
index 2d58e143b2..ff395dee54 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtilsTest.java
@@ -206,4 +206,24 @@ public void testBranchContains() {
         secondChild.setType(JavadocTokenTypes.AUTHOR_LITERAL);
         assertTrue(JavadocUtils.branchContains(node, JavadocTokenTypes.AUTHOR_LITERAL));
     }
+
+    @Test
+    public void testGetTokenNameForId() {
+        assertEquals("EOF", JavadocUtils.getTokenName(JavadocTokenTypes.EOF));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testGetTokenNameForLargeId() {
+        JavadocUtils.getTokenName(20074);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testGetTokenNameForInvalidId() {
+        JavadocUtils.getTokenName(100);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testGetTokenIdThatIsUnknown() {
+        JavadocUtils.getTokenId("");
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
index 8590f0356f..badcb623c5 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
@@ -23,12 +23,29 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import java.io.File;
+
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import org.junit.Test;
 
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocVariableCheck.JAVADOC_MISSING;
+import static org.junit.Assert.assertArrayEquals;
 
 public class JavadocVariableCheckTest
     extends BaseCheckTestSupport {
+
+    @Test
+    public void testGetAcceptableTokens() {
+        JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();
+
+        int[] actual = javadocVariableCheck.getAcceptableTokens();
+        int[] expected = new int[]{
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+        };
+
+        assertArrayEquals(expected, actual);
+    }
+
     @Test
     public void testDefault()
         throws Exception {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java b/src/test/resources/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java
index 5d4f67aa9e..4025759685 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/InputJavadocStyleCheck.java
@@ -338,4 +338,13 @@ public void method20() {
 		public void method21() {
 		}
 
+        /**
+         * First sentence.
+         * <
+         * /a>
+         */
+        void tagClosedInNextLine() {
+            
+        } 
+
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
index 8c15042032..4388952968 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputVariableDeclarationUsageDistanceCheck.java
@@ -461,7 +461,7 @@ public void testIssue32_6() {
     
     public void testIssue32_7() {
         String line = "abc";
-        writer.write(line);
+        otherWriter.write(line);
         line.charAt(1);
         builder.append(line);
         test(line, line, line);
@@ -814,7 +814,7 @@ public void setColor(int i)
     	
     }
     
-    static class writer {
+    static class otherWriter {
 
 		public static void write(String line)
 		{
@@ -836,4 +836,4 @@ public static void append(String line)
     	
     }
     
-}
\ No newline at end of file
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidClassDefIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidClassDefIndent.java
index 426e4f273f..565a874333 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidClassDefIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputInvalidClassDefIndent.java
@@ -73,7 +73,7 @@
   } //indent:2 exp:0 warn
 
 
-class InputInvalidClassDefIndentc //indent:0 exp:0
+class InputInvalidClassDefIndentc2 //indent:0 exp:0
   extends java.awt.event.MouseAdapter implements java.awt.event.MouseListener { //indent:2 exp:4 warn
 
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/javadoc/InputMissingJavadocTags.java b/src/test/resources/com/puppycrawl/tools/checkstyle/javadoc/InputMissingJavadocTags.java
new file mode 100644
index 0000000000..7859e330ae
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/javadoc/InputMissingJavadocTags.java
@@ -0,0 +1,33 @@
+package com.puppycrawl.tools.checkstyle.javadoc;
+
+public class InputMissingJavadocTags {
+    /**
+     * Missing return.
+     *
+     * @param number to return
+     * @throws ThreadDeath sometimes
+     */
+    int missingReturn(int number) throws ThreadDeath {
+        return number;
+    }
+
+    /**
+     * Missing param.
+     *
+     * @return number
+     * @throws ThreadDeath sometimes
+     */
+    int missingParam(int number) throws ThreadDeath {
+        return number;
+    }
+
+    /**
+     * Missing throws.
+     *
+     * @param number to return
+     * @return number
+     */
+    int missingThrows(int number) throws ThreadDeath {
+        return number;
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/naming/InputAbstractClassName.java b/src/test/resources/com/puppycrawl/tools/checkstyle/naming/InputAbstractClassName.java
index b7cbb990cb..425c10a44e 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/naming/InputAbstractClassName.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/naming/InputAbstractClassName.java
@@ -6,7 +6,7 @@
 abstract class NonAbstractClassName {
 }
 
-abstract class AbstractClassName {
+abstract class AbstractClassOther {
     abstract class NonAbstractInnerClass {
     }
 }
diff --git a/src/xdocs/google_style.xml b/src/xdocs/google_style.xml
index f4c00851cd..91a479c780 100644
--- a/src/xdocs/google_style.xml
+++ b/src/xdocs/google_style.xml
@@ -498,7 +498,7 @@
                             </td>
                             <td>
                                 <a
-                                    href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L200">config</a><br/>
+                                    href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L201">config</a><br/>
                                 <a
                                     href="https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java">test</a>
                             </td>
