diff --git a/Dockerfile b/Dockerfile
index e0f5b3d2e4..23bcd0294e 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -23,8 +23,7 @@ WORKDIR /var/lib/hypothesis
 RUN chown -R hypothesis:hypothesis /var/log/nginx /var/lib/nginx
 
 # Copy minimal data to allow installation of dependencies.
-COPY src/memex/__init__.py ./src/memex/
-COPY README.rst setup.* requirements.txt ./
+COPY requirements.txt ./
 
 # Install build deps, build, and then clean up.
 RUN apk-install --virtual build-deps \
diff --git a/Makefile b/Makefile
index c10988c11f..d71e3aa2d8 100644
--- a/Makefile
+++ b/Makefile
@@ -44,7 +44,7 @@ test: node_modules/.uptodate
 ################################################################################
 
 # Fake targets to aid with deps installation
-.pydeps: setup.py requirements.txt
+.pydeps: requirements.txt
 	@echo installing python dependencies
 	@pip install --use-wheel -r requirements-dev.in tox
 	@touch $@
diff --git a/conf/app.ini b/conf/app.ini
index f27b3c274d..c80116d750 100644
--- a/conf/app.ini
+++ b/conf/app.ini
@@ -35,7 +35,7 @@ host: 0.0.0.0
 port: 5000
 
 [loggers]
-keys = root, alembic, gunicorn.error, h, memex, sentry
+keys = root, alembic, gunicorn.error, h, sentry
 
 [handlers]
 keys = console, sentry
@@ -62,11 +62,6 @@ level = INFO
 handlers =
 qualname = h
 
-[logger_memex]
-level = INFO
-handlers =
-qualname = memex
-
 [logger_sentry]
 level = WARNING
 handlers = console
diff --git a/conf/development-app.ini b/conf/development-app.ini
index 752ae3f28c..b227235ae0 100644
--- a/conf/development-app.ini
+++ b/conf/development-app.ini
@@ -36,7 +36,7 @@ errorlog: -
 reload: True
 
 [loggers]
-keys = root, gunicorn.error, h, memex, raven
+keys = root, gunicorn.error, h, raven
 
 [handlers]
 keys = console
@@ -58,11 +58,6 @@ level = INFO
 handlers =
 qualname = h
 
-[logger_memex]
-level = INFO
-handlers =
-qualname = memex
-
 [logger_raven]
 level = WARNING
 handlers = console
diff --git a/h/app.py b/h/app.py
index e06eaf693a..54439de8d7 100644
--- a/h/app.py
+++ b/h/app.py
@@ -103,14 +103,6 @@ def includeme(config):
     if 'csp.report_uri' in settings:
         settings['csp']['report-uri'] = [settings['csp.report_uri']]
 
-    # API module
-    #
-    # We include this first so that:
-    # - configuration directives provided by modules in `memex` are available
-    #   to the rest of the application at startup.
-    # - we can override behaviour from `memex` if necessary.
-    config.include('memex', route_prefix='/api')
-
     # Core site modules
     config.include('h.assets')
     config.include('h.auth')
diff --git a/h/migrations/versions/9f5e274b202c_update_all_document_web_uris.py b/h/migrations/versions/9f5e274b202c_update_all_document_web_uris.py
index 5901619e2b..14a4f312e2 100644
--- a/h/migrations/versions/9f5e274b202c_update_all_document_web_uris.py
+++ b/h/migrations/versions/9f5e274b202c_update_all_document_web_uris.py
@@ -17,7 +17,7 @@
 from sqlalchemy.orm import sessionmaker
 from sqlalchemy.orm import subqueryload
 
-from memex._compat import urlparse
+from h._compat import urlparse
 
 
 revision = '9f5e274b202c'
diff --git a/h/migrations/versions/a44ef07b085a_fill_in_missing_denormalized_document_web_uri.py b/h/migrations/versions/a44ef07b085a_fill_in_missing_denormalized_document_web_uri.py
index 08f96ab9a8..43744e8709 100644
--- a/h/migrations/versions/a44ef07b085a_fill_in_missing_denormalized_document_web_uri.py
+++ b/h/migrations/versions/a44ef07b085a_fill_in_missing_denormalized_document_web_uri.py
@@ -16,7 +16,7 @@
 from sqlalchemy.orm import sessionmaker
 from sqlalchemy.orm import subqueryload
 
-from memex._compat import urlparse
+from h._compat import urlparse
 
 
 revision = 'a44ef07b085a'
diff --git a/requirements.in b/requirements.in
index 30de67d99f..d76d5ea919 100644
--- a/requirements.in
+++ b/requirements.in
@@ -24,6 +24,7 @@ newrelic
 passlib
 psycogreen
 psycopg2
+pyparsing >= 2.1.5
 pyramid
 # Pin pyramid_authsanity to latest master until our bugfix
 # (https://github.com/usingnamespace/pyramid_authsanity/pull/7) is released.
@@ -36,10 +37,12 @@ pyramid_tm
 python-dateutil
 python-slugify < 1.2.0
 raven
+requests-aws4auth >= 0.9
 statsd
+transaction
 unicodecsv
+venusian
 wsaccel
 ws4py
+zope.interface
 zope.sqlalchemy
-
--e .  # memex
diff --git a/requirements.txt b/requirements.txt
index 9a70eca2ac..a4b389a3d1 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -5,7 +5,6 @@
 #    pip-compile --output-file requirements.txt requirements.in
 #
 
--e .
 alembic==0.8.7
 amqp==1.4.9               # via kombu
 anyjson==0.3.3            # via kombu
diff --git a/setup.py b/setup.py
deleted file mode 100644
index 5976e491a9..0000000000
--- a/setup.py
+++ /dev/null
@@ -1,91 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import print_function
-
-import os
-import re
-from codecs import open
-from setuptools import find_packages
-from setuptools import setup
-from setuptools.command.test import test as _test
-
-###############################################################################
-
-NAME = 'memex'
-DESC = 'Memex: annotation storage and retrieval'
-AUTHOR = 'Hypothes.is Project & contributors'
-AUTHOR_EMAIL = 'contact@hypothes.is'
-URL = 'https://h.readthedocs.io'
-LICENSE = 'Simplified (2-Clause) BSD License'
-KEYWORDS = ['annotation', 'storage', 'hosting']
-CLASSIFIERS = [
-    'Development Status :: 4 - Beta',
-    'Environment :: Console',
-    'Environment :: Web Environment',
-    'Framework :: Pyramid',
-    'Intended Audience :: Developers',
-    'License :: OSI Approved :: BSD License',
-    'Operating System :: OS Independent',
-    'Programming Language :: Python :: 2.7',
-]
-INSTALL_REQUIRES = [
-    'Jinja2>=2.8',
-    'SQLAlchemy>=1.1.0',
-    'certifi',
-    'elasticsearch>=1.1.0,<2.0.0',
-    'jsonschema>=2.5.1,<2.6',
-    'psycopg2>=2.6.1,<2.7',
-    'pyparsing>=2.1.5,<2.2',
-    'pyramid-services==0.4',
-    'pyramid>=1.7,<1.8',
-    'python-dateutil>=2.1',
-    'requests-aws4auth>=0.9',
-    'transaction',
-    'zope.interface',
-    'venusian',
-]
-EXTRAS_REQUIRE = {}
-ENTRY_POINTS = {}
-
-with open('README.rst', encoding='utf-8') as fp:
-    LONGDESC = fp.read()
-
-###############################################################################
-
-HERE = os.path.abspath(os.path.dirname(__file__))
-VERSION_FILE = os.path.join(HERE, 'src', 'memex', '__init__.py')
-
-
-def get_version():
-    """Extract package __version__"""
-    with open(VERSION_FILE, encoding='utf-8') as fp:
-        content = fp.read()
-    match = re.search(r'^__version__ = [\'"]([^\'"]*)[\'"]', content, re.M)
-    if match:
-        return match.group(1)
-    raise RuntimeError("Could not extract package __version__")
-
-
-class test(_test):
-    def run(self):
-        print('please run tox instead')
-
-
-if __name__ == "__main__":
-    setup(name=NAME,
-          version=get_version(),
-          description=DESC,
-          long_description=LONGDESC,
-          classifiers=CLASSIFIERS,
-          keywords=KEYWORDS,
-          author=AUTHOR,
-          author_email=AUTHOR_EMAIL,
-          url=URL,
-          license=LICENSE,
-          install_requires=INSTALL_REQUIRES,
-          extras_require=EXTRAS_REQUIRE,
-          entry_points=ENTRY_POINTS,
-          cmdclass={'test': test},
-          packages=find_packages(where='src'),
-          package_dir={'': 'src'},
-          zip_safe=False)
diff --git a/src/memex/__init__.py b/src/memex/__init__.py
deleted file mode 100644
index f843c43b8a..0000000000
--- a/src/memex/__init__.py
+++ /dev/null
@@ -1,8 +0,0 @@
-# -*- coding: utf-8 -*-
-
-__all__ = ('__version__',)
-__version__ = '0.39.0+dev'
-
-
-def includeme(config):
-    config.include('pyramid_services')
diff --git a/src/memex/_compat.py b/src/memex/_compat.py
deleted file mode 100644
index b4d7905e03..0000000000
--- a/src/memex/_compat.py
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- coding: utf-8 -*-
-"""Helpers for the Python 2 to Python 3 transition."""
-
-import sys
-
-PY2 = sys.version_info[0] == 2
-
-if not PY2:
-    text_type = str
-    string_types = (str,)
-    xrange = xrange
-else:
-    text_type = unicode
-    string_types = (str, unicode)
-    xrange = range
-
-try:
-    from urllib import parse as urlparse
-    url_quote = urlparse.quote
-    url_quote_plus = urlparse.quote_plus
-    url_unquote = urlparse.unquote
-    url_unquote_plus = urlparse.unquote_plus
-except ImportError:
-    import urllib
-    import urlparse
-    url_quote = urllib.quote
-    url_quote_plus = urllib.quote_plus
-    url_unquote = urllib.unquote
-    url_unquote_plus = urllib.unquote_plus
diff --git a/src/memex/util/__init__.py b/src/memex/util/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/h/conftest.py b/tests/h/conftest.py
index 1b1281de7c..eabad26f4e 100644
--- a/tests/h/conftest.py
+++ b/tests/h/conftest.py
@@ -20,7 +20,6 @@
 from webob.multidict import MultiDict
 
 from h import db
-from h import models  # noqa: ensure base class set for memex
 from h import form
 from h.settings import database_url
 from h._compat import text_type
diff --git a/tests/memex/__init__.py b/tests/memex/__init__.py
deleted file mode 100644
index e69de29bb2..0000000000
diff --git a/tests/memex/conftest.py b/tests/memex/conftest.py
deleted file mode 100644
index 3f067b1e57..0000000000
--- a/tests/memex/conftest.py
+++ /dev/null
@@ -1,186 +0,0 @@
-# -*- coding: utf-8 -*-
-# pylint: disable=no-self-use
-"""
-The `conftest` module is automatically loaded by py.test and serves as a place
-to put fixture functions that are useful application-wide.
-"""
-
-import functools
-import os
-
-import mock
-import pytest
-
-import sqlalchemy
-from pyramid import testing
-from pyramid.request import apply_request_extensions
-from sqlalchemy.orm import sessionmaker
-
-from h import db
-from memex._compat import text_type
-
-TEST_DATABASE_URL = os.environ.get('TEST_DATABASE_URL',
-                                   'postgresql://postgres@localhost/htest')
-
-Session = sessionmaker()
-
-
-class DummyFeature(object):
-
-    """
-    A dummy feature flag looker-upper.
-
-    Because we're probably testing all feature-flagged functionality, this
-    feature client defaults every flag to *True*, which is the exact opposite
-    of what happens outside of testing.
-    """
-
-    def __init__(self):
-        self.flags = {}
-
-    def __call__(self, name, *args, **kwargs):
-        return self.flags.get(name, True)
-
-
-class DummySession(object):
-
-    """
-    A dummy database session.
-    """
-
-    def __init__(self):
-        self.added = []
-        self.deleted = []
-        self.flushed = False
-
-    def add(self, obj):
-        self.added.append(obj)
-
-    def delete(self, obj):
-        self.deleted.append(obj)
-
-    def flush(self):
-        self.flushed = True
-
-
-def autopatcher(request, target, **kwargs):
-    """Patch and cleanup automatically. Wraps :py:func:`mock.patch`."""
-    options = {'autospec': True}
-    options.update(kwargs)
-    patcher = mock.patch(target, **options)
-    obj = patcher.start()
-    request.addfinalizer(patcher.stop)
-    return obj
-
-
-@pytest.fixture(scope='session')
-def db_engine():
-    """Set up the database connection and create tables."""
-    engine = sqlalchemy.create_engine(TEST_DATABASE_URL)
-    db.init(engine, should_create=True, should_drop=True)
-    return engine
-
-
-@pytest.yield_fixture
-def db_session(db_engine):
-    """
-    Prepare the SQLAlchemy session object.
-
-    We enable fast repeatable database tests by setting up the database only
-    once per session (see :func:`db_engine`) and then wrapping each test
-    function in a transaction that is rolled back.
-
-    Additionally, we set a SAVEPOINT before entering the test, and if we
-    detect that the test has committed (i.e. released the savepoint) we
-    immediately open another. This has the effect of preventing test code from
-    committing the outer transaction.
-    """
-    conn = db_engine.connect()
-    trans = conn.begin()
-    session = Session(bind=conn)
-    session.begin_nested()
-
-    @sqlalchemy.event.listens_for(session, "after_transaction_end")
-    def restart_savepoint(session, transaction):
-        if transaction.nested and not transaction._parent.nested:
-            session.begin_nested()
-
-    try:
-        yield session
-    finally:
-        session.close()
-        trans.rollback()
-        conn.close()
-
-
-@pytest.yield_fixture
-def factories(db_session):
-    from . import factories
-    factories.SESSION = db_session
-    yield factories
-    factories.SESSION = None
-
-
-@pytest.fixture
-def fake_feature():
-    return DummyFeature()
-
-
-@pytest.fixture
-def fake_db_session():
-    return DummySession()
-
-
-@pytest.fixture
-def matchers():
-    from ..common import matchers
-    return matchers
-
-
-@pytest.fixture
-def notify(pyramid_config, request):
-    patcher = mock.patch.object(pyramid_config.registry, 'notify', autospec=True)
-    request.addfinalizer(patcher.stop)
-    return patcher.start()
-
-
-@pytest.fixture
-def patch(request):
-    return functools.partial(autopatcher, request)
-
-
-@pytest.yield_fixture
-def pyramid_config(pyramid_settings, pyramid_request):
-    """Pyramid configurator object."""
-    with testing.testConfig(request=pyramid_request,
-                            settings=pyramid_settings) as config:
-        # Include pyramid_services so it's easy to set up fake services in tests
-        config.include('pyramid_services')
-        apply_request_extensions(pyramid_request)
-
-        yield config
-
-
-@pytest.fixture
-def pyramid_request(db_session, fake_feature, pyramid_settings):
-    """Dummy Pyramid request object."""
-    request = testing.DummyRequest(db=db_session, feature=fake_feature)
-    request.authority = text_type(request.domain)
-    request.create_form = mock.Mock()
-    request.registry.settings = pyramid_settings
-    return request
-
-
-@pytest.fixture
-def pyramid_csrf_request(pyramid_request):
-    """Dummy Pyramid request object with a valid CSRF token."""
-    pyramid_request.headers['X-CSRF-Token'] = pyramid_request.session.get_csrf_token()
-    return pyramid_request
-
-
-@pytest.fixture
-def pyramid_settings():
-    """Default app settings."""
-    return {
-        'sqlalchemy.url': TEST_DATABASE_URL
-    }
diff --git a/tox.ini b/tox.ini
index e92a69d7f9..4783709123 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,5 +1,6 @@
 [tox]
 envlist = py27
+skipsdist = true
 
 [pytest]
 minversion = 2.8
