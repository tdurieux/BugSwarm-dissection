diff --git a/.travis.yml b/.travis.yml
index 6f12b7c..23c2095 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -7,6 +7,7 @@ install:
 python:
   - "2.7.6"
   - "2.7"
+  - "3.6"
 script:
   - make
 notifications:
diff --git a/plexus/grainlog/grain.py b/plexus/grainlog/grain.py
index 0f6e86d..0386deb 100644
--- a/plexus/grainlog/grain.py
+++ b/plexus/grainlog/grain.py
@@ -17,7 +17,7 @@ def _build_indices(self):
         self._roles_idx = defaultdict(list)
 
         for s in self.d.get('servers', []):
-            server_name = s.keys()[0]
+            server_name = list(s.keys())[0]
             data = s[server_name]
             if not isinstance(data, dict):
                 # sometimes we get a string like
diff --git a/plexus/grainlog/tests/test_grain.py b/plexus/grainlog/tests/test_grain.py
index 13b1798..ac7a33d 100644
--- a/plexus/grainlog/tests/test_grain.py
+++ b/plexus/grainlog/tests/test_grain.py
@@ -147,7 +147,7 @@ def test_by_role(self):
 class ServerTest(unittest.TestCase):
     def test_keys(self):
         s = Server('foo', dict(a="b"))
-        self.assertEqual(s.keys(), ["a"])
+        self.assertEqual(list(s.keys()), ["a"])
 
     def test_apps(self):
         s = Server('foo', dict(apps=['one', 'two', 'three']))
diff --git a/plexus/grainlog/tests/test_views.py b/plexus/grainlog/tests/test_views.py
index 32e541d..b5406ac 100644
--- a/plexus/grainlog/tests/test_views.py
+++ b/plexus/grainlog/tests/test_views.py
@@ -76,9 +76,9 @@ def test_get(self):
     def test_post(self):
         request = self.factory.post(reverse('grainlog-raw-update'))
 
-        with open('test_data/grains.json') as f:
-            request.FILES['payload'] = SimpleUploadedFile("grains.json",
-                                                          f.read())
+        with open('test_data/grains.json', 'rb') as f:
+            request.FILES['payload'] = SimpleUploadedFile(
+                "grains.json", f.read())
             request.user = self.anon
             response = GrainLogListView.as_view()(request)
             self.assertEqual(response.status_code, 302)
diff --git a/plexus/main/admin.py b/plexus/main/admin.py
index b728632..6474d18 100644
--- a/plexus/main/admin.py
+++ b/plexus/main/admin.py
@@ -1,10 +1,11 @@
 from django.contrib import admin
 
-from models import Application, ApplicationAlias, ApplicationContact
-from models import Contact, Alias, Technology, Note
-from models import Location, OSFamily, OperatingSystem, IPAddress
-from models import ServerContact
-from plexus.main.models import Server
+from plexus.main.models import (
+    Application, ApplicationAlias, ApplicationContact,
+    Contact, Alias, Technology, Note,
+    Location, OSFamily, OperatingSystem, IPAddress,
+    ServerContact, Server
+)
 
 
 for c in [Location, OSFamily, OperatingSystem, IPAddress,
diff --git a/plexus/main/models.py b/plexus/main/models.py
index 465555a..bdd9fd5 100644
--- a/plexus/main/models.py
+++ b/plexus/main/models.py
@@ -2,34 +2,38 @@
 
 from django.contrib.auth.models import User
 from django.db import models
+from django.utils.encoding import python_2_unicode_compatible, smart_text
 
 from plexus.grainlog.models import GrainLog
 
 
+@python_2_unicode_compatible
 class Location(models.Model):
     name = models.CharField(max_length=256)
     details = models.TextField(blank=True, default=u"")
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
     def get_absolute_url(self):
         return "/location/%d/" % self.id
 
 
+@python_2_unicode_compatible
 class OSFamily(models.Model):
     name = models.CharField(max_length=256)
 
     class Meta:
         ordering = ['name', ]
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
     def get_absolute_url(self):
         return "/os/%d/" % self.id
 
 
+@python_2_unicode_compatible
 class OperatingSystem(models.Model):
     family = models.ForeignKey(OSFamily)
     version = models.CharField(max_length=256)
@@ -37,13 +41,14 @@ class OperatingSystem(models.Model):
     class Meta:
         ordering = ['version', ]
 
-    def __unicode__(self):
-        return unicode(self.family) + " " + self.version
+    def __str__(self):
+        return smart_text(self.family) + " " + self.version
 
     def get_absolute_url(self):
         return "/os/%d/%d/" % (self.family.id, self.id)
 
 
+@python_2_unicode_compatible
 class Server(models.Model):
     name = models.CharField(max_length=256)
     primary_function = models.TextField(blank=True, default=u"")
@@ -60,7 +65,7 @@ class Server(models.Model):
     class Meta:
         ordering = ['name', ]
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
     def get_absolute_url(self):
@@ -105,21 +110,23 @@ def aliases(self):
         return Alias.objects.filter(ip_address__server=self)
 
 
+@python_2_unicode_compatible
 class IPAddress(models.Model):
     ipv4 = models.CharField(max_length=256)
     mac_addr = models.CharField(max_length=256, null=True, blank=True)
     server = models.ForeignKey(Server)
 
-    def __unicode__(self):
+    def __str__(self):
         return self.ipv4
 
 
+@python_2_unicode_compatible
 class Contact(models.Model):
     name = models.CharField(max_length=256)
     email = models.CharField(max_length=256, default="")
     phone = models.CharField(max_length=256, default="")
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
     def get_absolute_url(self):
@@ -134,6 +141,7 @@ def active_applications(self):
             application__deprecated=False)]
 
 
+@python_2_unicode_compatible
 class Alias(models.Model):
     hostname = models.CharField(max_length=256)
     ip_address = models.ForeignKey(IPAddress, null=True)
@@ -155,7 +163,7 @@ class Alias(models.Model):
     class Meta:
         ordering = ['hostname', ]
 
-    def __unicode__(self):
+    def __str__(self):
         return self.hostname
 
     def status_css_class(self):
@@ -214,13 +222,15 @@ def get_absolute_url(self):
         return "/alias/%d/" % self.id
 
 
+@python_2_unicode_compatible
 class Technology(models.Model):
     name = models.CharField(max_length=256)
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
 
+@python_2_unicode_compatible
 class Application(models.Model):
     name = models.CharField(max_length=256)
     description = models.TextField(blank=True, default=u"")
@@ -238,7 +248,7 @@ class Application(models.Model):
     class Meta:
         ordering = ['name', ]
 
-    def __unicode__(self):
+    def __str__(self):
         return self.name
 
     def pmt_feed_url(self):
@@ -302,14 +312,16 @@ def upcoming(self):
         return (datetime.now() + timedelta(weeks=4)).date() > self.end
 
 
+@python_2_unicode_compatible
 class ApplicationAlias(models.Model):
     application = models.ForeignKey(Application)
     alias = models.ForeignKey(Alias)
 
-    def __unicode__(self):
-        return unicode(self.application) + " -> " + unicode(self.alias)
+    def __str__(self):
+        return smart_text(self.application) + " -> " + smart_text(self.alias)
 
 
+@python_2_unicode_compatible
 class ApplicationContact(models.Model):
     application = models.ForeignKey(Application)
     contact = models.ForeignKey(Contact)
@@ -317,10 +329,11 @@ class ApplicationContact(models.Model):
     class Meta:
         order_with_respect_to = 'application'
 
-    def __unicode__(self):
-        return unicode(self.application) + ": " + unicode(self.contact)
+    def __str__(self):
+        return smart_text(self.application) + ": " + smart_text(self.contact)
 
 
+@python_2_unicode_compatible
 class ServerContact(models.Model):
     server = models.ForeignKey(Server)
     contact = models.ForeignKey(Contact)
@@ -328,8 +341,8 @@ class ServerContact(models.Model):
     class Meta:
         order_with_respect_to = 'server'
 
-    def __unicode__(self):
-        return unicode(self.server) + ": " + unicode(self.contact)
+    def __str__(self):
+        return smart_text(self.server) + ": " + smart_text(self.contact)
 
 
 class Note(models.Model):
diff --git a/plexus/main/templatetags/plexustags.py b/plexus/main/templatetags/plexustags.py
index a1b5781..10cd4ca 100644
--- a/plexus/main/templatetags/plexustags.py
+++ b/plexus/main/templatetags/plexustags.py
@@ -28,7 +28,7 @@ def aliases(name):
 @register.simple_tag
 def server_grain(grains, server):
     try:
-        grain = filter(lambda s: s.name == server, grains)[0]
+        grain = list(filter(lambda s: s.name == server, grains))[0]
         return grain
     except IndexError:
         return None
diff --git a/plexus/main/tests/__init__.py b/plexus/main/tests/__init__.py
index 0d1475e..e69de29 100644
--- a/plexus/main/tests/__init__.py
+++ b/plexus/main/tests/__init__.py
@@ -1,3 +0,0 @@
-# flake8: noqa
-from test_models import *
-from test_views import *
diff --git a/plexus/main/tests/test_views.py b/plexus/main/tests/test_views.py
index 457eb3f..e08e58e 100644
--- a/plexus/main/tests/test_views.py
+++ b/plexus/main/tests/test_views.py
@@ -49,7 +49,7 @@ def test_500s_deprecated_app(self):
         ApplicationFactory(graphite_name='foobar', deprecated=True)
         response = self.c.get(reverse('500s-dashboard'))
         self.assertEquals(response.status_code, 200)
-        self.assertFalse('foobar' in response.content)
+        self.assertNotContains(response, 'foobar')
 
     def test_empty_404s(self):
         response = self.c.get(reverse('404s-dashboard'))
@@ -64,7 +64,7 @@ def test_404s_deprecated_app(self):
         ApplicationFactory(graphite_name='foobar', deprecated=True)
         response = self.c.get(reverse('404s-dashboard'))
         self.assertEquals(response.status_code, 200)
-        self.assertFalse('foobar' in response.content)
+        self.assertNotContains(response, 'foobar')
 
     def test_empty_traffic(self):
         response = self.c.get(reverse('traffic-dashboard'))
@@ -79,7 +79,7 @@ def test_traffic_deprecated_app(self):
         ApplicationFactory(graphite_name='foobar', deprecated=True)
         response = self.c.get(reverse('traffic-dashboard'))
         self.assertEquals(response.status_code, 200)
-        self.assertFalse('foobar' in response.content)
+        self.assertNotContains(response, 'foobar')
 
     def test_empty_response_times(self):
         response = self.c.get(reverse('response-time-dashboard'))
@@ -94,7 +94,7 @@ def test_response_times_deprecated_app(self):
         ApplicationFactory(graphite_name='foobar', deprecated=True)
         response = self.c.get(reverse('response-time-dashboard'))
         self.assertEquals(response.status_code, 200)
-        self.assertFalse('foobar' in response.content)
+        self.assertNotContains(response, 'foobar')
 
     def test_load_average_empty(self):
         response = self.c.get(reverse('load-dashboard'))
@@ -135,7 +135,7 @@ def test_request_alias(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get("/server/%d/" % server.id)
-        assert "test.example.com" in response.content
+        self.assertContains(response, 'test.example.com')
 
         a = Alias.objects.get(hostname='test.example.com')
         response = self.c.get("/alias/%d/" % a.id)
@@ -154,7 +154,7 @@ def test_request_alias_change(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get("/alias/%d/" % alias.id)
-        assert "pending" in response.content
+        self.assertContains(response, 'pending')
 
     def test_alias_change(self):
         server = ServerFactory()
@@ -169,7 +169,7 @@ def test_alias_change(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get("/alias/%d/" % alias.id)
-        assert str(newipaddress.server.name) in response.content
+        self.assertContains(response, newipaddress.server.name)
 
     def test_add_server_note(self):
         server = ServerFactory()
@@ -269,7 +269,7 @@ def test_add_application(self):
         )
         self.assertEqual(response.status_code, 302)
         response = self.c.get(reverse('applications-view'))
-        self.assertTrue("testapp" in response.content)
+        self.assertContains(response, 'testapp')
 
     def test_add_server(self):
         response = self.c.post(
@@ -287,38 +287,38 @@ def test_add_server(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get(reverse('index-view'))
-        assert "testserver" in response.content
+        self.assertContains(response, 'testserver')
 
         # pull up the server page
         s = Server.objects.get(name='testserver')
         response = self.c.get(s.get_absolute_url())
 
         self.assertEquals(response.status_code, 200)
-        assert '127.0.0.1' in response.content
-        assert 'Anders' in response.content
-        assert 'i-fde235eb' in response.content
+        self.assertContains(response, '127.0.0.1')
+        self.assertContains(response, 'Anders')
+        self.assertContains(response, 'i-fde235eb')
 
         loc = Location.objects.get(name="test location")
         response = self.c.get(loc.get_absolute_url())
         self.assertEquals(response.status_code, 200)
-        assert 'testserver' in response.content
+        self.assertContains(response, 'testserver')
 
         # contacts should exist too
         c = Contact.objects.get(name="Anders")
         response = self.c.get(c.get_absolute_url())
         self.assertEquals(response.status_code, 200)
-        assert 'Anders' in response.content
-        assert 'testserver' in response.content
+        self.assertContains(response, 'Anders')
+        self.assertContains(response, 'testserver')
 
         # os info should exist now
         osfam = OSFamily.objects.get(name="Linux")
         response = self.c.get(osfam.get_absolute_url())
         assert response.status_code == 200
-        assert "Ubuntu 12.04" in response.content
+        self.assertContains(response, 'Ubuntu 12.04')
         os = OperatingSystem.objects.get(family=osfam, version=" Ubuntu 12.04")
         response = self.c.get(os.get_absolute_url())
         assert response.status_code == 200
-        assert "testserver" in response.content
+        self.assertContains(response, 'testserver')
 
     def test_add_server_alternates(self):
         response = self.c.post(
@@ -331,7 +331,7 @@ def test_add_server_alternates(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get(reverse('index-view'))
-        assert "testserver" in response.content
+        self.assertContains(response, 'testserver')
 
     def test_add_alias(self):
         server = ServerFactory()
@@ -347,12 +347,12 @@ def test_add_alias(self):
             })
         self.assertEquals(response.status_code, 302)
         response = self.c.get("/server/%d/" % server.id)
-        assert "test.example.com" in response.content
+        self.assertContains(response, 'test.example.com')
 
         a = Alias.objects.get(hostname='test.example.com')
         response = self.c.get("/alias/%d/" % a.id)
         self.assertEqual(response.status_code, 200)
-        self.assertTrue("admin info" in response.content)
+        self.assertContains(response, 'admin info')
 
     def test_contact(self):
         contact = ContactFactory()
@@ -375,7 +375,7 @@ def test_application(self):
     def test_deprecated_application(self):
         application = ApplicationFactory(deprecated=True)
         response = self.c.get(reverse('index-view'))
-        self.assertFalse(application.get_absolute_url() in response.content)
+        self.assertNotContains(response, application.get_absolute_url())
 
     def test_delete_servercontact(self):
         sc = ServerContactFactory()
@@ -410,13 +410,13 @@ def test_alias_confirm(self):
         response = self.c.post("/alias/%d/confirm/" % alias.id)
         self.assertEqual(response.status_code, 302)
         response = self.c.get("/alias/%d/" % alias.id)
-        self.assertTrue("pending" not in response.content)
+        self.assertNotContains(response, 'pending')
 
     def test_alias_edit_form(self):
         alias = AliasFactory(status="pending")
         response = self.c.get("/alias/%d/edit/" % alias.id)
         self.assertEqual(response.status_code, 200)
-        self.assertTrue("<form " in response.content)
+        self.assertContains(response, '<form')
         response = self.c.post(
             "/alias/%d/edit/" % alias.id,
             dict(hostname=alias.hostname,
@@ -426,8 +426,8 @@ def test_alias_edit_form(self):
         )
         self.assertEqual(response.status_code, 302)
         response = self.c.get("/alias/%d/" % alias.id)
-        self.assertTrue("new description" in response.content)
-        self.assertTrue("new admin info" in response.content)
+        self.assertContains(response, 'new description')
+        self.assertContains(response, 'new admin info')
 
     def test_alias_associate_with_application(self):
         alias = AliasFactory()
diff --git a/plexus/settings.py b/plexus/settings.py
index dac2342..46e0130 100644
--- a/plexus/settings.py
+++ b/plexus/settings.py
@@ -1,7 +1,7 @@
 # flake8: noqa
-from settings_shared import *
+from plexus.settings_shared import *
 
 try:
-    from local_settings import *
+    from plexus.local_settings import *
 except ImportError:
     pass
diff --git a/requirements.txt b/requirements.txt
index a2471af..0a38598 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -18,7 +18,6 @@ cffi==1.11.5  # for pyOpenSSL
 requests==2.19.1
 django-feedparser==0.2.1
 Markdown==2.6.11
-uuid==1.30
 psycopg2==2.7.5
 versiontools==1.9.1
 statsd==3.2.2
@@ -50,7 +49,7 @@ pep8==1.7.1
 pyflakes==2.0.0
 mccabe==0.6.1
 pycodestyle==2.3.1 # pyup: <2.4.0
-enum34==1.1.6
+enum34==1.1.6; python_version < '3.4'
 configparser==3.5.0
 flake8==3.5.0
 logilab-common==1.4.1
