diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
index 76dfc472b7..0701a37b92 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java
@@ -70,6 +70,30 @@
  * &lt;module name="JavadocDeprecated"/&gt;
  * </pre>
  *
+ * <p>
+ * In addition you can configure this check with skipNoJavadoc
+ * option to allow it to ignore cases when JavaDoc is missing,
+ * but still warns when JavaDoc is present but either
+ * {@link Deprecated Deprecated} is missing from JavaDoc or
+ * {@link Deprecated Deprecated} is missing from the element.
+ * To configure this check to allow it use:
+ * </p>
+ *
+ * <pre>   &lt;property name="skipNoJavadoc" value="true" /&gt;</pre>
+ *
+ * <p>Examples of validating source code with skipNoJavadoc:</p>
+ *
+ * <pre>
+ * <code>
+ * {@literal @}deprecated
+ * public static final int MY_CONST = 123456; // no violation
+ *
+ * &#47;** This javadoc is missing deprecated tag. *&#47;
+ * {@literal @}deprecated
+ * public static final int COUNTER = 10; // violation as javadoc exists
+ * </code>
+ * </pre>
+ *
  * @author Travis Schneeberger
  */
 public final class MissingDeprecatedCheck extends AbstractCheck {
@@ -116,6 +140,17 @@
     /** Multiline finished at next Javadoc. */
     private static final String NEXT_TAG = "@";
 
+    /** Is deprecated element valid without javadoc. */
+    private boolean skipNoJavadoc;
+
+    /**
+     * Set skipJavadoc value.
+     * @param skipNoJavadoc user's value of skipJavadoc
+     */
+    public void setSkipNoJavadoc(boolean skipNoJavadoc) {
+        this.skipNoJavadoc = skipNoJavadoc;
+    }
+
     @Override
     public int[] getDefaultTokens() {
         return getAcceptableTokens();
@@ -152,7 +187,7 @@ public void visitToken(final DetailAST ast) {
 
         final boolean containsJavadocTag = containsJavadocTag(javadoc);
 
-        if (containsAnnotation ^ containsJavadocTag) {
+        if (containsAnnotation ^ containsJavadocTag && !(skipNoJavadoc && javadoc == null)) {
             log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);
         }
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index 969f93acf0..fdaac63002 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -40,7 +40,8 @@
  * LITERAL_IF},  {@link TokenTypes#LITERAL_SWITCH LITERAL_SWITCH},  {@link
  * TokenTypes#LITERAL_SYNCHRONIZED LITERAL_SYNCHRONIZED},  {@link
  * TokenTypes#LITERAL_TRY LITERAL_TRY},  {@link TokenTypes#LITERAL_WHILE
- * LITERAL_WHILE},  {@link TokenTypes#STATIC_INIT STATIC_INIT}.
+ * LITERAL_WHILE},  {@link TokenTypes#STATIC_INIT STATIC_INIT},
+ * {@link TokenTypes#LAMBDA LAMBDA}.
  * </p>
  *
  * <p>
@@ -167,6 +168,7 @@ public void setIgnoreEnums(boolean ignoreEnums) {
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT,
             TokenTypes.OBJBLOCK,
+            TokenTypes.LAMBDA,
         };
     }
 
@@ -208,6 +210,7 @@ public void visitToken(DetailAST ast) {
             case TokenTypes.LITERAL_DO:
             case TokenTypes.LITERAL_IF:
             case TokenTypes.STATIC_INIT:
+            case TokenTypes.LAMBDA:
                 startToken = ast;
                 brace = ast.findFirstToken(TokenTypes.SLIST);
                 break;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
index e373174cb9..cfbebbb628 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
@@ -60,7 +60,7 @@ public void valueChanged(ListSelectionEvent event) {
      *
      * @return the list selection model
      */
-    final ListSelectionModel getListSelectionModel() {
+    protected final ListSelectionModel getListSelectionModel() {
         return listSelectionModel;
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
index 812243a5f8..87867a9463 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
@@ -53,7 +53,7 @@ public ParseTreeTableModel(DetailAST parseTree) {
      * Sets parse tree.
      * @param parseTree DetailAST parse tree.
      */
-    final void setParseTree(DetailAST parseTree) {
+    protected final void setParseTree(DetailAST parseTree) {
         pModel.setParseTree(parseTree);
         final Object[] path = {pModel.getRoot()};
         // no need to setup remaining info, as the call results in a
@@ -146,7 +146,7 @@ public void removeTreeModelListener(TreeModelListener listener) {
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
-    final void fireTreeStructureChanged(Object source, Object[] path,
+    private void fireTreeStructureChanged(Object source, Object[] path,
                                   int[] childIndices,
                                   Object... children) {
         // Guaranteed to return a non-null array
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
index cc181c5d27..feb09100e4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModel.java
@@ -64,7 +64,7 @@ private static DetailAST createArtificialTreeRoot() {
      * Set parse tree.
      * @param parseTree DetailAST parse tree.
      */
-    final void setParseTree(DetailAST parseTree) {
+    protected final void setParseTree(DetailAST parseTree) {
         ((AST) root).setFirstChild(parseTree);
     }
 
diff --git a/src/site/site.xml b/src/site/site.xml
index ac6890b750..7ad5428e3a 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -92,6 +92,7 @@
     <menu name="Developers">
       <item name="Extending Checkstyle" href="extending.html">
         <item name="Writing Checks" href="writingchecks.html"/>
+        <item name="Writing Javadoc Checks" href="writingjavadocchecks.html"/>
         <item name="Writing Filters" href="writingfilters.html"/>
         <item name="Writing Listeners" href="writinglisteners.html"/>
       </item>
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
index fda0cdeab7..956b17ebb3 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
@@ -169,4 +169,17 @@ public void testEmptyJavadocLine() throws Exception {
 
         verify(checkConfig, getPath("InputMissingDeprecated2.java"), expected);
     }
+
+    @Test
+    public void testSkipNoJavadocOption() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+        checkConfig.addAttribute("skipNoJavadoc", "true");
+
+        final String[] expected = {
+            "10: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "26: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+        };
+
+        verify(checkConfig, getPath("InputMissingDeprecatedSkipNoJavadoc.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
index 35a6dafad4..547baf4b96 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
@@ -51,6 +51,12 @@ protected String getPath(String filename) throws IOException {
                 + "blocks" + File.separator + filename);
     }
 
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "blocks" + File.separator + filename);
+    }
+
     /* Additional test for jacoco, since valueOf()
      * is generated by javac and jacoco reports that
      * valueOf() is uncovered.
@@ -280,6 +286,28 @@ public void testIgnoreEnumsOptionFalse() throws Exception {
         verify(checkConfig, getPath("InputLeftCurlyEnums.java"), expectedWhileFalse);
     }
 
+    @Test
+    public void testDefaultLambda() throws Exception {
+        final String[] expected = {
+            "5:1: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{", 1),
+            "12:32: " + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, "{", 32),
+            "15:5: " + getCheckMessage(MSG_KEY_LINE_PREVIOUS, "{", 5),
+        };
+        verify(checkConfig, getNonCompilablePath("InputLeftCurlyNewLineOptionWithLambda.java"),
+                expected);
+    }
+
+    @Test
+    public void testNewLineOptionWithLambda() throws Exception {
+        checkConfig.addAttribute("option", LeftCurlyOption.NL.toString());
+        final String[] expected = {
+            "6:32: " + getCheckMessage(MSG_KEY_LINE_NEW, "{", 32),
+            "12:32: " + getCheckMessage(MSG_KEY_LINE_NEW, "{", 32),
+        };
+        verify(checkConfig, getNonCompilablePath("InputLeftCurlyNewLineOptionWithLambda.java"),
+                expected);
+    }
+
     @Test
     public void testGetAcceptableTokens() {
         final LeftCurlyCheck check = new LeftCurlyCheck();
@@ -303,7 +331,8 @@ public void testGetAcceptableTokens() {
             TokenTypes.LITERAL_ELSE,
             TokenTypes.LITERAL_FOR,
             TokenTypes.STATIC_INIT,
-            TokenTypes.OBJBLOCK, };
+            TokenTypes.OBJBLOCK,
+            TokenTypes.LAMBDA, };
         assertArrayEquals(expected, actual);
     }
 
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyNewLineOptionWithLambda.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyNewLineOptionWithLambda.java
new file mode 100644
index 0000000000..8ce0e26fbb
--- /dev/null
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyNewLineOptionWithLambda.java
@@ -0,0 +1,18 @@
+//Compilable with Java8
+package com.puppycrawl.tools.checkstyle.checks.blocks;
+
+public class InputLeftCurlyNewLineOptionWithLambda
+{
+    static Runnable r1 = () -> {
+        System.out.println("Hello world one!");
+    };
+
+    static Runnable r2 = () -> System.out.println("Hello world two!");
+
+    static Runnable r3 = () -> {System.out.println("Hello world two!");};
+
+    static Runnable r4 = () ->
+    {
+        System.out.println("Hello world one!");
+    };
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/annotation/InputMissingDeprecatedSkipNoJavadoc.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/annotation/InputMissingDeprecatedSkipNoJavadoc.java
new file mode 100644
index 0000000000..971576a59b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/annotation/InputMissingDeprecatedSkipNoJavadoc.java
@@ -0,0 +1,27 @@
+package com.puppycrawl.tools.checkstyle.checks.annotation;
+
+public class InputMissingDeprecatedSkipNoJavadoc {
+    @Deprecated
+    public static final int MY_CONST = 123456;
+
+    /**
+     * Useless comment.
+     */
+    @Deprecated
+    public static final int MY_CONST2 = 234567;
+
+    /**
+     * Useless comment.
+     *
+     * @deprecated Not for public use.
+     */
+    @Deprecated
+    public static final int MY_CONST3 = 345678;
+
+    /**
+     * Useless comment.
+     *
+     * @deprecated Not for public use.
+     */
+    public static final int MY_CONST4 = 345678;
+}
diff --git a/src/xdocs/config_annotation.xml b/src/xdocs/config_annotation.xml
index e97e405451..0176a311c2 100644
--- a/src/xdocs/config_annotation.xml
+++ b/src/xdocs/config_annotation.xml
@@ -313,9 +313,45 @@ public String getNameIfPresent() { ... }
             present and the @deprecated Javadoc tag is present when
             either is present.</p>
       </subsection>
+      <subsection name="Properties">
+        <table>
+          <tr>
+            <th>name</th>
+            <th>description</th>
+            <th>type</th>
+            <th>default value</th>
+          </tr>
+          <tr>
+            <td>skipNoJavadoc</td>
+            <td>When this property is set to true check ignore cases
+            when JavaDoc is missing, but still warns when JavaDoc is
+            present but either @deprecated is missing from JavaDoc or
+            @deprecated is missing from the element.
+            </td>
+            <td><a href="property_types.html#boolean">boolean</a></td>
+            <td>false</td>
+          </tr>
+        </table>
+      </subsection>
       <subsection name="Examples">
         <p> To configure the check:</p>
-        <source> &lt;module name=&quot;MissingDeprecated&quot;/&gt;
+        <source>
+&lt;module name=&quot;MissingDeprecated&quot;/&gt;
+        </source>
+        <p> In addition you can configure this check with skipNoJavadoc option: </p>
+        <source>
+&lt;module name=&quot;MissingDeprecated&quot;&gt;
+    &lt;property name="skipNoJavadoc" value="true" /&gt;
+&lt;/module&gt;
+        </source>
+        <p>Examples of validating source code with skipNoJavadoc:</p>
+        <source>
+@deprecated
+public static final int MY_CONST = 123456; // no violation
+
+/** This javadoc is missing deprecated tag. */
+@deprecated
+public static final int COUNTER = 10; // violation as javadoc exists
         </source>
       </subsection>
 
diff --git a/src/xdocs/config_blocks.xml b/src/xdocs/config_blocks.xml
index a36913e07e..0baf3edfca 100644
--- a/src/xdocs/config_blocks.xml
+++ b/src/xdocs/config_blocks.xml
@@ -471,7 +471,8 @@ try {
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">LITERAL_ELSE</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">LITERAL_FOR</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_INIT">STATIC_INIT</a>,
-              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#OBJBLOCK">OBJBLOCK</a>.
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#OBJBLOCK">OBJBLOCK</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">LAMBDA</a>.
             </td>
 
             <td>
@@ -493,7 +494,8 @@ try {
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">LITERAL_ELSE</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">LITERAL_FOR</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_INIT">STATIC_INIT</a>,
-              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#OBJBLOCK">OBJBLOCK</a>.
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#OBJBLOCK">OBJBLOCK</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">LAMBDA</a>.
             </td>
           </tr>
         </table>
diff --git a/src/xdocs/extending.xml b/src/xdocs/extending.xml
index 3cfdeeb49b..3e1580ccb7 100644
--- a/src/xdocs/extending.xml
+++ b/src/xdocs/extending.xml
@@ -21,7 +21,8 @@
       </p>
 
       <ul>
-        <li><a href="writingchecks.html">Writing checks</a>;</li>
+        <li><a href="writingchecks.html">Writing Checks</a>;</li>
+        <li><a href="writingjavadocchecks.html">Writing Javadoc Checks</a>;</li>
         <li><a href="writingfilters.html">Writing filters</a>;</li>
         <li><a href="writinglisteners.html">Writing listeners</a>.</li>
       </ul>
diff --git a/src/xdocs/writingjavadocchecks.xml.vm b/src/xdocs/writingjavadocchecks.xml.vm
new file mode 100644
index 0000000000..148119a271
--- /dev/null
+++ b/src/xdocs/writingjavadocchecks.xml.vm
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<document xmlns="http://maven.apache.org/XDOC/2.0"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
+
+  <head>
+    <title>Writing Javadoc Checks</title>
+    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"/>
+    <script type="text/javascript" src="js/anchors.js"/>
+    <script type="text/javascript" src="js/google-analytics.js"/>
+    <link rel="icon" href="images/favicon.png" type="image/x-icon" />
+    <link rel="shortcut icon" href="images/favicon.ico" type="image/ico" />
+  </head>
+
+  <body>
+    <section name="Content">
+      <macro name="toc">
+        <param name="fromDepth" value="1"/>
+        <param name="toDepth" value="1"/>
+      </macro>
+    </section>
+
+    <section name="Overview">
+    </section>
+
+    <section name="Difference between Java Grammar and Javadoc comments Grammar">
+    </section>
+
+    <section name="Javadoc tree structure">
+    </section>
+
+    <section name="Token types">
+    </section>
+
+    <section name="Checkstyle SDK GUI">
+    </section>
+
+    <section name="Access Java AST from Javadoc Check">
+    </section>
+
+    <section name="Integrating new Javadoc Check">
+    </section>
+
+  </body>
+</document>
+
