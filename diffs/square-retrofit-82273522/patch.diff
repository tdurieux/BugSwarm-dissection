diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
index 4bcbce40b..238ec6931 100644
--- a/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
@@ -89,7 +89,7 @@
           + "    for method Service.wrongClass");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for class java.lang.String. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory\n"
+              + " * retrofit.BuiltInConverters\n"
               + " * retrofit.ProtoConverterFactory");
     }
   }
@@ -106,7 +106,7 @@
           + "    for method Service.wrongType");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for java.util.List<java.lang.String>. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory\n"
+              + " * retrofit.BuiltInConverters\n"
               + " * retrofit.ProtoConverterFactory");
     }
   }
diff --git a/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
index 9019654ec..e3c27b535 100644
--- a/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
+++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
@@ -88,7 +88,7 @@
           + "    for method Service.wrongClass");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for class java.lang.String. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory\n"
+              + " * retrofit.BuiltInConverters\n"
               + " * retrofit.WireConverterFactory");
     }
   }
@@ -105,7 +105,7 @@
           + "    for method Service.wrongType");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for java.util.List<java.lang.String>. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory\n"
+              + " * retrofit.BuiltInConverters\n"
               + " * retrofit.WireConverterFactory");
     }
   }
diff --git a/retrofit/src/main/java/retrofit/BuiltInConverterFactory.java b/retrofit/src/main/java/retrofit/BuiltInConverters.java
similarity index 56%
rename from retrofit/src/main/java/retrofit/BuiltInConverterFactory.java
rename to retrofit/src/main/java/retrofit/BuiltInConverters.java
index 66ba26488..be2f81d5e 100644
--- a/retrofit/src/main/java/retrofit/BuiltInConverterFactory.java
+++ b/retrofit/src/main/java/retrofit/BuiltInConverters.java
@@ -17,11 +17,14 @@
 
 import com.squareup.okhttp.RequestBody;
 import com.squareup.okhttp.ResponseBody;
+import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import retrofit.http.Streaming;
 
-final class BuiltInConverterFactory extends Converter.Factory {
+import static retrofit.Utils.closeQuietly;
+
+final class BuiltInConverters extends Converter.Factory {
   @Override
   public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) {
     if (ResponseBody.class.equals(type)) {
@@ -40,4 +43,38 @@
     }
     return null;
   }
+
+  static final class VoidConverter implements Converter<ResponseBody, Void> {
+    @Override public Void convert(ResponseBody value) throws IOException {
+      value.close();
+      return null;
+    }
+  }
+
+  static final class OkHttpRequestBodyConverter implements Converter<RequestBody, RequestBody> {
+    @Override public RequestBody convert(RequestBody value) throws IOException {
+      return value;
+    }
+  }
+
+  static final class OkHttpResponseBodyConverter implements Converter<ResponseBody, ResponseBody> {
+    private final boolean isStreaming;
+
+    OkHttpResponseBodyConverter(boolean isStreaming) {
+      this.isStreaming = isStreaming;
+    }
+
+    @Override public ResponseBody convert(ResponseBody value) throws IOException {
+      if (isStreaming) {
+        return value;
+      }
+
+      // Buffer the entire body to avoid future I/O.
+      try {
+        return Utils.readBodyToBytesIfNecessary(value);
+      } finally {
+        closeQuietly(value);
+      }
+    }
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/OkHttpRequestBodyConverter.java b/retrofit/src/main/java/retrofit/OkHttpRequestBodyConverter.java
deleted file mode 100644
index b22ab20e2..000000000
--- a/retrofit/src/main/java/retrofit/OkHttpRequestBodyConverter.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package retrofit;
-
-import com.squareup.okhttp.RequestBody;
-import java.io.IOException;
-
-final class OkHttpRequestBodyConverter implements Converter<RequestBody, RequestBody> {
-  @Override public RequestBody convert(RequestBody value) throws IOException {
-    return value;
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/OkHttpResponseBodyConverter.java b/retrofit/src/main/java/retrofit/OkHttpResponseBodyConverter.java
deleted file mode 100644
index c324c4c8e..000000000
--- a/retrofit/src/main/java/retrofit/OkHttpResponseBodyConverter.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package retrofit;
-
-import com.squareup.okhttp.ResponseBody;
-import java.io.IOException;
-
-import static retrofit.Utils.closeQuietly;
-
-final class OkHttpResponseBodyConverter implements Converter<ResponseBody, ResponseBody> {
-  private final boolean isStreaming;
-
-  OkHttpResponseBodyConverter(boolean isStreaming) {
-    this.isStreaming = isStreaming;
-  }
-
-  @Override public ResponseBody convert(ResponseBody value) throws IOException {
-    if (isStreaming) {
-      return value;
-    }
-
-    // Buffer the entire body to avoid future I/O.
-    try {
-      return Utils.readBodyToBytesIfNecessary(value);
-    } finally {
-      closeQuietly(value);
-    }
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/Retrofit.java b/retrofit/src/main/java/retrofit/Retrofit.java
index 7714f1adf..f9024b5a7 100644
--- a/retrofit/src/main/java/retrofit/Retrofit.java
+++ b/retrofit/src/main/java/retrofit/Retrofit.java
@@ -287,7 +287,7 @@ public Executor callbackExecutor() {
     public Builder() {
       // Add the built-in converter factory first. This prevents overriding its behavior but also
       // ensures correct behavior when using converters that consume all types.
-      converterFactories.add(new BuiltInConverterFactory());
+      converterFactories.add(new BuiltInConverters());
     }
 
     /** The HTTP client used for requests. */
diff --git a/retrofit/src/main/java/retrofit/VoidConverter.java b/retrofit/src/main/java/retrofit/VoidConverter.java
deleted file mode 100644
index 09fa3f229..000000000
--- a/retrofit/src/main/java/retrofit/VoidConverter.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (C) 2015 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package retrofit;
-
-import com.squareup.okhttp.ResponseBody;
-import java.io.IOException;
-
-final class VoidConverter implements Converter<ResponseBody, Void> {
-  @Override public Void convert(ResponseBody value) throws IOException {
-    value.close();
-    return null;
-  }
-}
diff --git a/retrofit/src/test/java/retrofit/RetrofitTest.java b/retrofit/src/test/java/retrofit/RetrofitTest.java
index d88d7fb93..b129d735f 100644
--- a/retrofit/src/test/java/retrofit/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit/RetrofitTest.java
@@ -292,7 +292,7 @@
               + "    for method CallMethod.disallowed");
       assertThat(e.getCause()).hasMessage(
           "Could not locate RequestBody converter for class java.lang.String. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory");
+              + " * retrofit.BuiltInConverters");
     }
   }
 
@@ -312,7 +312,7 @@
           + "    for method CallMethod.disallowed");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for class java.lang.String. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory");
+              + " * retrofit.BuiltInConverters");
     }
   }
 
@@ -331,7 +331,7 @@
           + "    for method CallMethod.disallowed");
       assertThat(e.getCause()).hasMessage(
           "Could not locate ResponseBody converter for class java.lang.String. Tried:\n"
-              + " * retrofit.BuiltInConverterFactory\n"
+              + " * retrofit.BuiltInConverters\n"
               + " * retrofit.RetrofitTest$1");
     }
   }
@@ -527,7 +527,7 @@
         .build();
     List<Converter.Factory> converterFactories = retrofit.converterFactories();
     assertThat(converterFactories).hasSize(1);
-    assertThat(converterFactories.get(0)).isInstanceOf(BuiltInConverterFactory.class);
+    assertThat(converterFactories.get(0)).isInstanceOf(BuiltInConverters.class);
   }
 
   @Test public void requestConverterFactoryQueried() {
