diff --git a/pom.xml b/pom.xml
index 014a47b2ed..8712c5e9e0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1643,7 +1643,8 @@
                 <param>com.puppycrawl.tools.checkstyle.checks.FinalParametersCheck</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck</param>
-                <param>com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder</param>
+                <!-- this class will be rewritten in future releases -->
+                <!--<param>com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder</param>-->
                 <param>com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.TranslationCheck</param>
@@ -1667,7 +1668,7 @@
                 <param>com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheckTest</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.UpperEllCheckTest</param>
               </targetTests>
-              <mutationThreshold>96</mutationThreshold>
+              <mutationThreshold>100</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
diff --git a/shippable.yml b/shippable.yml
index 660e020c73..89ba2aa8d7 100644
--- a/shippable.yml
+++ b/shippable.yml
@@ -14,11 +14,11 @@ env:
     - PROFILE="-Ppitest-checks-regexp,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-sizes,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-whitespace,no-validations"
-    - PROFILE="-Ppitest-checks-misc,no-validations"
+    - PROFILE="-Ppitest-checks-misc,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-blocks,no-validations"
     - PROFILE="-Ppitest-checks-coding,no-validations"
     - PROFILE="-Ppitest-checks-design,no-validations"; POST_ACTION=check_survived
-    - PROFILE="-Ppitest-checks-annotation,no-validations"
+    - PROFILE="-Ppitest-checks-annotation,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-header,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-modifier,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-naming,no-validations"; POST_ACTION=check_survived
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 6e7cbc7cef..c026dfbc95 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -47,7 +47,6 @@
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
-import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
@@ -325,11 +324,8 @@ private void checkExistenceOfRequiredTranslations(ResourceBundle bundle) {
      * @param fileName file name.
      */
     private void logMissingTranslation(String filePath, String fileName) {
-        final MessageDispatcher dispatcher = getMessageDispatcher();
-        dispatcher.fireFileStarted(filePath);
         log(0, MSG_KEY_MISSING_TRANSLATION_FILE, fileName);
         fireErrors(filePath);
-        dispatcher.fireFileFinished(filePath);
     }
 
     /**
@@ -434,7 +430,7 @@ private static String getPath(String fileNameWithPath) {
      */
     private void checkTranslationKeys(ResourceBundle bundle) {
         final Set<File> filesInBundle = bundle.getFiles();
-        if (filesInBundle.size() > 1) {
+        if (filesInBundle.size() >= 2) {
             // build a map from files to the keys they contain
             final Set<String> allTranslationKeys = new HashSet<>();
             final SetMultimap<File, String> filesAssociatedWithKeys = HashMultimap.create();
@@ -456,9 +452,6 @@ private void checkTranslationKeys(ResourceBundle bundle) {
     private void checkFilesForConsistencyRegardingTheirKeys(SetMultimap<File, String> fileKeys,
                                                             Set<String> keysThatMustExist) {
         for (File currentFile : fileKeys.keySet()) {
-            final MessageDispatcher dispatcher = getMessageDispatcher();
-            final String path = currentFile.getPath();
-            dispatcher.fireFileStarted(path);
             final Set<String> currentFileKeys = fileKeys.get(currentFile);
             final Set<String> missingKeys = keysThatMustExist.stream()
                 .filter(e -> !currentFileKeys.contains(e)).collect(Collectors.toSet());
@@ -467,8 +460,7 @@ private void checkFilesForConsistencyRegardingTheirKeys(SetMultimap<File, String
                     log(0, MSG_KEY, key);
                 }
             }
-            fireErrors(path);
-            dispatcher.fireFileFinished(path);
+            fireErrors(currentFile.getPath());
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index 5fc12c9c8b..9a33764603 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -94,9 +94,6 @@ public void beginTree(DetailAST rootAST) {
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF) {
-            if (classDepth == 1) {
-                currentClass = null;
-            }
             classDepth--;
         }
     }
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4 b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
index 52b6e2f3f5..d0970e1752 100644
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
@@ -889,8 +889,8 @@ javadocTag: AUTHOR_LITERAL (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
       | RETURN_LITERAL (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
-      | SEE_LITERAL (WS | NEWLINE)* reference? (STRING | htmlElement)* (WS | NEWLINE)*
-          ((WS | NEWLINE) description)?
+      | SEE_LITERAL (WS | NEWLINE | {!isNextJavadocTag()}? LEADING_ASTERISK)* reference?
+          (STRING | htmlElement)* (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
       | SERIAL_LITERAL (WS | NEWLINE)*
           ((WS | NEWLINE) description | LITERAL_INCLUDE | LITERAL_EXCLUDE)? (WS | NEWLINE)*
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
index ffa9b7cf13..ca7be3ce60 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
@@ -23,16 +23,25 @@
 import static com.puppycrawl.tools.checkstyle.checks.TranslationCheck.MSG_KEY_MISSING_TRANSLATION_FILE;
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.endsWith;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
+import static org.powermock.api.mockito.PowerMockito.doNothing;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
+import java.util.Collection;
 import java.util.Set;
 import java.util.SortedSet;
 
@@ -41,17 +50,23 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
 
+import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
+import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
+import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
+import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
-@RunWith(MockitoJUnitRunner.class)
+@RunWith(PowerMockRunner.class)
+@PrepareForTest(Closeables.class)
 public class TranslationCheckTest extends AbstractModuleTestSupport {
     @Captor
     private ArgumentCaptor<SortedSet<LocalizedMessage>> captor;
@@ -78,6 +93,43 @@ public void testTranslation() throws Exception {
             expected);
     }
 
+    /**
+     * Even when we pass several files to AbstractModuleTestSupport#verify,
+     * the check processes it during one run, so we cannot reproduce situation
+     * when TranslationCheck#beginProcessing called several times during single run.
+     * So, we have to use reflection to check this particular case.
+     *
+     * @throws Exception when code tested throws exception
+     */
+    @Test
+    @SuppressWarnings("unchecked")
+    public void testStateIsCleared() throws Exception {
+        final File fileToProcess = new File(getPath("messages_test_de.properties"));
+        final String charset = StandardCharsets.UTF_8.name();
+        final TranslationCheck check = new TranslationCheck();
+        check.beginProcessing(charset);
+        check.processFiltered(fileToProcess, new FileText(fileToProcess, charset));
+        check.beginProcessing(charset);
+        final Field field = check.getClass().getDeclaredField("filesToProcess");
+        field.setAccessible(true);
+
+        assertTrue("Stateful field is not cleared on beginProcessiong",
+            ((Collection<File>) field.get(check)).isEmpty());
+    }
+
+    @Test
+    public void testFileExtension() throws Exception {
+        final Configuration checkConfig = createModuleConfig(TranslationCheck.class);
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final File[] propertyFiles = {
+            new File(getPath("messages_test_de.txt")),
+        };
+        verify(createChecker(checkConfig),
+            propertyFiles,
+            getPath("messages_test_de.txt"),
+            expected);
+    }
+
     @Test
     public void testOnePropertyFileSet() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
@@ -102,6 +154,8 @@ public void testLogIoExceptionFileNotFound() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
         check.configure(checkConfig);
         final Checker checker = createChecker(checkConfig);
+        final SeverityLevelCounter counter = new SeverityLevelCounter(SeverityLevel.ERROR);
+        checker.addListener(counter);
         check.setMessageDispatcher(checker);
 
         final Method loadKeys =
@@ -109,6 +163,7 @@ public void testLogIoExceptionFileNotFound() throws Exception {
         loadKeys.setAccessible(true);
         final Set<String> keys = (Set<String>) loadKeys.invoke(check, new File(""));
         assertTrue("Translation keys should be empty when File is not found", keys.isEmpty());
+        assertEquals("Invalid error count", 1, counter.getCount());
     }
 
     @Test
@@ -276,6 +331,36 @@ public void testTranslationFileWithLanguageCountryVariantArePresent() throws Exc
             expected);
     }
 
+    /**
+     * Pitest requires all closes of streams and readers to be verified. Using PowerMock
+     * is almost only posibility to check it without rewriting production code.
+     *
+     * @throws Exception when code tested throws some exception
+     */
+    @Test
+    public void testResourcesAreClosed() throws Exception {
+        mockStatic(Closeables.class);
+        doNothing().when(Closeables.class);
+        Closeables.closeQuietly(any(InputStream.class));
+
+        final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
+        checkConfig.addAttribute("requiredTranslations", "es");
+
+        final File[] propertyFiles = {
+            new File(getPath("messages_home.properties")),
+            new File(getPath("messages_home_es_US.properties")),
+            };
+
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(
+            createChecker(checkConfig),
+            propertyFiles,
+            getPath(""),
+            expected);
+        verifyStatic(times(2));
+        Closeables.closeQuietly(any(FileInputStream.class));
+    }
+
     @Test
     public void testBaseNameOption() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
index 2b724997b2..e2f8990687 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
@@ -305,4 +305,10 @@ public void testHtmlVoidElementWbr() throws Exception {
         verifyJavadocTree(getHtmlPath("expectedHtmlVoidElementWbrAst.txt"),
                 getHtmlPath("InputHtmlVoidElementWbr.javadoc"));
     }
+
+    @Test
+    public void testLeadingAsteriskAfterSeeTag() throws Exception {
+        verifyJavadocTree(getDocPath("expectedLeadingAsteriskAfterSeeTagAst.txt"),
+                getDocPath("InputLeadingAsteriskAfterSeeTag.javadoc"));
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors.properties b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors.properties
new file mode 100644
index 0000000000..074b0afab6
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors.properties
@@ -0,0 +1,2 @@
+someKey=Some key
+anotherKey=one more
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors_de.properties b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors_de.properties
new file mode 100644
index 0000000000..9bc87ab8d5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_check_fire_errors_de.properties
@@ -0,0 +1 @@
+someKey=einige Schlüssel
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_test_de.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_test_de.txt
new file mode 100644
index 0000000000..9a7ae0711e
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/translation/messages_test_de.txt
@@ -0,0 +1,12 @@
+# input file for TranslationCheck
+
+# a key that is available in all translations
+hello=Hallo
+
+# whitespace at end of key should be trimmed before comparing.
+# the german translation does not contain whitespace, no error should
+# be reported here
+cancel=Abbrechen
+
+# a key that is missing in german translation
+#only.english=only english
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc
new file mode 100644
index 0000000000..50aa9ffa50
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc
@@ -0,0 +1,6 @@
+* @see
+* "string"
+
+* @see
+* package.Class#member()
+* Description
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt
new file mode 100644
index 0000000000..42ce83f00d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt
@@ -0,0 +1,32 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK -> * [0:0]
+|--WS ->   [0:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:2]
+|   |--SEE_LITERAL -> @see [0:2]
+|   |--NEWLINE -> \n [0:6]
+|   |--LEADING_ASTERISK -> * [1:0]
+|   |--WS ->   [1:1]
+|   |--STRING -> "string" [1:2]
+|   |--NEWLINE -> \n [1:10]
+|   `--NEWLINE -> \n [2:0]
+|--LEADING_ASTERISK -> * [3:0]
+|--WS ->   [3:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:2]
+|   |--SEE_LITERAL -> @see [3:2]
+|   |--NEWLINE -> \n [3:6]
+|   |--LEADING_ASTERISK -> * [4:0]
+|   |--WS ->   [4:1]
+|   |--REFERENCE -> REFERENCE [4:2]
+|   |   |--PACKAGE -> package [4:2]
+|   |   |--DOT -> . [4:9]
+|   |   |--CLASS -> Class [4:10]
+|   |   |--HASH -> # [4:15]
+|   |   |--MEMBER -> member [4:16]
+|   |   `--PARAMETERS -> PARAMETERS [4:22]
+|   |       |--LEFT_BRACE -> ( [4:22]
+|   |       `--RIGHT_BRACE -> ) [4:23]
+|   |--NEWLINE -> \n [4:24]
+|   `--DESCRIPTION -> DESCRIPTION [5:0]
+|       |--LEADING_ASTERISK -> * [5:0]
+|       `--TEXT ->  Description [5:1]
+`--EOF -> <EOF> [5:13]
