diff --git a/build.gradle b/build.gradle
index bb91f2d9..1cd0f43d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ apply plugin: 'signing'
 
 
 group 'com.backendless'
-version '3.0.21-snapshot'
+version '3.0.23-snapshot'
 archivesBaseName='backendless'
 
 
@@ -212,7 +212,7 @@ dependencies {
     compile( group: "com.backendless", name: "commons", version: "3.0.21", changing: true) {
         exclude group: 'com.fasterxml.jackson.core'
     }
-    compile( group: "weborb", name: "weborbclient", version: "5.1.0.206", changing: true)
+    compile( group: "weborb", name: "weborbclient", version: "5.1.0.208", changing: true)
 
 }
 apply plugin: 'java'
diff --git a/out/backendless.jar b/out/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/out/backendless.jar and b/out/backendless.jar differ
diff --git a/samples/DataService/tododemo/libs/backendless.jar b/samples/DataService/tododemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/DataService/tododemo/libs/backendless.jar and b/samples/DataService/tododemo/libs/backendless.jar differ
diff --git a/samples/EndlessMatchMaker/libs/backendless.jar b/samples/EndlessMatchMaker/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/EndlessMatchMaker/libs/backendless.jar and b/samples/EndlessMatchMaker/libs/backendless.jar differ
diff --git a/samples/EndlessTagging/libs/backendless.jar b/samples/EndlessTagging/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/EndlessTagging/libs/backendless.jar and b/samples/EndlessTagging/libs/backendless.jar differ
diff --git a/samples/FenceDemo/libs/backendless.jar b/samples/FenceDemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/FenceDemo/libs/backendless.jar and b/samples/FenceDemo/libs/backendless.jar differ
diff --git a/samples/GeoService/geodemo/libs/backendless.jar b/samples/GeoService/geodemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/GeoService/geodemo/libs/backendless.jar and b/samples/GeoService/geodemo/libs/backendless.jar differ
diff --git a/samples/MessagingService/pubsubdemo/libs/backendless.jar b/samples/MessagingService/pubsubdemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/MessagingService/pubsubdemo/libs/backendless.jar and b/samples/MessagingService/pubsubdemo/libs/backendless.jar differ
diff --git a/samples/MessagingService/pushdemo/pushdemo/proguard-rules.pro b/samples/MessagingService/pushdemo/pushdemo/proguard-rules.pro
index 44631f0f..f2fe1559 100644
--- a/samples/MessagingService/pushdemo/pushdemo/proguard-rules.pro
+++ b/samples/MessagingService/pushdemo/pushdemo/proguard-rules.pro
@@ -1,8 +1,11 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
 # Add project specific ProGuard rules here.
 # By default, the flags in this file are appended to flags specified
-# in /home/dzidzoiev/dev/android-sdk-linux/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
 #
 # For more details, see
 #   http://developer.android.com/guide/developing/tools/proguard.html
diff --git a/samples/MessagingService/pushdemo/pushdemo/src/main/AndroidManifest.xml b/samples/MessagingService/pushdemo/pushdemo/src/main/AndroidManifest.xml
index eb449d5f..970f223e 100644
--- a/samples/MessagingService/pushdemo/pushdemo/src/main/AndroidManifest.xml
+++ b/samples/MessagingService/pushdemo/pushdemo/src/main/AndroidManifest.xml
@@ -48,7 +48,7 @@
                   android:screenOrientation="portrait"/>
 
         <receiver
-                android:name="com.backendless.push.BackendlessBroadcastReceiver"
+                android:name=".MyPushBroadcastReceiver"
                 android:permission="com.google.android.c2dm.permission.SEND" >
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE"/>
@@ -57,6 +57,6 @@
                 <category android:name="com.backendless.examples.messagingservice.pushdemo"/>
             </intent-filter>
         </receiver>
-        <service android:name=".PushService" />
+        <service android:name=".MyPushService" />
     </application>
 </manifest> 
diff --git a/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyBackendlessBroadcastReceiver.java b/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushBroadcastReceiver.java
similarity index 70%
rename from samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyBackendlessBroadcastReceiver.java
rename to samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushBroadcastReceiver.java
index 5319b668..04d46c8a 100644
--- a/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyBackendlessBroadcastReceiver.java
+++ b/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushBroadcastReceiver.java
@@ -3,11 +3,11 @@
 import com.backendless.push.BackendlessBroadcastReceiver;
 import com.backendless.push.BackendlessPushService;
 
-public class MyBackendlessBroadcastReceiver extends BackendlessBroadcastReceiver
+public class MyPushBroadcastReceiver extends BackendlessBroadcastReceiver
 {
   @Override
   public Class<? extends BackendlessPushService> getServiceClass()
   {
-    return PushService.class;
+    return MyPushService.class;
   }
 }
diff --git a/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/PushService.java b/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushService.java
similarity index 93%
rename from samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/PushService.java
rename to samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushService.java
index 64c52efe..1dfcacbc 100644
--- a/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/PushService.java
+++ b/samples/MessagingService/pushdemo/pushdemo/src/main/java/com/backendless/examples/messagingservice/pushdemo/MyPushService.java
@@ -6,7 +6,7 @@
 import com.backendless.messaging.PublishOptions;
 import com.backendless.push.BackendlessPushService;
 
-public class PushService extends BackendlessPushService
+public class MyPushService extends BackendlessPushService
 {
   @Override
   public boolean onMessage( Context context, Intent intent )
diff --git a/samples/UserService/FacebookSDKSamples/login/libs/backendless.jar b/samples/UserService/FacebookSDKSamples/login/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/UserService/FacebookSDKSamples/login/libs/backendless.jar and b/samples/UserService/FacebookSDKSamples/login/libs/backendless.jar differ
diff --git a/samples/UserService/rolesdemo/libs/backendless.jar b/samples/UserService/rolesdemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/UserService/rolesdemo/libs/backendless.jar and b/samples/UserService/rolesdemo/libs/backendless.jar differ
diff --git a/samples/UserService/userservicedemo/libs/backendless.jar b/samples/UserService/userservicedemo/libs/backendless.jar
index c6fe24ca..c515afd8 100644
Binary files a/samples/UserService/userservicedemo/libs/backendless.jar and b/samples/UserService/userservicedemo/libs/backendless.jar differ
diff --git a/src/com/backendless/BackendlessUser.java b/src/com/backendless/BackendlessUser.java
index d6969cd1..aa814425 100644
--- a/src/com/backendless/BackendlessUser.java
+++ b/src/com/backendless/BackendlessUser.java
@@ -24,7 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 
-public class BackendlessUser implements Serializable
+public final class BackendlessUser implements Serializable
 {
   private final Map<String, Object> properties = new HashMap<String, Object>();
 
diff --git a/src/com/backendless/Persistence.java b/src/com/backendless/Persistence.java
index 13273bae..6b8df845 100644
--- a/src/com/backendless/Persistence.java
+++ b/src/com/backendless/Persistence.java
@@ -29,6 +29,7 @@
 import com.backendless.persistence.MapDrivenDataStore;
 import com.backendless.persistence.QueryOptions;
 import com.backendless.property.ObjectProperty;
+import com.backendless.utils.JSONObjectConverter;
 import com.backendless.utils.ReflectionUtil;
 import com.backendless.utils.ResponderHelper;
 import weborb.client.IChainedResponder;
@@ -40,9 +41,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 public final class Persistence
 {
@@ -530,6 +529,12 @@ public void handleFault( BackendlessFault fault )
 
       for( Field declaredField : declaredFields )
       {
+        if( declaredField.getName().equals( DEFAULT_META_FIELD ) )
+        {
+          mergeRelatedObjectsFromMeta( loadedRelations, entity );
+          continue;
+        }
+
         if( !relations.contains( declaredField.getName() ) )
           continue;
 
@@ -551,6 +556,70 @@ public void handleFault( BackendlessFault fault )
     }
   }
 
+  private <E> void mergeRelatedObjectsFromMeta( E loadedRelations, E entity )
+  {
+    try
+    {
+      Field metaField = loadedRelations.getClass().getDeclaredField(  DEFAULT_META_FIELD );
+      metaField.setAccessible( true );
+      String updatedMeta = (String) metaField.get( loadedRelations );
+      String sourceMeta = (String) metaField.get( entity );
+
+      HashMap sourceJSONObject = JSONObjectConverter.getJSONObject( sourceMeta );
+      HashMap updatedJSONObject = JSONObjectConverter.getJSONObject( updatedMeta );
+
+      HashMap sourceRelatedObjects = (HashMap) sourceJSONObject.get( "relatedObjects" );
+      HashMap updatedRelatedObjects = (HashMap) updatedJSONObject.get( "relatedObjects" );
+
+      if( sourceRelatedObjects == null || sourceRelatedObjects.size() == 0 )
+      {
+        sourceJSONObject.put( "relatedObjects", updatedRelatedObjects );
+      }
+      else
+      {
+        String[] updatedMenuItems = (String[]) updatedRelatedObjects.get( "menuItems" );
+        sourceRelatedObjects.put( "menuItems", updatedMenuItems );
+        sourceJSONObject.put( "relatedObjects", sourceRelatedObjects );
+      }
+
+      sourceMeta = JSONObjectConverter.toJSONString( sourceJSONObject );
+      metaField.set( entity, sourceMeta );
+      /*
+      JSONObject updatedMetaObject = new JSONObject( updatedMeta );
+      JSONObject sourceMetaObject = new JSONObject( sourceMeta );
+      JSONObject updatedRelatedObjects = updatedMetaObject.optJSONObject( "relatedObjects" );
+      JSONObject sourceRelatedObjects = sourceMetaObject.optJSONObject( "relatedObjects" );
+
+      if( sourceRelatedObjects == null || sourceRelatedObjects.length() == 0 )
+      {
+        sourceMetaObject.put( "relatedObjects", updatedRelatedObjects );
+      }
+      else
+      {
+        Iterator<String> updatedRelatedObjectsIterator = updatedRelatedObjects.keys();
+
+        while( updatedRelatedObjectsIterator.hasNext() )
+        {
+          String relatedProperty = updatedRelatedObjectsIterator.next();
+          sourceRelatedObjects.put( relatedProperty, updatedRelatedObjects.get( relatedProperty ) );
+        }
+
+        sourceMetaObject.put( "relatedObjects", sourceRelatedObjects );
+      }
+
+      metaField.set( entity, sourceMetaObject.toString() );
+      */
+    }
+    catch( NoSuchFieldException e )
+    {
+      // should not happen
+    }
+    catch( IllegalAccessException e )
+    {
+      // should not happen
+    }
+  }
+
   public List<ObjectProperty> describe( String classSimpleName ) throws BackendlessException
   {
     if( classSimpleName == null || classSimpleName.equals( "" ) )
diff --git a/src/com/backendless/persistence/local/CodeRunnerUserIdStorage.java b/src/com/backendless/persistence/local/CodeRunnerUserIdStorage.java
index 035ad78c..d2c5b236 100644
--- a/src/com/backendless/persistence/local/CodeRunnerUserIdStorage.java
+++ b/src/com/backendless/persistence/local/CodeRunnerUserIdStorage.java
@@ -18,6 +18,8 @@
 
 package com.backendless.persistence.local;
 
+import com.backendless.servercode.InvocationContext;
+
 class CodeRunnerUserIdStorage implements IStorage<String>
 {
   private static final CodeRunnerUserIdStorage instance = new CodeRunnerUserIdStorage();
@@ -37,12 +39,12 @@ private CodeRunnerUserIdStorage()
   @Override
   public String get()
   {
-    return userToken;
+    return InvocationContext.getUserId();
   }
 
   @Override
   public void set( String value )
   {
-    userToken = value;
+    InvocationContext.setUserId( value );
   }
 }
diff --git a/src/com/backendless/persistence/local/CodeRunnerUserTokenStorage.java b/src/com/backendless/persistence/local/CodeRunnerUserTokenStorage.java
index b5a96e81..ec7dd7f6 100644
--- a/src/com/backendless/persistence/local/CodeRunnerUserTokenStorage.java
+++ b/src/com/backendless/persistence/local/CodeRunnerUserTokenStorage.java
@@ -18,11 +18,11 @@
 
 package com.backendless.persistence.local;
 
+import com.backendless.servercode.InvocationContext;
+
 class CodeRunnerUserTokenStorage implements IStorage<String>
 {
   private static final CodeRunnerUserTokenStorage instance = new CodeRunnerUserTokenStorage();
-  private String userToken;
-
 
   public static CodeRunnerUserTokenStorage instance()
   {
@@ -37,12 +37,12 @@ private CodeRunnerUserTokenStorage()
   @Override
   public String get()
   {
-    return userToken;
+    return InvocationContext.getUserToken();
   }
 
   @Override
   public void set( String value )
   {
-    userToken = value;
+    InvocationContext.setUserToken( value );
   }
 }
diff --git a/src/com/backendless/push/BackendlessBroadcastReceiver.java b/src/com/backendless/push/BackendlessBroadcastReceiver.java
index 70e8a66d..e270ca9f 100644
--- a/src/com/backendless/push/BackendlessBroadcastReceiver.java
+++ b/src/com/backendless/push/BackendlessBroadcastReceiver.java
@@ -26,6 +26,7 @@
 import android.content.pm.PackageManager;
 import android.os.PowerManager;
 import android.util.Log;
+import com.backendless.exceptions.BackendlessFault;
 
 import java.util.HashMap;
 import java.util.List;
@@ -33,7 +34,6 @@
 
 public class BackendlessBroadcastReceiver extends BroadcastReceiver implements PushReceiverCallback
 {
-  private static final String TAG = "BackendlessBroadcastReceiver";
   private static final String EXTRA_WAKE_LOCK_ID = "com.backendless.wakelockid";
   static final String EXTRA_MESSAGE_ID = "com.backendless.messageid";
   private static final Map<Integer, PowerManager.WakeLock> activeWakeLocks = new HashMap<>();
@@ -80,7 +80,7 @@ public boolean onMessage( Context context, Intent intent )
   @Deprecated
   public void onError( Context context, String message )
   {
-    throw new RuntimeException( message );
+    Log.e( BackendlessPushService.TAG, "Error processing push message: " + message );
   }
 
   @Override
@@ -177,7 +177,7 @@ public static boolean completeWakefulIntent( Intent intent )
         }
         else
         {
-          Log.w( TAG, "No active wake lock id #" + id );
+          Log.w( BackendlessPushService.TAG, "No active wake lock id #" + id );
           return true;
         }
       }
diff --git a/src/com/backendless/push/BackendlessPushService.java b/src/com/backendless/push/BackendlessPushService.java
index a0f99dd0..82e6c778 100644
--- a/src/com/backendless/push/BackendlessPushService.java
+++ b/src/com/backendless/push/BackendlessPushService.java
@@ -7,6 +7,7 @@
 import android.os.SystemClock;
 import android.util.Log;
 import android.widget.RemoteViews;
+import android.widget.Toast;
 import com.backendless.Backendless;
 import com.backendless.async.callback.AsyncCallback;
 import com.backendless.exceptions.BackendlessFault;
@@ -20,7 +21,9 @@
 
 public class BackendlessPushService extends IntentService implements PushReceiverCallback
 {
-  private static final String TAG = "BackendlessPushService";
+  public static final String DEFAULT_SOUND_FLAG = "DEFAULT";
+
+  static final String TAG = "com.backendless.push.BackendlessPushService";
   private static final Random random = new Random();
 
   private static final int MAX_BACKOFF_MS = (int) TimeUnit.SECONDS.toMillis( 3600 );
@@ -89,7 +92,8 @@ public boolean onMessage( Context context, Intent intent )
 
   public void onError( Context context, String message )
   {
-    throw new RuntimeException( message );
+    Log.e( TAG, "Error processing push message: " + message );
+    Toast.makeText( context, "Error processing push message: " + message, Toast.LENGTH_LONG ).show();
   }
 
   void handleIntent( Context context, Intent intent )
@@ -144,21 +148,23 @@ private void handleMessage( final Context context, Intent intent )
 
           Intent notificationIntent = context.getPackageManager().getLaunchIntentForPackage( context.getApplicationInfo().packageName );
           PendingIntent contentIntent = PendingIntent.getActivity( context, 0, notificationIntent, 0 );
-          Notification notification = new Notification.Builder( context )
+          Notification.Builder notificationBuilder = new Notification.Builder( context )
               .setSmallIcon( appIcon )
               .setTicker( tickerText )
               .setContentTitle( contentTitle )
               .setContentText( contentText )
               .setContentIntent( contentIntent )
-              .setSound(
-                  notEmpty( soundLocation )
-                      ? Uri.parse( soundLocation.toString() )
-                      : RingtoneManager.getDefaultUri( RingtoneManager.TYPE_NOTIFICATION ) )
-              .setWhen( System.currentTimeMillis() ).build();
+              .setWhen( System.currentTimeMillis() );
+
+          if( notEmpty( soundLocation ) )
+          {
+            notificationBuilder.setSound( soundLocation.equals( DEFAULT_SOUND_FLAG )
+                ? RingtoneManager.getDefaultUri( RingtoneManager.TYPE_NOTIFICATION )
+                : Uri.parse( soundLocation.toString() ) );
+          }
 
+          Notification notification = notificationBuilder.build();
           notification.flags |= Notification.FLAG_AUTO_CANCEL;
-          notification.defaults |= Notification.DEFAULT_VIBRATE;
-          notification.defaults |= Notification.DEFAULT_LIGHTS;
 
           int customLayout = context.getResources().getIdentifier( "notification", "layout", context.getPackageName() );
           int customLayoutTitle = context.getResources().getIdentifier( "title", "id", context.getPackageName() );
diff --git a/src/com/backendless/push/NotificationLookAndFeel.java b/src/com/backendless/push/NotificationLookAndFeel.java
index 42def6fd..6d75bfaf 100644
--- a/src/com/backendless/push/NotificationLookAndFeel.java
+++ b/src/com/backendless/push/NotificationLookAndFeel.java
@@ -31,9 +31,8 @@
 {
   private static final String COLOR_SEARCH_RECURSE_TIP = "SOME_SAMPLE_TEXT";
   private static float notification_text_size;
-  private static Integer notification_text_color = null;
+  private static int notification_text_color = android.R.color.black;
   private static float notification_title_size_factor = (float) 1.0;
-  private static float notification_description_size_factor = (float) 0.8;
 
   private boolean recurseGroup( Context context, ViewGroup gp )
   {
@@ -67,9 +66,6 @@ else if( gp.getChildAt( i ) instanceof ViewGroup )
 
   void extractColors( Context context )
   {
-    if( notification_text_color != null )
-      return;
-
     try
     {
       Notification ntf = new Notification();
diff --git a/src/com/backendless/servercode/extension/MessagingExtender.java b/src/com/backendless/servercode/extension/MessagingExtender.java
index 80805301..a01036d5 100644
--- a/src/com/backendless/servercode/extension/MessagingExtender.java
+++ b/src/com/backendless/servercode/extension/MessagingExtender.java
@@ -4,6 +4,7 @@
 import com.backendless.messaging.*;
 import com.backendless.servercode.ExecutionResult;
 import com.backendless.servercode.RunnerContext;
+import com.backendless.services.messaging.MessageStatus;
 
 /**
  * Created with IntelliJ IDEA.
diff --git a/src/com/backendless/utils/JSONObjectConverter.java b/src/com/backendless/utils/JSONObjectConverter.java
index 892a7f1c..1be18aab 100644
--- a/src/com/backendless/utils/JSONObjectConverter.java
+++ b/src/com/backendless/utils/JSONObjectConverter.java
@@ -3,7 +3,14 @@
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
+import weborb.protocols.jsonrpc.JsonTextReader;
+import weborb.types.IAdaptingType;
+import weborb.util.io.ISerializer;
+import weborb.util.io.Serializer;
 
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -20,6 +27,8 @@
  */
 
 public class JSONObjectConverter {
+
+
     public static Map<String, Object> toMap(JSONObject object) throws JSONException {
         Map<String, Object> map = new HashMap();
         Iterator keys = object.keys();
@@ -49,4 +58,55 @@ public static Object fromJson(Object json) throws JSONException {
             return json;
         }
     }
+
+    public static String toJSONString( Object object )
+    {
+        try
+        {
+            return new String( Serializer.toBytes( object, ISerializer.JSON ) );
+        }
+        catch( Exception e )
+        {
+            return null;
+        }
+    }
+
+    public static HashMap getJSONObject( String jsonString )
+    {
+      InputStream stream = new ByteArrayInputStream( jsonString.getBytes() );
+      InputStreamReader streamReader = null;
+      JsonTextReader reader = null;
+
+      try
+      {
+        streamReader = new InputStreamReader( stream, "UTF8" );
+        reader = new JsonTextReader( streamReader );
+        reader.read();
+        IAdaptingType jsonType = weborb.protocols.jsonrpc.JsonRequestParser.readJSON( reader );
+        return (HashMap) jsonType.adapt( HashMap.class );
+      }
+      catch( Throwable t )
+      {
+        //e.printStackTrace();
+        return null;
+      }
+      finally
+      {
+        try
+        {
+          if( reader != null )
+            reader.close();
+
+          if( streamReader != null )
+            streamReader.close();
+
+          if( stream != null )
+            stream.close();
+        }
+        catch( Throwable t )
+        {
+
+        }
+      }
+    }
 }
\ No newline at end of file
