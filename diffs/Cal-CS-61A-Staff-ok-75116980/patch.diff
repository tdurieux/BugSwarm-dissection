diff --git a/server/app/api.py b/server/app/api.py
index 28e2d59f..6f7b65d8 100644
--- a/server/app/api.py
+++ b/server/app/api.py
@@ -25,6 +25,7 @@
 #pylint: disable=no-member,unused-argument
 
 import datetime
+import functools
 import logging
 import ast
 import requests
@@ -61,6 +62,7 @@
 def need(permission, can=identity, args=identity):
     """Decorator for permissions check"""
     def wrap(f):
+        @functools.wraps(f)
         def helper(self, obj, user, data=None):
             # avoiding nonlocal because tests run in Python2
             need, _can, _args = Need(permission), can, args
@@ -458,12 +460,12 @@ def check(self, emails, course, role):
     
     # Endpoint
     
-    @need('get')
+    # @need('get')
     def enrollment(self):
         user = models.User.lookup(request.args.get('email'))
         data = []
         if user is not None:
-            parts = CourseAPI().get_courses(None, user, {'user': user.key})
+            parts = CourseAPI().get_courses(models.Course(), user, {'user': user.key})
             for part in parts:
                 course = part.course.get()
                 offering = course.offering.split('/')
@@ -950,8 +952,9 @@ def data_for_zip(self, obj):
         try:
             user = obj.submitter.get()
             name = user.email[0]+'-'+str(obj.created)
-        except IndexError:
+        except IndexError, AttributeError:
             name = str(obj.created)
+
         name = name.replace('.', '-').replace(' ', '_')
         messages = obj.get_messages()
         if 'file_contents' not in messages:
@@ -1550,12 +1553,12 @@ class CourseAPI(APIResource):
         }
     }
 
+    @need('admin')
     def post(self, user, data):
-        """
-        The POST HTTP method
-        """
+        """Create a course"""
         return super(CourseAPI, self).post(user, data)
 
+    @need('get')
     def index(self, user, data):
         if data['onlyenrolled']:
             return dict(results=[result.course for result in models.Participant.query(
@@ -1563,34 +1566,27 @@ def index(self, user, data):
         else:
             return super(CourseAPI, self).index(user, data)
 
+    @need('staff')
     def add_staff(self, course, user, data):
-        need = Need('staff')
-        if not course.can(user, need, course):
-            raise need.exception()
-
         user = models.User.get_or_insert(data['email'])
         if user not in course.staff:
           models.Participant.add_role(user, course, STAFF_ROLE)
 
+    @need('staff')
     def get_staff(self, course, user, data):
-        need = Need('staff')
-        if not course.can(user, need, course):
-            raise need.exception()
         query = models.Participant.query(
           models.Participant.course == course.key,
           models.Participant.role == 'staff')
         return list(query.fetch())
 
+    @need('staff')
     def remove_staff(self, course, user, data):
-        need = Need('staff')
-        if not course.can(user, need, course):
-            raise need.exception()
-
         removed_user = models.User.lookup(data['email'])
         if not removed_user:
             raise BadValueError('No such user with email "%s" exists' % data['email'])
         models.Participant.remove_role(removed_user, course, STAFF_ROLE)
 
+    @need('get')
     def get_courses(self, course, user, data):
         query = models.Participant.query(
             models.Participant.user == data['user'])
@@ -1598,6 +1594,7 @@ def get_courses(self, course, user, data):
         query = models.Participant.can(user, need, course, query)
         return list(query)
 
+    @need('get')
     def get_students(self, course, user, data):
         query = models.Participant.query(
             models.Participant.course == course.key,
@@ -1607,33 +1604,25 @@ def get_students(self, course, user, data):
             raise need.exception()
         return list(query.fetch())
 
+    @need('staff')
     def add_students(self, course, user, data):
-        need = Need('staff') # Only staff can call this API
-        if not course.can(user, need, course):
-            raise need.exception()
-
         for email in set(data['emails']):  # to remove potential duplicates
             user = models.User.get_or_insert(email)
             models.Participant.add_role(user, course, STUDENT_ROLE)
 
+    @need('staff')
     def add_student(self, course, user, data):
-        need = Need('staff') # Only staff can call this API
-        if not course.can(user, need, course):
-            raise need.exception()
-
         user = models.User.get_or_insert(data['email'])
         models.Participant.add_role(user, course, STUDENT_ROLE)
 
+    @need('staff')
     def remove_student(self, course, user, data):
-        need = Need('staff')
-        if not course.can(user, need, course):
-            raise need.exception()
-
         removed_user = models.User.lookup(data['email'])
         if not removed_user:
             raise BadValueError('No such user with email "%s" exists' % data['email'])
         models.Participant.remove_role(removed_user, course, STUDENT_ROLE)
 
+    @need('get')
     def assignments(self, course, user, data):
         return course.assignments.fetch()
     
diff --git a/server/app/models.py b/server/app/models.py
index a8158a0c..d6b819e4 100644
--- a/server/app/models.py
+++ b/server/app/models.py
@@ -26,6 +26,7 @@
 
 import datetime
 import itertools
+import logging
 
 from app import app
 from app.constants import STUDENT_ROLE, STAFF_ROLE, VALID_ROLES
@@ -260,13 +261,13 @@ def update(x):
             b = x.backup.get()
             b.submission = x
             return b
-        
+
         all_subms = [update(x) for x in all_subms]
         all_subms = [x for x in all_subms if x.assignment == assignment \
                 and self._contains_files(x)]
 
         all_subms.sort(lambda x, y: int(-5*(int(x.server_time > y.server_time) - 0.5)))
-        
+
         return all_subms[:num_submissions]
 
     get_num_submissions = make_num_counter(_get_submissions_helper)
@@ -431,13 +432,13 @@ def _pre_put_hook(self):
         #utils.check_user(self.key.id())
 
     def scores_for_assignment(self, assignment):
-        """ Returns a tuple of two elements: 
+        """ Returns a tuple of two elements:
                 1) Score data (list of lists) for STUDENT's final submission for ASSIGNMENT.
-                    There is an element for each score. 
+                    There is an element for each score.
                     * OBS * If the student is in a group, the list will contain an
                     element for each combination of group member and score.
                 2) A boolean indicating whether the student had a
-                    scored final submission for ASSIGNMENT. 
+                    scored final submission for ASSIGNMENT.
             Format: [['STUDENT', 'SCORE', 'MESSAGE', 'GRADER', 'TAG']]
         """
         fs = self.get_final_submission(assignment.key)
@@ -1124,20 +1125,28 @@ def _pre_put_hook(self):
 
     def scores_for_assignment(self, assignment):
         """ Returns a list of lists containing score data
-            for the groups's final submission for ASSIGNMENT. 
-            There is one element for each combination of 
+            for the groups's final submission for ASSIGNMENT.
+            There is one element for each combination of
             group member and score.
-            Ensures that each student only appears once in the list. 
+            Ensures that each student only appears once in the list.
             Format: [['STUDENT', 'SCORE', 'MESSAGE', 'GRADER', 'TAG']]
         """
         content = []
+        member = self.member[0].get()
+
         for m in self.member:
             member = m.get()
-            data, success = member.scores_for_assignment(assignment)
-            content.extend(data)
-            if success:
-                # get_scores_for_student_or_group will return scores for all group members. 
-                return content
+            if member:
+              data, success = member.scores_for_assignment(assignment)
+              content.extend(data)
+              if success:
+                  # get_scores_for_student_or_group will return scores for all group members.
+                  return content
+
+        # Handle the case where the member key no longer exists.
+        if not member:
+          return [["Unknown-"+str(self.member[0]), 0, None, None, None]]
+
         return [[member.email[0], 0, None, None, None]]
 
 
@@ -1299,11 +1308,15 @@ def get_scores(self):
         else:
             members = [self.submitter]
         for member in members:
-            email = member.get().email[0]
-            for score in self.submission.get().score:
-                all_scores.append([email,
-                        score.score,
-                        score.message,
-                        score.grader.get().email[0],
-                        score.tag])
+            member_row = member.get()
+            if member_row:
+              email = member_row.email[0]
+              for score in self.submission.get().score:
+                  all_scores.append([email,
+                          score.score,
+                          score.message,
+                          score.grader.get().email[0],
+                          score.tag])
+            else:
+              logging.warning("User key not found - " + str(member))
         return all_scores
diff --git a/server/index.yaml b/server/index.yaml
index 8a77ca48..082c4263 100755
--- a/server/index.yaml
+++ b/server/index.yaml
@@ -259,3 +259,9 @@ indexes:
   properties:
   - name: email
   - name: status
+
+- kind: Backupv2
+  properties:
+  - name: assignment
+  - name: created
+    direction: desc
