diff --git a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
index 0c1974af5..c9be7b6d1 100644
--- a/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
+++ b/okhttp-tests/src/main/java/okhttp3/AutobahnTester.java
@@ -23,8 +23,8 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.internal.Version;
-import okio.Buffer;
 import okio.BufferedSource;
+import okio.ByteString;
 
 import static okhttp3.WebSocket.BINARY;
 import static okhttp3.WebSocket.TEXT;
@@ -97,7 +97,7 @@ private void runTest(final long number, final long count) {
             });
           }
 
-          @Override public void onPong(Buffer payload) {
+          @Override public void onPong(ByteString payload) {
           }
 
           @Override public void onClose(int code, String reason) {
@@ -136,7 +136,7 @@ private long getTestCount() throws IOException {
         message.close();
       }
 
-      @Override public void onPong(Buffer payload) {
+      @Override public void onPong(ByteString payload) {
       }
 
       @Override public void onClose(int code, String reason) {
@@ -171,7 +171,7 @@ private void updateReports() {
       @Override public void onMessage(ResponseBody message) throws IOException {
       }
 
-      @Override public void onPong(Buffer payload) {
+      @Override public void onPong(ByteString payload) {
       }
 
       @Override public void onClose(int code, String reason) {
diff --git a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
index 4766a7ab2..d7eadbedb 100644
--- a/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/WebSocketCallTest.java
@@ -24,7 +24,7 @@
 import okhttp3.internal.ws.WebSocketRecorder;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
-import okio.Buffer;
+import okio.ByteString;
 import org.junit.After;
 import org.junit.Ignore;
 import org.junit.Rule;
@@ -127,8 +127,21 @@
 
     WebSocket client = clientListener.assertOpen();
 
-    client.sendPing(new Buffer().writeUtf8("Hello, WebSockets!"));
-    clientListener.assertPong(new Buffer().writeUtf8("Hello, WebSockets!"));
+    client.sendPing(ByteString.encodeUtf8("Hello, WebSockets!"));
+    clientListener.assertPong(ByteString.encodeUtf8("Hello, WebSockets!"));
+  }
+
+  @Test public void nullPingPayloadThrows() throws IOException {
+    webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));
+    enqueueClientWebSocket();
+
+    WebSocket client = clientListener.assertOpen();
+    try {
+      client.sendPing(null);
+      fail();
+    } catch (NullPointerException e) {
+      assertEquals("payload == null", e.getMessage());
+    }
   }
 
   @Test public void serverMessage() throws IOException {
@@ -207,12 +220,12 @@
 
     final RuntimeException e = new RuntimeException();
     clientListener.setNextEventDelegate(new EmptyWebSocketListener() {
-      @Override public void onPong(Buffer payload) {
+      @Override public void onPong(ByteString payload) {
         throw e;
       }
     });
 
-    client.sendPing(new Buffer());
+    client.sendPing(ByteString.EMPTY);
     clientListener.assertFailure(e);
     serverListener.assertClose(1001, "");
   }
@@ -259,8 +272,8 @@
 
     WebSocket client = clientListener.assertOpen();
 
-    client.sendPing(new Buffer().writeUtf8("WebSockets are fun!"));
-    clientListener.assertPong(new Buffer().writeUtf8("WebSockets are fun!"));
+    client.sendPing(ByteString.encodeUtf8("WebSockets are fun!"));
+    clientListener.assertPong(ByteString.encodeUtf8("WebSockets are fun!"));
   }
 
   @Test public void missingConnectionHeader() throws IOException {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java
index 39c2dd410..f3ba32e46 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/EmptyWebSocketListener.java
@@ -20,7 +20,7 @@
 import okhttp3.ResponseBody;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
-import okio.Buffer;
+import okio.ByteString;
 
 public class EmptyWebSocketListener implements WebSocketListener {
   @Override public void onOpen(WebSocket webSocket, Response response) {
@@ -29,7 +29,7 @@
   @Override public void onMessage(ResponseBody message) throws IOException {
   }
 
-  @Override public void onPong(Buffer payload) {
+  @Override public void onPong(ByteString payload) {
   }
 
   @Override public void onClose(int code, String reason) {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
index d48b65895..61660fa52 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/RealWebSocketTest.java
@@ -125,7 +125,7 @@
 
       @Override public void writeTo(BufferedSink sink) throws IOException {
         sink.writeUtf8("Hel").flush();
-        client.sendPing(new Buffer().writeUtf8("Pong?"));
+        client.sendPing(ByteString.encodeUtf8("Pong?"));
         sink.writeUtf8("lo!").flush();
         sink.close();
       }
@@ -135,20 +135,29 @@
     server.processNextFrame();
     serverListener.assertTextMessage("Hello!");
     client.processNextFrame();
-    clientListener.assertPong(new Buffer().writeUtf8("Pong?"));
+    clientListener.assertPong(ByteString.encodeUtf8("Pong?"));
   }
 
   @Test public void pingWritesPong() throws IOException {
-    client.sendPing(new Buffer().writeUtf8("Hello!"));
+    client.sendPing(ByteString.encodeUtf8("Hello!"));
     server.processNextFrame(); // Read the ping, write the pong.
     client.processNextFrame(); // Read the pong.
-    clientListener.assertPong(new Buffer().writeUtf8("Hello!"));
+    clientListener.assertPong(ByteString.encodeUtf8("Hello!"));
   }
 
   @Test public void unsolicitedPong() throws IOException {
-    client.sendPong(new Buffer().writeUtf8("Hello!"));
+    client.sendPong(ByteString.encodeUtf8("Hello!"));
     server.processNextFrame();
-    serverListener.assertPong(new Buffer().writeUtf8("Hello!"));
+    serverListener.assertPong(ByteString.encodeUtf8("Hello!"));
+  }
+
+  @Test public void nullPongPayloadThrows() throws IOException {
+    try {
+      client.sendPong(null);
+      fail();
+    } catch (NullPointerException e) {
+      assertEquals("payload == null", e.getMessage());
+    }
   }
 
   @Test public void close() throws IOException {
@@ -163,7 +172,7 @@
     client.close(1000, "Hello!");
 
     try {
-      client.sendPing(new Buffer().writeUtf8("Pong?"));
+      client.sendPing(ByteString.encodeUtf8("Pong?"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("closed", e.getMessage());
@@ -186,7 +195,7 @@
     client2Server.close();
 
     try {
-      client.sendPing(new Buffer().writeUtf8("Ping!"));
+      client.sendPing(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IOException ignored) {
     }
@@ -199,7 +208,7 @@
       assertEquals("must call close()", e.getMessage());
     }
     try {
-      client.sendPing(new Buffer().writeUtf8("Ping!"));
+      client.sendPing(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
@@ -223,7 +232,7 @@
       assertEquals("must call close()", e.getMessage());
     }
     try {
-      client.sendPing(new Buffer().writeUtf8("Ping!"));
+      client.sendPing(ByteString.encodeUtf8("Ping!"));
       fail();
     } catch (IllegalStateException e) {
       assertEquals("must call close()", e.getMessage());
@@ -236,7 +245,7 @@
     clientListener.assertClose(1000, "Hello!");
 
     try {
-      client.sendPing(new Buffer().writeUtf8("Pong?"));
+      client.sendPing(ByteString.encodeUtf8("Pong?"));
       fail();
     } catch (IOException e) {
       assertEquals("closed", e.getMessage());
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
index 2ca7f4f1e..65fb86997 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketReaderTest.java
@@ -180,10 +180,10 @@
     data.write(ByteString.decodeHex("8a00")); // Pong
     data.write(ByteString.decodeHex("80026c6f")); // lo
     clientReader.processNextFrame();
-    callback.assertPong(null);
-    callback.assertPong(null);
-    callback.assertPong(null);
-    callback.assertPong(null);
+    callback.assertPong(ByteString.EMPTY);
+    callback.assertPong(ByteString.EMPTY);
+    callback.assertPong(ByteString.EMPTY);
+    callback.assertPong(ByteString.EMPTY);
     callback.assertTextMessage("Hello");
   }
 
@@ -301,8 +301,8 @@
 
     clientReader.processNextFrame();
     assertEquals("He", sink.readUtf8());
-    callback.assertPong(null);
-    callback.assertPong(null);
+    callback.assertPong(ByteString.EMPTY);
+    callback.assertPong(ByteString.EMPTY);
 
     clientReader.processNextFrame();
     callback.assertTextMessage("Hey!");
@@ -331,13 +331,13 @@
   @Test public void emptyPingCallsCallback() throws IOException {
     data.write(ByteString.decodeHex("8900")); // Empty ping
     clientReader.processNextFrame();
-    callback.assertPing(null);
+    callback.assertPing(ByteString.EMPTY);
   }
 
   @Test public void pingCallsCallback() throws IOException {
     data.write(ByteString.decodeHex("890548656c6c6f")); // Ping with "Hello"
     clientReader.processNextFrame();
-    callback.assertPing(new Buffer().writeUtf8("Hello"));
+    callback.assertPing(ByteString.encodeUtf8("Hello"));
   }
 
   @Test public void emptyCloseCallsCallback() throws IOException {
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
index d2a0625f1..91510cdf5 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketRecorder.java
@@ -26,6 +26,7 @@
 import okhttp3.WebSocketListener;
 import okhttp3.internal.platform.Platform;
 import okio.Buffer;
+import okio.ByteString;
 
 import static okhttp3.WebSocket.BINARY;
 import static okhttp3.WebSocket.TEXT;
@@ -75,15 +76,15 @@ public void setNextEventDelegate(WebSocketListener delegate) {
     }
   }
 
-  @Override public void onPong(Buffer buffer) {
+  @Override public void onPong(ByteString payload) {
     Platform.get().log(Platform.INFO, "[WS " + name + "] onPong", null);
 
     WebSocketListener delegate = this.delegate;
     if (delegate != null) {
       this.delegate = null;
-      delegate.onPong(buffer);
+      delegate.onPong(payload);
     } else {
-      events.add(new Pong(buffer));
+      events.add(new Pong(payload));
     }
   }
 
@@ -137,7 +138,7 @@ public void assertBinaryMessage(byte[] payload) {
     assertEquals(message, actual);
   }
 
-  public void assertPong(Buffer payload) {
+  public void assertPong(ByteString payload) {
     Object actual = nextEvent();
     assertEquals(new Pong(payload), actual);
   }
@@ -252,24 +253,24 @@ public void assertFailure(int code, String body, Class<? extends IOException> cl
   }
 
   static final class Pong {
-    public final Buffer buffer;
+    public final ByteString payload;
 
-    Pong(Buffer buffer) {
-      this.buffer = buffer;
+    Pong(ByteString payload) {
+      this.payload = payload;
     }
 
     @Override public String toString() {
-      return "Pong[" + buffer + "]";
+      return "Pong[" + payload + "]";
     }
 
     @Override public int hashCode() {
-      return buffer.hashCode();
+      return payload.hashCode();
     }
 
     @Override public boolean equals(Object obj) {
       if (obj instanceof Pong) {
         Pong other = (Pong) obj;
-        return buffer == null ? other.buffer == null : buffer.equals(other.buffer);
+        return payload == null ? other.payload == null : payload.equals(other.payload);
       }
       return false;
     }
@@ -308,12 +309,12 @@ public void assertFailure(int code, String body, Class<? extends IOException> cl
         onMessage(body);
       }
 
-      @Override public void onReadPing(Buffer buffer) {
-        events.add(new Ping(buffer));
+      @Override public void onReadPing(ByteString payload) {
+        events.add(new Ping(payload));
       }
 
-      @Override public void onReadPong(Buffer buffer) {
-        onPong(buffer);
+      @Override public void onReadPong(ByteString padload) {
+        onPong(padload);
       }
 
       @Override public void onReadClose(int code, String reason) {
@@ -322,15 +323,15 @@ public void assertFailure(int code, String body, Class<? extends IOException> cl
     };
   }
 
-  void assertPing(Buffer payload) {
+  void assertPing(ByteString payload) {
     Object actual = nextEvent();
     assertEquals(new Ping(payload), actual);
   }
 
   static final class Ping {
-    public final Buffer buffer;
+    public final ByteString buffer;
 
-    Ping(Buffer buffer) {
+    Ping(ByteString buffer) {
       this.buffer = buffer;
     }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
index 384151cf4..bb4d43ec1 100644
--- a/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/ws/WebSocketWriterTest.java
@@ -306,48 +306,48 @@
   }
 
   @Test public void serverEmptyPing() throws IOException {
-    serverWriter.writePing(null);
+    serverWriter.writePing(ByteString.EMPTY);
     assertData("8900");
   }
 
   @Test public void clientEmptyPing() throws IOException {
-    clientWriter.writePing(null);
+    clientWriter.writePing(ByteString.EMPTY);
     assertData("898060b420bb");
   }
 
   @Test public void serverPingWithPayload() throws IOException {
-    serverWriter.writePing(new Buffer().writeUtf8("Hello"));
+    serverWriter.writePing(ByteString.encodeUtf8("Hello"));
     assertData("890548656c6c6f");
   }
 
   @Test public void clientPingWithPayload() throws IOException {
-    clientWriter.writePing(new Buffer().writeUtf8("Hello"));
+    clientWriter.writePing(ByteString.encodeUtf8("Hello"));
     assertData("898560b420bb28d14cd70f");
   }
 
   @Test public void serverEmptyPong() throws IOException {
-    serverWriter.writePong(null);
+    serverWriter.writePong(ByteString.EMPTY);
     assertData("8a00");
   }
 
   @Test public void clientEmptyPong() throws IOException {
-    clientWriter.writePong(null);
+    clientWriter.writePong(ByteString.EMPTY);
     assertData("8a8060b420bb");
   }
 
   @Test public void serverPongWithPayload() throws IOException {
-    serverWriter.writePong(new Buffer().writeUtf8("Hello"));
+    serverWriter.writePong(ByteString.encodeUtf8("Hello"));
     assertData("8a0548656c6c6f");
   }
 
   @Test public void clientPongWithPayload() throws IOException {
-    clientWriter.writePong(new Buffer().writeUtf8("Hello"));
+    clientWriter.writePong(ByteString.encodeUtf8("Hello"));
     assertData("8a8560b420bb28d14cd70f");
   }
 
   @Test public void pingTooLongThrows() throws IOException {
     try {
-      serverWriter.writePing(new Buffer().write(binaryData(1000)));
+      serverWriter.writePing(ByteString.of(binaryData(1000)));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals("Payload size must be less than or equal to 125", e.getMessage());
@@ -356,7 +356,7 @@
 
   @Test public void pongTooLongThrows() throws IOException {
     try {
-      serverWriter.writePong(new Buffer().write(binaryData(1000)));
+      serverWriter.writePong(ByteString.of(binaryData(1000)));
       fail();
     } catch (IllegalArgumentException e) {
       assertEquals("Payload size must be less than or equal to 125", e.getMessage());
diff --git a/okhttp/src/main/java/okhttp3/WebSocket.java b/okhttp/src/main/java/okhttp3/WebSocket.java
index 7af8a76fb..8f80497b3 100644
--- a/okhttp/src/main/java/okhttp3/WebSocket.java
+++ b/okhttp/src/main/java/okhttp3/WebSocket.java
@@ -16,9 +16,9 @@
 package okhttp3;
 
 import java.io.IOException;
-import okio.Buffer;
+import okio.ByteString;
 
-/** Blocking interface to connect and write to a web socket. */
+/** Blocking interface to connect and write to a web socket. This class is not thread safe. */
 public interface WebSocket {
   /** A {@link MediaType} indicating UTF-8 text frames should be used when sending the message. */
   MediaType TEXT = MediaType.parse("application/vnd.okhttp.websocket+text; charset=utf-8");
@@ -26,28 +26,29 @@
   MediaType BINARY = MediaType.parse("application/vnd.okhttp.websocket+binary");
 
   /**
-   * Send a message payload to the server.
-   *
-   * <p>The {@linkplain RequestBody#contentType() content type} of {@code message} should be either
-   * {@link #TEXT} or {@link #BINARY}.
+   * Send a message to the server.
    *
+   * @param message The message body. The {@linkplain RequestBody#contentType() content type} of
+   * must be either {@link #TEXT} or {@link #BINARY}.
    * @throws IOException if unable to write the message. Clients must call {@link #close} when this
    * happens to ensure resources are cleaned up.
-   * @throws IllegalStateException if not connected, already closed, or another writer is active.
+   * @throws IllegalStateException if this web socket was already closed.
    */
   void sendMessage(RequestBody message) throws IOException;
 
   /**
-   * Send a ping to the server with optional payload.
+   * Send a ping to the server.
    *
+   * @param payload Ping payload which must not exceed 125 bytes. Use {@link ByteString#EMPTY} for
+   * no payload.
    * @throws IOException if unable to write the ping.  Clients must call {@link #close} when this
    * happens to ensure resources are cleaned up.
-   * @throws IllegalStateException if already closed.
+   * @throws IllegalStateException if this web socket was already closed.
    */
-  void sendPing(Buffer payload) throws IOException;
+  void sendPing(ByteString payload) throws IOException;
 
   /**
-   * Send a close frame to the server.
+   * Send a close indicator to the server.
    *
    * <p>The corresponding {@link WebSocketListener} will continue to get messages until its {@link
    * WebSocketListener#onClose onClose()} method is called.
@@ -55,8 +56,11 @@
    * <p>It is an error to call this method before calling close on an active writer. Calling this
    * method more than once has no effect.
    *
+   * @param code Status code as defined by <a
+   * href="http://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4 of RFC 6455</a> or {@code 0}.
+   * @param reason Reason for shutting down or {@code null}.
    * @throws IOException if unable to write the close message. Resources will still be freed.
-   * @throws IllegalStateException if already closed.
+   * @throws IllegalStateException if this web socket was already closed.
    */
   void close(int code, String reason) throws IOException;
 }
diff --git a/okhttp/src/main/java/okhttp3/WebSocketListener.java b/okhttp/src/main/java/okhttp3/WebSocketListener.java
index 38ce997eb..b25548b5f 100644
--- a/okhttp/src/main/java/okhttp3/WebSocketListener.java
+++ b/okhttp/src/main/java/okhttp3/WebSocketListener.java
@@ -16,7 +16,7 @@
 package okhttp3;
 
 import java.io.IOException;
-import okio.Buffer;
+import okio.ByteString;
 
 /**
  * Listener for server-initiated messages on a connected {@link WebSocket}. All callbacks will be
@@ -60,9 +60,9 @@
 
   /**
    * Called when a server pong is received. This is usually a result of calling {@link
-   * WebSocket#sendPing(Buffer)} but might also be unsolicited directly from the server.
+   * WebSocket#sendPing(ByteString)} but might also be unsolicited directly from the server.
    */
-  void onPong(Buffer payload);
+  void onPong(ByteString payload);
 
   /**
    * Called when the server sends a close message. This may have been initiated from a call to
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
index 61caff822..8b8e8790a 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/RealWebSocket.java
@@ -29,9 +29,9 @@
 import okhttp3.internal.NamedRunnable;
 import okhttp3.internal.Util;
 import okhttp3.internal.platform.Platform;
-import okio.Buffer;
 import okio.BufferedSink;
 import okio.BufferedSource;
+import okio.ByteString;
 import okio.Okio;
 
 import static okhttp3.internal.platform.Platform.INFO;
@@ -135,11 +135,11 @@ final boolean processNextFrame() {
     readerListener.onMessage(message);
   }
 
-  @Override public final void onReadPing(Buffer buffer) {
+  @Override public final void onReadPing(ByteString buffer) {
     replyToPeerPing(buffer);
   }
 
-  @Override public final void onReadPong(Buffer buffer) {
+  @Override public final void onReadPong(ByteString buffer) {
     readerListener.onPong(buffer);
   }
 
@@ -152,7 +152,7 @@ final boolean processNextFrame() {
   ///// REPLIER THREAD (executed on replier, contends with sender thread)
 
   /** Replies with a pong when a ping frame is read from the peer. */
-  private void replyToPeerPing(final Buffer payload) {
+  private void replyToPeerPing(final ByteString payload) {
     Runnable replierPong = new NamedRunnable("OkHttp %s WebSocket Pong Reply", name) {
       @Override protected void execute() {
         try {
@@ -254,7 +254,8 @@ private void replyToReaderError(final Throwable t) {
     }
   }
 
-  @Override public final void sendPing(Buffer payload) throws IOException {
+  @Override public final void sendPing(ByteString payload) throws IOException {
+    if (payload == null) throw new NullPointerException("payload == null");
     if (senderSentClose) throw new IllegalStateException("closed");
     if (senderWantsClose) throw new IllegalStateException("must call close()");
 
@@ -267,7 +268,8 @@ private void replyToReaderError(final Throwable t) {
   }
 
   /** Send an unsolicited pong with the specified payload. */
-  final void sendPong(Buffer payload) throws IOException {
+  final void sendPong(ByteString payload) throws IOException {
+    if (payload == null) throw new NullPointerException("payload == null");
     if (senderSentClose) throw new IllegalStateException("closed");
     if (senderWantsClose) throw new IllegalStateException("must call close()");
 
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
index 44844a614..d06ce8d29 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketReader.java
@@ -23,6 +23,7 @@
 import okhttp3.WebSocket;
 import okio.Buffer;
 import okio.BufferedSource;
+import okio.ByteString;
 import okio.Okio;
 import okio.Source;
 import okio.Timeout;
@@ -56,8 +57,8 @@
 final class WebSocketReader {
   public interface FrameCallback {
     void onReadMessage(ResponseBody body) throws IOException;
-    void onReadPing(Buffer buffer);
-    void onReadPong(Buffer buffer);
+    void onReadPing(ByteString buffer);
+    void onReadPong(ByteString buffer);
     void onReadClose(int code, String reason);
   }
 
@@ -164,10 +165,8 @@ private void readHeader() throws IOException {
   }
 
   private void readControlFrame() throws IOException {
-    Buffer buffer = null;
+    Buffer buffer = new Buffer();
     if (frameBytesRead < frameLength) {
-      buffer = new Buffer();
-
       if (isClient) {
         source.readFully(buffer, frameLength);
       } else {
@@ -184,24 +183,21 @@ private void readControlFrame() throws IOException {
 
     switch (opcode) {
       case OPCODE_CONTROL_PING:
-        frameCallback.onReadPing(buffer);
+        frameCallback.onReadPing(buffer.readByteString());
         break;
       case OPCODE_CONTROL_PONG:
-        frameCallback.onReadPong(buffer);
+        frameCallback.onReadPong(buffer.readByteString());
         break;
       case OPCODE_CONTROL_CLOSE:
         int code = 1000;
         String reason = "";
-        if (buffer != null) {
-          long bufferSize = buffer.size();
-          if (bufferSize == 1) {
-            throw new ProtocolException("Malformed close payload length of 1.");
-          } else if (bufferSize != 0) {
-            code = buffer.readShort();
-            validateCloseCode(code, false);
-
-            reason = buffer.readUtf8();
-          }
+        long bufferSize = buffer.size();
+        if (bufferSize == 1) {
+          throw new ProtocolException("Malformed close payload length of 1.");
+        } else if (bufferSize != 0) {
+          code = buffer.readShort();
+          reason = buffer.readUtf8();
+          validateCloseCode(code, false);
         }
         frameCallback.onReadClose(code, reason);
         closed = true;
diff --git a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
index 75d875cb0..e232857ee 100644
--- a/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
+++ b/okhttp/src/main/java/okhttp3/internal/ws/WebSocketWriter.java
@@ -19,7 +19,7 @@
 import java.util.Random;
 import okio.Buffer;
 import okio.BufferedSink;
-import okio.BufferedSource;
+import okio.ByteString;
 import okio.Sink;
 import okio.Timeout;
 
@@ -73,15 +73,15 @@
     maskBuffer = isClient ? new byte[8192] : null;
   }
 
-  /** Send a ping with the supplied {@code payload}. Payload may be {@code null} */
-  void writePing(Buffer payload) throws IOException {
+  /** Send a ping with the supplied {@code payload}. */
+  void writePing(ByteString payload) throws IOException {
     synchronized (this) {
       writeControlFrameSynchronized(OPCODE_CONTROL_PING, payload);
     }
   }
 
-  /** Send a pong with the supplied {@code payload}. Payload may be {@code null} */
-  void writePong(Buffer payload) throws IOException {
+  /** Send a pong with the supplied {@code payload}. */
+  void writePong(ByteString payload) throws IOException {
     synchronized (this) {
       writeControlFrameSynchronized(OPCODE_CONTROL_PONG, payload);
     }
@@ -95,16 +95,17 @@ void writePong(Buffer payload) throws IOException {
    * @param reason Reason for shutting down or {@code null}.
    */
   void writeClose(int code, String reason) throws IOException {
-    Buffer payload = null;
+    ByteString payload = ByteString.EMPTY;
     if (code != 0 || reason != null) {
       if (code != 0) {
         validateCloseCode(code, true);
       }
-      payload = new Buffer();
-      payload.writeShort(code);
+      Buffer buffer = new Buffer();
+      buffer.writeShort(code);
       if (reason != null) {
-        payload.writeUtf8(reason);
+        buffer.writeUtf8(reason);
       }
+      payload = buffer.readByteString();
     }
 
     synchronized (this) {
@@ -116,18 +117,15 @@ void writeClose(int code, String reason) throws IOException {
     }
   }
 
-  private void writeControlFrameSynchronized(int opcode, Buffer payload) throws IOException {
+  private void writeControlFrameSynchronized(int opcode, ByteString payload) throws IOException {
     assert Thread.holdsLock(this);
 
     if (writerClosed) throw new IOException("closed");
 
-    int length = 0;
-    if (payload != null) {
-      length = (int) payload.size();
-      if (length > PAYLOAD_BYTE_MAX) {
-        throw new IllegalArgumentException(
-            "Payload size must be less than or equal to " + PAYLOAD_BYTE_MAX);
-      }
+    int length = payload.size();
+    if (length > PAYLOAD_BYTE_MAX) {
+      throw new IllegalArgumentException(
+          "Payload size must be less than or equal to " + PAYLOAD_BYTE_MAX);
     }
 
     int b0 = B0_FLAG_FIN | opcode;
@@ -141,15 +139,12 @@ private void writeControlFrameSynchronized(int opcode, Buffer payload) throws IO
       random.nextBytes(maskKey);
       sink.write(maskKey);
 
-      if (payload != null) {
-        writeMaskedSynchronized(payload, length);
-      }
+      byte[] bytes = payload.toByteArray();
+      toggleMask(bytes, bytes.length, maskKey, 0);
+      sink.write(bytes);
     } else {
       sink.writeByte(b1);
-
-      if (payload != null) {
-        sink.writeAll(payload);
-      }
+      sink.write(payload);
     }
 
     sink.flush();
@@ -189,7 +184,6 @@ void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isF
     int b1 = 0;
     if (isClient) {
       b1 |= B1_FLAG_MASK;
-      random.nextBytes(maskKey);
     }
     if (byteCount <= PAYLOAD_BYTE_MAX) {
       b1 |= (int) byteCount;
@@ -205,8 +199,17 @@ void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isF
     }
 
     if (isClient) {
+      random.nextBytes(maskKey);
       sink.write(maskKey);
-      writeMaskedSynchronized(buffer, byteCount);
+
+      for (long written = 0; written < byteCount; ) {
+        int toRead = (int) Math.min(byteCount, maskBuffer.length);
+        int read = buffer.read(maskBuffer, 0, toRead);
+        if (read == -1) throw new AssertionError();
+        toggleMask(maskBuffer, read, maskKey, written);
+        sink.write(maskBuffer, 0, read);
+        written += read;
+      }
     } else {
       sink.write(buffer, byteCount);
     }
@@ -214,20 +217,6 @@ void writeMessageFrameSynchronized(int formatOpcode, long byteCount, boolean isF
     sink.emit();
   }
 
-  private void writeMaskedSynchronized(BufferedSource source, long byteCount) throws IOException {
-    assert Thread.holdsLock(this);
-
-    long written = 0;
-    while (written < byteCount) {
-      int toRead = (int) Math.min(byteCount, maskBuffer.length);
-      int read = source.read(maskBuffer, 0, toRead);
-      if (read == -1) throw new AssertionError();
-      toggleMask(maskBuffer, read, maskKey, written);
-      sink.write(maskBuffer, 0, read);
-      written += read;
-    }
-  }
-
   final class FrameSink implements Sink {
     int formatOpcode;
     long contentLength;
diff --git a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
index 4d735dbe5..77c873020 100644
--- a/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
+++ b/samples/guide/src/main/java/okhttp3/recipes/WebSocketEcho.java
@@ -11,7 +11,6 @@
 import okhttp3.ResponseBody;
 import okhttp3.WebSocket;
 import okhttp3.WebSocketListener;
-import okio.Buffer;
 import okio.ByteString;
 
 import static okhttp3.WebSocket.BINARY;
@@ -58,8 +57,8 @@ private void run() {
     message.close();
   }
 
-  @Override public void onPong(Buffer payload) {
-    System.out.println("PONG: " + payload.readUtf8());
+  @Override public void onPong(ByteString payload) {
+    System.out.println("PONG: " + payload.utf8());
   }
 
   @Override public void onClose(int code, String reason) {
