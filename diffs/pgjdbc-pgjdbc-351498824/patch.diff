diff --git a/pgjdbc/src/main/java/org/postgresql/core/Parser.java b/pgjdbc/src/main/java/org/postgresql/core/Parser.java
index 8ae75a16c..614b695a7 100644
--- a/pgjdbc/src/main/java/org/postgresql/core/Parser.java
+++ b/pgjdbc/src/main/java/org/postgresql/core/Parser.java
@@ -294,7 +294,8 @@ private static boolean addReturning(StringBuilder nativeSql, SqlCommandType curr
     }
     if (currentCommandType != SqlCommandType.INSERT
         && currentCommandType != SqlCommandType.UPDATE
-        && currentCommandType != SqlCommandType.DELETE) {
+        && currentCommandType != SqlCommandType.DELETE
+        && currentCommandType != SqlCommandType.WITH) {
       return false;
     }
 
diff --git a/pgjdbc/src/test/java/org/postgresql/core/ParserTest.java b/pgjdbc/src/test/java/org/postgresql/core/ParserTest.java
index 706dc530d..1d6da292c 100644
--- a/pgjdbc/src/test/java/org/postgresql/core/ParserTest.java
+++ b/pgjdbc/src/test/java/org/postgresql/core/ParserTest.java
@@ -162,6 +162,17 @@ public void insertSelectReturning() throws SQLException {
     Assert.assertTrue("Query has a returning clause " + query, returningKeywordPresent);
   }
 
+  @Test
+  public void insertReturningInWith() throws SQLException {
+    String query =
+        "with x as (insert into mytab(x) values(1) returning x) insert test(id, name) select 1, 'value' from test2";
+    List<NativeQuery> qry =
+        Parser.parseJdbcSql(
+            query, true, true, true, true);
+    boolean returningKeywordPresent = qry.get(0).command.isReturningKeywordPresent();
+    Assert.assertFalse("There's no top-level <<returning>> clause " + query, returningKeywordPresent);
+  }
+
   @Test
   public void insertBatchedReWriteOnConflict() throws SQLException {
     String query = "insert into test(id, name) values (:id,:name) ON CONFLICT (id) DO NOTHING";
diff --git a/pgjdbc/src/test/java/org/postgresql/test/jdbc3/GeneratedKeysTest.java b/pgjdbc/src/test/java/org/postgresql/test/jdbc3/GeneratedKeysTest.java
index 36a6e440c..7e00759cb 100644
--- a/pgjdbc/src/test/java/org/postgresql/test/jdbc3/GeneratedKeysTest.java
+++ b/pgjdbc/src/test/java/org/postgresql/test/jdbc3/GeneratedKeysTest.java
@@ -13,6 +13,7 @@
 import static org.junit.Assert.fail;
 
 import org.postgresql.PGStatement;
+import org.postgresql.core.ServerVersion;
 import org.postgresql.test.TestUtil;
 import org.postgresql.test.jdbc2.BaseTest4;
 import org.postgresql.util.PSQLState;
@@ -222,6 +223,20 @@ public void testUpdate() throws SQLException {
     assertTrue(!rs.next());
   }
 
+  @Test
+  public void testWithInsertInsert() throws SQLException {
+    assumeMinimumServerVersion(ServerVersion.v9_1);
+    Statement stmt = con.createStatement();
+    int count = stmt.executeUpdate(
+        "WITH x as (INSERT INTO genkeys (b,c) VALUES ('a', 2) returning c) insert into genkeys(a,b,c) VALUES (1, 'a', 2)" + returningClause + "",
+        new String[]{"c", "b"});
+    assertEquals(1, count);
+    ResultSet rs = stmt.getGeneratedKeys();
+    assertTrue(rs.next());
+    assertCB1(rs);
+    assertTrue(!rs.next());
+  }
+
   @Test
   public void testDelete() throws SQLException {
     Statement stmt = con.createStatement();
diff --git a/pgjdbc/src/test/java/org/postgresql/test/jdbc4/UUIDTest.java b/pgjdbc/src/test/java/org/postgresql/test/jdbc4/UUIDTest.java
index 2db1e357a..5eec48b20 100644
--- a/pgjdbc/src/test/java/org/postgresql/test/jdbc4/UUIDTest.java
+++ b/pgjdbc/src/test/java/org/postgresql/test/jdbc4/UUIDTest.java
@@ -9,6 +9,7 @@
 import static org.junit.Assert.assertTrue;
 
 import org.postgresql.core.ServerVersion;
+import org.postgresql.jdbc.PreferQueryMode;
 import org.postgresql.test.TestUtil;
 import org.postgresql.test.jdbc2.BaseTest4;
 import org.postgresql.util.PSQLState;
@@ -91,7 +92,7 @@ public void testUUIDString() throws SQLException {
     ps.setString(1, uuid);
     try {
       ps.executeUpdate();
-      if (getStringType() == StringType.VARCHAR) {
+      if (getStringType() == StringType.VARCHAR && preferQueryMode != PreferQueryMode.SIMPLE) {
         Assert.fail(
             "setString(, uuid) should fail to insert value into UUID column when stringType=varchar."
                 + " Expecting error <<column \"id\" is of type uuid but expression is of type character varying>>");
