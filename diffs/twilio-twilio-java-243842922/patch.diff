diff --git a/CHANGES.md b/CHANGES.md
index ee07253c0..3b0abb5cd 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,20 @@
 twilio-java changelog
 =====================
 
+[2017-06-16] Version 7.12.0
+--------------------------
+- Remove client-side max page size validation.
+- Add `locality` field to `AvailablePhoneNumbers`.
+- Add `origin` field to `IncomingPhoneNumbers`.
+- Add `inLocality` parameter to `AvailablePhoneNumbers`.
+- Add `origin` parameter to `IncomingPhoneNumbers`.
+- Add new sync categories to `UsageRecords`.
+- Add `getPage()` method for reentrant paging.
+- Add `input` to `<Gather>`.
+- Remove mandatory url parameter in `<Play>`.
+- Parallelize tests.
+- Update `Language` enum.
+
 [2017-05-24] Version 7.11.0
 --------------------------
 - Rename `Recording` to `RoomRecording` in Twilio Video
diff --git a/src/main/java/com/twilio/rest/accounts/v1/credential/PublicKeyReader.java b/src/main/java/com/twilio/rest/accounts/v1/credential/PublicKeyReader.java
index ee45ca002..b7df616b2 100644
--- a/src/main/java/com/twilio/rest/accounts/v1/credential/PublicKeyReader.java
+++ b/src/main/java/com/twilio/rest/accounts/v1/credential/PublicKeyReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return PublicKey ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<PublicKey> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<PublicKey> previousPage(final Page<PublicKey> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.ACCOUNTS.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of PublicKey Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/AccountReader.java b/src/main/java/com/twilio/rest/api/v2010/AccountReader.java
index 17afa2a38..641a14f24 100644
--- a/src/main/java/com/twilio/rest/api/v2010/AccountReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/AccountReader.java
@@ -77,6 +77,24 @@ public AccountReader setStatus(final Account.Status status) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Account ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Account> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -97,6 +115,26 @@ public AccountReader setStatus(final Account.Status status) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Account> previousPage(final Page<Account> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Account Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/AddressReader.java b/src/main/java/com/twilio/rest/api/v2010/account/AddressReader.java
index 58a7739c4..138199f55 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/AddressReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/AddressReader.java
@@ -105,6 +105,25 @@ public AddressReader setIsoCountry(final String isoCountry) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Address ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Address> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -125,6 +144,26 @@ public AddressReader setIsoCountry(final String isoCountry) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Address> previousPage(final Page<Address> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Address Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/ApplicationReader.java b/src/main/java/com/twilio/rest/api/v2010/account/ApplicationReader.java
index 8354fdb5f..9cd254cbe 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/ApplicationReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/ApplicationReader.java
@@ -82,6 +82,25 @@ public ApplicationReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Application ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Application> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -102,6 +121,26 @@ public ApplicationReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Application> previousPage(final Page<Application> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Application Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/AuthorizedConnectAppReader.java b/src/main/java/com/twilio/rest/api/v2010/account/AuthorizedConnectAppReader.java
index bb53c37b5..fb9464eb0 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/AuthorizedConnectAppReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/AuthorizedConnectAppReader.java
@@ -69,6 +69,25 @@ public AuthorizedConnectAppReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return AuthorizedConnectApp ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<AuthorizedConnectApp> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public AuthorizedConnectAppReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<AuthorizedConnectApp> previousPage(final Page<AuthorizedConnectApp> page, 
+                                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of AuthorizedConnectApp Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/AvailablePhoneNumberCountryReader.java b/src/main/java/com/twilio/rest/api/v2010/account/AvailablePhoneNumberCountryReader.java
index 16a5b2556..cb418fdb9 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/AvailablePhoneNumberCountryReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/AvailablePhoneNumberCountryReader.java
@@ -69,6 +69,25 @@ public AvailablePhoneNumberCountryReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return AvailablePhoneNumberCountry ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<AvailablePhoneNumberCountry> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public AvailablePhoneNumberCountryReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<AvailablePhoneNumberCountry> previousPage(final Page<AvailablePhoneNumberCountry> page, 
+                                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of AvailablePhoneNumberCountry Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/CallReader.java b/src/main/java/com/twilio/rest/api/v2010/account/CallReader.java
index 476836ddb..d3544e089 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/CallReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/CallReader.java
@@ -172,6 +172,25 @@ public CallReader setEndTime(final Range<DateTime> rangeEndTime) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Call ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Call> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -192,6 +211,26 @@ public CallReader setEndTime(final Range<DateTime> rangeEndTime) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Call> previousPage(final Page<Call> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Call Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/ConferenceReader.java b/src/main/java/com/twilio/rest/api/v2010/account/ConferenceReader.java
index 8e3a71562..454d78081 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/ConferenceReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/ConferenceReader.java
@@ -155,6 +155,25 @@ public ConferenceReader setStatus(final Conference.Status status) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Conference ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Conference> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -175,6 +194,26 @@ public ConferenceReader setStatus(final Conference.Status status) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Conference> previousPage(final Page<Conference> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Conference Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/ConnectAppReader.java b/src/main/java/com/twilio/rest/api/v2010/account/ConnectAppReader.java
index 16076e7d1..c8e5b61ee 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/ConnectAppReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/ConnectAppReader.java
@@ -69,6 +69,25 @@ public ConnectAppReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return ConnectApp ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<ConnectApp> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public ConnectAppReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<ConnectApp> previousPage(final Page<ConnectApp> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of ConnectApp Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumber.java b/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumber.java
index 2625cbf3e..016167d82 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumber.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumber.java
@@ -36,7 +36,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class IncomingPhoneNumber extends Resource {
-    private static final long serialVersionUID = 172848453454291L;
+    private static final long serialVersionUID = 213039565974896L;
 
     public enum AddressRequirement {
         NONE("none"),
@@ -266,6 +266,7 @@ public static IncomingPhoneNumber fromJson(final InputStream json, final ObjectM
     private final DateTime dateUpdated;
     private final String friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
+    private final String origin;
     private final String sid;
     private final String smsApplicationSid;
     private final HttpMethod smsFallbackMethod;
@@ -304,6 +305,8 @@ private IncomingPhoneNumber(@JsonProperty("account_sid")
                                 final String friendlyName, 
                                 @JsonProperty("phone_number")
                                 final com.twilio.type.PhoneNumber phoneNumber, 
+                                @JsonProperty("origin")
+                                final String origin, 
                                 @JsonProperty("sid")
                                 final String sid, 
                                 @JsonProperty("sms_application_sid")
@@ -349,6 +352,7 @@ private IncomingPhoneNumber(@JsonProperty("account_sid")
         this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
+        this.origin = origin;
         this.sid = sid;
         this.smsApplicationSid = smsApplicationSid;
         this.smsFallbackMethod = smsFallbackMethod;
@@ -450,6 +454,15 @@ public final String getFriendlyName() {
         return this.phoneNumber;
     }
 
+    /**
+     * Returns The The origin.
+     * 
+     * @return The origin
+     */
+    public final String getOrigin() {
+        return this.origin;
+    }
+
     /**
      * Returns The A string that uniquely identifies this resource.
      * 
@@ -633,6 +646,7 @@ public boolean equals(final Object o) {
                Objects.equals(dateUpdated, other.dateUpdated) && 
                Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
+               Objects.equals(origin, other.origin) && 
                Objects.equals(sid, other.sid) && 
                Objects.equals(smsApplicationSid, other.smsApplicationSid) && 
                Objects.equals(smsFallbackMethod, other.smsFallbackMethod) && 
@@ -664,6 +678,7 @@ public int hashCode() {
                             dateUpdated,
                             friendlyName,
                             phoneNumber,
+                            origin,
                             sid,
                             smsApplicationSid,
                             smsFallbackMethod,
@@ -696,6 +711,7 @@ public String toString() {
                           .add("dateUpdated", dateUpdated)
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
+                          .add("origin", origin)
                           .add("sid", sid)
                           .add("smsApplicationSid", smsApplicationSid)
                           .add("smsFallbackMethod", smsFallbackMethod)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberReader.java b/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberReader.java
index 0f32284d2..f91b87ec0 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberReader.java
@@ -24,6 +24,7 @@
     private Boolean beta;
     private String friendlyName;
     private com.twilio.type.PhoneNumber phoneNumber;
+    private String origin;
 
     /**
      * Construct a new IncomingPhoneNumberReader.
@@ -74,6 +75,17 @@ public IncomingPhoneNumberReader setPhoneNumber(final com.twilio.type.PhoneNumbe
         return this;
     }
 
+    /**
+     * The origin.
+     * 
+     * @param origin The origin
+     * @return this
+     */
+    public IncomingPhoneNumberReader setOrigin(final String origin) {
+        this.origin = origin;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -106,6 +118,25 @@ public IncomingPhoneNumberReader setPhoneNumber(final com.twilio.type.PhoneNumbe
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return IncomingPhoneNumber ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<IncomingPhoneNumber> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -126,6 +157,26 @@ public IncomingPhoneNumberReader setPhoneNumber(final com.twilio.type.PhoneNumbe
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<IncomingPhoneNumber> previousPage(final Page<IncomingPhoneNumber> page, 
+                                                  final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of IncomingPhoneNumber Resources for a given request.
      * 
@@ -179,6 +230,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("PhoneNumber", phoneNumber.toString());
         }
 
+        if (origin != null) {
+            request.addQueryParam("Origin", origin);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/KeyReader.java b/src/main/java/com/twilio/rest/api/v2010/account/KeyReader.java
index 40f83985b..a6f3e2553 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/KeyReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/KeyReader.java
@@ -69,6 +69,25 @@ public KeyReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Key ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Key> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public KeyReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Key> previousPage(final Page<Key> page, 
+                                  final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Key Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java b/src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java
index b65b30484..b0f600099 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/MessageReader.java
@@ -122,6 +122,25 @@ public MessageReader setDateSent(final Range<DateTime> rangeDateSent) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Message ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Message> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -142,6 +161,26 @@ public MessageReader setDateSent(final Range<DateTime> rangeDateSent) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Message> previousPage(final Page<Message> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Message Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/NotificationReader.java b/src/main/java/com/twilio/rest/api/v2010/account/NotificationReader.java
index f476a4608..094994fa5 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/NotificationReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/NotificationReader.java
@@ -112,6 +112,25 @@ public NotificationReader setMessageDate(final Range<LocalDate> rangeMessageDate
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Notification ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Notification> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -132,6 +151,26 @@ public NotificationReader setMessageDate(final Range<LocalDate> rangeMessageDate
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Notification> previousPage(final Page<Notification> page, 
+                                           final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Notification Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/OutgoingCallerIdReader.java b/src/main/java/com/twilio/rest/api/v2010/account/OutgoingCallerIdReader.java
index 18f059113..d82d29cf7 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/OutgoingCallerIdReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/OutgoingCallerIdReader.java
@@ -93,6 +93,25 @@ public OutgoingCallerIdReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return OutgoingCallerId ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<OutgoingCallerId> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -113,6 +132,26 @@ public OutgoingCallerIdReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<OutgoingCallerId> previousPage(final Page<OutgoingCallerId> page, 
+                                               final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of OutgoingCallerId Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/QueueReader.java b/src/main/java/com/twilio/rest/api/v2010/account/QueueReader.java
index 2754d98f3..75bcea8c2 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/QueueReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/QueueReader.java
@@ -69,6 +69,25 @@ public QueueReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Queue ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Queue> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public QueueReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Queue> previousPage(final Page<Queue> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Queue Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java b/src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java
index 56982192b..557025716 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/RecordingReader.java
@@ -112,6 +112,25 @@ public RecordingReader setCallSid(final String callSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Recording ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Recording> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -132,6 +151,26 @@ public RecordingReader setCallSid(final String callSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Recording> previousPage(final Page<Recording> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Recording Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/ShortCodeReader.java b/src/main/java/com/twilio/rest/api/v2010/account/ShortCodeReader.java
index d4defbec5..b76374231 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/ShortCodeReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/ShortCodeReader.java
@@ -95,6 +95,25 @@ public ShortCodeReader setShortCode(final String shortCode) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return ShortCode ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<ShortCode> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -115,6 +134,26 @@ public ShortCodeReader setShortCode(final String shortCode) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<ShortCode> previousPage(final Page<ShortCode> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of ShortCode Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/SigningKeyReader.java b/src/main/java/com/twilio/rest/api/v2010/account/SigningKeyReader.java
index 8facfac04..0a5620987 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/SigningKeyReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/SigningKeyReader.java
@@ -69,6 +69,25 @@ public SigningKeyReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return SigningKey ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<SigningKey> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public SigningKeyReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<SigningKey> previousPage(final Page<SigningKey> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of SigningKey Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/TranscriptionReader.java b/src/main/java/com/twilio/rest/api/v2010/account/TranscriptionReader.java
index 3b73c8cab..0176c20ab 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/TranscriptionReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/TranscriptionReader.java
@@ -69,6 +69,25 @@ public TranscriptionReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Transcription ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Transcription> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public TranscriptionReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Transcription> previousPage(final Page<Transcription> page, 
+                                            final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Transcription Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/address/DependentPhoneNumberReader.java b/src/main/java/com/twilio/rest/api/v2010/account/address/DependentPhoneNumberReader.java
index 01b06afa6..8222ad6a8 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/address/DependentPhoneNumberReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/address/DependentPhoneNumberReader.java
@@ -76,6 +76,25 @@ public DependentPhoneNumberReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return DependentPhoneNumber ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<DependentPhoneNumber> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public DependentPhoneNumberReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<DependentPhoneNumber> previousPage(final Page<DependentPhoneNumber> page, 
+                                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of DependentPhoneNumber Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Local.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Local.java
index b54ac3e1e..6ed63abce 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Local.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Local.java
@@ -33,7 +33,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Local extends Resource {
-    private static final long serialVersionUID = 250162359733040L;
+    private static final long serialVersionUID = 16937856072206L;
 
     /**
      * Create a LocalReader to execute read.
@@ -97,6 +97,7 @@ public static Local fromJson(final InputStream json, final ObjectMapper objectMa
     private final com.twilio.type.PhoneNumber friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
     private final String lata;
+    private final String locality;
     private final String rateCenter;
     private final BigDecimal latitude;
     private final BigDecimal longitude;
@@ -114,6 +115,8 @@ private Local(@JsonProperty("friendly_name")
                   final com.twilio.type.PhoneNumber phoneNumber, 
                   @JsonProperty("lata")
                   final String lata, 
+                  @JsonProperty("locality")
+                  final String locality, 
                   @JsonProperty("rate_center")
                   final String rateCenter, 
                   @JsonProperty("latitude")
@@ -135,6 +138,7 @@ private Local(@JsonProperty("friendly_name")
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
         this.lata = lata;
+        this.locality = locality;
         this.rateCenter = rateCenter;
         this.latitude = latitude;
         this.longitude = longitude;
@@ -173,6 +177,15 @@ public final String getLata() {
         return this.lata;
     }
 
+    /**
+     * Returns The The locality.
+     * 
+     * @return The locality
+     */
+    public final String getLocality() {
+        return this.locality;
+    }
+
     /**
      * Returns The The rate_center.
      * 
@@ -269,6 +282,7 @@ public boolean equals(final Object o) {
         return Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
                Objects.equals(lata, other.lata) && 
+               Objects.equals(locality, other.locality) && 
                Objects.equals(rateCenter, other.rateCenter) && 
                Objects.equals(latitude, other.latitude) && 
                Objects.equals(longitude, other.longitude) && 
@@ -285,6 +299,7 @@ public int hashCode() {
         return Objects.hash(friendlyName,
                             phoneNumber,
                             lata,
+                            locality,
                             rateCenter,
                             latitude,
                             longitude,
@@ -302,6 +317,7 @@ public String toString() {
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
                           .add("lata", lata)
+                          .add("locality", locality)
                           .add("rateCenter", rateCenter)
                           .add("latitude", latitude)
                           .add("longitude", longitude)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalReader.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalReader.java
index 883d8e964..5e0130294 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalReader.java
@@ -38,6 +38,7 @@
     private String inRegion;
     private String inRateCenter;
     private String inLata;
+    private String inLocality;
 
     /**
      * Construct a new LocalReader.
@@ -236,6 +237,17 @@ public LocalReader setInLata(final String inLata) {
         return this;
     }
 
+    /**
+     * The in_locality.
+     * 
+     * @param inLocality The in_locality
+     * @return this
+     */
+    public LocalReader setInLocality(final String inLocality) {
+        this.inLocality = inLocality;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -268,6 +280,25 @@ public LocalReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Local ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Local> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -288,6 +319,26 @@ public LocalReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Local> previousPage(final Page<Local> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Local Resources for a given request.
      * 
@@ -393,6 +444,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("InLata", inLata);
         }
 
+        if (inLocality != null) {
+            request.addQueryParam("InLocality", inLocality);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Mobile.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Mobile.java
index 004359bf5..b788737f1 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Mobile.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/Mobile.java
@@ -33,7 +33,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Mobile extends Resource {
-    private static final long serialVersionUID = 250162359733040L;
+    private static final long serialVersionUID = 16937856072206L;
 
     /**
      * Create a MobileReader to execute read.
@@ -97,6 +97,7 @@ public static Mobile fromJson(final InputStream json, final ObjectMapper objectM
     private final com.twilio.type.PhoneNumber friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
     private final String lata;
+    private final String locality;
     private final String rateCenter;
     private final BigDecimal latitude;
     private final BigDecimal longitude;
@@ -114,6 +115,8 @@ private Mobile(@JsonProperty("friendly_name")
                    final com.twilio.type.PhoneNumber phoneNumber, 
                    @JsonProperty("lata")
                    final String lata, 
+                   @JsonProperty("locality")
+                   final String locality, 
                    @JsonProperty("rate_center")
                    final String rateCenter, 
                    @JsonProperty("latitude")
@@ -135,6 +138,7 @@ private Mobile(@JsonProperty("friendly_name")
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
         this.lata = lata;
+        this.locality = locality;
         this.rateCenter = rateCenter;
         this.latitude = latitude;
         this.longitude = longitude;
@@ -173,6 +177,15 @@ public final String getLata() {
         return this.lata;
     }
 
+    /**
+     * Returns The The locality.
+     * 
+     * @return The locality
+     */
+    public final String getLocality() {
+        return this.locality;
+    }
+
     /**
      * Returns The The rate_center.
      * 
@@ -269,6 +282,7 @@ public boolean equals(final Object o) {
         return Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
                Objects.equals(lata, other.lata) && 
+               Objects.equals(locality, other.locality) && 
                Objects.equals(rateCenter, other.rateCenter) && 
                Objects.equals(latitude, other.latitude) && 
                Objects.equals(longitude, other.longitude) && 
@@ -285,6 +299,7 @@ public int hashCode() {
         return Objects.hash(friendlyName,
                             phoneNumber,
                             lata,
+                            locality,
                             rateCenter,
                             latitude,
                             longitude,
@@ -302,6 +317,7 @@ public String toString() {
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
                           .add("lata", lata)
+                          .add("locality", locality)
                           .add("rateCenter", rateCenter)
                           .add("latitude", latitude)
                           .add("longitude", longitude)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileReader.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileReader.java
index 9911e8748..0c605085e 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileReader.java
@@ -38,6 +38,7 @@
     private String inRegion;
     private String inRateCenter;
     private String inLata;
+    private String inLocality;
 
     /**
      * Construct a new MobileReader.
@@ -236,6 +237,17 @@ public MobileReader setInLata(final String inLata) {
         return this;
     }
 
+    /**
+     * The in_locality.
+     * 
+     * @param inLocality The in_locality
+     * @return this
+     */
+    public MobileReader setInLocality(final String inLocality) {
+        this.inLocality = inLocality;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -268,6 +280,25 @@ public MobileReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Mobile ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Mobile> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -288,6 +319,26 @@ public MobileReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Mobile> previousPage(final Page<Mobile> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Mobile Resources for a given request.
      * 
@@ -393,6 +444,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("InLata", inLata);
         }
 
+        if (inLocality != null) {
+            request.addQueryParam("InLocality", inLocality);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFree.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFree.java
index dee167502..301f74c9e 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFree.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFree.java
@@ -33,7 +33,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class TollFree extends Resource {
-    private static final long serialVersionUID = 250162359733040L;
+    private static final long serialVersionUID = 16937856072206L;
 
     /**
      * Create a TollFreeReader to execute read.
@@ -98,6 +98,7 @@ public static TollFree fromJson(final InputStream json, final ObjectMapper objec
     private final com.twilio.type.PhoneNumber friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
     private final String lata;
+    private final String locality;
     private final String rateCenter;
     private final BigDecimal latitude;
     private final BigDecimal longitude;
@@ -115,6 +116,8 @@ private TollFree(@JsonProperty("friendly_name")
                      final com.twilio.type.PhoneNumber phoneNumber, 
                      @JsonProperty("lata")
                      final String lata, 
+                     @JsonProperty("locality")
+                     final String locality, 
                      @JsonProperty("rate_center")
                      final String rateCenter, 
                      @JsonProperty("latitude")
@@ -136,6 +139,7 @@ private TollFree(@JsonProperty("friendly_name")
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
         this.lata = lata;
+        this.locality = locality;
         this.rateCenter = rateCenter;
         this.latitude = latitude;
         this.longitude = longitude;
@@ -174,6 +178,15 @@ public final String getLata() {
         return this.lata;
     }
 
+    /**
+     * Returns The The locality.
+     * 
+     * @return The locality
+     */
+    public final String getLocality() {
+        return this.locality;
+    }
+
     /**
      * Returns The The rate_center.
      * 
@@ -270,6 +283,7 @@ public boolean equals(final Object o) {
         return Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
                Objects.equals(lata, other.lata) && 
+               Objects.equals(locality, other.locality) && 
                Objects.equals(rateCenter, other.rateCenter) && 
                Objects.equals(latitude, other.latitude) && 
                Objects.equals(longitude, other.longitude) && 
@@ -286,6 +300,7 @@ public int hashCode() {
         return Objects.hash(friendlyName,
                             phoneNumber,
                             lata,
+                            locality,
                             rateCenter,
                             latitude,
                             longitude,
@@ -303,6 +318,7 @@ public String toString() {
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
                           .add("lata", lata)
+                          .add("locality", locality)
                           .add("rateCenter", rateCenter)
                           .add("latitude", latitude)
                           .add("longitude", longitude)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeReader.java b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeReader.java
index 513016f2b..84fd953fb 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeReader.java
@@ -38,6 +38,7 @@
     private String inRegion;
     private String inRateCenter;
     private String inLata;
+    private String inLocality;
 
     /**
      * Construct a new TollFreeReader.
@@ -236,6 +237,17 @@ public TollFreeReader setInLata(final String inLata) {
         return this;
     }
 
+    /**
+     * The in_locality.
+     * 
+     * @param inLocality The in_locality
+     * @return this
+     */
+    public TollFreeReader setInLocality(final String inLocality) {
+        this.inLocality = inLocality;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -268,6 +280,25 @@ public TollFreeReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return TollFree ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<TollFree> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -288,6 +319,26 @@ public TollFreeReader setInLata(final String inLata) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<TollFree> previousPage(final Page<TollFree> page, 
+                                       final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of TollFree Resources for a given request.
      * 
@@ -393,6 +444,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("InLata", inLata);
         }
 
+        if (inLocality != null) {
+            request.addQueryParam("InLocality", inLocality);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java b/src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java
index 23dbe4270..0260dd049 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/call/NotificationReader.java
@@ -117,6 +117,25 @@ public NotificationReader setMessageDate(final Range<LocalDate> rangeMessageDate
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Notification ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Notification> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -137,6 +156,26 @@ public NotificationReader setMessageDate(final Range<LocalDate> rangeMessageDate
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Notification> previousPage(final Page<Notification> page, 
+                                           final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Notification Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/call/RecordingReader.java b/src/main/java/com/twilio/rest/api/v2010/account/call/RecordingReader.java
index 75433253b..65eca179d 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/call/RecordingReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/call/RecordingReader.java
@@ -105,6 +105,25 @@ public RecordingReader setDateCreated(final Range<LocalDate> rangeDateCreated) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Recording ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Recording> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -125,6 +144,26 @@ public RecordingReader setDateCreated(final Range<LocalDate> rangeDateCreated) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Recording> previousPage(final Page<Recording> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Recording Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantReader.java b/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantReader.java
index b046d276e..60996b967 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantReader.java
@@ -100,6 +100,25 @@ public ParticipantReader setHold(final Boolean hold) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Participant ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Participant> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -120,6 +139,26 @@ public ParticipantReader setHold(final Boolean hold) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Participant> previousPage(final Page<Participant> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Participant Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantUpdater.java b/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantUpdater.java
index 1d56ec3b2..c797ee5de 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantUpdater.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/conference/ParticipantUpdater.java
@@ -28,6 +28,8 @@
     private Boolean hold;
     private URI holdUrl;
     private HttpMethod holdMethod;
+    private URI announceUrl;
+    private HttpMethod announceUrlMethod;
 
     /**
      * Construct a new ParticipantUpdater.
@@ -110,6 +112,38 @@ public ParticipantUpdater setHoldMethod(final HttpMethod holdMethod) {
         return this;
     }
 
+    /**
+     * The announce_url.
+     * 
+     * @param announceUrl The announce_url
+     * @return this
+     */
+    public ParticipantUpdater setAnnounceUrl(final URI announceUrl) {
+        this.announceUrl = announceUrl;
+        return this;
+    }
+
+    /**
+     * The announce_url.
+     * 
+     * @param announceUrl The announce_url
+     * @return this
+     */
+    public ParticipantUpdater setAnnounceUrl(final String announceUrl) {
+        return setAnnounceUrl(Promoter.uriFromString(announceUrl));
+    }
+
+    /**
+     * The announce_url_method.
+     * 
+     * @param announceUrlMethod The announce_url_method
+     * @return this
+     */
+    public ParticipantUpdater setAnnounceUrlMethod(final HttpMethod announceUrlMethod) {
+        this.announceUrlMethod = announceUrlMethod;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the update.
      * 
@@ -171,5 +205,13 @@ private void addPostParams(final Request request) {
         if (holdMethod != null) {
             request.addPostParam("HoldMethod", holdMethod.toString());
         }
+
+        if (announceUrl != null) {
+            request.addPostParam("AnnounceUrl", announceUrl.toString());
+        }
+
+        if (announceUrlMethod != null) {
+            request.addPostParam("AnnounceUrlMethod", announceUrlMethod.toString());
+        }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Local.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Local.java
index 44dc33e76..8cb4cbfb8 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Local.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Local.java
@@ -36,7 +36,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Local extends Resource {
-    private static final long serialVersionUID = 145405771566124L;
+    private static final long serialVersionUID = 113059783533989L;
 
     public enum AddressRequirement {
         NONE("none"),
@@ -152,6 +152,7 @@ public static Local fromJson(final InputStream json, final ObjectMapper objectMa
     private final DateTime dateUpdated;
     private final String friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
+    private final String origin;
     private final String sid;
     private final String smsApplicationSid;
     private final HttpMethod smsFallbackMethod;
@@ -188,6 +189,8 @@ private Local(@JsonProperty("account_sid")
                   final String friendlyName, 
                   @JsonProperty("phone_number")
                   final com.twilio.type.PhoneNumber phoneNumber, 
+                  @JsonProperty("origin")
+                  final String origin, 
                   @JsonProperty("sid")
                   final String sid, 
                   @JsonProperty("sms_application_sid")
@@ -229,6 +232,7 @@ private Local(@JsonProperty("account_sid")
         this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
+        this.origin = origin;
         this.sid = sid;
         this.smsApplicationSid = smsApplicationSid;
         this.smsFallbackMethod = smsFallbackMethod;
@@ -328,6 +332,15 @@ public final String getFriendlyName() {
         return this.phoneNumber;
     }
 
+    /**
+     * Returns The The origin.
+     * 
+     * @return The origin
+     */
+    public final String getOrigin() {
+        return this.origin;
+    }
+
     /**
      * Returns The The sid.
      * 
@@ -493,6 +506,7 @@ public boolean equals(final Object o) {
                Objects.equals(dateUpdated, other.dateUpdated) && 
                Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
+               Objects.equals(origin, other.origin) && 
                Objects.equals(sid, other.sid) && 
                Objects.equals(smsApplicationSid, other.smsApplicationSid) && 
                Objects.equals(smsFallbackMethod, other.smsFallbackMethod) && 
@@ -522,6 +536,7 @@ public int hashCode() {
                             dateUpdated,
                             friendlyName,
                             phoneNumber,
+                            origin,
                             sid,
                             smsApplicationSid,
                             smsFallbackMethod,
@@ -552,6 +567,7 @@ public String toString() {
                           .add("dateUpdated", dateUpdated)
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
+                          .add("origin", origin)
                           .add("sid", sid)
                           .add("smsApplicationSid", smsApplicationSid)
                           .add("smsFallbackMethod", smsFallbackMethod)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalReader.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalReader.java
index 6b20dc5dc..10bd5a07f 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalReader.java
@@ -24,6 +24,7 @@
     private Boolean beta;
     private String friendlyName;
     private com.twilio.type.PhoneNumber phoneNumber;
+    private String origin;
 
     /**
      * Construct a new LocalReader.
@@ -73,6 +74,17 @@ public LocalReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber)
         return this;
     }
 
+    /**
+     * The origin.
+     * 
+     * @param origin The origin
+     * @return this
+     */
+    public LocalReader setOrigin(final String origin) {
+        this.origin = origin;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -105,6 +117,25 @@ public LocalReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber)
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Local ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Local> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -125,6 +156,26 @@ public LocalReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber)
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Local> previousPage(final Page<Local> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Local Resources for a given request.
      * 
@@ -178,6 +229,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("PhoneNumber", phoneNumber.toString());
         }
 
+        if (origin != null) {
+            request.addQueryParam("Origin", origin);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Mobile.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Mobile.java
index 4d217ba1e..f66cc0040 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Mobile.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/Mobile.java
@@ -36,7 +36,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Mobile extends Resource {
-    private static final long serialVersionUID = 145405771566124L;
+    private static final long serialVersionUID = 113059783533989L;
 
     public enum AddressRequirement {
         NONE("none"),
@@ -152,6 +152,7 @@ public static Mobile fromJson(final InputStream json, final ObjectMapper objectM
     private final DateTime dateUpdated;
     private final String friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
+    private final String origin;
     private final String sid;
     private final String smsApplicationSid;
     private final HttpMethod smsFallbackMethod;
@@ -188,6 +189,8 @@ private Mobile(@JsonProperty("account_sid")
                    final String friendlyName, 
                    @JsonProperty("phone_number")
                    final com.twilio.type.PhoneNumber phoneNumber, 
+                   @JsonProperty("origin")
+                   final String origin, 
                    @JsonProperty("sid")
                    final String sid, 
                    @JsonProperty("sms_application_sid")
@@ -229,6 +232,7 @@ private Mobile(@JsonProperty("account_sid")
         this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
+        this.origin = origin;
         this.sid = sid;
         this.smsApplicationSid = smsApplicationSid;
         this.smsFallbackMethod = smsFallbackMethod;
@@ -328,6 +332,15 @@ public final String getFriendlyName() {
         return this.phoneNumber;
     }
 
+    /**
+     * Returns The The origin.
+     * 
+     * @return The origin
+     */
+    public final String getOrigin() {
+        return this.origin;
+    }
+
     /**
      * Returns The The sid.
      * 
@@ -493,6 +506,7 @@ public boolean equals(final Object o) {
                Objects.equals(dateUpdated, other.dateUpdated) && 
                Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
+               Objects.equals(origin, other.origin) && 
                Objects.equals(sid, other.sid) && 
                Objects.equals(smsApplicationSid, other.smsApplicationSid) && 
                Objects.equals(smsFallbackMethod, other.smsFallbackMethod) && 
@@ -522,6 +536,7 @@ public int hashCode() {
                             dateUpdated,
                             friendlyName,
                             phoneNumber,
+                            origin,
                             sid,
                             smsApplicationSid,
                             smsFallbackMethod,
@@ -552,6 +567,7 @@ public String toString() {
                           .add("dateUpdated", dateUpdated)
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
+                          .add("origin", origin)
                           .add("sid", sid)
                           .add("smsApplicationSid", smsApplicationSid)
                           .add("smsFallbackMethod", smsFallbackMethod)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileReader.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileReader.java
index c583a096d..72037d56a 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileReader.java
@@ -24,6 +24,7 @@
     private Boolean beta;
     private String friendlyName;
     private com.twilio.type.PhoneNumber phoneNumber;
+    private String origin;
 
     /**
      * Construct a new MobileReader.
@@ -73,6 +74,17 @@ public MobileReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber
         return this;
     }
 
+    /**
+     * The origin.
+     * 
+     * @param origin The origin
+     * @return this
+     */
+    public MobileReader setOrigin(final String origin) {
+        this.origin = origin;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -105,6 +117,25 @@ public MobileReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Mobile ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Mobile> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -125,6 +156,26 @@ public MobileReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumber
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Mobile> previousPage(final Page<Mobile> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Mobile Resources for a given request.
      * 
@@ -178,6 +229,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("PhoneNumber", phoneNumber.toString());
         }
 
+        if (origin != null) {
+            request.addQueryParam("Origin", origin);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFree.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFree.java
index b4a78c81f..f8467fa48 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFree.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFree.java
@@ -36,7 +36,7 @@
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class TollFree extends Resource {
-    private static final long serialVersionUID = 145405771566124L;
+    private static final long serialVersionUID = 113059783533989L;
 
     public enum AddressRequirement {
         NONE("none"),
@@ -153,6 +153,7 @@ public static TollFree fromJson(final InputStream json, final ObjectMapper objec
     private final DateTime dateUpdated;
     private final String friendlyName;
     private final com.twilio.type.PhoneNumber phoneNumber;
+    private final String origin;
     private final String sid;
     private final String smsApplicationSid;
     private final HttpMethod smsFallbackMethod;
@@ -189,6 +190,8 @@ private TollFree(@JsonProperty("account_sid")
                      final String friendlyName, 
                      @JsonProperty("phone_number")
                      final com.twilio.type.PhoneNumber phoneNumber, 
+                     @JsonProperty("origin")
+                     final String origin, 
                      @JsonProperty("sid")
                      final String sid, 
                      @JsonProperty("sms_application_sid")
@@ -230,6 +233,7 @@ private TollFree(@JsonProperty("account_sid")
         this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
         this.friendlyName = friendlyName;
         this.phoneNumber = phoneNumber;
+        this.origin = origin;
         this.sid = sid;
         this.smsApplicationSid = smsApplicationSid;
         this.smsFallbackMethod = smsFallbackMethod;
@@ -329,6 +333,15 @@ public final String getFriendlyName() {
         return this.phoneNumber;
     }
 
+    /**
+     * Returns The The origin.
+     * 
+     * @return The origin
+     */
+    public final String getOrigin() {
+        return this.origin;
+    }
+
     /**
      * Returns The The sid.
      * 
@@ -494,6 +507,7 @@ public boolean equals(final Object o) {
                Objects.equals(dateUpdated, other.dateUpdated) && 
                Objects.equals(friendlyName, other.friendlyName) && 
                Objects.equals(phoneNumber, other.phoneNumber) && 
+               Objects.equals(origin, other.origin) && 
                Objects.equals(sid, other.sid) && 
                Objects.equals(smsApplicationSid, other.smsApplicationSid) && 
                Objects.equals(smsFallbackMethod, other.smsFallbackMethod) && 
@@ -523,6 +537,7 @@ public int hashCode() {
                             dateUpdated,
                             friendlyName,
                             phoneNumber,
+                            origin,
                             sid,
                             smsApplicationSid,
                             smsFallbackMethod,
@@ -553,6 +568,7 @@ public String toString() {
                           .add("dateUpdated", dateUpdated)
                           .add("friendlyName", friendlyName)
                           .add("phoneNumber", phoneNumber)
+                          .add("origin", origin)
                           .add("sid", sid)
                           .add("smsApplicationSid", smsApplicationSid)
                           .add("smsFallbackMethod", smsFallbackMethod)
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeReader.java b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeReader.java
index f291ca063..7422b8f38 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeReader.java
@@ -24,6 +24,7 @@
     private Boolean beta;
     private String friendlyName;
     private com.twilio.type.PhoneNumber phoneNumber;
+    private String origin;
 
     /**
      * Construct a new TollFreeReader.
@@ -73,6 +74,17 @@ public TollFreeReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumb
         return this;
     }
 
+    /**
+     * The origin.
+     * 
+     * @param origin The origin
+     * @return this
+     */
+    public TollFreeReader setOrigin(final String origin) {
+        this.origin = origin;
+        return this;
+    }
+
     /**
      * Make the request to the Twilio API to perform the read.
      * 
@@ -105,6 +117,25 @@ public TollFreeReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumb
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return TollFree ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<TollFree> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -125,6 +156,26 @@ public TollFreeReader setPhoneNumber(final com.twilio.type.PhoneNumber phoneNumb
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<TollFree> previousPage(final Page<TollFree> page, 
+                                       final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of TollFree Resources for a given request.
      * 
@@ -178,6 +229,10 @@ private void addQueryParams(final Request request) {
             request.addQueryParam("PhoneNumber", phoneNumber.toString());
         }
 
+        if (origin != null) {
+            request.addQueryParam("Origin", origin);
+        }
+
         if (getPageSize() != null) {
             request.addQueryParam("PageSize", Integer.toString(getPageSize()));
         }
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/message/MediaReader.java b/src/main/java/com/twilio/rest/api/v2010/account/message/MediaReader.java
index c693ace8b..317ec705a 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/message/MediaReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/message/MediaReader.java
@@ -107,6 +107,25 @@ public MediaReader setDateCreated(final Range<DateTime> rangeDateCreated) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Media ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Media> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public MediaReader setDateCreated(final Range<DateTime> rangeDateCreated) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Media> previousPage(final Page<Media> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Media Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/queue/MemberReader.java b/src/main/java/com/twilio/rest/api/v2010/account/queue/MemberReader.java
index 66210e9c1..c70725c9c 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/queue/MemberReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/queue/MemberReader.java
@@ -76,6 +76,25 @@ public MemberReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Member ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Member> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public MemberReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Member> previousPage(final Page<Member> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Member Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/recording/AddOnResultReader.java b/src/main/java/com/twilio/rest/api/v2010/account/recording/AddOnResultReader.java
index 10b8311c9..6c0ab19b5 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/recording/AddOnResultReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/recording/AddOnResultReader.java
@@ -76,6 +76,25 @@ public AddOnResultReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return AddOnResult ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<AddOnResult> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public AddOnResultReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<AddOnResult> previousPage(final Page<AddOnResult> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of AddOnResult Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/recording/TranscriptionReader.java b/src/main/java/com/twilio/rest/api/v2010/account/recording/TranscriptionReader.java
index ce13d980d..df8bf610b 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/recording/TranscriptionReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/recording/TranscriptionReader.java
@@ -76,6 +76,25 @@ public TranscriptionReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Transcription ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Transcription> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public TranscriptionReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Transcription> previousPage(final Page<Transcription> page, 
+                                            final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Transcription Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/recording/addonresult/PayloadReader.java b/src/main/java/com/twilio/rest/api/v2010/account/recording/addonresult/PayloadReader.java
index 28ab53dcb..c0cff7b2b 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/recording/addonresult/PayloadReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/recording/addonresult/PayloadReader.java
@@ -83,6 +83,25 @@ public PayloadReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Payload ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Payload> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -103,6 +122,26 @@ public PayloadReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Payload> previousPage(final Page<Payload> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Payload Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/CredentialListReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/CredentialListReader.java
index ab9296b37..4d615a486 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/CredentialListReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/CredentialListReader.java
@@ -69,6 +69,25 @@ public CredentialListReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return CredentialList ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<CredentialList> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public CredentialListReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<CredentialList> previousPage(final Page<CredentialList> page, 
+                                             final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of CredentialList Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/DomainReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/DomainReader.java
index 9a7458ac5..e281449c5 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/DomainReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/DomainReader.java
@@ -69,6 +69,25 @@ public DomainReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Domain ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Domain> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public DomainReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Domain> previousPage(final Page<Domain> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Domain Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/IpAccessControlListReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/IpAccessControlListReader.java
index 5868d71ea..92e95d994 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/IpAccessControlListReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/IpAccessControlListReader.java
@@ -69,6 +69,25 @@ public IpAccessControlListReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return IpAccessControlList ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<IpAccessControlList> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -89,6 +108,26 @@ public IpAccessControlListReader(final String pathAccountSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<IpAccessControlList> previousPage(final Page<IpAccessControlList> page, 
+                                                  final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of IpAccessControlList Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/credentiallist/CredentialReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/credentiallist/CredentialReader.java
index 76771d2c3..184e7108c 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/credentiallist/CredentialReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/credentiallist/CredentialReader.java
@@ -76,6 +76,25 @@ public CredentialReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Credential ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Credential> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public CredentialReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Credential> previousPage(final Page<Credential> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Credential Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/CredentialListMappingReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/CredentialListMappingReader.java
index c6699b6dc..83122caaf 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/CredentialListMappingReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/CredentialListMappingReader.java
@@ -76,6 +76,25 @@ public CredentialListMappingReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return CredentialListMapping ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<CredentialListMapping> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public CredentialListMappingReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<CredentialListMapping> previousPage(final Page<CredentialListMapping> page, 
+                                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of CredentialListMapping Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/IpAccessControlListMappingReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/IpAccessControlListMappingReader.java
index 2e5b90a0d..c6220df2a 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/IpAccessControlListMappingReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/domain/IpAccessControlListMappingReader.java
@@ -76,6 +76,25 @@ public IpAccessControlListMappingReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return IpAccessControlListMapping ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<IpAccessControlListMapping> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public IpAccessControlListMappingReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<IpAccessControlListMapping> previousPage(final Page<IpAccessControlListMapping> page, 
+                                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of IpAccessControlListMapping Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/sip/ipaccesscontrollist/IpAddressReader.java b/src/main/java/com/twilio/rest/api/v2010/account/sip/ipaccesscontrollist/IpAddressReader.java
index 5c9bc0bf3..b863f6898 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/sip/ipaccesscontrollist/IpAddressReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/sip/ipaccesscontrollist/IpAddressReader.java
@@ -76,6 +76,25 @@ public IpAddressReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return IpAddress ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<IpAddress> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -96,6 +115,26 @@ public IpAddressReader(final String pathAccountSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<IpAddress> previousPage(final Page<IpAddress> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of IpAddress Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/Record.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/Record.java
index 22af67031..b3e46a76a 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/Record.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/Record.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/RecordReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/RecordReader.java
index 3fc7b73b9..288fd4aa2 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/RecordReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/RecordReader.java
@@ -112,6 +112,25 @@ public RecordReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Record ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Record> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -132,6 +151,26 @@ public RecordReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Record> previousPage(final Page<Record> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Record Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/Trigger.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/Trigger.java
index 745740c4d..dfbfb4b08 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/Trigger.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/Trigger.java
@@ -171,6 +171,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -217,8 +221,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/TriggerReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/TriggerReader.java
index a4d060bf7..b3d2843f5 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/TriggerReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/TriggerReader.java
@@ -106,6 +106,25 @@ public TriggerReader setUsageCategory(final Trigger.UsageCategory usageCategory)
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Trigger ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Trigger> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -126,6 +145,26 @@ public TriggerReader setUsageCategory(final Trigger.UsageCategory usageCategory)
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Trigger> previousPage(final Page<Trigger> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Trigger Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTime.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTime.java
index d530f70e3..978af2ed1 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTime.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTime.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTimeReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTimeReader.java
index 72afca0c8..0c0c76f77 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTimeReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/AllTimeReader.java
@@ -107,6 +107,25 @@ public AllTimeReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return AllTime ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<AllTime> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public AllTimeReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<AllTime> previousPage(final Page<AllTime> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of AllTime Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Daily.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Daily.java
index f5f18cab8..162ccf97f 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Daily.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Daily.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/DailyReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/DailyReader.java
index 5ce03ec32..ea2216bd3 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/DailyReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/DailyReader.java
@@ -107,6 +107,25 @@ public DailyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Daily ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Daily> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public DailyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Daily> previousPage(final Page<Daily> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Daily Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonth.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonth.java
index 05f163233..4a8e9864b 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonth.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonth.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonthReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonthReader.java
index 133b23ac2..c3c5f05be 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonthReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/LastMonthReader.java
@@ -107,6 +107,25 @@ public LastMonthReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return LastMonth ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<LastMonth> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public LastMonthReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<LastMonth> previousPage(final Page<LastMonth> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of LastMonth Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Monthly.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Monthly.java
index 97b435909..9f4f3d908 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Monthly.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Monthly.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/MonthlyReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/MonthlyReader.java
index 42cf49bfa..ed59b23be 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/MonthlyReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/MonthlyReader.java
@@ -107,6 +107,25 @@ public MonthlyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Monthly ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Monthly> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public MonthlyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Monthly> previousPage(final Page<Monthly> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Monthly Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonth.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonth.java
index 0f21cddbc..6c509e784 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonth.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonth.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonthReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonthReader.java
index 4ee8add2c..30d194453 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonthReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/ThisMonthReader.java
@@ -107,6 +107,25 @@ public ThisMonthReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return ThisMonth ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<ThisMonth> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public ThisMonthReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<ThisMonth> previousPage(final Page<ThisMonth> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of ThisMonth Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Today.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Today.java
index 265f4f857..f1e9a7381 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Today.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Today.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/TodayReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/TodayReader.java
index cd0867fb7..ca1f02a18 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/TodayReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/TodayReader.java
@@ -107,6 +107,25 @@ public TodayReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Today ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Today> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public TodayReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Today> previousPage(final Page<Today> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Today Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yearly.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yearly.java
index a0db6b118..d89677578 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yearly.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yearly.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YearlyReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YearlyReader.java
index e860e17e7..658c864cc 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YearlyReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YearlyReader.java
@@ -107,6 +107,25 @@ public YearlyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Yearly ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Yearly> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public YearlyReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Yearly> previousPage(final Page<Yearly> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Yearly Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yesterday.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yesterday.java
index 9c3218b6e..5269dd381 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yesterday.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/Yesterday.java
@@ -173,6 +173,10 @@
         SMS_OUTBOUND_LONGCODE("sms-outbound-longcode"),
         SMS_OUTBOUND_SHORTCODE("sms-outbound-shortcode"),
         SMS_MESSAGES_FEATURES("sms-messages-features"),
+        SYNC("sync"),
+        SYNC_ACTIONS("sync-actions"),
+        SYNC_ENDPOINT_HOURS("sync-endpoint-hours"),
+        SYNC_ENDPOINT_HOURS_ABOVE_DAILY_CAP("sync-endpoint-hours-above-daily-cap"),
         TASKROUTER_TASKS("taskrouter-tasks"),
         TOTALPRICE("totalprice"),
         TRANSCRIPTIONS("transcriptions"),
@@ -219,8 +223,7 @@
         WIRELESS_USAGE_MRC("wireless-usage-mrc"),
         WIRELESS_USAGE_MRC_CUSTOM("wireless-usage-mrc-custom"),
         WIRELESS_USAGE_MRC_INDIVIDUAL("wireless-usage-mrc-individual"),
-        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled"),
-        SYNC("sync");
+        WIRELESS_USAGE_MRC_POOLED("wireless-usage-mrc-pooled");
 
         private final String value;
 
diff --git a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YesterdayReader.java b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YesterdayReader.java
index 92126ff6e..29076a73f 100644
--- a/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YesterdayReader.java
+++ b/src/main/java/com/twilio/rest/api/v2010/account/usage/record/YesterdayReader.java
@@ -107,6 +107,25 @@ public YesterdayReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Yesterday ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Yesterday> getPage(final String targetUrl, final TwilioRestClient client) {
+        this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -127,6 +146,26 @@ public YesterdayReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Yesterday> previousPage(final Page<Yesterday> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.API.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Yesterday Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/CredentialReader.java b/src/main/java/com/twilio/rest/chat/v1/CredentialReader.java
index 0f6b3396b..9b2c884a8 100644
--- a/src/main/java/com/twilio/rest/chat/v1/CredentialReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/CredentialReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Credential ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Credential> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Credential> previousPage(final Page<Credential> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Credential Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/ServiceReader.java b/src/main/java/com/twilio/rest/chat/v1/ServiceReader.java
index fac71951e..d0a0b0768 100644
--- a/src/main/java/com/twilio/rest/chat/v1/ServiceReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/ServiceReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Service ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Service> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Service> previousPage(final Page<Service> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Service Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/ChannelReader.java b/src/main/java/com/twilio/rest/chat/v1/service/ChannelReader.java
index 40dbc2f8f..55212c225 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/ChannelReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/ChannelReader.java
@@ -87,6 +87,24 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Channel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Channel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -107,6 +125,26 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Channel> previousPage(final Page<Channel> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Channel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/RoleReader.java b/src/main/java/com/twilio/rest/chat/v1/service/RoleReader.java
index 90819a884..9fdf3e449 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/RoleReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/RoleReader.java
@@ -62,6 +62,24 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Role ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Role> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Role> previousPage(final Page<Role> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Role Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/UserReader.java b/src/main/java/com/twilio/rest/chat/v1/service/UserReader.java
index 7064698f0..4537c2388 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/UserReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/UserReader.java
@@ -62,6 +62,24 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return User ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<User> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<User> previousPage(final Page<User> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of User Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/channel/InviteReader.java b/src/main/java/com/twilio/rest/chat/v1/service/channel/InviteReader.java
index d05e49e0e..e1725e05d 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/channel/InviteReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/channel/InviteReader.java
@@ -91,6 +91,24 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Invite ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Invite> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Invite> previousPage(final Page<Invite> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Invite Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/channel/MemberReader.java b/src/main/java/com/twilio/rest/chat/v1/service/channel/MemberReader.java
index e38bcdfd9..e33e0c571 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/channel/MemberReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/channel/MemberReader.java
@@ -91,6 +91,24 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Member ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Member> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Member> previousPage(final Page<Member> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Member Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/channel/MessageReader.java b/src/main/java/com/twilio/rest/chat/v1/service/channel/MessageReader.java
index f231bc301..0dfa6516a 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/channel/MessageReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/channel/MessageReader.java
@@ -78,6 +78,24 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Message ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Message> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Message> previousPage(final Page<Message> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Message Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v1/service/user/UserChannelReader.java b/src/main/java/com/twilio/rest/chat/v1/service/user/UserChannelReader.java
index 7ad513dde..79745b62d 100644
--- a/src/main/java/com/twilio/rest/chat/v1/service/user/UserChannelReader.java
+++ b/src/main/java/com/twilio/rest/chat/v1/service/user/UserChannelReader.java
@@ -66,6 +66,24 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return UserChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<UserChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -86,6 +104,26 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<UserChannel> previousPage(final Page<UserChannel> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of UserChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/CredentialReader.java b/src/main/java/com/twilio/rest/chat/v2/CredentialReader.java
index b58081027..17d6264a3 100644
--- a/src/main/java/com/twilio/rest/chat/v2/CredentialReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/CredentialReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Credential ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Credential> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Credential> previousPage(final Page<Credential> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Credential Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/ServiceReader.java b/src/main/java/com/twilio/rest/chat/v2/ServiceReader.java
index ecc1b0551..dfbbc24c0 100644
--- a/src/main/java/com/twilio/rest/chat/v2/ServiceReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/ServiceReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Service ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Service> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Service> previousPage(final Page<Service> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Service Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/ChannelReader.java b/src/main/java/com/twilio/rest/chat/v2/service/ChannelReader.java
index 1c3363647..04503b44a 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/ChannelReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/ChannelReader.java
@@ -87,6 +87,24 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Channel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Channel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -107,6 +125,26 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Channel> previousPage(final Page<Channel> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Channel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/RoleReader.java b/src/main/java/com/twilio/rest/chat/v2/service/RoleReader.java
index 0f386f8e6..2ed88793a 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/RoleReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/RoleReader.java
@@ -62,6 +62,24 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Role ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Role> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Role> previousPage(final Page<Role> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Role Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/UserReader.java b/src/main/java/com/twilio/rest/chat/v2/service/UserReader.java
index 51454e7d4..51ffa484e 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/UserReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/UserReader.java
@@ -62,6 +62,24 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return User ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<User> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<User> previousPage(final Page<User> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of User Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/channel/InviteReader.java b/src/main/java/com/twilio/rest/chat/v2/service/channel/InviteReader.java
index ba4812d02..78747a1bd 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/channel/InviteReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/channel/InviteReader.java
@@ -91,6 +91,24 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Invite ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Invite> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Invite> previousPage(final Page<Invite> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Invite Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/channel/MemberReader.java b/src/main/java/com/twilio/rest/chat/v2/service/channel/MemberReader.java
index 727d16a0f..e990c3673 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/channel/MemberReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/channel/MemberReader.java
@@ -91,6 +91,24 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Member ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Member> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Member> previousPage(final Page<Member> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Member Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/channel/MessageReader.java b/src/main/java/com/twilio/rest/chat/v2/service/channel/MessageReader.java
index 5396e483d..795071664 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/channel/MessageReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/channel/MessageReader.java
@@ -78,6 +78,24 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Message ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Message> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Message> previousPage(final Page<Message> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Message Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/chat/v2/service/user/UserChannelReader.java b/src/main/java/com/twilio/rest/chat/v2/service/user/UserChannelReader.java
index ef4cba2da..50ddd98bd 100644
--- a/src/main/java/com/twilio/rest/chat/v2/service/user/UserChannelReader.java
+++ b/src/main/java/com/twilio/rest/chat/v2/service/user/UserChannelReader.java
@@ -66,6 +66,24 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return UserChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<UserChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -86,6 +104,26 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<UserChannel> previousPage(final Page<UserChannel> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.CHAT.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of UserChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/CredentialReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/CredentialReader.java
index a192ebb28..b3b81f377 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/CredentialReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/CredentialReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Credential ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Credential> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Credential> previousPage(final Page<Credential> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Credential Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/ServiceReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/ServiceReader.java
index 4f5ea0739..33646ea46 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/ServiceReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/ServiceReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Service ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Service> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Service> previousPage(final Page<Service> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Service Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/ChannelReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/ChannelReader.java
index 7eaca4ca6..3321d7d93 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/ChannelReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/ChannelReader.java
@@ -87,6 +87,24 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Channel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Channel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -107,6 +125,26 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Channel> previousPage(final Page<Channel> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Channel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/RoleReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/RoleReader.java
index a6b109eac..ad13114ad 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/RoleReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/RoleReader.java
@@ -62,6 +62,24 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Role ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Role> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Role> previousPage(final Page<Role> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Role Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/UserReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/UserReader.java
index d0a670d3d..8212c21b3 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/UserReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/UserReader.java
@@ -62,6 +62,24 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return User ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<User> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<User> previousPage(final Page<User> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of User Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/InviteReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/InviteReader.java
index 087c9a733..372dca3b7 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/InviteReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/InviteReader.java
@@ -91,6 +91,24 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Invite ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Invite> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Invite> previousPage(final Page<Invite> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Invite Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MemberReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MemberReader.java
index b6c747e00..05e847a45 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MemberReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MemberReader.java
@@ -91,6 +91,24 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Member ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Member> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Member> previousPage(final Page<Member> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Member Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MessageReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MessageReader.java
index 6c8f3b985..0484b7092 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MessageReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/channel/MessageReader.java
@@ -78,6 +78,24 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Message ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Message> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Message> previousPage(final Page<Message> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Message Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v1/service/user/UserChannelReader.java b/src/main/java/com/twilio/rest/ipmessaging/v1/service/user/UserChannelReader.java
index 3ea234e71..be60cbad6 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v1/service/user/UserChannelReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v1/service/user/UserChannelReader.java
@@ -66,6 +66,24 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return UserChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<UserChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -86,6 +104,26 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<UserChannel> previousPage(final Page<UserChannel> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of UserChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/CredentialReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/CredentialReader.java
index af843cf66..21ed83a5c 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/CredentialReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/CredentialReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Credential ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Credential> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Credential> previousPage(final Page<Credential> page, 
+                                         final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Credential Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/ServiceReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/ServiceReader.java
index 21d166c55..f6dd4caa2 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/ServiceReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/ServiceReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Service ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Service> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Service> previousPage(final Page<Service> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Service Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/ChannelReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/ChannelReader.java
index b04d3df0d..f69ebf5e0 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/ChannelReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/ChannelReader.java
@@ -87,6 +87,24 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Channel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Channel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -107,6 +125,26 @@ public ChannelReader setType(final Channel.ChannelType type) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Channel> previousPage(final Page<Channel> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Channel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/RoleReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/RoleReader.java
index 57ee144f9..b5385a4b0 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/RoleReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/RoleReader.java
@@ -62,6 +62,24 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Role ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Role> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public RoleReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Role> previousPage(final Page<Role> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Role Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/UserReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/UserReader.java
index ce231c510..f1e4e042e 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/UserReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/UserReader.java
@@ -62,6 +62,24 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return User ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<User> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public UserReader(final String pathServiceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<User> previousPage(final Page<User> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of User Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/InviteReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/InviteReader.java
index 6727f71b3..9fc8fa32e 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/InviteReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/InviteReader.java
@@ -91,6 +91,24 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Invite ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Invite> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public InviteReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Invite> previousPage(final Page<Invite> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Invite Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MemberReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MemberReader.java
index df90220e0..80141a9e2 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MemberReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MemberReader.java
@@ -91,6 +91,24 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Member ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Member> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -111,6 +129,26 @@ public MemberReader setIdentity(final String identity) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Member> previousPage(final Page<Member> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Member Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MessageReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MessageReader.java
index 475761e01..33c3dbd06 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MessageReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/channel/MessageReader.java
@@ -78,6 +78,24 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Message ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Message> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public MessageReader setOrder(final Message.OrderType order) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Message> previousPage(final Page<Message> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Message Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/ipmessaging/v2/service/user/UserChannelReader.java b/src/main/java/com/twilio/rest/ipmessaging/v2/service/user/UserChannelReader.java
index 00dac24d4..36b3807cb 100644
--- a/src/main/java/com/twilio/rest/ipmessaging/v2/service/user/UserChannelReader.java
+++ b/src/main/java/com/twilio/rest/ipmessaging/v2/service/user/UserChannelReader.java
@@ -66,6 +66,24 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return UserChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<UserChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -86,6 +104,26 @@ public UserChannelReader(final String pathServiceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<UserChannel> previousPage(final Page<UserChannel> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.IPMESSAGING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of UserChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/monitor/v1/AlertReader.java b/src/main/java/com/twilio/rest/monitor/v1/AlertReader.java
index 9b749e578..7986ab529 100644
--- a/src/main/java/com/twilio/rest/monitor/v1/AlertReader.java
+++ b/src/main/java/com/twilio/rest/monitor/v1/AlertReader.java
@@ -90,6 +90,24 @@ public AlertReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Alert ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Alert> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -110,6 +128,26 @@ public AlertReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Alert> previousPage(final Page<Alert> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.MONITOR.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Alert Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/monitor/v1/EventReader.java b/src/main/java/com/twilio/rest/monitor/v1/EventReader.java
index 03c4b95b0..44670bb71 100644
--- a/src/main/java/com/twilio/rest/monitor/v1/EventReader.java
+++ b/src/main/java/com/twilio/rest/monitor/v1/EventReader.java
@@ -126,6 +126,24 @@ public EventReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Event ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Event> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -146,6 +164,26 @@ public EventReader setEndDate(final LocalDate endDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Event> previousPage(final Page<Event> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.MONITOR.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Event Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/pricing/v1/messaging/CountryReader.java b/src/main/java/com/twilio/rest/pricing/v1/messaging/CountryReader.java
index ab6768f4c..9dd30fecd 100644
--- a/src/main/java/com/twilio/rest/pricing/v1/messaging/CountryReader.java
+++ b/src/main/java/com/twilio/rest/pricing/v1/messaging/CountryReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Country ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Country> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Country> previousPage(final Page<Country> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.PRICING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Country Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/pricing/v1/phonenumber/CountryReader.java b/src/main/java/com/twilio/rest/pricing/v1/phonenumber/CountryReader.java
index 2ff2b8bf7..0974e24e4 100644
--- a/src/main/java/com/twilio/rest/pricing/v1/phonenumber/CountryReader.java
+++ b/src/main/java/com/twilio/rest/pricing/v1/phonenumber/CountryReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Country ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Country> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Country> previousPage(final Page<Country> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.PRICING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Country Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/pricing/v1/voice/CountryReader.java b/src/main/java/com/twilio/rest/pricing/v1/voice/CountryReader.java
index 6251063c7..c8fe8f225 100644
--- a/src/main/java/com/twilio/rest/pricing/v1/voice/CountryReader.java
+++ b/src/main/java/com/twilio/rest/pricing/v1/voice/CountryReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Country ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Country> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Country> previousPage(final Page<Country> page, 
+                                      final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.PRICING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Country Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/WorkspaceReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/WorkspaceReader.java
index 27a8f43dd..405332dae 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/WorkspaceReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/WorkspaceReader.java
@@ -64,6 +64,24 @@ public WorkspaceReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Workspace ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Workspace> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -84,6 +102,26 @@ public WorkspaceReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Workspace> previousPage(final Page<Workspace> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Workspace Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/ActivityReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/ActivityReader.java
index 529e8bcec..07b6e7644 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/ActivityReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/ActivityReader.java
@@ -86,6 +86,24 @@ public ActivityReader setAvailable(final String available) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Activity ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Activity> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -106,6 +124,26 @@ public ActivityReader setAvailable(final String available) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Activity> previousPage(final Page<Activity> page, 
+                                       final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Activity Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/EventReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/EventReader.java
index 968b89496..42c4cf22b 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/EventReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/EventReader.java
@@ -172,6 +172,24 @@ public EventReader setWorkflowSid(final String workflowSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Event ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Event> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -192,6 +210,26 @@ public EventReader setWorkflowSid(final String workflowSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Event> previousPage(final Page<Event> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Event Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskChannelReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskChannelReader.java
index a9c8d5f56..491a27c2a 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskChannelReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskChannelReader.java
@@ -62,6 +62,24 @@ public TaskChannelReader(final String pathWorkspaceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return TaskChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<TaskChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public TaskChannelReader(final String pathWorkspaceSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<TaskChannel> previousPage(final Page<TaskChannel> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of TaskChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskQueueReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskQueueReader.java
index 8f45cae2f..c01a48861 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskQueueReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskQueueReader.java
@@ -98,6 +98,24 @@ public TaskQueueReader setWorkerSid(final String workerSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return TaskQueue ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<TaskQueue> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -118,6 +136,26 @@ public TaskQueueReader setWorkerSid(final String workerSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<TaskQueue> previousPage(final Page<TaskQueue> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of TaskQueue Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskReader.java
index 177a20464..e305477fb 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/TaskReader.java
@@ -183,6 +183,24 @@ public TaskReader setHasAddons(final Boolean hasAddons) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Task ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Task> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -203,6 +221,26 @@ public TaskReader setHasAddons(final Boolean hasAddons) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Task> previousPage(final Page<Task> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Task Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkerReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkerReader.java
index fb528f952..8cf96933d 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkerReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkerReader.java
@@ -146,6 +146,24 @@ public WorkerReader setTaskQueueSid(final String taskQueueSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Worker ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Worker> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -166,6 +184,26 @@ public WorkerReader setTaskQueueSid(final String taskQueueSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Worker> previousPage(final Page<Worker> page, 
+                                     final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Worker Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkflowReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkflowReader.java
index 4b8056a96..83e3e75bb 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkflowReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/WorkflowReader.java
@@ -74,6 +74,24 @@ public WorkflowReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Workflow ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Workflow> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -94,6 +112,26 @@ public WorkflowReader setFriendlyName(final String friendlyName) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Workflow> previousPage(final Page<Workflow> page, 
+                                       final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Workflow Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/task/ReservationReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/task/ReservationReader.java
index b1aa43669..13f2aef14 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/task/ReservationReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/task/ReservationReader.java
@@ -78,6 +78,24 @@ public ReservationReader setReservationStatus(final Reservation.Status reservati
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Reservation ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Reservation> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public ReservationReader setReservationStatus(final Reservation.Status reservati
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Reservation> previousPage(final Page<Reservation> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Reservation Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/taskqueue/TaskQueuesStatisticsReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/taskqueue/TaskQueuesStatisticsReader.java
index fc1c6d932..bccf1e5f3 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/taskqueue/TaskQueuesStatisticsReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/taskqueue/TaskQueuesStatisticsReader.java
@@ -112,6 +112,24 @@ public TaskQueuesStatisticsReader setStartDate(final DateTime startDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return TaskQueuesStatistics ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<TaskQueuesStatistics> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -132,6 +150,26 @@ public TaskQueuesStatisticsReader setStartDate(final DateTime startDate) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<TaskQueuesStatistics> previousPage(final Page<TaskQueuesStatistics> page, 
+                                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of TaskQueuesStatistics Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/ReservationReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/ReservationReader.java
index 16fb37a66..ea4d5b35f 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/ReservationReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/ReservationReader.java
@@ -78,6 +78,24 @@ public ReservationReader setReservationStatus(final Reservation.Status reservati
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Reservation ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Reservation> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -98,6 +116,26 @@ public ReservationReader setReservationStatus(final Reservation.Status reservati
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Reservation> previousPage(final Page<Reservation> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Reservation Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/WorkerChannelReader.java b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/WorkerChannelReader.java
index fe33ddf47..da0f0f000 100644
--- a/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/WorkerChannelReader.java
+++ b/src/main/java/com/twilio/rest/taskrouter/v1/workspace/worker/WorkerChannelReader.java
@@ -66,6 +66,24 @@ public WorkerChannelReader(final String pathWorkspaceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return WorkerChannel ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<WorkerChannel> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -86,6 +104,26 @@ public WorkerChannelReader(final String pathWorkspaceSid,
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<WorkerChannel> previousPage(final Page<WorkerChannel> page, 
+                                            final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TASKROUTER.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of WorkerChannel Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/trunking/v1/TrunkReader.java b/src/main/java/com/twilio/rest/trunking/v1/TrunkReader.java
index 55411d409..03c819461 100644
--- a/src/main/java/com/twilio/rest/trunking/v1/TrunkReader.java
+++ b/src/main/java/com/twilio/rest/trunking/v1/TrunkReader.java
@@ -51,6 +51,24 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Trunk ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Trunk> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -71,6 +89,26 @@
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Trunk> previousPage(final Page<Trunk> page, 
+                                    final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TRUNKING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Trunk Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/trunking/v1/trunk/CredentialListReader.java b/src/main/java/com/twilio/rest/trunking/v1/trunk/CredentialListReader.java
index 2da326d3f..4f4476308 100644
--- a/src/main/java/com/twilio/rest/trunking/v1/trunk/CredentialListReader.java
+++ b/src/main/java/com/twilio/rest/trunking/v1/trunk/CredentialListReader.java
@@ -62,6 +62,24 @@ public CredentialListReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return CredentialList ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<CredentialList> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public CredentialListReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<CredentialList> previousPage(final Page<CredentialList> page, 
+                                             final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TRUNKING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of CredentialList Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/trunking/v1/trunk/IpAccessControlListReader.java b/src/main/java/com/twilio/rest/trunking/v1/trunk/IpAccessControlListReader.java
index ef0f38354..3abf3ec5a 100644
--- a/src/main/java/com/twilio/rest/trunking/v1/trunk/IpAccessControlListReader.java
+++ b/src/main/java/com/twilio/rest/trunking/v1/trunk/IpAccessControlListReader.java
@@ -62,6 +62,24 @@ public IpAccessControlListReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return IpAccessControlList ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<IpAccessControlList> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public IpAccessControlListReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<IpAccessControlList> previousPage(final Page<IpAccessControlList> page, 
+                                                  final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TRUNKING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of IpAccessControlList Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/trunking/v1/trunk/OriginationUrlReader.java b/src/main/java/com/twilio/rest/trunking/v1/trunk/OriginationUrlReader.java
index 7dc67a6ce..ba810ddca 100644
--- a/src/main/java/com/twilio/rest/trunking/v1/trunk/OriginationUrlReader.java
+++ b/src/main/java/com/twilio/rest/trunking/v1/trunk/OriginationUrlReader.java
@@ -62,6 +62,24 @@ public OriginationUrlReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return OriginationUrl ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<OriginationUrl> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public OriginationUrlReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<OriginationUrl> previousPage(final Page<OriginationUrl> page, 
+                                             final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TRUNKING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of OriginationUrl Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/trunking/v1/trunk/PhoneNumberReader.java b/src/main/java/com/twilio/rest/trunking/v1/trunk/PhoneNumberReader.java
index 9addab1b5..41260337f 100644
--- a/src/main/java/com/twilio/rest/trunking/v1/trunk/PhoneNumberReader.java
+++ b/src/main/java/com/twilio/rest/trunking/v1/trunk/PhoneNumberReader.java
@@ -62,6 +62,24 @@ public PhoneNumberReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return PhoneNumber ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<PhoneNumber> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public PhoneNumberReader(final String pathTrunkSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<PhoneNumber> previousPage(final Page<PhoneNumber> page, 
+                                          final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.TRUNKING.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of PhoneNumber Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/video/v1/RecordingReader.java b/src/main/java/com/twilio/rest/video/v1/RecordingReader.java
index b588a0067..9a45ebdeb 100644
--- a/src/main/java/com/twilio/rest/video/v1/RecordingReader.java
+++ b/src/main/java/com/twilio/rest/video/v1/RecordingReader.java
@@ -101,6 +101,24 @@ public RecordingReader setGroupingSid(final String groupingSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Recording ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Recording> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -121,6 +139,26 @@ public RecordingReader setGroupingSid(final String groupingSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Recording> previousPage(final Page<Recording> page, 
+                                        final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.VIDEO.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Recording Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/video/v1/RoomReader.java b/src/main/java/com/twilio/rest/video/v1/RoomReader.java
index 6b16f2dcd..6d5a9f7e1 100644
--- a/src/main/java/com/twilio/rest/video/v1/RoomReader.java
+++ b/src/main/java/com/twilio/rest/video/v1/RoomReader.java
@@ -102,6 +102,24 @@ public RoomReader setDateCreatedBefore(final DateTime dateCreatedBefore) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return Room ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<Room> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -122,6 +140,26 @@ public RoomReader setDateCreatedBefore(final DateTime dateCreatedBefore) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<Room> previousPage(final Page<Room> page, 
+                                   final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.VIDEO.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of Room Resources for a given request.
      * 
diff --git a/src/main/java/com/twilio/rest/video/v1/room/RoomRecordingReader.java b/src/main/java/com/twilio/rest/video/v1/room/RoomRecordingReader.java
index 4d4e69cce..d4378b69f 100644
--- a/src/main/java/com/twilio/rest/video/v1/room/RoomRecordingReader.java
+++ b/src/main/java/com/twilio/rest/video/v1/room/RoomRecordingReader.java
@@ -62,6 +62,24 @@ public RoomRecordingReader(final String pathRoomSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the target page from the Twilio API.
+     * 
+     * @param targetUrl API-generated URL for the requested results page
+     * @param client TwilioRestClient with which to make the request
+     * @return RoomRecording ResourceSet
+     */
+    @Override
+    @SuppressWarnings("checkstyle:linelength")
+    public Page<RoomRecording> getPage(final String targetUrl, final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            targetUrl
+        );
+
+        return pageForRequest(client, request);
+    }
+
     /**
      * Retrieve the next page from the Twilio API.
      * 
@@ -82,6 +100,26 @@ public RoomRecordingReader(final String pathRoomSid) {
         return pageForRequest(client, request);
     }
 
+    /**
+     * Retrieve the previous page from the Twilio API.
+     * 
+     * @param page current page
+     * @param client TwilioRestClient with which to make the request
+     * @return Previous Page
+     */
+    @Override
+    public Page<RoomRecording> previousPage(final Page<RoomRecording> page, 
+                                            final TwilioRestClient client) {
+        Request request = new Request(
+            HttpMethod.GET,
+            page.getPreviousPageUrl(
+                Domains.VIDEO.toString(),
+                client.getRegion()
+            )
+        );
+        return pageForRequest(client, request);
+    }
+
     /**
      * Generate a Page of RoomRecording Resources for a given request.
      * 
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberTest.java b/src/test/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberTest.java
index 75a944063..005bf235a 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/IncomingPhoneNumberTest.java
@@ -60,7 +60,7 @@ public void testUpdateRequest() {
     public void testUpdateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Inactive\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Inactive\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"origin\": \"origin\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -92,7 +92,7 @@ public void testFetchRequest() {
     public void testFetchResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"origin\": \"origin\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -156,7 +156,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"origin\": \"origin\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -200,7 +200,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"emergency_status\": \"Active\",\"emergency_address_sid\": \"ADaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"(808) 925-5327\",\"origin\": \"origin\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalTest.java b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalTest.java
index 137520934..e1c999820 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/LocalTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"friendly_name\": \"(808) 925-1571\",\"iso_country\": \"US\",\"lata\": \"834\",\"latitude\": \"19.720000\",\"longitude\": \"-155.090000\",\"phone_number\": \"+18089251571\",\"postal_code\": \"96720\",\"rate_center\": \"HILO\",\"region\": \"HI\"}],\"end\": 1,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"friendly_name\": \"(808) 925-1571\",\"iso_country\": \"US\",\"lata\": \"834\",\"latitude\": \"19.720000\",\"locality\": \"Hilo\",\"longitude\": \"-155.090000\",\"phone_number\": \"+18089251571\",\"postal_code\": \"96720\",\"rate_center\": \"HILO\",\"region\": \"HI\"}],\"end\": 1,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Local.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileTest.java b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileTest.java
index 4299fb689..e567371d6 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/MobileTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": false,\"sms\": true,\"voice\": false},\"friendly_name\": \"+4759440374\",\"iso_country\": \"NO\",\"lata\": null,\"latitude\": null,\"longitude\": null,\"phone_number\": \"+4759440374\",\"postal_code\": null,\"rate_center\": null,\"region\": null}],\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": false,\"sms\": true,\"voice\": false},\"friendly_name\": \"+4759440374\",\"iso_country\": \"NO\",\"lata\": null,\"latitude\": null,\"locality\": null,\"longitude\": null,\"phone_number\": \"+4759440374\",\"postal_code\": null,\"rate_center\": null,\"region\": null}],\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/Mobile.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeTest.java b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeTest.java
index e2addc2f3..02c555d60 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/availablephonenumbercountry/TollFreeTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": true,\"voice\": true},\"friendly_name\": \"(800) 100-0052\",\"iso_country\": \"US\",\"lata\": null,\"latitude\": null,\"longitude\": null,\"phone_number\": \"+18001000052\",\"postal_code\": null,\"rate_center\": null,\"region\": null}],\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"available_phone_numbers\": [{\"address_requirements\": \"none\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": true,\"voice\": true},\"friendly_name\": \"(800) 100-0052\",\"iso_country\": \"US\",\"lata\": null,\"latitude\": null,\"locality\": null,\"longitude\": null,\"phone_number\": \"+18001000052\",\"postal_code\": null,\"rate_center\": null,\"region\": null}],\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=50&Page=0\",\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=50&Page=0\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/AvailablePhoneNumbers/US/TollFree.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalTest.java b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalTest.java
index 0c543971f..2bd774543 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/LocalTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Local.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -104,7 +104,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileTest.java b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileTest.java
index 52ad77a54..06faab4c7 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/MobileTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json?Page=0&PageSize=50\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": false,\"sms\": true,\"voice\": false},\"date_created\": \"Tue, 08 Sep 2015 16:21:16 +0000\",\"date_updated\": \"Tue, 08 Sep 2015 16:21:16 +0000\",\"friendly_name\": \"61429099450\",\"phone_number\": \"+61429099450\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json?Page=0&PageSize=50\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json?Page=0&PageSize=50\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": false,\"sms\": true,\"voice\": false},\"date_created\": \"Tue, 08 Sep 2015 16:21:16 +0000\",\"date_updated\": \"Tue, 08 Sep 2015 16:21:16 +0000\",\"friendly_name\": \"61429099450\",\"phone_number\": \"+61429099450\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json?Page=0&PageSize=50\",\"next_page_uri\": null,\"num_pages\": 1,\"page\": 0,\"page_size\": 50,\"previous_page_uri\": null,\"start\": 0,\"total\": 1,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/Mobile.json\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -104,7 +104,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeTest.java b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeTest.java
index 99ea37848..289448104 100644
--- a/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeTest.java
+++ b/src/test/java/com/twilio/rest/api/v2010/account/incomingphonenumber/TollFreeTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"end\": 0,\"first_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1&Page=0\",\"incoming_phone_numbers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": null,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}],\"last_page_uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1&Page=2\",\"next_page_uri\": null,\"num_pages\": 3,\"page\": 0,\"page_size\": 1,\"previous_page_uri\": null,\"start\": 0,\"total\": 3,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/TollFree.json?PageSize=1\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -104,7 +104,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"address_requirements\": \"none\",\"api_version\": \"2010-04-01\",\"beta\": false,\"capabilities\": {\"mms\": true,\"sms\": false,\"voice\": true},\"date_created\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"date_updated\": \"Thu, 30 Jul 2015 23:19:04 +0000\",\"friendly_name\": \"(808) 925-5327\",\"phone_number\": \"+18089255327\",\"origin\": \"origin\",\"sid\": \"PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"sms_application_sid\": \"\",\"sms_fallback_method\": \"POST\",\"sms_fallback_url\": \"\",\"sms_method\": \"POST\",\"sms_url\": \"\",\"status_callback\": \"\",\"status_callback_method\": \"POST\",\"trunk_sid\": null,\"uri\": \"/2010-04-01/Accounts/ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/IncomingPhoneNumbers/PNaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\",\"voice_application_sid\": \"\",\"voice_caller_id_lookup\": false,\"voice_fallback_method\": \"POST\",\"voice_fallback_url\": null,\"voice_method\": \"POST\",\"voice_url\": null}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/taskrouter/v1/WorkspaceTest.java b/src/test/java/com/twilio/rest/taskrouter/v1/WorkspaceTest.java
index 50ae14b7f..2156f8bd3 100644
--- a/src/test/java/com/twilio/rest/taskrouter/v1/WorkspaceTest.java
+++ b/src/test/java/com/twilio/rest/taskrouter/v1/WorkspaceTest.java
@@ -60,7 +60,7 @@ public void testFetchRequest() {
     public void testFetchResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2015-08-03T17:31:38Z\",\"date_updated\": \"2015-08-03T17:31:38Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": \"\",\"friendly_name\": \"8064de33-3a05-11e5-8bae-98e0d9a1eb73\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\"},\"multi_task_enabled\": \"false\",\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2016-08-01T22:10:40Z\",\"date_updated\": \"2016-08-01T22:10:40Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": null,\"friendly_name\": \"new\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\",\"task_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskChannels\",\"events\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Events\"},\"multi_task_enabled\": false,\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -92,7 +92,7 @@ public void testUpdateRequest() {
     public void testUpdateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2015-08-03T17:31:38Z\",\"date_updated\": \"2015-08-03T17:31:38Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": \"\",\"friendly_name\": \"8064de33-3a05-11e5-8bae-98e0d9a1eb73\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\"},\"multi_task_enabled\": \"false\",\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2016-08-01T22:10:40Z\",\"date_updated\": \"2016-08-01T22:10:40Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": null,\"friendly_name\": \"new\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\",\"task_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskChannels\",\"events\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Events\"},\"multi_task_enabled\": false,\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -124,7 +124,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"meta\": {\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=1&Page=0\",\"key\": \"workspaces\",\"next_page_url\": null,\"page\": 0,\"page_size\": 1,\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=1&Page=0\"},\"workspaces\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2015-05-27T00:48:50Z\",\"date_updated\": \"2015-05-27T00:48:50Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": \"\",\"friendly_name\": \"cce151db-4644-4d48-95a1-d962829b69f0\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\"},\"multi_task_enabled\": \"false\",\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}]}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"meta\": {\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=50&Page=0\",\"key\": \"workspaces\",\"next_page_url\": null,\"page\": 0,\"page_size\": 50,\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=50&Page=0\"},\"workspaces\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2016-08-01T22:10:40Z\",\"date_updated\": \"2016-08-01T22:10:40Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": null,\"friendly_name\": \"new\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\",\"task_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskChannels\",\"events\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Events\"},\"multi_task_enabled\": false,\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}]}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -136,7 +136,7 @@ public void testReadFullResponse() {
     public void testReadEmptyResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"meta\": {\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=1&Page=0\",\"key\": \"workspaces\",\"next_page_url\": null,\"page\": 0,\"page_size\": 1,\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=1&Page=0\"},\"workspaces\": []}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"meta\": {\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=50&Page=0\",\"key\": \"workspaces\",\"next_page_url\": null,\"page\": 0,\"page_size\": 50,\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces?PageSize=50&Page=0\"},\"workspaces\": []}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -168,7 +168,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2015-08-03T17:31:38Z\",\"date_updated\": \"2015-08-03T17:31:38Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": \"\",\"friendly_name\": \"8064de33-3a05-11e5-8bae-98e0d9a1eb73\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\"},\"multi_task_enabled\": \"false\",\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"date_created\": \"2016-08-01T22:10:40Z\",\"date_updated\": \"2016-08-01T22:10:40Z\",\"default_activity_name\": \"Offline\",\"default_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"event_callback_url\": \"\",\"events_filter\": null,\"friendly_name\": \"new\",\"links\": {\"activities\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Statistics\",\"task_queues\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskQueues\",\"tasks\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Tasks\",\"workers\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers\",\"workflows\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workflows\",\"task_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/TaskChannels\",\"events\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Events\"},\"multi_task_enabled\": false,\"prioritize_queue_order\": \"FIFO\",\"sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"timeout_activity_name\": \"Offline\",\"timeout_activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
diff --git a/src/test/java/com/twilio/rest/taskrouter/v1/workspace/WorkerTest.java b/src/test/java/com/twilio/rest/taskrouter/v1/workspace/WorkerTest.java
index 56b4b314b..b75687145 100644
--- a/src/test/java/com/twilio/rest/taskrouter/v1/workspace/WorkerTest.java
+++ b/src/test/java/com/twilio/rest/taskrouter/v1/workspace/WorkerTest.java
@@ -60,7 +60,7 @@ public void testReadRequest() {
     public void testReadFullResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"meta\": {\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers?PageSize=50&Page=0\",\"key\": \"workers\",\"next_page_url\": null,\"page\": 0,\"page_size\": 50,\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers?PageSize=50&Page=0\"},\"workers\": [{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"Offline\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{}\",\"available\": false,\"date_created\": \"2015-08-03T17:34:12Z\",\"date_status_changed\": \"2015-08-03T17:34:12Z\",\"date_updated\": \"2015-08-03T17:34:12Z\",\"friendly_name\": \"dc7d5461-3a05-11e5-a889-98e0d9a1eb73\",\"links\": {\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"},\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}]}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"meta\": {\"page\": 0,\"page_size\": 50,\"first_page_url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers?PageSize=50&Page=0\",\"previous_page_url\": null,\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers?PageSize=50&Page=0\",\"next_page_url\": null,\"key\": \"workers\"},\"workers\": [{\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"testWorker\",\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"Offline\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{}\",\"available\": false,\"date_created\": \"2017-05-30T23:05:29Z\",\"date_updated\": \"2017-05-30T23:05:29Z\",\"date_status_changed\": \"2017-05-30T23:05:29Z\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/Statistics\",\"worker_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"reservations\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Reservations\"}}]}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -104,7 +104,7 @@ public void testCreateRequest() {
     public void testCreateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"available\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{\\\"email\\\": \\\"test@twilio.com\\\", \\\"phone\\\": \\\"8675309\\\"}\",\"available\": true,\"date_created\": \"2014-05-14T10:50:02Z\",\"date_status_changed\": \"2014-05-14T23:26:06Z\",\"date_updated\": \"2014-05-14T23:26:06Z\",\"friendly_name\": \"Test Worker\",\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
+            result = new Response("{\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"NewWorker\",\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"Offline\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{}\",\"available\": false,\"date_created\": \"2017-05-30T23:19:38Z\",\"date_updated\": \"2017-05-30T23:19:38Z\",\"date_status_changed\": \"2017-05-30T23:19:38Z\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/Statistics\",\"worker_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"reservations\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Reservations\"}}", TwilioRestClient.HTTP_STATUS_CODE_CREATED);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -136,7 +136,7 @@ public void testFetchRequest() {
     public void testFetchResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"available\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{\\\"email\\\": \\\"test@twilio.com\\\", \\\"phone\\\": \\\"8675309\\\"}\",\"available\": true,\"date_created\": \"2014-05-14T10:50:02Z\",\"date_status_changed\": \"2014-05-14T23:26:06Z\",\"date_updated\": \"2014-05-14T23:26:06Z\",\"friendly_name\": \"Test Worker\",\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"available\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{}\",\"available\": false,\"date_created\": \"2017-05-30T23:32:39Z\",\"date_status_changed\": \"2017-05-30T23:32:39Z\",\"date_updated\": \"2017-05-30T23:32:39Z\",\"friendly_name\": \"NewWorker3\",\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/Statistics\",\"worker_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"reservations\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Reservations\"}}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
@@ -168,7 +168,7 @@ public void testUpdateRequest() {
     public void testUpdateResponse() {
         new NonStrictExpectations() {{
             twilioRestClient.request((Request) any);
-            result = new Response("{\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"available\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{\\\"email\\\": \\\"test@twilio.com\\\", \\\"phone\\\": \\\"8675309\\\"}\",\"available\": true,\"date_created\": \"2014-05-14T10:50:02Z\",\"date_status_changed\": \"2014-05-14T23:26:06Z\",\"date_updated\": \"2014-05-14T23:26:06Z\",\"friendly_name\": \"Test Worker\",\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}}", TwilioRestClient.HTTP_STATUS_CODE_OK);
+            result = new Response("{\"sid\": \"WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"friendly_name\": \"blah\",\"account_sid\": \"ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_sid\": \"WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"activity_name\": \"Offline\",\"workspace_sid\": \"WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"attributes\": \"{}\",\"available\": false,\"date_created\": \"2017-05-30T23:32:22Z\",\"date_updated\": \"2017-05-31T00:05:57Z\",\"date_status_changed\": \"2017-05-30T23:32:22Z\",\"url\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"links\": {\"channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"activity\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Activities/WAaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"workspace\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"statistics\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/Statistics\",\"worker_channels\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Channels\",\"reservations\": \"https://taskrouter.twilio.com/v1/Workspaces/WSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Workers/WKaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/Reservations\"}}", TwilioRestClient.HTTP_STATUS_CODE_OK);
             twilioRestClient.getObjectMapper();
             result = new ObjectMapper();
         }};
