diff --git a/numpy/lib/function_base.py b/numpy/lib/function_base.py
index 78880708623..8875068e996 100644
--- a/numpy/lib/function_base.py
+++ b/numpy/lib/function_base.py
@@ -56,24 +56,29 @@ def iterable(y):
 
     Returns
     -------
-    b : {0, 1}
-      Return 1 if the object has an iterator method or is a sequence,
-      and 0 otherwise.
+    b : bool
+      Return ``True`` if the object has an iterator method or is a
+      sequence, and ``False`` otherwise.
 
 
     Examples
     --------
     >>> np.iterable([1, 2, 3])
-    1
+    True
     >>> np.iterable(2)
-    0
+    False
 
     """
+    # 2016-02-07, 1.12
+    msg = "Use of numpy.iterable is deprecated. " \
+          "It will be removed from the public API in the future."
+    warnings.warn(msg, DeprecationWarning)
+
     try:
         iter(y)
-    except:
-        return 0
-    return 1
+    except TypeError:
+        return False
+    return True
 
 
 def _hist_optim_numbins_estimator(a, estimator):
@@ -355,7 +360,9 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,
     # computing histograms, to minimize memory usage.
     BLOCK = 65536
 
-    if not iterable(bins):
+    try:
+        iter(bins)
+    except TypeError:
         if np.isscalar(bins) and bins < 1:
             raise ValueError(
                 '`bins` should be a positive integer.')
@@ -375,7 +382,9 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,
                                         np.can_cast(weights.dtype, np.complex)):
             bins = linspace(mn, mx, bins + 1, endpoint=True)
 
-    if not iterable(bins):
+    try:
+        iter(bins)
+    except TypeError:
         # We now convert values of a to bin indices, under the assumption of
         # equal bin widths (which is valid here).
 
@@ -1984,11 +1993,12 @@ def __init__(self, pyfunc, otypes='', doc=None, excluded=None,
                 if char not in typecodes['All']:
                     raise ValueError(
                         "Invalid otype specified: %s" % (char,))
-        elif iterable(otypes):
-            self.otypes = ''.join([_nx.dtype(x).char for x in otypes])
         else:
-            raise ValueError(
-                "Invalid otype specification")
+            try:
+                iter(otypes)
+            except TypeError:
+                raise ValueError("Invalid otype specification")
+            self.otypes = ''.join([_nx.dtype(x).char for x in otypes])
 
         # Excluded variable support
         if excluded is None:
diff --git a/numpy/lib/stride_tricks.py b/numpy/lib/stride_tricks.py
index 4c23ab35559..ec2bc23b566 100644
--- a/numpy/lib/stride_tricks.py
+++ b/numpy/lib/stride_tricks.py
@@ -55,7 +55,12 @@ def as_strided(x, shape=None, strides=None, subok=False):
 
 
 def _broadcast_to(array, shape, subok, readonly):
-    shape = tuple(shape) if np.iterable(shape) else (shape,)
+    try:
+        iter(shape)
+    except TypeError:
+        shape = (shape,)
+    else:
+        shape = tuple(shape)
     array = np.array(array, copy=False, subok=subok)
     if not shape and array.shape:
         raise ValueError('cannot broadcast a non-scalar to a scalar array')
diff --git a/numpy/polynomial/chebyshev.py b/numpy/polynomial/chebyshev.py
index 2537bea32d4..fb2a4bc5fcd 100644
--- a/numpy/polynomial/chebyshev.py
+++ b/numpy/polynomial/chebyshev.py
@@ -1052,7 +1052,9 @@ def chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
     c = np.array(c, ndmin=1, copy=1)
     if c.dtype.char in '?bBhHiIlLqQpP':
         c = c.astype(np.double)
-    if not np.iterable(k):
+    try:
+        iter(k)
+    except TypeError:
         k = [k]
     cnt, iaxis = [int(t) for t in [m, axis]]
 
diff --git a/numpy/polynomial/hermite.py b/numpy/polynomial/hermite.py
index e234c8e2319..39afa056513 100644
--- a/numpy/polynomial/hermite.py
+++ b/numpy/polynomial/hermite.py
@@ -810,7 +810,9 @@ def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
     c = np.array(c, ndmin=1, copy=1)
     if c.dtype.char in '?bBhHiIlLqQpP':
         c = c.astype(np.double)
-    if not np.iterable(k):
+    try:
+        iter(k)
+    except TypeError:
         k = [k]
     cnt, iaxis = [int(t) for t in [m, axis]]
 
diff --git a/numpy/polynomial/hermite_e.py b/numpy/polynomial/hermite_e.py
index 08e83899aa7..faf04106db3 100644
--- a/numpy/polynomial/hermite_e.py
+++ b/numpy/polynomial/hermite_e.py
@@ -809,7 +809,9 @@ def hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
     c = np.array(c, ndmin=1, copy=1)
     if c.dtype.char in '?bBhHiIlLqQpP':
         c = c.astype(np.double)
-    if not np.iterable(k):
+    try:
+        iter(k)
+    except TypeError:
         k = [k]
     cnt, iaxis = [int(t) for t in [m, axis]]
 
diff --git a/numpy/polynomial/laguerre.py b/numpy/polynomial/laguerre.py
index d459551ae89..7c53243210d 100644
--- a/numpy/polynomial/laguerre.py
+++ b/numpy/polynomial/laguerre.py
@@ -810,7 +810,9 @@ def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
     c = np.array(c, ndmin=1, copy=1)
     if c.dtype.char in '?bBhHiIlLqQpP':
         c = c.astype(np.double)
-    if not np.iterable(k):
+    try:
+        iter(k)
+    except TypeError:
         k = [k]
     cnt, iaxis = [int(t) for t in [m, axis]]
 
diff --git a/numpy/polynomial/legendre.py b/numpy/polynomial/legendre.py
index 54e9895db95..a2d1822535c 100644
--- a/numpy/polynomial/legendre.py
+++ b/numpy/polynomial/legendre.py
@@ -852,7 +852,9 @@ def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
     c = np.array(c, ndmin=1, copy=1)
     if c.dtype.char in '?bBhHiIlLqQpP':
         c = c.astype(np.double)
-    if not np.iterable(k):
+    try:
+        iter(k)
+    except TypeError:
         k = [k]
     cnt, iaxis = [int(t) for t in [m, axis]]
 
