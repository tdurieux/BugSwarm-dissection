diff --git a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
index edbeca2aa..dbb721ec1 100644
--- a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
@@ -24,10 +24,12 @@
 import org.sonar.php.api.PHPPunctuator;
 import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
 import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
+import org.sonar.plugins.php.api.tree.statement.BlockTree;
 import org.sonar.plugins.php.api.tree.statement.ExpressionStatementTree;
 import org.sonar.plugins.php.api.tree.statement.GotoStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
 import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.tree.statement.TryStatementTree;
 
 public class NewPHPGrammar {
 
@@ -46,16 +48,23 @@ public NewPHPGrammar(GrammarBuilder<InternalSyntaxToken> b, TreeFactory f) {
   public StatementTree STATEMENT() {
     return b.<StatementTree>nonterminal(PHPLexicalGrammar.STATEMENT)
         .is(b.firstOf(
-//            BLOCK_STATEMENT(),
+            BLOCK_STATEMENT(),
+            LABEL(),
 //             ...
+//            TRY_STATEMENT(),
+//            DECLARE_STATEMENT(),
             GOTO_STATEMENT(),
 //            INLINE_HTML,   // ???
 //            UNSET_VARIABLE_STATEMENT(),
-            EXPRESSION_STATEMENT(),
-            LABEL()
+            EXPRESSION_STATEMENT()
         ));
   }
 
+  public BlockTree BLOCK_STATEMENT() {
+    return b.<BlockTree>nonterminal(PHPLexicalGrammar.BLOCK)
+        .is(f.block(b.token(PHPPunctuator.LCURLYBRACE), b.zeroOrMore(STATEMENT()), b.token(PHPPunctuator.RCURLYBRACE)));
+  }
+
   public GotoStatementTree GOTO_STATEMENT() {
     return b.<GotoStatementTree>nonterminal(PHPLexicalGrammar.GOTO_STATEMENT)
         .is(f.gotoStatement(b.token(PHPKeyword.GOTO), b.token(PHPLexicalGrammar.IDENTIFIER), EOS()));
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
index f7fd79a17..da74e2387 100644
--- a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
@@ -23,14 +23,17 @@
 import org.sonar.php.tree.impl.VariableIdentifierTreeImpl;
 import org.sonar.php.tree.impl.expression.IdentifierTreeImpl;
 import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
-import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.php.tree.impl.statement.BlockTreeImpl;
 import org.sonar.php.tree.impl.statement.ExpressionStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.GotoStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.LabelTreeImpl;
+import org.sonar.plugins.php.api.tree.Tree;
 import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
+import org.sonar.plugins.php.api.tree.statement.BlockTree;
 import org.sonar.plugins.php.api.tree.statement.ExpressionStatementTree;
 import org.sonar.plugins.php.api.tree.statement.GotoStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
 
 import java.util.Collections;
 import java.util.List;
@@ -48,6 +51,9 @@
   /**
    * [ START ] Statement
    */
+  public BlockTree block(InternalSyntaxToken lbrace, Optional<List<StatementTree>> statements, InternalSyntaxToken rbrace) {
+    return new BlockTreeImpl(lbrace, optionalList(statements), rbrace);
+  }
 
   public GotoStatementTree gotoStatement(InternalSyntaxToken gotoToken, InternalSyntaxToken identifier, InternalSyntaxToken eos) {
     return new GotoStatementTreeImpl(gotoToken, new IdentifierTreeImpl(identifier), eos);
@@ -69,6 +75,8 @@ public ExpressionTree expression(InternalSyntaxToken token) {
     return new VariableIdentifierTreeImpl(new IdentifierTreeImpl(token));
   }
 
+
+
   /**
    * [ START ] Expression
    */
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/BlockTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/BlockTreeImpl.java
new file mode 100644
index 000000000..05ce6c61e
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/BlockTreeImpl.java
@@ -0,0 +1,80 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.BlockTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import java.util.Iterator;
+import java.util.List;
+
+public class BlockTreeImpl extends PHPTree implements BlockTree {
+
+  private static final Kind KIND = Kind.BLOCK;
+
+  private final InternalSyntaxToken openCurlyBraceToken;
+  private final List<StatementTree> statements;
+  private final InternalSyntaxToken closeCurlyBraceToken;
+
+  public BlockTreeImpl(InternalSyntaxToken lbrace, List<StatementTree> statements, InternalSyntaxToken rbrace) {
+    this.openCurlyBraceToken = lbrace;
+    this.statements = statements;
+    this.closeCurlyBraceToken = rbrace;
+  }
+
+  @Override
+  public SyntaxToken openCurlyBraceToken() {
+    return openCurlyBraceToken;
+  }
+
+  @Override
+  public List<StatementTree> statements() {
+    return statements;
+  }
+
+  @Override
+  public SyntaxToken closeCurlyBraceToken() {
+    return closeCurlyBraceToken;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.singletonIterator(openCurlyBraceToken),
+        statements.iterator(),
+        Iterators.singletonIterator(closeCurlyBraceToken));
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+
+  }
+}
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/BlockTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/BlockTest.java
index 2b7e4d96e..19e1b6ea9 100644
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/BlockTest.java
+++ b/php-frontend/src/test/java/org/sonar/php/parser/statement/BlockTest.java
@@ -19,20 +19,18 @@
  */
 package org.sonar.php.parser.statement;
 
-import org.junit.Before;
 import org.junit.Test;
-import org.sonar.php.parser.PHPGrammar;
-import org.sonar.php.parser.RuleTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
 
-public class BlockTest extends RuleTest {
+import static org.sonar.php.utils.Assertions.assertThat;
 
-  @Before
-  public void setUp() {
-    setTestedRule(PHPGrammar.BLOCK);
-  }
+public class BlockTest {
 
   @Test
   public void test() {
-    matches("{}");
+    assertThat(PHPLexicalGrammar.BLOCK)
+      .matches("{ $a ; }")
+      .matches("{ $a ; $b; }")
+      .matches("{}");
   }
 }
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/BlockTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/BlockTreeTest.java
new file mode 100644
index 000000000..519b16920
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/BlockTreeTest.java
@@ -0,0 +1,49 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.BlockTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class BlockTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void empty() throws Exception {
+    BlockTree tree = parse("{}", PHPLexicalGrammar.BLOCK);
+
+    assertThat(tree.is(Kind.BLOCK)).isTrue();
+    assertThat(tree.statements()).isEmpty();
+  }
+
+  @Test
+  public void not_empty() throws Exception {
+    BlockTree tree = parse("{ $a; }", PHPLexicalGrammar.BLOCK);
+    assertThat(tree.statements()).hasSize(1);
+
+    tree = parse("{ $a; $b; }", PHPLexicalGrammar.BLOCK);
+    assertThat(tree.statements()).hasSize(2);
+  }
+
+}
