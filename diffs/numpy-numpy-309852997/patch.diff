diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index 93a659616bd..81c22f903ac 100644
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -636,16 +636,14 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
     if rank == 0:
         return format_function(a[()]) + '\n'
 
-    if summary_insert and 2*edge_items < len(a):
+    show_summary = summary_insert and 2*edge_items < len(a)
+
+    if show_summary:
         leading_items = edge_items
         trailing_items = edge_items
-        summary_insert1 = summary_insert + separator
-        if legacy == '1.13':
-            summary_insert1 = summary_insert + ', '
     else:
         leading_items = 0
         trailing_items = len(a)
-        summary_insert1 = ""
 
     if rank == 1:
         s = ""
@@ -654,9 +652,12 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
             word = format_function(a[i]) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
-        if summary_insert1:
-            s, line = _extendLine(s, line, summary_insert1, max_line_len,
-                                  next_line_prefix)
+        if show_summary:
+            if legacy == '1.13':
+                word = summary_insert + ", "
+            else:
+                word = summary_insert + separator
+            s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
         for i in range(trailing_items, 1, -1):
             word = format_function(a[-i]) + separator
@@ -669,20 +670,21 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
     else:
         s = '['
         sep = separator.rstrip()
-        line_sep = '\n'*max(rank-1, 1)
+        line_sep = '\n'*(rank - 1)
         for i in range(leading_items):
             if i > 0:
                 s += next_line_prefix
             s += _formatArray(a[i], format_function, rank-1, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
                               summary_insert, legacy)
-            s = s.rstrip() + sep.rstrip() + line_sep
+            s = s.rstrip() + sep + line_sep
 
-        if summary_insert1:
+        if show_summary:
             if legacy == '1.13':
-                s += next_line_prefix + summary_insert1 + "\n"
+                # trailing space, fixed number of newlines, and ignores sep
+                s += next_line_prefix + summary_insert + ", \n"
             else:
-                s += next_line_prefix + summary_insert1.strip() + line_sep
+                s += next_line_prefix + summary_insert + sep + line_sep
 
         for i in range(trailing_items, 1, -1):
             if leading_items or i != trailing_items:
@@ -690,7 +692,7 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
             s += _formatArray(a[-i], format_function, rank-1, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
                               summary_insert, legacy)
-            s = s.rstrip() + sep.rstrip() + line_sep
+            s = s.rstrip() + sep + line_sep
         if leading_items or trailing_items > 1:
             s += next_line_prefix
         s += _formatArray(a[-1], format_function, rank-1, max_line_len,
diff --git a/numpy/core/tests/test_arrayprint.py b/numpy/core/tests/test_arrayprint.py
index 4d67d6eacbc..f55222dd303 100644
--- a/numpy/core/tests/test_arrayprint.py
+++ b/numpy/core/tests/test_arrayprint.py
@@ -230,6 +230,24 @@ def test_unstructured_void_repr(self):
         assert_equal(eval(repr(a), vars(np)), a)
         assert_equal(eval(repr(a[0]), vars(np)), a[0])
 
+    def test_summarize_1d(self):
+        A = np.arange(1001)
+        strA = '[   0    1    2 ...  998  999 1000]'
+        assert_equal(str(A), strA)
+
+        reprA = 'array([   0,    1,    2, ...,  998,  999, 1000])'
+        assert_equal(repr(A), reprA)
+
+    def test_summarize_2d(self):
+        A = np.arange(1002).reshape(2, 501)
+        strA = '[[   0    1    2 ...  498  499  500]\n' \
+               ' [ 501  502  503 ...  999 1000 1001]]'
+        assert_equal(str(A), strA)
+
+        reprA = 'array([[   0,    1,    2, ...,  498,  499,  500],\n' \
+                '       [ 501,  502,  503, ...,  999, 1000, 1001]])'
+        assert_equal(repr(A), reprA)
+
 
 class TestPrintOptions(object):
     """Test getting and setting global print options."""
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index a625a1bce18..306f21f1642 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -5677,26 +5677,6 @@ def test_3d_tensor(self):
             assert_equal(np.inner(b, a).transpose(2,3,0,1), desired)
 
 
-class TestSummarization(object):
-    def test_1d(self):
-        A = np.arange(1001)
-        strA = '[   0    1    2 ...  998  999 1000]'
-        assert_(str(A) == strA)
-
-        reprA = 'array([   0,    1,    2, ...,  998,  999, 1000])'
-        assert_(repr(A) == reprA)
-
-    def test_2d(self):
-        A = np.arange(1002).reshape(2, 501)
-        strA = '[[   0    1    2 ...  498  499  500]\n' \
-               ' [ 501  502  503 ...  999 1000 1001]]'
-        assert_(str(A) == strA)
-
-        reprA = 'array([[   0,    1,    2, ...,  498,  499,  500],\n' \
-                '       [ 501,  502,  503, ...,  999, 1000, 1001]])'
-        assert_(repr(A) == reprA)
-
-
 class TestAlen(object):
     def test_basic(self):
         m = np.array([1, 2, 3])
