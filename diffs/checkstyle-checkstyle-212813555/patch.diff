diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index 471b9d1810..caf9fb8bf5 100644
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -53,7 +53,7 @@
 
 public class BaseCheckTestSupport {
     private static final Pattern WARN_PATTERN = CommonUtils
-            .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]warn[*]/");
+            .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]\\s?warn\\s?[*]/");
 
     private static final String XML_NAME = "/google_checks.xml";
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
index 46094acd9f..c09dbf5962 100644
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
@@ -44,6 +44,7 @@ public void badLineWrapTest() throws Exception {
         final String[] expected = {
             "1: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "package"),
             "6: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import"),
+            "10: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import"),
         };
 
         final Configuration checkConfig = getCheckConfig("NoLineWrap");
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapBad.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapBad.java
index 3a08153efd..8663ba4689 100644
--- a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapBad.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapBad.java
@@ -7,9 +7,12 @@
     AccessibleAttributeSequence;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; //ok
 
+import static java.math. //warn
+        BigInteger.ONE;
+
 public class
     InputNoLineWrapBad {
-    
+
     public void
         fooMethod() {
         final int
@@ -24,4 +27,3 @@
 interface
     InterFoo {}
 
-
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
index 12b3e56e43..839626e582 100644
--- a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
@@ -1,12 +1,14 @@
 package com.google.checkstyle.test.chapter3filestructure.rule332nolinewrap; //ok
 
+import static java.math.BigInteger.ZERO; //ok
+
 import com.puppycrawl.tools.checkstyle.checks.design.FinalClassCheck; //ok
- 
+
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; //ok
 import javax.accessibility.AccessibleAttributeSequence; //ok
 
 public class InputNoLineWrapGood {
-    
+
   public void fooMethod() {
       //
   }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 69330a47ce..16b20139f4 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -152,11 +152,11 @@ public void addNextSibling(DetailAST ast) {
     public void addChild(AST ast) {
         clearBranchTokenTypes();
         clearChildCountCache(this);
-        super.addChild(ast);
         if (ast != null) {
             ((DetailAST) ast).setParent(this);
-            getFirstChild().setParent(this);
+            ((DetailAST) ast).previousSibling = getLastChild();
         }
+        super.addChild(ast);
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index 93d0a5979a..7a353b67fe 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -112,7 +112,7 @@
     private RightCurlyOption option = RightCurlyOption.SAME;
 
     /**
-     * Set the option to enforce.
+     * Sets the option to enforce.
      * @param optionStr string to decode option from
      * @throws IllegalArgumentException if unable to decode
      */
@@ -378,7 +378,7 @@ private static Details getDetails(DetailAST ast) {
                 break;
             default:
                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
-                // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, only.
+                // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE only.
                 // It has been done to improve coverage to 100%. I couldn't replace it with
                 // if-else-if block because code was ugly and didn't pass pmd check.
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
index 846a42e570..53e3417ae2 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java
@@ -36,7 +36,8 @@
  * <p>
  * The Check validate abbreviations(consecutive capital letters) length in
  * identifier name, it also allows to enforce camel case naming. Please read more at
- * <a href="http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html#s5.3-camel-case">
+ * <a href=
+ *  "http://checkstyle.sourceforge.net/reports/google-java-style-20170228.html#s5.3-camel-case">
  * Google Style Guide</a> to get to know how to avoid long abbreviations in names.
  * </p>
  * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
index 1f99db391d..93be608f60 100644
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java
@@ -72,13 +72,14 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT};
+        return new int[] {TokenTypes.PACKAGE_DEF, TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
     }
 
     @Override
     public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.IMPORT,
+            TokenTypes.STATIC_IMPORT,
             TokenTypes.PACKAGE_DEF,
             TokenTypes.CLASS_DEF,
             TokenTypes.METHOD_DEF,
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/indentation/messages_tr.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/indentation/messages_tr.properties
index a4b46b7830..674b3cb552 100644
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/indentation/messages_tr.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/indentation/messages_tr.properties
@@ -2,7 +2,7 @@
 
 indentation.child.error = {0} ifadesi doğru hizalanmamış. Bulunduğu sütun {1}, olması gereken sütun {2}.
 indentation.error       = {0} ifadesi doğru hizalanmamış. Bulunduğu sütun {1}, olması gereken sütun {2}.
-indentation.error.multi=''{0}'' yanlış girinti düzeyine sahip '{1}, beklenen düzeyde aşağıdakilerden biri olmalıdır: {2}.
+indentation.error.multi=''{0}'' yanlış girinti düzeyine sahip {1}, beklenen düzeyde aşağıdakilerden biri olmalıdır: {2}.
 indentation.child.error.multi=''{0}'' çocuk yanlış girinti düzeyi {1}, beklenen düzeyde aşağıdakilerden biri olmalıdır var: {2}.
 comments.indentation.single=Yorum beklenen yanlış girinti düzeyi {1}, {2}, girinti olmalıdır hattıyla aynı seviyede sahip {0}.
 comments.indentation.block=Blok Yorum beklenen yanlış girinti düzeyi {1}, {2}, girinti olmalıdır hattıyla aynı seviyede sahip {0}.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
index 80dbb2317d..598f06ef7c 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
@@ -369,7 +369,7 @@ protected String getCheckMessage(String messageKey, Object... arguments) {
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments the arguments of message in 'messages.properties' file.
      */
-    protected String getCheckMessage(
+    protected static String getCheckMessage(
             Class<?> clazz, String messageKey, Object... arguments) {
         return internalGetCheckMessage(getMessageBundle(clazz.getName()), messageKey, arguments);
     }
@@ -382,7 +382,7 @@ protected String getCheckMessage(
      * @param messageKey the key of message in 'messages.properties' file.
      * @param arguments the arguments of message in 'messages.properties' file.
      */
-    protected String internalGetCheckMessage(
+    private static String internalGetCheckMessage(
             String messageBundle, String messageKey, Object... arguments) {
         final ResourceBundle resourceBundle = ResourceBundle.getBundle(
                 messageBundle,
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 34838f0b07..3bc7437db7 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -34,12 +34,10 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
-import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
-import java.util.ResourceBundle;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -51,7 +49,6 @@
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
-import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
@@ -163,9 +160,6 @@ private void verify(Configuration config, String filePath, String[] expected,
             final IndentComment... linesWithWarn) throws Exception {
         final Checker checker = createChecker(config);
         checker.addListener(new IndentAudit(linesWithWarn));
-        checker.setLocaleCountry(Locale.ROOT.getCountry());
-        checker.setLocaleLanguage(Locale.ROOT.getLanguage());
-        checker.finishLocalSetup();
         verify(checker, new File[] {new File(filePath)}, filePath, expected);
     }
 
@@ -791,12 +785,8 @@ public void testInvalidArrayInitWithChecker()
             "112: " + getCheckMessage(MSG_ERROR_MULTI, "array initialization rcurly", 6, "8, 12"),
         };
 
-        final Checker checker = createChecker(checkConfig);
-        checker.setLocaleCountry(Locale.ROOT.getCountry());
-        checker.setLocaleLanguage(Locale.ROOT.getLanguage());
-        checker.finishLocalSetup();
         //Test input for this test case is not checked due to issue #693.
-        verify(checker, fileName, expected);
+        verify(checkConfig, fileName, expected);
     }
 
     @Test
@@ -1747,17 +1737,37 @@ public void testInputAnnotationScopeIndentationCheck() throws Exception {
         verifyWarns(checkConfig, fileName, expected);
     }
 
-    @Override
-    protected String internalGetCheckMessage(
-            String messageBundle, String messageKey, Object... arguments) {
-        final ResourceBundle resourceBundle = ResourceBundle.getBundle(
-                messageBundle,
-                Locale.ROOT,
-                Thread.currentThread().getContextClassLoader(),
-                new LocalizedMessage.Utf8Control());
-        final String pattern = resourceBundle.getString(messageKey);
-        final MessageFormat formatter = new MessageFormat(pattern, Locale.ROOT);
-        return formatter.format(arguments);
+    /**
+     * Verifies that the arguments of {@link IndentationCheck#MSG_ERROR},
+     * {@link IndentationCheck#MSG_CHILD_ERROR}, {@link IndentationCheck#MSG_CHILD_ERROR_MULTI},
+     * {@link IndentationCheck#MSG_CHILD_ERROR_MULTI} are in appropriate order.
+     *
+     * In other tests, the argument 0 and text before it are chopped off and only the rest of
+     * messages are verified. Therefore, the argument 0 is required to be the first argument in
+     * the messages above. If we update the messages in the future, it is required to keep the
+     * arguments in appropriate order to ensure other tests will work.
+     *
+     * @see IndentComment#getExpectedMessagePostfix(String)
+     */
+    @Test
+    public void testArgumentOrderOfErrorMessages() {
+        final String[] arguments = {"##0##", "##1##", "##2##"};
+        final String[] messages = {
+            getCheckMessage(MSG_ERROR, (Object[]) arguments),
+            getCheckMessage(MSG_CHILD_ERROR, (Object[]) arguments),
+            getCheckMessage(MSG_ERROR_MULTI, (Object[]) arguments),
+            getCheckMessage(MSG_CHILD_ERROR_MULTI, (Object[]) arguments),
+        };
+        final boolean isInOrder = Arrays.stream(messages).allMatch(msg -> {
+            final int indexOfArgumentZero = msg.indexOf(arguments[0]);
+            return Arrays.stream(arguments).mapToInt(msg::indexOf)
+                    .allMatch(index -> index >= indexOfArgumentZero);
+        });
+        assertTrue(
+                "the argument 0 of error messages (indentation.error, indentation.child.error,"
+                        + " indentation.error.multi, indentation.child.error.multi)"
+                        + " is required to be the first argument of them",
+                isInOrder);
     }
 
     private static final class IndentAudit implements AuditListener {
@@ -1801,12 +1811,15 @@ public void addError(AuditEvent event) {
             final IndentComment comment = comments[position];
             position++;
 
-            assertTrue(
-                    "input expected warning #" + position + " at line " + comment.getLineNumber()
-                            + " to report '" + comment.getExpectedMessage() + "' but got instead: "
-                            + line + ": " + message,
-                    line == comment.getLineNumber()
-                            && message.endsWith(comment.getExpectedMessage()));
+            final String possibleExceptedMessages = Arrays.stream(comment.getExpectedMessages())
+                    .reduce("", (cur, next) -> cur + "\"" + next + "\", ");
+            final String assertMessage = String.format(
+                    Locale.ROOT,
+                    "input expected warning #%d at line %d to report one of the following: %s"
+                            + "but got instead: %d: %s",
+                    position, comment.getLineNumber(), possibleExceptedMessages, line, message);
+            assertTrue(assertMessage, line == comment.getLineNumber()
+                    && Arrays.stream(comment.getExpectedMessages()).anyMatch(message::endsWith));
         }
 
         @Override
@@ -1816,6 +1829,8 @@ public void addException(AuditEvent event, Throwable throwable) {
     }
 
     private static final class IndentComment {
+        /** Used to locate the index of argument zero of error messages. */
+        private static final String FAKE_ARGUMENT_ZERO = "##0##";
         private final int lineNumber;
         private final int indent;
         /** Used for when violations report nodes not first on the line. */
@@ -1838,15 +1853,28 @@ private IndentComment(Matcher match, int lineNumber) {
             warning = match.group(5) != null;
         }
 
-        public String getExpectedMessage() {
+        public String[] getExpectedMessages() {
+            final String[] expectedMessages;
             if (expectedWarning.contains(",")) {
-                return "incorrect indentation level " + (indent + indentOffset)
-                        + ", expected level should be one of the following: " + expectedWarning
-                        + ".";
+                expectedMessages = new String[] {
+                    getExpectedMessagePostfix(MSG_ERROR_MULTI),
+                    getExpectedMessagePostfix(MSG_CHILD_ERROR_MULTI),
+                };
+            } else {
+                expectedMessages = new String[] {
+                    getExpectedMessagePostfix(MSG_ERROR),
+                    getExpectedMessagePostfix(MSG_CHILD_ERROR),
+                };
             }
+            return expectedMessages;
+        }
 
-            return "incorrect indentation level " + (indent + indentOffset)
-                    + ", expected level should be " + expectedWarning + ".";
+        private String getExpectedMessagePostfix(final String messageKey) {
+            final String msg = getCheckMessage(IndentationCheck.class, messageKey,
+                    FAKE_ARGUMENT_ZERO, indent + indentOffset, expectedWarning);
+            final int indexOfMsgPostfix = msg.indexOf(FAKE_ARGUMENT_ZERO)
+                    + FAKE_ARGUMENT_ZERO.length();
+            return msg.substring(indexOfMsgPostfix);
         }
 
         public int getLineNumber() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
index 56f99ec0d9..429d758d7f 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
@@ -40,7 +40,8 @@
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
-                + "sizes" + File.separator + filename);
+                + "sizes" + File.separator + "anoninnerlength"
+                + File.separator + filename);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
index 68cb0ebe29..168bc2f1b4 100644
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java
@@ -51,6 +51,7 @@ public void testDefaultTokensLineWrapping() throws Exception {
         final String[] expected = {
             "1: " + getCheckMessage(MSG_KEY, "package"),
             "6: " + getCheckMessage(MSG_KEY, "import"),
+            "10: " + getCheckMessage(MSG_KEY, "import"),
         };
         verify(checkConfig, getPath("InputNoLineWrapBad.java"), expected);
     }
@@ -59,12 +60,14 @@ public void testDefaultTokensLineWrapping() throws Exception {
     public void testCustomTokensLineWrapping()
             throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(NoLineWrapCheck.class);
-        checkConfig.addAttribute("tokens", "IMPORT, CLASS_DEF, METHOD_DEF, ENUM_DEF");
+        checkConfig.addAttribute(
+                "tokens", "IMPORT, STATIC_IMPORT, CLASS_DEF, METHOD_DEF, ENUM_DEF");
         final String[] expected = {
             "6: " + getCheckMessage(MSG_KEY, "import"),
-            "10: " + getCheckMessage(MSG_KEY, "CLASS_DEF"),
-            "13: " + getCheckMessage(MSG_KEY, "METHOD_DEF"),
-            "20: " + getCheckMessage(MSG_KEY, "ENUM_DEF"),
+            "10: " + getCheckMessage(MSG_KEY, "import"),
+            "13: " + getCheckMessage(MSG_KEY, "CLASS_DEF"),
+            "16: " + getCheckMessage(MSG_KEY, "METHOD_DEF"),
+            "23: " + getCheckMessage(MSG_KEY, "ENUM_DEF"),
         };
         verify(checkConfig, getPath("InputNoLineWrapBad.java"), expected);
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/anoninnerlength/InputAnonInnerLength.java
similarity index 98%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/anoninnerlength/InputAnonInnerLength.java
index 6dfb0a51be..97686901aa 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/anoninnerlength/InputAnonInnerLength.java
@@ -2,7 +2,7 @@
 // Test case file for checkstyle.
 // Created: 2002
 ////////////////////////////////////////////////////////////////////////////////
-package com.puppycrawl.tools.checkstyle.checks.sizes;
+package com.puppycrawl.tools.checkstyle.checks.sizes.anoninnerlength;
 
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseAdapter;
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapBad.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapBad.java
index 88465abff0..5a768ef7ba 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapBad.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapBad.java
@@ -1,15 +1,18 @@
-package com.puppycrawl.tools.
+package com.puppycrawl.tools. //violation
     checkstyle.checks.whitespace;
 
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 
-import javax.accessibility.
+import javax.accessibility. //violation
     AccessibleAttributeSequence;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
-public class
+import static java.math. //violation
+		BigInteger.ZERO;
+
+public class //violation
     InputNoLineWrapBad {
-    
+
 	public void
 	    fooMethod() {
 		final int
@@ -17,7 +20,7 @@
 	}
 }
 
-enum
+enum //violation
     FooFoo {
 }
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapGood.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapGood.java
index 77853df530..07e75e4d6d 100644
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapGood.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputNoLineWrapGood.java
@@ -5,8 +5,10 @@
 import javax.accessibility.AccessibleAttributeSequence;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
 
+import static java.math.BigInteger.ZERO;
+
 public class InputNoLineWrapGood {
-    
+
 	public void fooMethod() {
 		//
 	}
diff --git a/src/xdocs/config.xml b/src/xdocs/config.xml
index bb50420296..5dcd8b414b 100644
--- a/src/xdocs/config.xml
+++ b/src/xdocs/config.xml
@@ -665,7 +665,8 @@
         custom message pattern, as shown in the example above.
         Placeholders used in the default message can also be used in the
         custom message.  Note that the message pattern must be a valid
-        <code>java.text.MessageFormat</code> style pattern,
+        <a href="https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html">java.text.MessageFormat</a>
+        style pattern,
         so be careful about curly braces outside a placeholder
         definition.
       </p>
diff --git a/src/xdocs/config_whitespace.xml b/src/xdocs/config_whitespace.xml
index f52e5ab69d..906c6fd1d6 100644
--- a/src/xdocs/config_whitespace.xml
+++ b/src/xdocs/config_whitespace.xml
@@ -816,6 +816,8 @@ sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference
               <a
               href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT">IMPORT</a>,
               <a
+              href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_IMPORT">STATIC_IMPORT</a>,
+              <a
               href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PACKAGE_DEF">PACKAGE_DEF</a>,
               <a
               href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF">CLASS_DEF</a>,
@@ -831,7 +833,9 @@ sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference
             <td><a
             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PACKAGE_DEF">PACKAGE_DEF</a>,
             <a
-             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT">IMPORT</a>.</td>
+             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT">IMPORT</a>,
+            <a
+            href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_IMPORT">STATIC_IMPORT</a>.</td>
           </tr>
         </table>
       </subsection>
@@ -841,11 +845,14 @@ sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference
         Examples of line-wrapped statements (bad case):
       </p>
       <source>
-package com.puppycrawl.
+package com.puppycrawl. //violation
     tools.checkstyle.checks;
 
-import com.puppycrawl.tools.
+import com.puppycrawl.tools. //violation
     checkstyle.api.AbstractCheck;
+
+import static java.math. //violation
+    BigInteger.ZERO;
       </source>
       <p>
         To configure the check to force no line-wrapping
@@ -868,6 +875,7 @@ import com.puppycrawl.tools.
       </p>
       <source>
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
+import static java.math.BigInteger.ZERO;
       </source>
       </subsection>
 
