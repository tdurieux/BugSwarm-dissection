diff --git a/admin/src/main/java/edu/unc/lib/dl/admin/controller/EditLabelController.java b/admin/src/main/java/edu/unc/lib/dl/admin/controller/EditLabelController.java
deleted file mode 100644
index 6c21d4345..000000000
--- a/admin/src/main/java/edu/unc/lib/dl/admin/controller/EditLabelController.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/**
- * Copyright 2008 The University of North Carolina at Chapel Hill
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *         http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package edu.unc.lib.dl.admin.controller;
-
-import org.springframework.stereotype.Controller;
-
-/**
- *
- * @author sreenug
- *
- */
-@Controller
-public class EditLabelController {
-
-//    @RequestMapping(value = "editlabel/{pid}", method = RequestMethod.POST)
-//    public @ResponseBody
-//    Object saveLabel(@PathVariable("pid") String pid,
-//            @RequestParam("label") String label) throws IngestException {
-//
-//        if (label != null && label.trim().length() > 0) {
-//            try {
-//                PremisEventLogger logger = new PremisEventLogger(pid);
-//                PID pidObject = PIDs.get(pid);
-//
-//                this.client.modifyObject(pidObject, label, null, null, null);
-//
-//                Element event = logger.logEvent(PremisEventLogger.Type.MIGRATION,
-//                        "Object renamed to " + label, pidObject);
-//                PremisEventLogger.addDetailedOutcome(event, "success", "Object renamed successfully", null);
-//                this.client.writePremisEventsToFedoraObject(logger, pidObject);
-//            } catch (FedoraException e) {
-//                throw new IngestException("Could not update label for " + pid, e);
-//            }
-//        } else {
-//            Map<String, String> response = new HashMap<>();
-//            response.put("message", "error");
-//            return response ;
-//        }
-//        Map<String, String> response = new HashMap<>();
-//        response.put("message", "success");
-//        return response;
-//    }
-}
diff --git a/admin/src/main/webapp/WEB-INF/service-context.xml b/admin/src/main/webapp/WEB-INF/service-context.xml
index 3af8d9852..663f963f9 100644
--- a/admin/src/main/webapp/WEB-INF/service-context.xml
+++ b/admin/src/main/webapp/WEB-INF/service-context.xml
@@ -120,12 +120,14 @@
     </bean>
     
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg><null /></constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
+            <null />
+        </constructor-arg>
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
     
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
diff --git a/deposit/src/main/java/edu/unc/lib/deposit/work/AbstractDepositJob.java b/deposit/src/main/java/edu/unc/lib/deposit/work/AbstractDepositJob.java
index 34685207c..304ab120d 100644
--- a/deposit/src/main/java/edu/unc/lib/deposit/work/AbstractDepositJob.java
+++ b/deposit/src/main/java/edu/unc/lib/deposit/work/AbstractDepositJob.java
@@ -57,11 +57,13 @@
 import edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter;
 import edu.unc.lib.dl.fcrepo4.RepositoryPathConstants;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.metrics.TimerFactory;
 import edu.unc.lib.dl.util.DepositConstants;
 import edu.unc.lib.dl.util.DepositStatusFactory;
 import edu.unc.lib.dl.util.JobStatusFactory;
 import edu.unc.lib.dl.util.RDFModelUtil;
 import edu.unc.lib.dl.util.RedisWorkerConstants.DepositState;
+import io.dropwizard.metrics5.Timer;
 
 /**
  * Constructed with deposit directory and deposit ID. Facilitates event logging
@@ -75,6 +77,8 @@
             .getLogger(AbstractDepositJob.class);
     public static final String DEPOSIT_QUEUE = "Deposit";
 
+    protected final Timer timer = TimerFactory.createTimerForClass(getClass(), "job-duration");
+
     @Autowired
     private JobStatusFactory jobStatusFactory;
 
@@ -136,7 +140,7 @@ public void init() {
 
     @Override
     public final void run() {
-        try {
+        try (Timer.Context context = timer.time()) {
             runJob();
             if (dataset.isInTransaction()) {
                 dataset.commit();
diff --git a/deposit/src/main/java/edu/unc/lib/deposit/work/DepositSupervisor.java b/deposit/src/main/java/edu/unc/lib/deposit/work/DepositSupervisor.java
index b8e646cda..0c651ef62 100644
--- a/deposit/src/main/java/edu/unc/lib/deposit/work/DepositSupervisor.java
+++ b/deposit/src/main/java/edu/unc/lib/deposit/work/DepositSupervisor.java
@@ -57,13 +57,14 @@
 import edu.unc.lib.deposit.validate.ExtractTechnicalMetadataJob;
 import edu.unc.lib.deposit.validate.PackageIntegrityCheckJob;
 import edu.unc.lib.deposit.validate.ValidateContentModelJob;
-import edu.unc.lib.deposit.validate.ValidateFileAvailabilityJob;
 import edu.unc.lib.deposit.validate.ValidateDescriptionJob;
+import edu.unc.lib.deposit.validate.ValidateFileAvailabilityJob;
 import edu.unc.lib.deposit.validate.VirusScanJob;
 import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fedora.FedoraTimeoutException;
 import edu.unc.lib.dl.fedora.PID;
-import edu.unc.lib.dl.reporting.ActivityMetricsClient;
+import edu.unc.lib.dl.metrics.CounterFactory;
+import edu.unc.lib.dl.metrics.HistogramFactory;
 import edu.unc.lib.dl.services.OperationsMessageSender;
 import edu.unc.lib.dl.util.DepositConstants;
 import edu.unc.lib.dl.util.DepositStatusFactory;
@@ -73,6 +74,8 @@
 import edu.unc.lib.dl.util.RedisWorkerConstants.DepositField;
 import edu.unc.lib.dl.util.RedisWorkerConstants.DepositState;
 import edu.unc.lib.dl.util.RedisWorkerConstants.Priority;
+import io.dropwizard.metrics5.Counter;
+import io.dropwizard.metrics5.Histogram;
 import net.greghaines.jesque.Job;
 import net.greghaines.jesque.client.Client;
 import net.greghaines.jesque.meta.QueueInfo;
@@ -88,6 +91,7 @@
  * keys.
  *
  * @author count0
+ * @author harring
  *
  */
 public class DepositSupervisor implements WorkerListener {
@@ -100,9 +104,6 @@
     @Autowired
     private JobStatusFactory jobStatusFactory;
 
-    @Autowired
-    private ActivityMetricsClient metricsClient;
-
     @Autowired
     private List<WorkerPool> depositWorkerPools;
 
@@ -118,6 +119,12 @@
     @Autowired
     private DepositEmailHandler depositEmailHandler;
 
+    private static final Histogram depositHist = HistogramFactory
+            .createHistogram("depositDuration");
+
+    private static final Histogram queuedDepositHist = HistogramFactory
+            .createHistogram("queuedDepositDuration");
+
     public net.greghaines.jesque.Config getJesqueConfig() {
         return jesqueConfig;
     }
@@ -184,7 +191,7 @@ private void depositDuration(String depositUUID, Map<String, String> status) {
         long depositEndTime = System.currentTimeMillis();
         long depositTotalTime = depositEndTime - depositStartTime;
 
-        metricsClient.setDepositDuration(depositUUID, depositTotalTime);
+        depositHist.update(depositTotalTime);
 
         String strDepositEndTime = Long.toString(depositEndTime);
         depositStatusFactory.set(depositUUID, DepositField.endTime, strDepositEndTime);
@@ -279,7 +286,7 @@ public void run() {
 
     private Map<String, Set<String>> getQueuedDepositsWithJobs() {
         Map<String, Set<String>> depositMap = new HashMap<>();
-        for (Queue queue: Queue.values()) {
+        for (Queue queue : Queue.values()) {
             addQueuedDeposits(queue.name(), depositMap);
         }
         return depositMap;
@@ -376,8 +383,7 @@ public DepositStatusFactory getDepositStatusFactory() {
         return depositStatusFactory;
     }
 
-    public void setDepositStatusFactory(
-            DepositStatusFactory depositStatusFactory) {
+    public void setDepositStatusFactory(DepositStatusFactory depositStatusFactory) {
         this.depositStatusFactory = depositStatusFactory;
     }
 
@@ -459,7 +465,8 @@ public void onEvent(WorkerEvent event, Worker worker, String queue,
                     String strQueuedStartTime = status.get(DepositField.submitTime.name());
                     long queuedStartTime = Long.parseLong(strQueuedStartTime);
                     long queuedTime = depositStartTime - queuedStartTime;
-                    metricsClient.setQueuedDepositDuration(depositUUID, queuedTime);
+
+                    queuedDepositHist.update(queuedTime);
                 }
 
                 break;
@@ -514,7 +521,8 @@ public void onEvent(WorkerEvent event, Worker worker, String queue,
                 // End job timer if failed
                 depositDuration(depositUUID, status);
 
-                metricsClient.incrFailedDepositJob(job.getClassName());
+                final Counter failed = CounterFactory.createCounter(job.getClass(), "failed-deposits");
+                failed.inc();
 
                 depositEmailHandler.sendDepositResults(depositUUID);
 
@@ -690,7 +698,9 @@ private void queueNextJob(Job job, String depositUUID, Map<String, String> statu
             enqueueJob(nextJob, status, delay);
         } else {
             depositStatusFactory.setState(depositUUID, DepositState.finished);
-            metricsClient.incrFinishedDeposit();
+
+            final Counter finished = CounterFactory.createCounter(job.getClass(), "finished-deposits");
+            finished.inc();
 
             depositDuration(depositUUID, status);
 
diff --git a/deposit/src/main/webapp/WEB-INF/service-context.xml b/deposit/src/main/webapp/WEB-INF/service-context.xml
index c385799f5..07c8ba88d 100644
--- a/deposit/src/main/webapp/WEB-INF/service-context.xml
+++ b/deposit/src/main/webapp/WEB-INF/service-context.xml
@@ -54,14 +54,14 @@
     </bean>
 
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg>
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
             <null />
         </constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
 
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
diff --git a/etc/services-camel.properties b/etc/services-camel.properties
index dc49fdfa0..70e207ab9 100644
--- a/etc/services-camel.properties
+++ b/etc/services-camel.properties
@@ -56,6 +56,9 @@ cdr.solrupdate.stream.camel=activemq://activemq:queue:repository.solrupdate
 cdr.triplesupdate.stream=activemq:queue:repository.triplesupdate?asyncConsumer=true
 cdr.triplesupdate.stream.camel=activemq://activemq:queue:repository.triplesupdate
 
+cdr.enhancement.stream=activemq:queue:repository.enhancements
+cdr.enhancement.stream.camel=activemq://activemq:queue:repository.enhancements
+
 # The camel URI for the incoming message stream.
 fcrepo.stream=activemq:queue:fedora?asyncConsumer=true
 
diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
index 66d8341b0..b273d7ce7 100644
--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
@@ -108,7 +108,9 @@ private RepositoryObject instantiateRepositoryObject(PID pid, Model model, Strin
         if (resc.hasProperty(Premis.hasEventType)) {
             obj =  new PremisEventObject(pid, repositoryObjectDriver, repoObjFactory);
         } else if (isContentPID(pid)) {
-            if (resc.hasProperty(RDF.type, Cdr.Work)) {
+            if (resc.hasProperty(RDF.type, Cdr.Tombstone)) {
+                obj = new Tombstone(pid, repositoryObjectDriver, repoObjFactory);
+            } else if (resc.hasProperty(RDF.type, Cdr.Work)) {
                 obj = new WorkObject(pid, repositoryObjectDriver, repoObjFactory);
             } else if (resc.hasProperty(RDF.type, Cdr.FileObject)) {
                 obj = new FileObject(pid, repositoryObjectDriver, repoObjFactory);
diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactory.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactory.java
index 71b609b24..8441af85a 100644
--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactory.java
+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectFactory.java
@@ -487,7 +487,7 @@ public void createMemberLink(URI parentUri, URI memberUri) throws FedoraExceptio
      * @param property the new property value
      * @param object
      */
-    public void createExclusiveRelationship(RepositoryObject repoObj, Property property, Resource object) {
+    public void createExclusiveRelationship(RepositoryObject repoObj, Property property, Object object) {
         NodeIterator valuesIt = repoObj.getModel().listObjectsOfProperty(property);
         List<Object> previousValues = null;
         if (valuesIt != null && valuesIt.hasNext()) {
diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
index e1e524482..3a4eae13c 100644
--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
@@ -134,6 +134,14 @@ public DepositRecord getDepositRecord(PID pid) {
         return (DepositRecord) repoObj;
     }
 
+    public Tombstone getTombstone(PID pid) {
+        RepositoryObject repoObj = getRepositoryObject(pid);
+        if (!(repoObj instanceof Tombstone)) {
+            throw new ObjectTypeMismatchException("Object with pid " + pid + " is not a tombstone");
+        }
+        return (Tombstone) repoObj;
+    }
+
     public RepositoryObject getRepositoryObject(PID pid) {
         try {
             return repositoryObjCache.get(pid);
diff --git a/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java b/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
index 5647b488b..c6407466a 100644
--- a/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
+++ b/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
@@ -85,6 +85,7 @@ public void setup() throws Exception {
         when(header.getValue())
             .thenReturn(REQUEST_URI);
         when(httpResponse.getAllHeaders()).thenReturn(new Header[]{header});
+        when(request.getMethod()).thenReturn("GET");
     }
 
     @Test
diff --git a/metadata/src/main/java/edu/unc/lib/dl/httpclient/HttpClientUtil.java b/metadata/src/main/java/edu/unc/lib/dl/httpclient/HttpClientUtil.java
index 2819e8033..3f4b5feaf 100644
--- a/metadata/src/main/java/edu/unc/lib/dl/httpclient/HttpClientUtil.java
+++ b/metadata/src/main/java/edu/unc/lib/dl/httpclient/HttpClientUtil.java
@@ -46,6 +46,7 @@
 public class HttpClientUtil {
     public static final String SHIBBOLETH_GROUPS_HEADER = "isMemberOf";
     public static final String FORWARDED_GROUPS_HEADER = "forwardedGroups";
+    public static final String FORWARDED_MAIL_HEADER = "forwardedMail";
 
     private HttpClientUtil() {
     }
diff --git a/metadata/src/main/java/edu/unc/lib/dl/metrics/CounterFactory.java b/metadata/src/main/java/edu/unc/lib/dl/metrics/CounterFactory.java
new file mode 100644
index 000000000..70acd1cad
--- /dev/null
+++ b/metadata/src/main/java/edu/unc/lib/dl/metrics/CounterFactory.java
@@ -0,0 +1,45 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.metrics;
+
+import io.dropwizard.metrics5.Counter;
+import io.dropwizard.metrics5.MetricRegistry;
+
+/**
+ * A factory for creating counters for reporting various metrics
+ *
+ * @author harring
+ *
+ */
+public class CounterFactory {
+
+    private static final MetricRegistry registry = RegistryService.getInstance().getRegistry();
+
+    private CounterFactory() {
+
+    }
+
+    /**
+     * Creates and registers a counter for the given class
+     *
+     * @param className the class name under which to register the counter
+     * @param metricNames any further specific name(s) for the counter (Optional)
+     */
+    public static Counter createCounter(Class<?> className, String... metricNames) {
+        return registry.counter(MetricRegistry.name(className, metricNames));
+    }
+
+}
\ No newline at end of file
diff --git a/metadata/src/main/java/edu/unc/lib/dl/metrics/HistogramFactory.java b/metadata/src/main/java/edu/unc/lib/dl/metrics/HistogramFactory.java
new file mode 100644
index 000000000..eeb285f01
--- /dev/null
+++ b/metadata/src/main/java/edu/unc/lib/dl/metrics/HistogramFactory.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.metrics;
+
+import io.dropwizard.metrics5.Histogram;
+import io.dropwizard.metrics5.MetricName;
+import io.dropwizard.metrics5.MetricRegistry;
+
+/**
+ * A factory for creating histrograms for reporting various metrics
+ *
+ * @author harring
+ *
+ */
+public class HistogramFactory {
+
+    private static final MetricRegistry registry = RegistryService.getInstance().getRegistry();
+
+    private HistogramFactory() {
+
+    }
+
+    /**
+     * Creates and registers a histogram under the given name
+     *
+     * @param metricName the name under which to register the histogram
+     */
+    public static Histogram createHistogram(String name) {
+        return registry.histogram(name);
+
+    }
+
+    /**
+     * Creates and registers a histogram under the given metric name
+     *
+     * @param metricName the name under which to register the histogram
+     */
+    public static Histogram createHistogram(MetricName metricName) {
+        return registry.histogram(metricName);
+
+    }
+}
\ No newline at end of file
diff --git a/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java b/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
index cbc49d45c..531ec07f4 100644
--- a/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
+++ b/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
@@ -66,6 +66,10 @@ public static String getURI() {
     public static final Property depositedOnBehalfOf = createProperty(
             "http://cdr.unc.edu/definitions/model#depositedOnBehalfOf" );
 
+    /** Name of a binary file. */
+    public static final Property filename = createProperty(
+            "http://cdr.unc.edu/definitions/model#filename" );
+
     /** Relationship indicating that an ingested object was a part of a given deposit */
     public static final Property hasIngestedObject = createProperty(
             "http://cdr.unc.edu/definitions/model#hasIngestedObject");
@@ -74,9 +78,21 @@ public static String getURI() {
     public static final Property hasManifest = createProperty(
             "http://cdr.unc.edu/definitions/model#hasManifest" );
 
+    /** Relationship indicating a checksum on this binary object */
+    public static final Property hasMessageDigest = createProperty(
+            "http://cdr.unc.edu/definitions/model#hasMessageDigest" );
+
+    /** Relationship indicating the mimetype of this binary object */
+    public static final Property hasMimeType = createProperty(
+            "http://cdr.unc.edu/definitions/model#hasMimeType" );
+
    public static final Property hasMods = createProperty("http://cdr.unc.edu/definitions/model#hasMods");
 
-    /** Identifier indicating the profile of the metadata provided with this object
+   /** The size (e.g., in bytes) of this binary object */
+   public static final Property hasSize = createProperty(
+           "http://cdr.unc.edu/definitions/model#hasSize" );
+
+   /** Identifier indicating the profile of the metadata provided with this object
      *  at deposit time. Used to identify what transformation was used to generate
      *  descriptive metadata from the original metadata.
      */
diff --git a/metadata/src/main/java/edu/unc/lib/dl/sparql/SparqlUpdateHelper.java b/metadata/src/main/java/edu/unc/lib/dl/sparql/SparqlUpdateHelper.java
index 96bf53880..f4e1a5188 100644
--- a/metadata/src/main/java/edu/unc/lib/dl/sparql/SparqlUpdateHelper.java
+++ b/metadata/src/main/java/edu/unc/lib/dl/sparql/SparqlUpdateHelper.java
@@ -20,6 +20,7 @@
 import org.apache.jena.datatypes.RDFDatatype;
 import org.apache.jena.datatypes.TypeMapper;
 import org.apache.jena.graph.Node;
+import org.apache.jena.rdf.model.Literal;
 import org.apache.jena.rdf.model.Model;
 import org.apache.jena.rdf.model.Property;
 import org.apache.jena.rdf.model.ResIterator;
@@ -194,6 +195,9 @@ public static String getObjectAsString(Object object) {
             return '<' + ((Resource) object).getURI() + '>';
         } else if (object instanceof String) {
             return '"' + object.toString() + '"';
+        } else if (object instanceof Literal) {
+            RDFDatatype type = ((Literal) object).getDatatype();
+            return '"' + object.toString() + "\"^^<" + type.getURI() + ">";
         } else {
             RDFDatatype type = TypeMapper.getInstance().getTypeByClass(object.getClass());
             if (type == null) {
diff --git a/persistence/pom.xml b/persistence/pom.xml
index 8dc99fec0..b6d8eeb2b 100644
--- a/persistence/pom.xml
+++ b/persistence/pom.xml
@@ -179,9 +179,8 @@
             <artifactId>jackson-core-asl</artifactId>
         </dependency>
         <dependency>
-            <groupId>net.lariverosc</groupId>
-            <artifactId>jesque-spring</artifactId>
-            <version>1.0.0</version>
+            <groupId>net.greghaines</groupId>
+            <artifactId>jesque</artifactId>
         </dependency>
         <dependency>
             <groupId>com.samskivert</groupId>
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
index e5f0c7e3e..fff48bdc6 100644
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
@@ -50,6 +50,7 @@
 import edu.unc.lib.dl.rdf.Cdr;
 import edu.unc.lib.dl.rdf.Ldp;
 import edu.unc.lib.dl.rdf.Premis;
+import edu.unc.lib.dl.search.solr.model.ObjectPath;
 import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;
 import edu.unc.lib.dl.util.TombstonePropertySelector;
 import io.dropwizard.metrics5.Timer;
@@ -111,21 +112,21 @@ private void destroyTree(RepositoryObject rootOfTree) throws FedoraException, IO
                 destroyTree(member);
             }
         }
+        Resource rootResc = rootOfTree.getResource();
+        Model rootModel = rootResc.getModel();
         if (rootOfTree instanceof FileObject) {
             FileObject file = (FileObject) rootOfTree;
             BinaryObject origFile = file.getOriginalFile();
             if (origFile != null) {
-                addBinaryMetadataToParent(rootOfTree, origFile);
+                addBinaryMetadataToParent(rootModel, origFile);
             }
         }
-        Model rootModel = rootOfTree.getModel();
-        boolean hasLdpContains = rootModel.contains(rootOfTree.getResource(), Ldp.contains);
+        boolean hasLdpContains = rootModel.contains(rootResc, Ldp.contains);
         if (hasLdpContains) {
             deleteNonContentObjects(rootModel);
         }
         // destroy root of sub-tree
-        Model stoneModel = rootOfTree.getModel();
-        stoneModel = convertModelToTombstone(rootOfTree);
+        Model stoneModel = convertModelToTombstone(rootOfTree, rootResc);
         repoObjFactory.createOrTransformObject(rootOfTree.getUri(), stoneModel);
 
         //add premis event to tombstone
@@ -134,28 +135,27 @@ private void destroyTree(RepositoryObject rootOfTree) throws FedoraException, IO
             .write();
     }
 
-    private Model convertModelToTombstone(RepositoryObject destroyedObj)
+    private Model convertModelToTombstone(RepositoryObject destroyedObj, Resource destroyedResc)
             throws IOException, FcrepoOperationFailedException {
-        Model oldModel = destroyedObj.getModel();
-        Resource resc = destroyedObj.getResource();
 
         Model stoneModel = ModelFactory.createDefaultModel();
-        stoneModel.add(oldModel.listStatements(new TombstonePropertySelector(resc)));
-
-        // determine path and store in tombstone model
-        String path = pathFactory.getPath(destroyedObj.getPid()).toNamePath();
-        stoneModel.add(resc, Cdr.historicalPath, path);
-        stoneModel.add(resc, RDF.type, Cdr.Tombstone);
+        stoneModel.add(destroyedResc.getModel().listStatements(new TombstonePropertySelector(destroyedResc)));
+
+        // determine paths and store in tombstone model
+        ObjectPath objPath = pathFactory.getPath(destroyedObj.getPid());
+        String namePath = objPath.toNamePath();
+        stoneModel.add(destroyedResc, Cdr.historicalPath, namePath);
+        String pidPath = objPath.toIdPath();
+        stoneModel.add(destroyedResc, Cdr.historicalIdPath, pidPath);
+        stoneModel.add(destroyedResc, RDF.type, Cdr.Tombstone);
         return stoneModel;
     }
 
-    private void addBinaryMetadataToParent(RepositoryObject parent, BinaryObject child) {
-        Model childModel = child.getModel();
-        Model parentModel = parent.getModel();
-        Resource resc = child.getResource();
+    private void addBinaryMetadataToParent(Model parentModel, BinaryObject child) {
+        Resource childResc = child.getResource();
 
-        TombstonePropertySelector selector = new TombstonePropertySelector(resc);
-        StmtIterator iter = childModel.listStatements(selector);
+        TombstonePropertySelector selector = new TombstonePropertySelector(childResc);
+        StmtIterator iter = childResc.getModel().listStatements(selector);
         while (iter.hasNext()) {
             Statement s = iter.nextStatement();
             if (selector.selects(s)) {
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
index 43d56e13f..93d873b58 100644
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
@@ -27,8 +27,10 @@
 import edu.unc.lib.dl.acl.util.Permission;
 import edu.unc.lib.dl.fcrepo4.AdminUnit;
 import edu.unc.lib.dl.fcrepo4.PIDs;
+import edu.unc.lib.dl.fcrepo4.RepositoryObject;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.CdrAcl;
 
 /**
  * Service that manages the destruction of objects in the repository and their replacement by tombstones
@@ -56,14 +58,17 @@ public void destroyObjects(AgentPrincipals agent, List<String> ids) {
 
         for (String id : ids) {
             PID pid = PIDs.get(id);
-            if (repoObjLoader.getRepositoryObject(pid) instanceof AdminUnit) {
+            RepositoryObject obj = repoObjLoader.getRepositoryObject(pid);
+            if (obj instanceof AdminUnit) {
                 aclService.assertHasAccess("User does not have permission to destroy admin unit", pid,
                         agent.getPrincipals(), Permission.destroyUnit);
             } else {
                 aclService.assertHasAccess("User does not have permission to destroy this object", pid,
                         agent.getPrincipals(), Permission.destroy);
             }
-            objsToDestroy.add(pid);
+            if (obj.getResource().hasProperty(CdrAcl.markedForDeletion)) {
+                objsToDestroy.add(pid);
+            }
         }
         if (!objsToDestroy.isEmpty()) {
             DestroyObjectsJob job = new DestroyObjectsJob(objsToDestroy);
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/EditLabelService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/EditLabelService.java
new file mode 100644
index 000000000..1c2aa55f7
--- /dev/null
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/edit/EditLabelService.java
@@ -0,0 +1,140 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.persist.services.edit;
+
+import java.util.Arrays;
+
+import org.apache.jena.rdf.model.Model;
+import org.apache.jena.rdf.model.Resource;
+import org.apache.jena.rdf.model.Statement;
+
+import edu.unc.lib.dl.acl.service.AccessControlService;
+import edu.unc.lib.dl.acl.util.AgentPrincipals;
+import edu.unc.lib.dl.acl.util.Permission;
+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;
+import edu.unc.lib.dl.fcrepo4.RepositoryObject;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
+import edu.unc.lib.dl.fcrepo4.TransactionManager;
+import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.metrics.TimerFactory;
+import edu.unc.lib.dl.rdf.DcElements;
+import edu.unc.lib.dl.rdf.Premis;
+import edu.unc.lib.dl.services.OperationsMessageSender;
+import io.dropwizard.metrics5.Timer;
+
+/**
+ * Service that manages editing of the dc:title property on an object
+ *
+ * @author harring
+ *
+ */
+public class EditLabelService {
+
+    private AccessControlService aclService;
+    private RepositoryObjectLoader repoObjLoader;
+    private RepositoryObjectFactory repoObjFactory;
+    private TransactionManager txManager;
+    private OperationsMessageSender operationsMessageSender;
+
+    private static final Timer timer = TimerFactory.createTimerForClass(EditLabelService.class);
+
+    public EditLabelService() {
+    }
+
+    /**
+     * Changes an object's dc:title and creates a premis event marking the change
+     *
+     * @param agent security principals of the agent making request
+     * @param pid the pid of the object whose label is to be changed
+     * @param label the new label (dc:title) of the given object
+     */
+    public void editLabel(AgentPrincipals agent, PID pid, String label) {
+        FedoraTransaction tx = txManager.startTransaction();
+
+        try (Timer.Context context = timer.time()) {
+            aclService.assertHasAccess(
+                    "User does not have permissions to edit labels",
+                    pid, agent.getPrincipals(), Permission.editDescription);
+
+            RepositoryObject obj = repoObjLoader.getRepositoryObject(pid);
+
+            String oldLabel = getOldLabel(obj);
+
+            repoObjFactory.createExclusiveRelationship(obj, DcElements.title, label);
+
+            obj.getPremisLog()
+                .buildEvent(Premis.Migration)
+                .addImplementorAgent(agent.getUsernameUri())
+                .addEventDetail("Object renamed from " + oldLabel + " to " + label)
+                .write();
+        } catch (Exception e) {
+            tx.cancel(e);
+        } finally {
+            tx.close();
+        }
+
+        // Send message that the action completed
+        operationsMessageSender.sendUpdateDescriptionOperation(
+                agent.getUsername(), Arrays.asList(pid));
+    }
+
+    /**
+     * @param aclService the aclService to set
+     */
+    public void setAclService(AccessControlService aclService) {
+        this.aclService = aclService;
+    }
+
+    /**
+     * @param repoObjFactory the factory to set
+     */
+    public void setRepositoryObjectFactory(RepositoryObjectFactory repoObjFactory) {
+        this.repoObjFactory = repoObjFactory;
+    }
+
+    /**
+     * @param repoObjLoader the object loader to set
+     */
+    public void setRepositoryObjectLoader(RepositoryObjectLoader repoObjLoader) {
+        this.repoObjLoader = repoObjLoader;
+    }
+
+    /**
+     * @param txManager the transaction manager to set
+     */
+    public void setTransactionManager(TransactionManager txManager) {
+        this.txManager = txManager;
+    }
+
+    /**
+     * @param operationsMessageSender
+     */
+    public void setOperationsMessageSender(OperationsMessageSender operationsMessageSender) {
+        this.operationsMessageSender = operationsMessageSender;
+    }
+
+    private String getOldLabel(RepositoryObject obj) {
+        String oldLabel = "no dc:title";
+        Model objModel = obj.getModel();
+        Resource resc = obj.getResource();
+        if (objModel.contains(resc, DcElements.title)) {
+            Statement s = objModel.getRequiredProperty(resc, DcElements.title);
+            oldLabel = s.getLiteral().getString();
+        }
+        return oldLabel;
+     }
+}
diff --git a/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java b/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
index 358776430..26d47dcc5 100644
--- a/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
@@ -24,8 +24,8 @@
 import org.apache.jena.rdf.model.Statement;
 import org.apache.jena.vocabulary.RDF;
 
+import edu.unc.lib.dl.rdf.Cdr;
 import edu.unc.lib.dl.rdf.DcElements;
-import edu.unc.lib.dl.rdf.Ebucore;
 import edu.unc.lib.dl.rdf.Premis;
 
 /**
@@ -37,9 +37,9 @@
 public class TombstonePropertySelector extends SimpleSelector {
 
     List<Property> permittedPredicates = Arrays.asList(
-            DcElements.title, Ebucore.filename, Ebucore.hasMimeType,
-            Premis.hasOriginalName, Premis.hasMessageDigest,
-            Premis.hasSize, RDF.type);
+            DcElements.title, Cdr.filename, Cdr.hasMimeType,
+            Premis.hasOriginalName, Cdr.hasMessageDigest,
+            Cdr.hasSize, RDF.type);
 
     /**
      * Selects only those statements whose predicates match one of the permitted predicates
diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
index 395f99c63..3831b8fbd 100644
--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
@@ -54,6 +54,7 @@
 import edu.unc.lib.dl.fcrepo4.PremisEventObject;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
+import edu.unc.lib.dl.fcrepo4.Tombstone;
 import edu.unc.lib.dl.fcrepo4.TransactionManager;
 import edu.unc.lib.dl.fcrepo4.WorkObject;
 import edu.unc.lib.dl.fedora.PID;
@@ -116,6 +117,7 @@ public void init() throws Exception {
 
         when(pathFactory.getPath(any(PID.class))).thenReturn(path);
         when(path.toNamePath()).thenReturn("path/to/object");
+        when(path.toIdPath()).thenReturn("pid0/pid1/pid2/pid3");
     }
 
     @Test
@@ -143,14 +145,17 @@ public void destroyObjectsInSameTreeTest() {
         PID folderObjPid = objsToDestroy.get(0);
         verify(spyProxyService).destroyProxy(folderObjPid);
 
-        FileObject fileObj = repoObjLoader.getFileObject(fileObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(workObjPid);
-        FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(workObj.getModel().contains(workObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj.getModel().contains(folderObj.getResource(), RDF.type, Cdr.Tombstone));
-
-        PremisEventObject event = repoObjLoader.getPremisEventObject(folderObj.getPremisLog().listEvents().get(0));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        Tombstone stoneWork = repoObjLoader.getTombstone(workObjPid);
+        Tombstone stoneFolder = repoObjLoader.getTombstone(folderObjPid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.FileObject));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Work));
+        assertTrue(stoneFolder.getModel().contains(stoneFolder.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder.getModel().contains(stoneFolder.getResource(), RDF.type, Cdr.Folder));
+
+        PremisEventObject event = repoObjLoader.getPremisEventObject(stoneFolder.getPremisLog().listEvents().get(0));
         assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
         assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
@@ -165,27 +170,27 @@ public void destroyObjectsInDifferentTreesTest() {
         PID folderObj2Pid = objsToDestroy.get(3);
         PID fileObjPid = objsToDestroy.get(2);
         PID workObjPid = objsToDestroy.get(1);
-        PID folderObjPid = objsToDestroy.get(0);
-        verify(spyProxyService).destroyProxy(folderObjPid);
+        PID folderObj1Pid = objsToDestroy.get(0);
+        verify(spyProxyService).destroyProxy(folderObj1Pid);
         verify(spyProxyService).destroyProxy(folderObj2Pid);
 
-        FileObject fileObj = repoObjLoader.getFileObject(fileObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(workObjPid);
-        FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        FolderObject folderObj2 = repoObjLoader.getFolderObject(folderObj2Pid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(workObj.getModel().contains(workObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj.getModel().contains(folderObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj2.getModel().contains(folderObj2.getResource(), RDF.type, Cdr.Tombstone));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        Tombstone stoneWork = repoObjLoader.getTombstone(workObjPid);
+        Tombstone stoneFolder1 = repoObjLoader.getTombstone(folderObj1Pid);
+        Tombstone stoneFolder2 = repoObjLoader.getTombstone(folderObj2Pid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder1.getModel().contains(stoneFolder1.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder2.getModel().contains(stoneFolder2.getResource(), RDF.type, Cdr.Tombstone));
 
-        PremisEventObject event = repoObjLoader.getPremisEventObject(folderObj.getPremisLog().listEvents().get(0));
+        PremisEventObject event = repoObjLoader.getPremisEventObject(stoneFolder1.getPremisLog().listEvents().get(0));
         assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
         assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
 
-        PremisEventObject event2 = repoObjLoader.getPremisEventObject(folderObj2.getPremisLog().listEvents().get(0));
-        assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
-        assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
+        PremisEventObject event2 = repoObjLoader.getPremisEventObject(stoneFolder2.getPremisLog().listEvents().get(0));
+        assertTrue(event2.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
+        assertTrue(event2.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
     }
 
@@ -194,8 +199,8 @@ public void destroyFolderTest() {
         PID folderObjPid = objsToDestroy.get(0);
         initializeJob(Arrays.asList(folderObjPid));
         FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(folderObj.getMembers().get(0).getPid());
-        FileObject fileObj = repoObjLoader.getFileObject(workObj.getMembers().get(0).getPid());
+        WorkObject workObj = (WorkObject) folderObj.getMembers().get(0);
+        FileObject fileObj = (FileObject) workObj.getMembers().get(0);
 
         job.run();
 
@@ -218,9 +223,9 @@ public void destroySingleObjectWithPreexistingPremisEventTest() {
         job.run();
 
         verify(spyProxyService).destroyProxy(fileObjPid);
-        fileObj = repoObjLoader.getFileObject(fileObjPid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(fileObj.getPremisLog().listEvents().contains(eventPid));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFile.getPremisLog().listEvents().contains(eventPid));
     }
 
     private List<PID> createContentTree() throws Exception {
diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/EditLabelServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/EditLabelServiceTest.java
new file mode 100644
index 000000000..bf413f387
--- /dev/null
+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/edit/EditLabelServiceTest.java
@@ -0,0 +1,167 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.persist.services.edit;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.mockito.MockitoAnnotations.initMocks;
+
+import java.net.URI;
+import java.util.List;
+import java.util.UUID;
+
+import org.apache.jena.rdf.model.Model;
+import org.apache.jena.rdf.model.Resource;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+
+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;
+import edu.unc.lib.dl.acl.service.AccessControlService;
+import edu.unc.lib.dl.acl.util.AccessGroupSet;
+import edu.unc.lib.dl.acl.util.AgentPrincipals;
+import edu.unc.lib.dl.acl.util.Permission;
+import edu.unc.lib.dl.event.PremisEventBuilder;
+import edu.unc.lib.dl.event.PremisLogger;
+import edu.unc.lib.dl.fcrepo4.FedoraTransaction;
+import edu.unc.lib.dl.fcrepo4.PIDs;
+import edu.unc.lib.dl.fcrepo4.RepositoryObject;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
+import edu.unc.lib.dl.fcrepo4.TransactionCancelledException;
+import edu.unc.lib.dl.fcrepo4.TransactionManager;
+import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.DcElements;
+import edu.unc.lib.dl.rdf.Premis;
+import edu.unc.lib.dl.services.OperationsMessageSender;
+import edu.unc.lib.dl.test.SelfReturningAnswer;
+
+/**
+ *
+ * @author harring
+ *
+ */
+public class EditLabelServiceTest {
+
+    @Mock
+    private AccessControlService aclService;
+    @Mock
+    private RepositoryObjectFactory repoObjFactory;
+    @Mock
+    private RepositoryObjectLoader repoObjLoader;
+    @Mock
+    private TransactionManager txManager;
+    @Mock
+    private OperationsMessageSender messageSender;
+    @Mock
+    private FedoraTransaction tx;
+    @Mock
+    private RepositoryObject repoObj;
+    @Mock
+    private Model model;
+    @Mock
+    private Resource resc;
+    @Mock
+    private AgentPrincipals agent;
+    @Mock
+    private AccessGroupSet groups;
+    @Mock
+    private PremisLogger premisLogger;
+
+    @Captor
+    private ArgumentCaptor<String> labelCaptor;
+    @Captor
+    private ArgumentCaptor<List<PID>> pidCaptor;
+
+    private PremisEventBuilder eventBuilder;
+
+    private PID pid;
+    private URI uri;
+
+    private EditLabelService service;
+
+    @Before
+    public void init() throws Exception {
+        initMocks(this);
+
+        pid = PIDs.get(UUID.randomUUID().toString());
+        uri = new URI("path/to/obj");
+
+        service = new EditLabelService();
+
+        service.setAclService(aclService);
+        service.setRepositoryObjectFactory(repoObjFactory);
+        service.setRepositoryObjectLoader(repoObjLoader);
+        service.setTransactionManager(txManager);
+        service.setOperationsMessageSender(messageSender);
+
+        when(repoObjLoader.getRepositoryObject(any(PID.class))).thenReturn(repoObj);
+        when(repoObj.getModel()).thenReturn(model);
+        when(model.getResource(anyString())).thenReturn(resc);
+        when(repoObj.getUri()).thenReturn(uri);
+        when(agent.getPrincipals()).thenReturn(groups);
+
+        eventBuilder = mock(PremisEventBuilder.class, new SelfReturningAnswer());
+        when(repoObj.getPremisLog()).thenReturn(premisLogger);
+        when(premisLogger.buildEvent(eq(Premis.Migration))).thenReturn(eventBuilder);
+        when(agent.getUsernameUri()).thenReturn("agentname");
+        when(eventBuilder.write()).thenReturn(resc);
+
+        when(txManager.startTransaction()).thenReturn(tx);
+        doAnswer(new Answer<Object>() {
+            @Override
+            public Object answer(InvocationOnMock invocation) throws Throwable {
+                throw new TransactionCancelledException("", invocation.getArgumentAt(0, Throwable.class));
+            }
+
+        }).when(tx).cancel(any(Throwable.class));
+    }
+
+    @Test
+    public void editLabelTest() {
+        String label = "a brand-new title!";
+        service.editLabel(agent, pid, label);
+
+        verify(repoObjFactory).createExclusiveRelationship(eq(repoObj), eq(DcElements.title), any(Resource.class));
+        verify(premisLogger).buildEvent(eq(Premis.Migration));
+        verify(eventBuilder).addEventDetail(labelCaptor.capture());
+        assertEquals(labelCaptor.getValue(), "Object renamed from " + "no dc:title" +" to " + label);
+        verify(eventBuilder).write();
+
+        verify(messageSender).sendUpdateDescriptionOperation(anyString(), pidCaptor.capture());
+        assertEquals(pid, pidCaptor.getValue().get(0));
+    }
+
+    @Test(expected = TransactionCancelledException.class)
+    public void insufficientAccessTest() {
+        doThrow(new AccessRestrictionException()).when(aclService)
+            .assertHasAccess(anyString(), eq(pid), any(AccessGroupSet.class), eq(Permission.editDescription));
+
+        service.editLabel(agent, pid, "label");
+    }
+
+}
diff --git a/pom.xml b/pom.xml
index a2c3969ce..7809da256 100644
--- a/pom.xml
+++ b/pom.xml
@@ -458,7 +458,7 @@
             <dependency>
                 <groupId>net.greghaines</groupId>
                 <artifactId>jesque</artifactId>
-                <version>2.0.2</version>
+                <version>2.1.2</version>
             </dependency>
             <dependency>
                 <groupId>edu.unc.lib.cdr</groupId>
diff --git a/security/src/main/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilter.java b/security/src/main/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilter.java
index 31dfdfc7e..d20d3db0c 100644
--- a/security/src/main/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilter.java
+++ b/security/src/main/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilter.java
@@ -17,6 +17,7 @@
 
 import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;
 import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.PUBLIC_PRINC;
+import static edu.unc.lib.dl.httpclient.HttpClientUtil.FORWARDED_MAIL_HEADER;
 
 import java.io.IOException;
 
@@ -46,6 +47,7 @@
     private static final Logger log = LoggerFactory.getLogger(StoreUserAccessControlFilter.class);
 
     protected static String FORWARDING_ROLE = "group-forwarding";
+    private static final String FORWARDED_MAIL = "forwarded-mail";
 
     private boolean retainGroupsThreadStore;
 
@@ -77,13 +79,8 @@ protected void storeUserGroupData(HttpServletRequest request) {
             }
             GroupsThreadStore.storeUsername(userName);
 
-            String email = request.getHeader("mail");
-            if (email != null) {
-                if (email.endsWith("_UNC")) {
-                    email = email.substring(0, email.length() - 4);
-                }
-                GroupsThreadStore.storeEmail(email);
-            }
+            String email = getEmailAddress(request);
+            GroupsThreadStore.storeEmail(email);
 
             AccessGroupSet accessGroups = getUserGroups(request);
             GroupsThreadStore.storeGroups(accessGroups);
@@ -146,6 +143,19 @@ protected AccessGroupSet getGrouperGroups(HttpServletRequest request) {
         return accessGroups;
     }
 
+    private String getEmailAddress(HttpServletRequest request) {
+        String email = request.getHeader("mail");
+        if (email == null && request.isUserInRole(FORWARDING_ROLE)) {
+            email = request.getHeader(FORWARDED_MAIL_HEADER);
+        }
+        if (email != null) {
+            if (email.endsWith("_UNC")) {
+                email = email.substring(0, email.length() - 4);
+            }
+        }
+        return email;
+    }
+
     /**
      * @param retainGroupsThreadStore the retainGroupsThreadStore to set
      */
diff --git a/security/src/test/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilterTest.java b/security/src/test/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilterTest.java
index 861bae8a1..7a1445881 100644
--- a/security/src/test/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilterTest.java
+++ b/security/src/test/java/edu/unc/lib/dl/acl/filter/StoreUserAccessControlFilterTest.java
@@ -19,6 +19,7 @@
 import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.AUTHENTICATED_PRINC;
 import static edu.unc.lib.dl.acl.util.AccessPrincipalConstants.PUBLIC_PRINC;
 import static edu.unc.lib.dl.httpclient.HttpClientUtil.FORWARDED_GROUPS_HEADER;
+import static edu.unc.lib.dl.httpclient.HttpClientUtil.FORWARDED_MAIL_HEADER;
 import static edu.unc.lib.dl.httpclient.HttpClientUtil.SHIBBOLETH_GROUPS_HEADER;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -144,4 +145,38 @@ public void testForwardedNoGroups() throws Exception {
         AccessGroupSet accessGroups = GroupsThreadStore.getGroups();
         assertEquals(0, accessGroups.size());
     }
+
+    @Test
+    public void testForwardedEmail() throws Exception {
+        when(request.getRemoteUser()).thenReturn("forwarder");
+        when(request.isUserInRole(FORWARDING_ROLE)).thenReturn(true);
+        when(request.getHeader(FORWARDED_MAIL_HEADER)).thenReturn("user@example.com");
+
+        filter.doFilter(request, response, filterChain);
+
+        assertEquals("user@example.com", GroupsThreadStore.getEmail());
+    }
+
+    @Test
+    public void testIgnoreForwardedEmail() throws Exception {
+        when(request.getRemoteUser()).thenReturn("forwarder");
+        when(request.isUserInRole(FORWARDING_ROLE)).thenReturn(false);
+        when(request.getHeader(FORWARDED_MAIL_HEADER)).thenReturn("user@example.com");
+
+        filter.doFilter(request, response, filterChain);
+
+        assertNull(GroupsThreadStore.getEmail());
+    }
+
+    @Test
+    public void testMailOverrideForwarded() throws Exception {
+        when(request.getRemoteUser()).thenReturn("forwarder");
+        when(request.isUserInRole(FORWARDING_ROLE)).thenReturn(true);
+        when(request.getHeader("mail")).thenReturn("realuser@example.com");
+        when(request.getHeader(FORWARDED_MAIL_HEADER)).thenReturn("user@example.com");
+
+        filter.doFilter(request, response, filterChain);
+
+        assertEquals("realuser@example.com", GroupsThreadStore.getEmail());
+    }
 }
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessor.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessor.java
index 1b1223283..072de3b75 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessor.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessor.java
@@ -50,13 +50,6 @@
     private final int BINARY_PATH_DEPTH = 3;
     private String baseBinaryPath;
 
-    public BinaryMetadataProcessor(String baseBinaryPath) {
-        this.baseBinaryPath = baseBinaryPath;
-        if (!baseBinaryPath.endsWith("/")) {
-            this.baseBinaryPath += "/";
-        }
-    }
-
     @Override
     public void process(final Exchange exchange) throws Exception {
         final Message in = exchange.getIn();
@@ -96,4 +89,14 @@ public void process(final Exchange exchange) throws Exception {
             resources.close();
         }
     }
+
+    /**
+     * @param baseBinaryPath the baseBinaryPath to set
+     */
+    public void setBaseBinaryPath(String baseBinaryPath) {
+        this.baseBinaryPath = baseBinaryPath;
+        if (!baseBinaryPath.endsWith("/")) {
+            this.baseBinaryPath += "/";
+        }
+    }
 }
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/cdrEvents/CdrEventRouter.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/cdrEvents/CdrEventRouter.java
index 27edf920d..1c73c542a 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/cdrEvents/CdrEventRouter.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/cdrEvents/CdrEventRouter.java
@@ -55,7 +55,9 @@ public void configure() throws Exception {
                     + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.ADD.getName() + "'"
                     + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.REORDER.getName() + "'"
                     + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.PUBLISH.getName() + "'"
-                    + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.EDIT_TYPE.getName() + "'"))
+                    + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.EDIT_TYPE.getName() + "'"
+                        + " || ${headers[" + CdrUpdateAction + "]} contains '" + CDRActions.UPDATE_DESCRIPTION.getName()
+                        + "'"))
             .to("direct:solr-update");
 
         from("direct:solr-update")
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java
new file mode 100644
index 000000000..f03b25eea
--- /dev/null
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouter.java
@@ -0,0 +1,106 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.services.camel.enhancements;
+
+import static edu.unc.lib.dl.rdf.Cdr.AdminUnit;
+import static edu.unc.lib.dl.rdf.Cdr.Collection;
+import static edu.unc.lib.dl.rdf.Cdr.DescriptiveMetadata;
+import static edu.unc.lib.dl.rdf.Cdr.FileObject;
+import static edu.unc.lib.dl.rdf.Cdr.Folder;
+import static edu.unc.lib.dl.rdf.Cdr.Work;
+import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;
+import static edu.unc.lib.dl.services.camel.util.CdrFcrepoHeaders.CdrEnhancementSet;
+import static org.apache.camel.LoggingLevel.INFO;
+
+import org.apache.camel.BeanInject;
+import org.apache.camel.LoggingLevel;
+import org.apache.camel.PropertyInject;
+import org.apache.camel.builder.RouteBuilder;
+
+import edu.unc.lib.dl.services.camel.BinaryMetadataProcessor;
+import edu.unc.lib.dl.services.camel.CleanupBinaryProcessor;
+import edu.unc.lib.dl.services.camel.GetBinaryProcessor;
+
+/**
+ * Router which queues and triggers enhancement services.
+ *
+ * @author bbpennel
+ *
+ */
+public class EnhancementRouter extends RouteBuilder {
+
+    private static final String DEFAULT_ENHANCEMENTS = "thumbnails,imageAccessCopy,extractFulltext";
+
+    @BeanInject(value = "binaryMetadataProcessor")
+    private BinaryMetadataProcessor mdProcessor;
+
+    @PropertyInject(value = "cdr.enhancement.processingThreads")
+    private Integer enhancementThreads;
+
+    @BeanInject(value = "getBinaryProcessor")
+    private GetBinaryProcessor getBinaryProcessor;
+
+    @BeanInject(value = "cleanupBinaryProcessor")
+    private CleanupBinaryProcessor cleanupBinaryProcessor;
+
+    @Override
+    public void configure() throws Exception {
+        from("direct-vm:enhancements.fedora")
+            .routeId("QueueEnhancementsFromFedora")
+            .log(INFO, "Queuing enhancements from Fedora message for ${headers[CamelFcrepoUri]}")
+            .setHeader(CdrEnhancementSet, constant(DEFAULT_ENHANCEMENTS))
+            .to("{{cdr.enhancement.stream.camel}}");
+
+        from("{{cdr.enhancement.stream.camel}}")
+            .routeId("ProcessEnhancementQueue")
+            .log(INFO, "Processing queued enhancements ${headers[CdrEnhancementSet]} for ${headers[CamelFcrepoUri]}")
+            .to("fcrepo:{{fcrepo.baseUrl}}?preferInclude=ServerManaged&accept=text/turtle")
+            .multicast()
+            .to("direct:process.binary", "direct:process.solr");
+
+        from("direct:process.binary")
+            .routeId("ProcessOriginalBinary")
+            .filter(simple("${headers[CamelFcrepoUri]} contains '/original_file'"
+                    + " && ${headers[org.fcrepo.jms.resourceType]} contains '" + Binary.getURI() + "'"))
+            .threads(enhancementThreads, enhancementThreads, "CdrEnhancementThread")
+            .process(mdProcessor)
+            .process(getBinaryProcessor)
+            .to("direct:process.enhancements")
+            .process(cleanupBinaryProcessor);
+
+        from("direct:process.enhancements")
+            .routeId("AddBinaryEnhancements")
+            .split(simple("${headers[CdrEnhancementSet]}"))
+                .log(LoggingLevel.INFO, "Calling enhancement direct-vm:process.enhancement.${body}")
+                .toD("direct-vm:process.enhancement.${body}");
+
+        from("direct:process.solr")
+            .routeId("IngestSolrIndexing")
+            .log(LoggingLevel.INFO, "Requesting solr indexing of ${headers[CamelFcrepoUri]}"
+                    + " with types ${headers[org.fcrepo.jms.resourceType]}")
+            .filter(simple("${headers[org.fcrepo.jms.resourceType]} contains '" + Work.getURI() + "'"
+                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + FileObject.getURI() + "'"
+                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Folder.getURI() + "'"
+                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Collection.getURI() + "'"
+                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + AdminUnit.getURI() + "'"
+                    ))
+            // Filter out descriptive md separately because camel simple filters don't support basic () operators
+            .filter(simple("${headers[org.fcrepo.jms.resourceType]} not contains '"
+                    + DescriptiveMetadata.getURI() + "'"))
+                .log(LoggingLevel.INFO, "Ingest solr indexing for ${headers[CamelFcrepoUri]}")
+                .to("direct-vm:solrIndexing");
+    }
+}
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouter.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouter.java
index b5234bbe9..ba53ecca2 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouter.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/fulltext/FulltextRouter.java
@@ -43,7 +43,7 @@ public void configure() throws Exception {
             .backOffMultiplier("{{error.backOffMultiplier}}")
             .retryAttemptedLogLevel(LoggingLevel.WARN);
 
-        from("direct-vm:extractFulltext")
+        from("direct-vm:process.enhancement.extractFulltext")
             .routeId("CdrServiceFulltextExtraction")
             .log(LoggingLevel.DEBUG, "Calling text extraction route for ${headers[org.fcrepo.jms.identifier]}")
             .filter(simple("${headers[CdrMimeType]} regex '" + MIMETYPE_PATTERN + "'"))
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouter.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouter.java
index aec1eabc8..c1327930b 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouter.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouter.java
@@ -49,14 +49,14 @@ public void configure() throws Exception {
             .backOffMultiplier("{{error.backOffMultiplier}}")
             .retryAttemptedLogLevel(LoggingLevel.WARN);
 
-        from("direct-vm:imageEnhancements")
-            .routeId("CdrImageEnhancementRoute")
-            .log(LoggingLevel.INFO, "Calling image route for ${headers[org.fcrepo.jms.identifier]}")
+        from("direct-vm:process.enhancement.thumbnails")
+            .routeId("ProcessThumbnails")
+            .log(LoggingLevel.INFO, "Thumbs ${headers[CdrBinaryPath]} with ${headers[CdrMimeType]}")
             .filter(simple("${headers[CdrMimeType]} regex '" + MIMETYPE_PATTERN + "'"))
-                .log(LoggingLevel.INFO, "Generating images for ${headers[org.fcrepo.jms.identifier]}"
+                .log(LoggingLevel.INFO, "Generating thumbnails for ${headers[org.fcrepo.jms.identifier]}"
                         + " of type ${headers[CdrMimeType]}")
                 .multicast()
-                .to("direct:small.thumbnail", "direct:large.thumbnail", "direct:accessCopy");
+                .to("direct:small.thumbnail", "direct:large.thumbnail");
 
         from("direct:small.thumbnail")
             .routeId("SmallThumbnail")
@@ -74,12 +74,14 @@ public void configure() throws Exception {
                     + "${properties:services.tempDirectory}/${headers[CdrCheckSum]}-large"))
             .bean(addLargeThumbProcessor);
 
-        from("direct:accessCopy")
+        from("direct-vm:process.enhancement.imageAccessCopy")
             .routeId("AccessCopy")
-            .log(LoggingLevel.INFO, "Creating/Updating JP2 access copy for ${headers[CdrBinaryPath]}")
-            .recipientList(simple("exec:/bin/sh?args=${properties:cdr.enhancement.bin}/convertJp2.sh "
-                    + "${headers[CdrBinaryPath]} jp2 "
-                    + "${properties:services.tempDirectory}/${headers[CdrCheckSum]}-access"))
-            .bean(addAccessCopyProcessor);
+            .log(LoggingLevel.DEBUG, "Access copy triggered")
+            .filter(simple("${headers[CdrMimeType]} regex '" + MIMETYPE_PATTERN + "'"))
+                .log(LoggingLevel.INFO, "Creating/Updating JP2 access copy for ${headers[CdrBinaryPath]}")
+                .recipientList(simple("exec:/bin/sh?args=${properties:cdr.enhancement.bin}/convertJp2.sh "
+                        + "${headers[CdrBinaryPath]} jp2 "
+                        + "${properties:services.tempDirectory}/${headers[CdrCheckSum]}-access"))
+                .bean(addAccessCopyProcessor);
     }
 }
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouter.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouter.java
index 0b2444540..aecd00445 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouter.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouter.java
@@ -15,14 +15,10 @@
  */
 package edu.unc.lib.dl.services.camel.routing;
 
-import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;
-
 import org.apache.camel.BeanInject;
-import org.apache.camel.LoggingLevel;
 import org.apache.camel.PropertyInject;
 import org.apache.camel.builder.RouteBuilder;
 
-import edu.unc.lib.dl.rdf.Cdr;
 import edu.unc.lib.dl.services.camel.BinaryMetadataProcessor;
 import edu.unc.lib.dl.services.camel.CleanupBinaryProcessor;
 import edu.unc.lib.dl.services.camel.GetBinaryProcessor;
@@ -51,54 +47,14 @@ public void configure() throws Exception {
         from("{{fcrepo.stream}}")
             .routeId("CdrMetaServicesRouter")
             .to("direct-vm:index.start")
-            .to("direct:process.enhancement");
+            .wireTap("direct:process.enhancement");
 
         from("direct:process.enhancement")
             .routeId("ProcessEnhancement")
             .filter(simple("${headers[org.fcrepo.jms.eventType]} contains 'ResourceCreation'"))
-                // Trigger binary processing after an asynchronously
-                .threads(enhancementThreads, enhancementThreads, "CdrEnhancementThread")
+                .log("Performing enhancements for ${headers[org.fcrepo.jms.identifier]}")
                 .delay(simple("{{cdr.enhancement.postIndexingDelay}}"))
                 .removeHeaders("CamelHttp*")
-                .to("fcrepo:{{fcrepo.baseUrl}}?preferInclude=ServerManaged&accept=text/turtle")
-                .multicast()
-                .to("direct:process.binary", "direct:process.solr");
-
-        from("direct:process.binary")
-            .routeId("ProcessOriginalBinary")
-            .filter(simple("${headers[org.fcrepo.jms.identifier]} regex '.*(original_file|techmd_fits)'"
-                    + " && ${headers[org.fcrepo.jms.resourceType]} contains '" + Binary.getURI() + "'"))
-                .process(mdProcessor)
-                .process(getBinaryProcessor)
-                .choice()
-                    .when(simple("${headers[org.fcrepo.jms.identifier]} regex '.*original_file'"))
-                        .to("direct-vm:replication")
-                        .to("direct:process.enhancements")
-                    .when(simple("${headers[org.fcrepo.jms.identifier]} regex '.*techmd_fits'"))
-                        .to("direct-vm:replication")
-                    .otherwise()
-                        .log(LoggingLevel.WARN,
-                                "Cannot process binary metadata for ${headers[org.fcrepo.jms.identifier]}")
-                .end()
-                .process(cleanupBinaryProcessor);
-
-        from("direct:process.enhancements")
-            .routeId("AddBinaryEnhancements")
-            .multicast()
-            .to("direct-vm:imageEnhancements","direct-vm:extractFulltext");
-
-        from("direct:process.solr")
-            .routeId("IngestSolrIndexing")
-            .filter(simple("${headers[org.fcrepo.jms.resourceType]} contains '" + Cdr.Work.getURI() + "'"
-                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Cdr.FileObject.getURI() + "'"
-                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Cdr.Folder.getURI() + "'"
-                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Cdr.Collection.getURI() + "'"
-                    + " || ${headers[org.fcrepo.jms.resourceType]} contains '" + Cdr.AdminUnit.getURI() + "'"
-                    ))
-            // Filter out descriptive md separately because camel simple filters don't support basic () operators
-            .filter(simple("${headers[org.fcrepo.jms.resourceType]} not contains '"
-                    + Cdr.DescriptiveMetadata.getURI() + "'"))
-                .log(LoggingLevel.INFO, "Ingest solr indexing for ${headers[org.fcrepo.jms.identifier]}")
-                .to("direct-vm:solrIndexing");
+                .to("direct-vm:enhancements.fedora");
     }
 }
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/CdrEventToSolrUpdateProcessor.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/CdrEventToSolrUpdateProcessor.java
index df9b74f23..f75b78508 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/CdrEventToSolrUpdateProcessor.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/solr/CdrEventToSolrUpdateProcessor.java
@@ -20,6 +20,7 @@
 import static edu.unc.lib.dl.util.JMSMessageUtil.CDRActions.ADD;
 import static edu.unc.lib.dl.util.JMSMessageUtil.CDRActions.MOVE;
 import static edu.unc.lib.dl.util.JMSMessageUtil.CDRActions.PUBLISH;
+import static edu.unc.lib.dl.util.JMSMessageUtil.CDRActions.UPDATE_DESCRIPTION;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -92,6 +93,9 @@ public void process(Exchange exchange) throws Exception {
         } else if (ADD.equals(solrActionType)) {
             messageSender.sendIndexingOperation(userid, PIDs.get(targetId), childPids,
                     IndexingActionType.ADD_SET_TO_PARENT);
+        } else if (UPDATE_DESCRIPTION.equals(solrActionType)) {
+            messageSender.sendIndexingOperation(userid, PIDs.get(targetId), childPids,
+                    IndexingActionType.UPDATE_DESCRIPTION);
         } else if (PUBLISH.equals(solrActionType)) {
             for (PID childPid : childPids) {
                 messageSender.sendIndexingOperation(userid, childPid,
diff --git a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java
index 7f8f0a832..7036abbc2 100644
--- a/services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java
+++ b/services-camel/src/main/java/edu/unc/lib/dl/services/camel/util/CdrFcrepoHeaders.java
@@ -32,4 +32,6 @@
     public static final String CdrBinaryUri = "CdrBinaryUri";
 
     public static final String CdrUpdateAction = "CdrUpdateAction";
+
+    public static final String CdrEnhancementSet = "CdrEnhancementSet";
 }
diff --git a/services-camel/src/main/webapp/WEB-INF/service-context.xml b/services-camel/src/main/webapp/WEB-INF/service-context.xml
index 9efbb9f17..1c5f73fd2 100644
--- a/services-camel/src/main/webapp/WEB-INF/service-context.xml
+++ b/services-camel/src/main/webapp/WEB-INF/service-context.xml
@@ -144,7 +144,7 @@
     </bean>
     
     <bean id="binaryMetadataProcessor" class="edu.unc.lib.dl.services.camel.BinaryMetadataProcessor">
-        <constructor-arg value="${fcrepo.binaryBase}"/>
+        <property name="baseBinaryPath" value="${fcrepo.binaryBase}" />
     </bean>
 
     <bean id="addSmallThumbnailProcessor" class="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor">
@@ -214,6 +214,10 @@
         <camel:package>edu.unc.lib.dl.services.camel.cdrEvents</camel:package>
     </camel:camelContext>
     
+    <camel:camelContext id="CdrEnhancements">
+        <camel:package>edu.unc.lib.dl.services.camel.enhancements</camel:package>
+    </camel:camelContext>
+    
     <!-- Initialize metaServicesRouter after the routes it depends on -->
     <camel:camelContext id="MetaServicesRouter">
         <camel:package>edu.unc.lib.dl.services.camel.routing</camel:package>
diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessorTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessorTest.java
index bee37fcd6..caf7627bd 100644
--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessorTest.java
+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/BinaryMetadataProcessorTest.java
@@ -31,7 +31,6 @@
 import java.io.File;
 import java.io.InputStream;
 
-import edu.unc.lib.dl.test.TestHelper;
 import org.apache.camel.Exchange;
 import org.apache.camel.Message;
 import org.apache.jena.rdf.model.Model;
@@ -49,6 +48,7 @@
 import edu.unc.lib.dl.rdf.Ebucore;
 import edu.unc.lib.dl.rdf.Fcrepo4Repository;
 import edu.unc.lib.dl.rdf.Premis;
+import edu.unc.lib.dl.test.TestHelper;
 
 /**
  *
@@ -82,7 +82,8 @@ public void init() throws Exception {
 
         binaryBase = tmpFolder.newFolder().getAbsolutePath();
 
-        processor = new BinaryMetadataProcessor(binaryBase);
+        processor = new BinaryMetadataProcessor();
+        processor.setBaseBinaryPath(binaryBase);
 
         when(exchange.getIn()).thenReturn(message);
         when(exchange.getIn().getHeader("CamelFcrepoUri")).thenReturn(RESC_ID);
diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java
new file mode 100644
index 000000000..a81404d3e
--- /dev/null
+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/enhancements/EnhancementRouterIT.java
@@ -0,0 +1,228 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.services.camel.enhancements;
+
+import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;
+import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Container;
+import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.EVENT_TYPE;
+import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.IDENTIFIER;
+import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.RESOURCE_TYPE;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.MockitoAnnotations.initMocks;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.camel.BeanInject;
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.Produce;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.NotifyBuilder;
+import org.apache.commons.io.FileUtils;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TemporaryFolder;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.ContextHierarchy;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+
+import edu.unc.lib.dl.fcrepo4.BinaryObject;
+import edu.unc.lib.dl.fcrepo4.FileObject;
+import edu.unc.lib.dl.fcrepo4.FolderObject;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
+import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.Cdr;
+import edu.unc.lib.dl.services.camel.BinaryMetadataProcessor;
+import edu.unc.lib.dl.services.camel.GetBinaryProcessor;
+import edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor;
+import edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor;
+import edu.unc.lib.dl.services.camel.solr.SolrIngestProcessor;
+import edu.unc.lib.dl.test.TestHelper;
+
+/**
+ *
+ * @author bbpennel
+ *
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextHierarchy({
+    @ContextConfiguration("/spring-test/test-fedora-container.xml"),
+    @ContextConfiguration("/spring-test/cdr-client-container.xml"),
+    @ContextConfiguration("/enhancement-router-it-context.xml")
+})
+public class EnhancementRouterIT {
+
+    private final static String FILE_CONTENT = "content";
+
+    @Rule
+    public final TemporaryFolder tmpFolder = new TemporaryFolder();
+    private String baseBinaryPath;
+
+    @Autowired
+    private String baseAddress;
+
+    @Autowired
+    private RepositoryObjectFactory repoObjectFactory;
+
+    @Autowired
+    private CamelContext cdrEnhancements;
+
+    @Autowired
+    private CamelContext cdrServiceImageEnhancements;
+
+    @Produce(uri = "direct-vm:enhancements.fedora")
+    private ProducerTemplate template;
+
+    @BeanInject(value = "addSmallThumbnailProcessor")
+    private AddDerivativeProcessor addSmallThumbnailProcessor;
+
+    @BeanInject(value = "addLargeThumbnailProcessor")
+    private AddDerivativeProcessor addLargeThumbnailProcessor;
+
+    @BeanInject(value = "addAccessCopyProcessor")
+    private AddDerivativeProcessor addAccessCopyProcessor;
+
+    @BeanInject(value = "solrIngestProcessor")
+    private SolrIngestProcessor solrIngestProcessor;
+
+    @BeanInject(value = "fulltextProcessor")
+    private FulltextProcessor fulltextProcessor;
+
+    @BeanInject(value = "binaryMetadataProcessor")
+    private BinaryMetadataProcessor binaryMetadataProcessor;
+
+    @BeanInject(value = "getBinaryProcessor")
+    private GetBinaryProcessor getBinaryProcessor;
+
+    @Before
+    public void init() throws Exception {
+        initMocks(this);
+
+        reset(solrIngestProcessor);
+
+        TestHelper.setContentBase(baseAddress);
+
+        baseBinaryPath = tmpFolder.getRoot().getAbsolutePath();
+        getBinaryProcessor.setTempDirectory(baseBinaryPath);
+
+        File thumbScriptFile = new File("target/convertScaleStage.sh");
+        FileUtils.writeStringToFile(thumbScriptFile, "exit 0", "utf-8");
+        thumbScriptFile.deleteOnExit();
+
+        File jp2ScriptFile = new File("target/convertJp2.sh");
+        FileUtils.writeStringToFile(jp2ScriptFile, "exit 0", "utf-8");
+        jp2ScriptFile.deleteOnExit();
+    }
+
+    @Test
+    public void testFolderEnhancements() throws Exception {
+        FolderObject folderObject = repoObjectFactory.createFolderObject(null);
+
+        final Map<String, Object> headers = createEvent(folderObject.getPid(),
+                Cdr.Folder.getURI(), Container.getURI());
+        template.sendBodyAndHeaders("", headers);
+
+        NotifyBuilder notify = new NotifyBuilder(cdrEnhancements)
+                .whenCompleted(3)
+                .create();
+
+        notify.matches(5l, TimeUnit.SECONDS);
+
+        verify(solrIngestProcessor).process(any(Exchange.class));
+    }
+
+    @Test
+    public void testImageFile() throws Exception {
+        FileObject fileObj = repoObjectFactory.createFileObject(null);
+        BinaryObject binObj = fileObj.addOriginalFile(new ByteArrayInputStream(FILE_CONTENT.getBytes()),
+                null, "image/png", null, null);
+
+        final Map<String, Object> headers = createEvent(binObj.getPid(), Binary.getURI());
+        template.sendBodyAndHeaders("", headers);
+
+        // Separate exchanges when multicasting
+        NotifyBuilder notify = new NotifyBuilder(cdrEnhancements)
+                .whenCompleted(2)
+                .create();
+
+        notify.matches(5l, TimeUnit.SECONDS);
+
+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));
+        verify(addLargeThumbnailProcessor).process(any(Exchange.class));
+        verify(addAccessCopyProcessor).process(any(Exchange.class));
+        // Indexing not triggered on binary object
+        verify(solrIngestProcessor, never()).process(any(Exchange.class));
+    }
+
+    @Test
+    public void testInvalidFile() throws Exception {
+        FileObject fileObj = repoObjectFactory.createFileObject(null);
+        BinaryObject binObj = fileObj.addBinary("techmd_fits", new ByteArrayInputStream(FILE_CONTENT.getBytes()),
+                "fits.xml", "text/xml", null, null, null);
+
+        final Map<String, Object> headers = createEvent(binObj.getPid(), Binary.getURI());
+        template.sendBodyAndHeaders("", headers);
+
+        NotifyBuilder notify = new NotifyBuilder(cdrEnhancements)
+                .whenCompleted(1)
+                .create();
+
+        notify.matches(5l, TimeUnit.SECONDS);
+
+        verify(addSmallThumbnailProcessor, never()).process(any(Exchange.class));
+        verify(fulltextProcessor,  never()).process(any(Exchange.class));
+        verify(solrIngestProcessor, never()).process(any(Exchange.class));
+    }
+
+    @Test
+    public void testProcessFilterOutDescriptiveMDSolr() throws Exception {
+        FileObject fileObj = repoObjectFactory.createFileObject(null);
+        FileObject descObj = fileObj.setDescription(new ByteArrayInputStream(FILE_CONTENT.getBytes()));
+
+        Map<String, Object> headers = createEvent(descObj.getPid(),
+                Cdr.FileObject.getURI(), Cdr.DescriptiveMetadata.getURI());
+        template.sendBodyAndHeaders("", headers);
+
+        NotifyBuilder notify = new NotifyBuilder(cdrEnhancements)
+                .whenCompleted(1)
+                .create();
+
+        notify.matches(5l, TimeUnit.SECONDS);
+
+        verify(solrIngestProcessor, never()).process(any(Exchange.class));
+    }
+
+    private static Map<String, Object> createEvent(PID pid, String... type) {
+
+        final Map<String, Object> headers = new HashMap<>();
+        headers.put(IDENTIFIER, pid.getRepositoryPath());
+        headers.put(EVENT_TYPE, "ResourceCreation");
+        headers.put("CamelFcrepoUri", pid.getRepositoryPath());
+        headers.put(RESOURCE_TYPE, String.join(",", type));
+
+        return headers;
+    }
+}
diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java
index b12d73afa..e3dbe55c8 100644
--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java
+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/images/ImageEnhancementsRouterTest.java
@@ -22,12 +22,17 @@
 import static org.fcrepo.camel.FcrepoHeaders.FCREPO_DATE_TIME;
 import static org.fcrepo.camel.FcrepoHeaders.FCREPO_EVENT_TYPE;
 import static org.fcrepo.camel.FcrepoHeaders.FCREPO_URI;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.camel.BeanInject;
 import org.apache.camel.EndpointInject;
+import org.apache.camel.Exchange;
 import org.apache.camel.Produce;
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.PropertyInject;
@@ -48,7 +53,10 @@
     private static final String userAgent = "curl/7.37.1";
     private static final String fileID = "/file1";
     private final String eventTypes = EVENT_NS + "ResourceCreation";
-    private final String enhancementRoute = "CdrImageEnhancementRoute";
+    private final String thumbnailRoute = "ProcessThumbnails";
+    private final String accessCopyRoute = "AccessCopy";
+    private final String smallThumbRoute = "SmallThumbnail";
+    private final String largeThumbRoute = "LargeThumbnail";
 
     @PropertyInject(value = "fcrepo.baseUrl")
     private static String baseUri;
@@ -59,30 +67,37 @@
     @Produce(uri = "direct:process.binary.original")
     protected ProducerTemplate template;
 
+    @BeanInject(value = "addSmallThumbnailProcessor")
+    private AddDerivativeProcessor addSmallThumbnailProcessor;
+
+    @BeanInject(value = "addLargeThumbnailProcessor")
+    private AddDerivativeProcessor addLargeThumbnailProcessor;
+
+    @BeanInject(value = "addAccessCopyProcessor")
+    private AddDerivativeProcessor addAccessCopyProcessor;
+
     @Override
     protected AbstractApplicationContext createApplicationContext() {
         return new ClassPathXmlApplicationContext("/service-context.xml", "/images-context.xml");
     }
 
     @Test
-    public void testRouteMulticastSuccess() throws Exception {
-        createContext(enhancementRoute);
+    public void testThumbnailMulticast() throws Exception {
+        createContext(thumbnailRoute);
 
         getMockEndpoint("mock:direct:small.thumbnail").expectedMessageCount(1);
         getMockEndpoint("mock:direct:large.thumbnail").expectedMessageCount(1);
-        getMockEndpoint("mock:direct:accessCopy").expectedMessageCount(1);
         template.sendBodyAndHeaders("", createEvent(fileID, eventTypes));
 
         assertMockEndpointsSatisfied();
     }
 
     @Test
-    public void testRouteMulticastFilter() throws Exception {
-        createContext(enhancementRoute);
+    public void testThumbMulticastFilter() throws Exception {
+        createContext(thumbnailRoute);
 
         getMockEndpoint("mock:direct:small.thumbnail").expectedMessageCount(0);
         getMockEndpoint("mock:direct:large.thumbnail").expectedMessageCount(0);
-        getMockEndpoint("mock:direct:accessCopy").expectedMessageCount(0);
 
         Map<String, Object> headers = createEvent(fileID, eventTypes);
         headers.put(CdrBinaryMimeType, "plain/text");
@@ -92,6 +107,63 @@ public void testRouteMulticastFilter() throws Exception {
         assertMockEndpointsSatisfied();
     }
 
+    @Test
+    public void testThumbSmallRoute() throws Exception {
+        createContext(smallThumbRoute);
+
+        getMockEndpoint("mock:exec:/bin/sh").expectedMessageCount(1);
+
+        Map<String, Object> headers = createEvent(fileID, eventTypes);
+
+        template.sendBodyAndHeaders("", headers);
+
+        verify(addSmallThumbnailProcessor).process(any(Exchange.class));
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testThumbLargeRoute() throws Exception {
+        createContext(largeThumbRoute);
+
+        getMockEndpoint("mock:exec:/bin/sh").expectedMessageCount(1);
+
+        Map<String, Object> headers = createEvent(fileID, eventTypes);
+
+        template.sendBodyAndHeaders("", headers);
+
+        verify(addLargeThumbnailProcessor).process(any(Exchange.class));
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testAccessCopyRoute() throws Exception {
+        createContext(accessCopyRoute);
+
+        getMockEndpoint("mock:exec:/bin/sh").expectedMessageCount(1);
+
+        Map<String, Object> headers = createEvent(fileID, eventTypes);
+
+        template.sendBodyAndHeaders("", headers);
+
+        verify(addAccessCopyProcessor).process(any(Exchange.class));
+        assertMockEndpointsSatisfied();
+    }
+
+    @Test
+    public void testAccessCopyRejection() throws Exception {
+        createContext(accessCopyRoute);
+
+        getMockEndpoint("mock:exec:/bin/sh").expectedMessageCount(0);
+
+        Map<String, Object> headers = createEvent(fileID, eventTypes);
+        headers.put(CdrBinaryMimeType, "plain/text");
+
+        template.sendBodyAndHeaders("", headers);
+
+        verify(addAccessCopyProcessor, never()).process(any(Exchange.class));
+        assertMockEndpointsSatisfied();
+    }
+
     private void createContext(String routeName) throws Exception {
         context.getRouteDefinition(routeName).adviceWith(context, new AdviceWithRouteBuilder() {
             @Override
diff --git a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java
index 7c8f640a3..71258a6de 100644
--- a/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java
+++ b/services-camel/src/test/java/edu/unc/lib/dl/services/camel/routing/MetaServicesRouterTest.java
@@ -16,19 +16,14 @@
 package edu.unc.lib.dl.services.camel.routing;
 
 import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Binary;
-import static edu.unc.lib.dl.rdf.Fcrepo4Repository.Container;
 import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.EVENT_TYPE;
 import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.IDENTIFIER;
 import static edu.unc.lib.dl.services.camel.JmsHeaderConstants.RESOURCE_TYPE;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.verify;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.camel.BeanInject;
 import org.apache.camel.EndpointInject;
-import org.apache.camel.Exchange;
 import org.apache.camel.Produce;
 import org.apache.camel.ProducerTemplate;
 import org.apache.camel.PropertyInject;
@@ -39,11 +34,6 @@
 import org.springframework.context.support.AbstractApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;
 
-import edu.unc.lib.dl.rdf.Cdr;
-import edu.unc.lib.dl.services.camel.BinaryMetadataProcessor;
-import edu.unc.lib.dl.services.camel.CleanupBinaryProcessor;
-import edu.unc.lib.dl.services.camel.GetBinaryProcessor;
-
 /**
  *
  * @author bbpennel
@@ -53,14 +43,10 @@
 public class MetaServicesRouterTest extends CamelSpringTestSupport {
 
     private static final String FILE_ID = "/file1/original_file";
-    private static final String FITS_ID = "/file1/techmd_fits";
     private static final String CONTAINER_ID = "/content/43/e2/27/ac/43e227ac-983a-4a18-94c9-c9cff8d28441";
 
     private static final String META_ROUTE = "CdrMetaServicesRouter";
     private static final String PROCESS_ENHANCEMENT_ROUTE = "ProcessEnhancement";
-    private static final String ORIGINAL_BINARY_ROUTE = "ProcessOriginalBinary";
-    private static final String ADD_BINARY_ENHANCEMENTS_ROUTE = "AddBinaryEnhancements";
-    private static final String SOLR_INGEST_ROUTE = "IngestSolrIndexing";
 
     @PropertyInject(value = "fcrepo.baseUri")
     private static String baseUri;
@@ -71,15 +57,6 @@
     @Produce(uri = "direct:start")
     private ProducerTemplate template;
 
-    @BeanInject(value = "binaryMetadataProcessor")
-    private BinaryMetadataProcessor mdProcessor;
-
-    @BeanInject(value = "getBinaryProcessor")
-    private GetBinaryProcessor getBinaryProcessor;
-
-    @BeanInject(value = "cleanupBinaryProcessor")
-    private CleanupBinaryProcessor cleanupBinaryProcessor;
-
     @Override
     protected AbstractApplicationContext createApplicationContext() {
         return new ClassPathXmlApplicationContext("/service-context.xml", "/metaservices-context.xml");
@@ -97,33 +74,6 @@ public void testRouteStartContainer() throws Exception {
         assertMockEndpointsSatisfied();
     }
 
-    @Test
-    public void testProcessEnhancementContainer() throws Exception {
-        getMockEndpoint("mock:direct:process.binary").expectedMessageCount(1);
-        getMockEndpoint("mock:direct:process.solr").expectedMessageCount(1);
-
-        createContext(PROCESS_ENHANCEMENT_ROUTE);
-
-        final Map<String, Object> headers = createEvent(CONTAINER_ID, Binary.getURI());
-        headers.put(RESOURCE_TYPE, Container.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
-    @Test
-    public void testProcessFits() throws Exception {
-        getMockEndpoint("mock:direct-vm:replication").expectedMessageCount(1);
-        getMockEndpoint("mock:direct:process.enhancements").expectedMessageCount(0);
-
-        createContext(ORIGINAL_BINARY_ROUTE);
-
-        final Map<String, Object> headers = createEvent(FITS_ID, Binary.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
     @Test
     public void testEventTypeFilter() throws Exception {
         getMockEndpoint("mock:direct:process.binary").expectedMessageCount(0);
@@ -141,8 +91,7 @@ public void testEventTypeFilter() throws Exception {
 
     @Test
     public void testEventTypeFilterValid() throws Exception {
-        getMockEndpoint("mock:direct:process.binary").expectedMessageCount(1);
-        getMockEndpoint("mock:direct:process.solr").expectedMessageCount(1);
+        getMockEndpoint("mock:direct-vm:enhancements.fedora").expectedMessageCount(1);
 
         createContext(PROCESS_ENHANCEMENT_ROUTE);
         Map<String, Object> headers = createEvent(FILE_ID, Binary.getURI());
@@ -151,86 +100,6 @@ public void testEventTypeFilterValid() throws Exception {
         assertMockEndpointsSatisfied();
     }
 
-    @Test
-    public void testEnhancementIdentifierFilterValid() throws Exception {
-        getMockEndpoint("mock:direct-vm:imageEnhancements").expectedMessageCount(1);
-        getMockEndpoint("mock:direct-vm:extractFulltext").expectedMessageCount(1);
-
-        createContext(ADD_BINARY_ENHANCEMENTS_ROUTE);
-
-        Map<String, Object> headers = createEvent(FILE_ID, Binary.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
-    @Test
-    public void testProcessBinaryOriginal() throws Exception {
-        getMockEndpoint("mock:direct:process.enhancements").expectedMessageCount(1);
-        getMockEndpoint("mock:direct-vm:replication").expectedMessageCount(1);
-
-        createContext(ORIGINAL_BINARY_ROUTE);
-
-        Map<String, Object> headers = createEvent(FILE_ID, Binary.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-
-        verify(mdProcessor).process(any(Exchange.class));
-        verify(getBinaryProcessor).process(any(Exchange.class));
-        verify(cleanupBinaryProcessor).process(any(Exchange.class));
-    }
-
-    @Test
-    public void testProcessBinaryOriginalFail() throws Exception {
-        getMockEndpoint("mock:direct-vm:imageEnhancements").expectedMessageCount(0);
-        getMockEndpoint("mock:direct-vm:extractFulltext").expectedMessageCount(0);
-
-        createContext(ORIGINAL_BINARY_ROUTE);
-
-        Map<String, Object> headers = createEvent("other_file", Binary.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
-    @Test
-    public void testProcessSolr() throws Exception {
-        getMockEndpoint("mock:direct-vm:solrIndexing").expectedMessageCount(1);
-
-        createContext(SOLR_INGEST_ROUTE);
-
-        Map<String, Object> headers = createEvent(RESOURCE_TYPE, Cdr.Work.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
-    @Test
-    public void testProcessSolrFail() throws Exception {
-        getMockEndpoint("mock:direct-vm:solrIndexing").expectedMessageCount(0);
-
-        createContext(SOLR_INGEST_ROUTE);
-
-        Map<String, Object> headers = createEvent(RESOURCE_TYPE, Binary.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
-    @Test
-    public void testProcessFilterOutDescriptiveMDSolr() throws Exception {
-        getMockEndpoint("mock:direct-vm:solrIndexing").expectedMessageCount(0);
-
-        createContext(SOLR_INGEST_ROUTE);
-
-        Map<String, Object> headers = createEvent("container",
-                Cdr.FileObject.getURI(), Cdr.DescriptiveMetadata.getURI());
-        template.sendBodyAndHeaders("", headers);
-
-        assertMockEndpointsSatisfied();
-    }
-
     private void createContext(String routeName) throws Exception {
         context.getRouteDefinition(routeName).adviceWith(context, new AdviceWithRouteBuilder() {
             @Override
diff --git a/services-camel/src/test/resources/config.properties b/services-camel/src/test/resources/config.properties
index 48b93c60a..a33b5609d 100644
--- a/services-camel/src/test/resources/config.properties
+++ b/services-camel/src/test/resources/config.properties
@@ -9,12 +9,14 @@ fcrepo.authHost=
 
 cdr.enhancement.thumbnail.fileExtension=PNG
 cdr.enhancement.thumbnail.mimetype=image/png
-cdr.enhancement.fulltext.fileName=full_text.txt
 cdr.enhancement.jp2.fileExtension=JP2
 cdr.enhancement.jp2.mimetype=image/jp2
 cdr.enhancement.postIndexingDelay=500
 cdr.enhancement.processingThreads=2
 
+cdr.enhancement.bin=target
+services.tempDirectory=target
+
 error.retryDelay=0
 # In the event of failure, the maximum number of times a redelivery will be attempted.
 error.maxRedeliveries=2
diff --git a/services-camel/src/test/resources/enhancement-router-it-config.properties b/services-camel/src/test/resources/enhancement-router-it-config.properties
new file mode 100644
index 000000000..911157a47
--- /dev/null
+++ b/services-camel/src/test/resources/enhancement-router-it-config.properties
@@ -0,0 +1,77 @@
+fcrepo.baseUrl=http://localhost:8080/fcrepo/rest
+fcrepo.serverUri=http://localhost:8080/
+fcrepo.binaryBase=/var/lib/tomcat7/fcrepo4-data/fcrepo.binary.directory/
+services.tempDirectory=/tmp/
+
+fcrepo.authUsername=
+fcrepo.authPassword=
+fcrepo.authHost=
+
+cdr.enhancement.thumbnail.fileExtension=PNG
+cdr.enhancement.thumbnail.mimetype=image/png
+cdr.enhancement.fulltext.fileName=full_text.txt
+cdr.enhancement.jp2.fileExtension=JP2
+cdr.enhancement.jp2.mimetype=image/jp2
+cdr.enhancement.postIndexingDelay=500
+cdr.enhancement.processingThreads=2
+
+cdr.enhancement.bin=target
+services.tempDirectory=target
+
+error.retryDelay=0
+# In the event of failure, the maximum number of times a redelivery will be attempted.
+error.maxRedeliveries=2
+error.backOffMultiplier=1
+
+# If you would like to index only those objects with a type `indexing:Indexable`,
+# set this property to `true`
+indexing.predicate=false
+
+# SOLR Server (http, localhost, 80, solr) 
+solr.protocol=http
+solr.host=localhost
+solr.port=:8983
+solr.context=solr
+
+# The camel URI for the incoming message stream.
+fcrepo.stream=direct-vm:meta.start
+
+# Input stream to route to fcrepo-triplestore-router without having to override the fcrepo-camel-toolbox code
+input.stream=direct-vm:index.start
+
+# The URI for the incoming CDR message stream
+cdr.stream=activemq:queue:repository.events
+cdr.stream.camel=activemq://activemq:queue:repository.events
+
+cdr.enhancement.stream=activemq:queue:repository.enhancements
+cdr.enhancement.stream.camel=activemq://activemq:queue:repository.enhancements
+
+# The base URL of the triplestore being used.
+triplestore.baseUrl=http://localhost:8080/fuseki/test/update
+
+# A named graph for any objects being indexed in the triplestore. This value, if
+# not left blank, should be a valid URI.
+triplestore.namedGraph=
+
+# Use these values to control the prefer headers for the returned representation from
+# fedora. By default, ldp:contains triples are excluded, since for large repositories,
+# including them can lead to _extremely_ large response sizes that may easily exceed
+# what the triplestore HTTP interface can efficiently handle.
+prefer.omit=http://www.w3.org/ns/ldp#PreferContainment
+prefer.include=ServerManaged
+
+# Any URIs listed here will be excluded from processing. URIs should be comma-delimited
+filter.containers=http://localhost:8080/fcrepo/rest/audit,info:fedora/audit
+
+jms.brokerUrl=tcp://localhost:61616
+jms.username=
+jms.password=
+jms.consumers=1
+jms.connections=10
+
+access.group.admin=adminGrp
+services.indexing.collectionFilters=src/test/resources/application.properties
+conductor.solr.maxThreads=3
+conductor.solr.beforeExecuteDelay=50
+conductor.solr.beforeUpdateDelay=0
+conductor.solr.recoverableDelay=30000
\ No newline at end of file
diff --git a/services-camel/src/test/resources/enhancement-router-it-context.xml b/services-camel/src/test/resources/enhancement-router-it-context.xml
new file mode 100644
index 000000000..bce50a3ba
--- /dev/null
+++ b/services-camel/src/test/resources/enhancement-router-it-context.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<beans xmlns="http://www.springframework.org/schema/beans"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
+    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
+    xmlns:util="http://www.springframework.org/schema/util"
+    xmlns:camel="http://camel.apache.org/schema/spring"
+    xmlns:amq="http://activemq.apache.org/schema/core"
+    xsi:schemaLocation="http://www.springframework.org/schema/beans
+        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
+        http://www.springframework.org/schema/util 
+        http://www.springframework.org/schema/util/spring-util.xsd
+        http://www.springframework.org/schema/context
+        http://www.springframework.org/schema/context/spring-context-4.3.xsd
+        http://activemq.apache.org/schema/core
+        http://activemq.apache.org/schema/core/activemq-core.xsd
+        http://camel.apache.org/schema/spring
+        http://camel.apache.org/schema/spring/camel-spring.xsd">
+        
+    <bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
+        <property name="location" value="classpath:enhancement-router-it-config.properties"/>
+    </bean>
+    
+    <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
+        <property name="location" value="classpath:enhancement-router-it-config.properties"/>
+    </bean>
+    
+    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
+        <property name="connectionFactory" ref="jmsFactory" />
+        <property name="concurrentConsumers" value="2" />
+    </bean>
+
+    <bean id="activemq"
+        class="org.apache.activemq.camel.component.ActiveMQComponent">
+        <property name="configuration" ref="jmsConfig" />
+    </bean>
+
+    <!-- JMS ConnectionFactory to use, configuring the embedded broker using 
+        XML -->
+    <amq:connectionFactory id="jmsFactory"
+        brokerURL="vm://localhost" />
+
+    <amq:broker useJmx="false" persistent="false" useShutdownHook="false">
+        <amq:transportConnectors>
+            <amq:transportConnector uri="vm://localhost:61616" />
+        </amq:transportConnectors>
+    </amq:broker>
+    
+    <bean id="solrIngestProcessor" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.services.camel.solr.SolrIngestProcessor" />
+    </bean>
+    
+    <bean id="addSmallThumbnailProcessor" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor" />
+    </bean>
+    
+    <bean id="addLargeThumbnailProcessor" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor" />
+    </bean>
+    
+    <bean id="addAccessCopyProcessor" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor" />
+    </bean>
+    
+    <bean id="getBinaryProcessor" class="edu.unc.lib.dl.services.camel.GetBinaryProcessor">
+        <property name="repositoryObjectLoader" ref="repositoryObjectLoader"/>
+    </bean>
+
+    <bean id="cleanupBinaryProcessor" class="edu.unc.lib.dl.services.camel.CleanupBinaryProcessor">
+    </bean>
+    
+    <bean id="binaryMetadataProcessor" class="edu.unc.lib.dl.services.camel.BinaryMetadataProcessor">
+    </bean>
+    
+    <bean id="fulltextProcessor" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor" />
+    </bean>
+
+    <camel:camelContext id="cdrServiceImageEnhancements">
+        <camel:package>edu.unc.lib.dl.services.camel.images</camel:package>
+    </camel:camelContext>
+    
+    <camel:camelContext id="cdrServiceFulltextExtraction">
+        <camel:package>edu.unc.lib.dl.services.camel.fulltext</camel:package>
+    </camel:camelContext>
+    
+    <camel:camelContext id="cdrServiceSolr">
+        <camel:package>edu.unc.lib.dl.services.camel.solr</camel:package>
+    </camel:camelContext>
+    
+    <camel:camelContext id="cdrEnhancements">
+        <camel:package>edu.unc.lib.dl.services.camel.enhancements</camel:package>
+    </camel:camelContext>
+  
+</beans>
\ No newline at end of file
diff --git a/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/AddContainerService.java b/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/AddContainerService.java
index acb6677e6..d7fa6689a 100644
--- a/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/AddContainerService.java
+++ b/services/src/main/java/edu/unc/lib/dl/cdr/services/processing/AddContainerService.java
@@ -18,7 +18,10 @@
 import static org.springframework.util.Assert.notNull;
 
 import java.util.Arrays;
+import java.util.UUID;
 
+import org.apache.jena.rdf.model.Model;
+import org.apache.jena.rdf.model.ModelFactory;
 import org.apache.jena.rdf.model.Resource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -29,12 +32,14 @@
 import edu.unc.lib.dl.acl.util.Permission;
 import edu.unc.lib.dl.fcrepo4.ContentContainerObject;
 import edu.unc.lib.dl.fcrepo4.FedoraTransaction;
+import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
 import edu.unc.lib.dl.fcrepo4.TransactionManager;
 import edu.unc.lib.dl.fedora.PID;
 import edu.unc.lib.dl.metrics.TimerFactory;
 import edu.unc.lib.dl.rdf.Cdr;
+import edu.unc.lib.dl.rdf.DcElements;
 import edu.unc.lib.dl.rdf.Premis;
 import edu.unc.lib.dl.services.OperationsMessageSender;
 import io.dropwizard.metrics5.Timer;
@@ -61,9 +66,10 @@
      *
      * @param agent security principals of the agent making request.
      * @param parentPid pid of parent obj to add child container to
+     * @param label label for the new container, to be stored as dc:title
      * @param containerType the type of new container to be created
      */
-    public void addContainer(AgentPrincipals agent, PID parentPid, Resource containerType) {
+    public void addContainer(AgentPrincipals agent, PID parentPid, String label, Resource containerType) {
         notNull(parentPid);
         notNull(containerType);
 
@@ -71,27 +77,31 @@ public void addContainer(AgentPrincipals agent, PID parentPid, Resource containe
         FedoraTransaction tx = txManager.startTransaction();
 
         try (Timer.Context context = timer.time()) {
+            PID containerPid = PIDs.get(UUID.randomUUID().toString());
+            Model containerModel = ModelFactory.createDefaultModel();
+            containerModel.add(containerModel.createResource(containerPid.getRepositoryPath()), DcElements.title,
+                    label);
             // Create the appropriate container
             if (Cdr.AdminUnit.equals(containerType)) {
                 aclService.assertHasAccess(
                         "User does not have permissions to create admin units",
                         parentPid, agent.getPrincipals(), Permission.createAdminUnit);
-                child = repoObjFactory.createAdminUnit(null);
+                child = repoObjFactory.createAdminUnit(containerPid, containerModel);
             } else if (Cdr.Collection.equals(containerType)) {
                 aclService.assertHasAccess(
                         "User does not have permissions to create collections",
                         parentPid, agent.getPrincipals(), Permission.createCollection);
-                child = repoObjFactory.createCollectionObject(null);
+                child = repoObjFactory.createCollectionObject(containerPid, containerModel);
             } else if (Cdr.Folder.equals(containerType)) {
                 aclService.assertHasAccess(
                         "User does not have permissions to create folders",
                         parentPid, agent.getPrincipals(), Permission.ingest);
-                child = repoObjFactory.createFolderObject(null);
+                child = repoObjFactory.createFolderObject(containerPid, containerModel);
             } else if (Cdr.Work.equals(containerType)) {
                 aclService.assertHasAccess(
                         "User does not have permissions to create works",
                         parentPid, agent.getPrincipals(), Permission.ingest);
-                child = repoObjFactory.createWorkObject(null);
+                child = repoObjFactory.createWorkObject(containerPid, containerModel);
             } else {
                 throw new AccessRestrictionException("User cannot add a container to object of type " + containerType);
             }
diff --git a/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerController.java b/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerController.java
index 525725e6f..b104c40e6 100644
--- a/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerController.java
+++ b/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerController.java
@@ -28,6 +28,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import edu.unc.lib.dl.acl.exception.AccessRestrictionException;
@@ -53,29 +54,29 @@
 
     @RequestMapping(value = "edit/create/adminUnit/{id}", method = RequestMethod.POST)
     @ResponseBody
-    public ResponseEntity<Object> createAdminUnit(@PathVariable("id") String id) {
-        return createContainer(id, Cdr.AdminUnit);
+    public ResponseEntity<Object> createAdminUnit(@PathVariable("id") String id, @RequestParam("label") String label) {
+        return createContainer(id, label, Cdr.AdminUnit);
     }
 
     @RequestMapping(value = "edit/create/collection/{id}", method = RequestMethod.POST)
     @ResponseBody
-    public ResponseEntity<Object> createCollection(@PathVariable("id") String id) {
-        return createContainer(id, Cdr.Collection);
+    public ResponseEntity<Object> createCollection(@PathVariable("id") String id, @RequestParam("label") String label) {
+        return createContainer(id, label, Cdr.Collection);
     }
 
     @RequestMapping(value = "edit/create/folder/{id}", method = RequestMethod.POST)
     @ResponseBody
-    public ResponseEntity<Object> createFolder(@PathVariable("id") String id) {
-        return createContainer(id, Cdr.Folder);
+    public ResponseEntity<Object> createFolder(@PathVariable("id") String id, @RequestParam("label") String label) {
+        return createContainer(id, label, Cdr.Folder);
     }
 
     @RequestMapping(value = "edit/create/work/{id}", method = RequestMethod.POST)
     @ResponseBody
-    public ResponseEntity<Object> createWork(@PathVariable("id") String id) {
-        return createContainer(id, Cdr.Work);
+    public ResponseEntity<Object> createWork(@PathVariable("id") String id, @RequestParam("label") String label) {
+        return createContainer(id, label, Cdr.Work);
     }
 
-    private ResponseEntity<Object> createContainer(String id, Resource containerType) {
+    private ResponseEntity<Object> createContainer(String id, String label, Resource containerType) {
         Map<String, Object> result = new HashMap<>();
         result.put("action", "create");
         result.put("pid", id);
@@ -83,7 +84,7 @@
         PID parentPid = PIDs.get(id);
 
         try {
-            addContainerService.addContainer(AgentPrincipals.createFromThread(), parentPid, containerType);
+            addContainerService.addContainer(AgentPrincipals.createFromThread(), parentPid, label, containerType);
         } catch (Exception e) {
             result.put("error", e.getMessage());
             Throwable t = e.getCause();
diff --git a/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelController.java b/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelController.java
new file mode 100644
index 000000000..a3ef09ef8
--- /dev/null
+++ b/services/src/main/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelController.java
@@ -0,0 +1,78 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.cdr.services.rest.modify;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+
+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;
+import edu.unc.lib.dl.acl.util.AgentPrincipals;
+import edu.unc.lib.dl.fcrepo4.PIDs;
+import edu.unc.lib.dl.fedora.AuthorizationException;
+import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.persist.services.edit.EditLabelService;
+
+/**
+ * API controller that updates the dc:title of a given object
+ *
+ * @author harring
+ *
+ */
+@Controller
+public class EditLabelController {
+    private static final Logger log = LoggerFactory.getLogger(EditLabelController.class);
+
+    @Autowired
+    private EditLabelService service;
+
+    @RequestMapping(value = "/edit/label/{id}", method = RequestMethod.PUT)
+    @ResponseBody
+    public ResponseEntity<Object> editLabel(@PathVariable("id") String id, @RequestParam("label") String label) {
+        Map<String, Object> result = new HashMap<>();
+        result.put("action", "editLabel");
+        result.put("pid", id);
+
+        PID pid = PIDs.get(id);
+
+        try {
+            service.editLabel(AgentPrincipals.createFromThread(), pid, label);
+        } catch (Exception e) {
+            result.put("error", e.getMessage());
+            Throwable t = e.getCause();
+            if (t instanceof AuthorizationException || t instanceof AccessRestrictionException) {
+                return new ResponseEntity<>(result, HttpStatus.FORBIDDEN);
+            } else {
+                log.error("Failed to edit label for {}", pid, e);
+                return new ResponseEntity<>(result, HttpStatus.INTERNAL_SERVER_ERROR);
+            }
+        }
+
+        result.put("timestamp", System.currentTimeMillis());
+        return new ResponseEntity<>(result, HttpStatus.OK);
+    }
+}
diff --git a/services/src/main/webapp/WEB-INF/service-context.xml b/services/src/main/webapp/WEB-INF/service-context.xml
index 9c2b1bc7c..12c00cbc4 100644
--- a/services/src/main/webapp/WEB-INF/service-context.xml
+++ b/services/src/main/webapp/WEB-INF/service-context.xml
@@ -65,14 +65,14 @@
     </bean>
     
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg>
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
             <null />
         </constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
     
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
@@ -127,7 +127,7 @@
     <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
         <property name="connectionFactory" ref="jmsFactory" />
         <property name="defaultDestinationName" value="${cdr.stream}" />
-        <property name="pubSubDomain" value="true" />
+        <property name="pubSubDomain" value="false" />
     </bean>
 
     <bean id="operationsMessageSender" class="edu.unc.lib.dl.services.OperationsMessageSender">
@@ -249,6 +249,14 @@
         <property name="operationsMessageSender" ref="operationsMessageSender" />
     </bean>
     
+    <bean id="editLabelService" class="edu.unc.lib.dl.persist.services.edit.EditLabelService">
+        <property name="aclService" ref="aclService" />
+        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
+        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
+        <property name="transactionManager" ref="transactionManager" />
+        <property name="operationsMessageSender" ref="operationsMessageSender" />
+    </bean>
+    
     <bean id="solrUpdateJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
         <property name="connectionFactory" ref="jmsFactory" />
         <property name="defaultDestinationName" value="${cdr.solrupdate.stream}" />
diff --git a/services/src/main/webapp/WEB-INF/sword-context.xml b/services/src/main/webapp/WEB-INF/sword-context.xml
index a9fb49fec..265db3ffe 100644
--- a/services/src/main/webapp/WEB-INF/sword-context.xml
+++ b/services/src/main/webapp/WEB-INF/sword-context.xml
@@ -91,8 +91,6 @@
     </bean>
     
     <bean id="depositReportingUtil" class="edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil">
-        <!-- <property name="tripleStoreQueryService" ref="tripleStoreQueryService" /> -->
-        <!-- <property name="accessClient" ref="accessClient"/> -->
     </bean>
     
     <bean id="collectionListManager" class="edu.unc.lib.dl.cdr.sword.server.managers.CollectionListManagerImpl">
@@ -138,8 +136,6 @@
     </bean>
     
     <bean id="containerManager" class="edu.unc.lib.dl.cdr.sword.server.managers.ContainerManagerImpl">
-        <property name="uipProcessor" ref="fedoraUIPProcessor"/>
-        <property name="depositReportingUtil" ref="depositReportingUtil"/>
     </bean>
     
     <bean id="mediaResourceManager" class="edu.unc.lib.dl.cdr.sword.server.managers.MediaResourceManagerImpl">
@@ -148,7 +144,6 @@
     </bean>
     
     <bean id="statementManager" class="edu.unc.lib.dl.cdr.sword.server.managers.StatementManagerImpl">
-        <property name="depositReportingUtil" ref="depositReportingUtil"/>
     </bean>
     
     <bean id="depositorAccessControlFilter" class="edu.unc.lib.dl.cdr.sword.server.filters.DepositorAccessControlFilter">
diff --git a/services/src/test/java/edu/unc/lib/dl/cdr/services/processing/AddContainerServiceTest.java b/services/src/test/java/edu/unc/lib/dl/cdr/services/processing/AddContainerServiceTest.java
index 2681a60a4..cbb388caf 100644
--- a/services/src/test/java/edu/unc/lib/dl/cdr/services/processing/AddContainerServiceTest.java
+++ b/services/src/test/java/edu/unc/lib/dl/cdr/services/processing/AddContainerServiceTest.java
@@ -134,7 +134,7 @@ public void insufficientAccessTest() {
                 .assertHasAccess(anyString(), eq(parentPid), any(AccessGroupSet.class), eq(ingest));
 
         try {
-            service.addContainer(agent, parentPid, Cdr.Folder);
+            service.addContainer(agent, parentPid, "folder", Cdr.Folder);
         } catch (TransactionCancelledException e) {
             assertEquals(AccessRestrictionException.class, e.getCause().getClass());
             throw new TransactionCancelledException();
@@ -146,11 +146,11 @@ public void addCollectionToFolderTest() {
         FolderObject folder = mock(FolderObject.class);
         CollectionObject collection = mock(CollectionObject.class);
         when(repoObjLoader.getRepositoryObject(eq(parentPid))).thenReturn(folder);
-        when(repoObjFactory.createCollectionObject(any(ModelCom.class))).thenReturn(collection);
+        when(repoObjFactory.createCollectionObject(any(PID.class), any(ModelCom.class))).thenReturn(collection);
         doThrow(new ObjectTypeMismatchException("")).when(folder).addMember(collection);
 
         try {
-            service.addContainer(agent, parentPid, Cdr.Collection);
+            service.addContainer(agent, parentPid, "collection", Cdr.Collection);
         } catch (TransactionCancelledException e) {
             assertEquals(ObjectTypeMismatchException.class, e.getCause().getClass());
             throw new TransactionCancelledException();
@@ -163,11 +163,11 @@ public void addFolderToCollectionTest() {
         CollectionObject collection = mock(CollectionObject.class);
         FolderObject folder = mock(FolderObject.class);
         when(repoObjLoader.getRepositoryObject(eq(parentPid))).thenReturn(collection);
-        when(repoObjFactory.createFolderObject(any(ModelCom.class))).thenReturn(folder);
+        when(repoObjFactory.createFolderObject(any(PID.class), any(ModelCom.class))).thenReturn(folder);
         when(folder.getPid()).thenReturn(childPid);
         when(folder.getPremisLog()).thenReturn(premisLogger);
 
-        service.addContainer(agent, parentPid, Cdr.Folder);
+        service.addContainer(agent, parentPid, "folder", Cdr.Folder);
 
         verify(premisLogger).buildEvent(eq(Premis.Creation));
         verify(eventBuilder).write();
@@ -189,11 +189,11 @@ public void addWorkToFolderTest() {
         FolderObject folder = mock(FolderObject.class);
 
         when(repoObjLoader.getRepositoryObject(eq(parentPid))).thenReturn(folder);
-        when(repoObjFactory.createWorkObject(any(ModelCom.class))).thenReturn(work);
+        when(repoObjFactory.createWorkObject(any(PID.class), any(ModelCom.class))).thenReturn(work);
         when(work.getPid()).thenReturn(childPid);
         when(work.getPremisLog()).thenReturn(premisLogger);
 
-        service.addContainer(agent, parentPid, Cdr.Work);
+        service.addContainer(agent, parentPid, "work", Cdr.Work);
 
         verify(premisLogger).buildEvent(eq(Premis.Creation));
         verify(eventBuilder).write();
diff --git a/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerIT.java b/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerIT.java
index d7d62ec4d..1182b44aa 100644
--- a/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerIT.java
+++ b/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/AddContainerIT.java
@@ -26,8 +26,10 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import java.util.List;
 import java.util.Map;
 
+import org.apache.jena.rdf.model.Model;
 import org.junit.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.ContextConfiguration;
@@ -39,10 +41,12 @@
 import edu.unc.lib.dl.fcrepo4.AdminUnit;
 import edu.unc.lib.dl.fcrepo4.CollectionObject;
 import edu.unc.lib.dl.fcrepo4.ContentContainerObject;
+import edu.unc.lib.dl.fcrepo4.ContentObject;
 import edu.unc.lib.dl.fcrepo4.FolderObject;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.DcElements;
 
 /**
  *
@@ -69,11 +73,13 @@ public void testAddCollectionToAdminUnit() throws UnsupportedOperationException,
 
         assertChildContainerNotAdded(parent);
 
-        MvcResult result = mvc.perform(post("/edit/create/collection/" + parentPid.getUUID()))
-                .andExpect(status().is2xxSuccessful())
-                .andReturn();
+        String label = "collection_label";
+        MvcResult result = mvc.perform(post("/edit/create/collection/" + parentPid.getUUID())
+                .param("label", label))
+            .andExpect(status().is2xxSuccessful())
+            .andReturn();
 
-        assertChildContainerAdded(parent);
+        assertChildContainerAdded(parent, label);
 
         // Verify response from api
         Map<String, Object> respMap = getMapFromResponse(result);
@@ -89,9 +95,11 @@ public void testAddAdminUnitToCollection() throws UnsupportedOperationException,
 
         assertChildContainerNotAdded(parent);
 
-        MvcResult result = mvc.perform(post("/edit/create/adminUnit/" + parentPid.getUUID()))
-                .andExpect(status().isInternalServerError())
-                .andReturn();
+        String label = "admin_unit";
+        MvcResult result = mvc.perform(post("/edit/create/adminUnit/" + parentPid.getUUID())
+                .param("label", label))
+            .andExpect(status().isInternalServerError())
+            .andReturn();
 
         assertChildContainerNotAdded(parent);
 
@@ -110,8 +118,9 @@ public void testAuthorizationFailure() throws Exception {
         doThrow(new AccessRestrictionException()).when(aclService)
                 .assertHasAccess(anyString(), eq(pid), any(AccessGroupSet.class), eq(ingest));
 
-        MvcResult result = mvc.perform(post("/edit/create/folder/" + pid.getUUID()))
-            .andExpect(status().isForbidden())
+        String label = "folder";
+        MvcResult result = mvc.perform(post("/edit/create/folder/" + pid.getUUID())
+                .param("label", label))
             .andReturn();
 
         assertChildContainerNotAdded(folder);
@@ -123,14 +132,19 @@ public void testAuthorizationFailure() throws Exception {
         assertTrue(respMap.containsKey("error"));
     }
 
-    private void assertChildContainerAdded(ContentContainerObject parent) {
+    private void assertChildContainerAdded(ContentContainerObject parent, String label) {
         // Refresh the model
         parent = repositoryObjectLoader.getAdminUnit(parent.getPid());
-        if (parent.getMembers().size() != 0) {
-            assertTrue(parent.getMembers().get(0) instanceof ContentContainerObject);
+        List<ContentObject> members = parent.getMembers();
+        if (members.size() != 0) {
+            assertTrue(members.get(0) instanceof ContentContainerObject);
         } else {
             fail("No child container was added to parent");
         }
+        ContentContainerObject childContainer = (ContentContainerObject) members.get(0);
+        Model childModel = childContainer.getModel();
+        assertTrue(childModel.contains(childModel.getResource(childContainer.getUri().toString()), DcElements.title,
+                label));
     }
 
     private void assertChildContainerNotAdded(ContentContainerObject parent) {
diff --git a/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelIT.java b/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelIT.java
new file mode 100644
index 000000000..4b29738ed
--- /dev/null
+++ b/services/src/test/java/edu/unc/lib/dl/cdr/services/rest/modify/EditLabelIT.java
@@ -0,0 +1,127 @@
+/**
+ * Copyright 2008 The University of North Carolina at Chapel Hill
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.unc.lib.dl.cdr.services.rest.modify;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.doThrow;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+import java.util.Map;
+
+import org.apache.jena.rdf.model.Model;
+import org.apache.jena.rdf.model.ModelFactory;
+import org.junit.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.ContextHierarchy;
+import org.springframework.test.web.servlet.MvcResult;
+
+import edu.unc.lib.dl.acl.exception.AccessRestrictionException;
+import edu.unc.lib.dl.acl.util.AccessGroupSet;
+import edu.unc.lib.dl.acl.util.Permission;
+import edu.unc.lib.dl.fcrepo4.FolderObject;
+import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
+import edu.unc.lib.dl.fcrepo4.WorkObject;
+import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.DcElements;
+
+/**
+ *
+ * @author harring
+ *
+ */
+@ContextHierarchy({
+    @ContextConfiguration("/spring-test/test-fedora-container.xml"),
+    @ContextConfiguration("/spring-test/cdr-client-container.xml"),
+    @ContextConfiguration("/edit-label-it-servlet.xml")
+})
+public class EditLabelIT extends AbstractAPIIT {
+
+    @Autowired
+    private RepositoryObjectFactory repositoryObjectFactory;
+
+    @Test
+    public void testCreateLabelWhereNoneExists() throws UnsupportedOperationException, Exception {
+        PID pid = makePid();
+
+        WorkObject work = repositoryObjectFactory.createWorkObject(pid, null);
+
+        String label = "work_label";
+        MvcResult result = mvc.perform(put("/edit/label/" + pid.getUUID())
+                .param("label", label))
+            .andExpect(status().is2xxSuccessful())
+            .andReturn();
+
+        // Verify response from api
+        Map<String, Object> respMap = getMapFromResponse(result);
+        assertEquals(pid.getUUID(), respMap.get("pid"));
+        assertEquals("editLabel", respMap.get("action"));
+
+        assertEquals("work_label",
+                work.getModel().getRequiredProperty(work.getResource(), DcElements.title).getLiteral().toString());
+    }
+
+    @Test
+    public void testReplaceLabel() throws UnsupportedOperationException, Exception {
+        PID pid = makePid();
+        String oldLabel = "old_work_label";
+        Model workModel = ModelFactory.createDefaultModel();
+        workModel.add(workModel.createResource(pid.getRepositoryPath()), DcElements.title,
+                oldLabel);
+        WorkObject work = repositoryObjectFactory.createWorkObject(pid, workModel);
+
+        String newLabel = "new_work_label";
+        MvcResult result = mvc.perform(put("/edit/label/" + pid.getUUID())
+                .param("label", newLabel))
+            .andExpect(status().is2xxSuccessful())
+            .andReturn();
+
+        // Verify response from api
+        Map<String, Object> respMap = getMapFromResponse(result);
+        assertEquals(pid.getUUID(), respMap.get("pid"));
+        assertEquals("editLabel", respMap.get("action"));
+
+        assertEquals("new_work_label",
+                work.getModel().getRequiredProperty(work.getResource(), DcElements.title).getLiteral().toString());
+    }
+
+    @Test
+    public void testAuthorizationFailure() throws Exception {
+        PID pid = makePid();
+        FolderObject folder = repositoryObjectFactory.createFolderObject(pid, null);
+
+        doThrow(new AccessRestrictionException()).when(aclService)
+                .assertHasAccess(anyString(), eq(pid), any(AccessGroupSet.class), eq(Permission.editDescription));
+
+        String label = "folder_label";
+        MvcResult result = mvc.perform(put("/edit/label/" + pid.getUUID())
+                .param("label", label))
+                .andExpect(status().isForbidden())
+            .andReturn();
+
+        // Verify response from api
+        Map<String, Object> respMap = getMapFromResponse(result);
+        assertEquals(pid.getUUID(), respMap.get("pid"));
+        assertEquals("editLabel", respMap.get("action"));
+        assertTrue(respMap.containsKey("error"));
+    }
+
+}
diff --git a/services/src/test/resources/edit-label-it-servlet.xml b/services/src/test/resources/edit-label-it-servlet.xml
new file mode 100644
index 000000000..efb21241a
--- /dev/null
+++ b/services/src/test/resources/edit-label-it-servlet.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright 2008 The University of North Carolina at Chapel Hill
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+            http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns="http://www.springframework.org/schema/beans"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns:mvc="http://www.springframework.org/schema/mvc"
+    xmlns:context="http://www.springframework.org/schema/context"
+    xsi:schemaLocation="
+        http://www.springframework.org/schema/beans
+        http://www.springframework.org/schema/beans/spring-beans.xsd
+        http://www.springframework.org/schema/context 
+        http://www.springframework.org/schema/context/spring-context-3.0.xsd
+        http://www.springframework.org/schema/mvc
+        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
+        
+    <mvc:annotation-driven/>
+
+    <context:component-scan resource-pattern="**/EditLabelController*" base-package="edu.unc.lib.dl.cdr.services.rest.modify"/>
+    
+    <bean id="editContainerService" class="edu.unc.lib.dl.persist.services.edit.EditLabelService">
+        <property name="aclService" ref="aclService" />
+        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
+        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
+        <property name="transactionManager" ref="transactionManager" />
+        <property name="operationsMessageSender" ref="operationsMessageSender" />
+    </bean>
+    
+    <bean id="aclService" class="org.mockito.Mockito" factory-method="mock">
+        <constructor-arg value="edu.unc.lib.dl.acl.fcrepo4.AccessControlServiceImpl" />
+    </bean>
+</beans>
\ No newline at end of file
diff --git a/solr-search/src/main/java/edu/unc/lib/dl/search/solr/service/ChildrenCountService.java b/solr-search/src/main/java/edu/unc/lib/dl/search/solr/service/ChildrenCountService.java
index f50f6b07f..094762f3c 100644
--- a/solr-search/src/main/java/edu/unc/lib/dl/search/solr/service/ChildrenCountService.java
+++ b/solr-search/src/main/java/edu/unc/lib/dl/search/solr/service/ChildrenCountService.java
@@ -215,6 +215,6 @@ private Count binarySearchForMatchingCount(List<Count> counts, String searchValu
             // If the id starts with the search value, return match.  Else, compare and continue.
             return countId.indexOf(searchVal) == 0 ? 0 : countId.compareTo(searchValue);
         });
-        return matchIndex == -1 ? null : counts.get(matchIndex);
+        return matchIndex < 0 ? null : counts.get(matchIndex);
     }
 }
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
index b8a548610..76f9b7148 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
@@ -47,7 +47,7 @@
 import edu.unc.lib.dl.util.RedisWorkerConstants.Priority;
 
 /**
- * 
+ *
  * @author bbpennel
  *
  */
@@ -117,7 +117,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
                     "Duplicate request, repository already has deposit " + depositPid);
         }
 
-        Map<String, String> status = new HashMap<String, String>();
+        Map<String, String> status = new HashMap<>();
         status.putAll(extras);
 
         // generic deposit fields
@@ -126,7 +126,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
         status.put(DepositField.fileMimetype.name(), deposit.getMimeType());
         status.put(DepositField.depositorName.name(), owner);
         status.put(DepositField.depositorEmail.name(), GroupsThreadStore.getEmail());
-        status.put(DepositField.containerId.name(), destination.getPid());
+        status.put(DepositField.containerId.name(), destination.getId());
         status.put(DepositField.depositMethod.name(), DepositMethod.SWORD13.getLabel());
         status.put(DepositField.packagingType.name(), type.getUri());
         status.put(DepositField.depositMd5.name(), deposit.getMd5());
@@ -155,7 +155,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
 
         status.put(DepositField.state.name(), DepositState.unregistered.name());
         status.put(DepositField.actionRequest.name(), DepositAction.register.name());
-        Set<String> nulls = new HashSet<String>();
+        Set<String> nulls = new HashSet<>();
         for (String key : status.keySet()) {
             if (status.get(key) == null) {
                 nulls.add(key);
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
index f85319066..6d94ca886 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
@@ -30,6 +30,7 @@
 import org.swordapp.server.SwordConfiguration;
 import org.swordapp.server.SwordError;
 
+import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fedora.PID;
 import edu.unc.lib.dl.util.ErrorURIRegistry;
 import edu.unc.lib.dl.util.MetsHeaderScanner;
@@ -65,7 +66,7 @@ public DepositReceipt doDeposit(PID destination, Deposit deposit, PackagingType
         PID depositPID = scanner.getObjID();
         if (depositPID == null) {
             UUID depositUUID = UUID.randomUUID();
-            depositPID = new PID("uuid:" + depositUUID.toString());
+            depositPID = PIDs.get(depositUUID.toString());
         }
         File dir = makeNewDepositDirectory(depositPID.getUUID());
 
@@ -76,11 +77,11 @@ public DepositReceipt doDeposit(PID destination, Deposit deposit, PackagingType
             FileUtils.moveFile(deposit.getFile(), new File(data, deposit.getFilename()));
         } catch (IOException e) {
             throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-                    "Unable to create your deposit bag: " + depositPID.getPid(), e);
+                    "Unable to create your deposit bag: " + depositPID.getRepositoryPath(), e);
         }
 
         // METS specific fields
-        Map<String, String> status = new HashMap<String, String>();
+        Map<String, String> status = new HashMap<>();
         status.put(DepositField.packageProfile.name(), scanner.getProfile());
         status.put(DepositField.metsType.name(), scanner.getType());
         status.put(DepositField.createTime.name(), scanner.getCreateDate());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
index 839ed9e03..5508e884b 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
@@ -15,17 +15,21 @@
  */
 package edu.unc.lib.dl.cdr.sword.server.managers;
 
+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;
+import static org.apache.http.HttpStatus.SC_FORBIDDEN;
+
 import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.swordapp.server.AuthCredentials;
+import org.swordapp.server.SwordError;
 
+import edu.unc.lib.dl.acl.service.AccessControlService;
 import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
+import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fcrepo4.RepositoryPaths;
-import edu.unc.lib.dl.fedora.DatastreamPID;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.util.ErrorURIRegistry;
 
 /**
  *
@@ -38,10 +42,13 @@
     @Autowired
     protected String swordPath;
 
+    @Autowired
+    protected AccessControlService aclService;
+
     protected String readFileAsString(String filePath) throws java.io.IOException {
         LOG.debug("Loading path file " + filePath);
         try (java.io.InputStream inStream = this.getClass().getResourceAsStream(filePath)) {
-            return IOUtils.toString(inStream);
+            return IOUtils.toString(inStream, "UTF-8");
         }
     }
 
@@ -56,20 +63,15 @@ protected PID extractPID(String uri, String basePath) {
         if (pidString.trim().length() == 0) {
             targetPID = RepositoryPaths.getContentRootPid();
         } else {
-            targetPID = new DatastreamPID(pidString);
+            targetPID = PIDs.get(pidString);
         }
         return targetPID;
     }
 
-    protected boolean hasAccess(AuthCredentials auth, PID pid, Permission permission, SwordConfigurationImpl config) {
-        if (config.getAdminDepositor() != null && config.getAdminDepositor().equals(auth.getUsername())) {
-            return true;
+    protected void assertHasAccess(String message, PID pid, Permission permission) throws SwordError {
+        if (!aclService.hasAccess(pid, getAgentPrincipals().getPrincipals(), permission)) {
+            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, SC_FORBIDDEN, message);
         }
-        throw new RuntimeException("Not implemented");
-        //        ObjectAccessControlsBean aclBean = aclService.getObjectAccessControls(pid);
-        //        AccessGroupSet groups = GroupsThreadStore.getGroups();
-        //
-        //        return aclBean.hasPermission(groups, permission);
     }
 
     public String getSwordPath() {
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
index b120ce9ce..03e9ebab7 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
@@ -65,14 +65,10 @@ public DepositReceipt createNew(String collectionURI, Deposit deposit, AuthCrede
         String depositor = auth.getUsername();
         String owner = (auth.getOnBehalfOf() != null) ? auth.getOnBehalfOf() : depositor;
 
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
         PID containerPID = extractPID(collectionURI, SwordConfigurationImpl.COLLECTION_PATH + "/");
 
-        if (!hasAccess(auth, containerPID, Permission.addRemoveContents, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to deposit to container " + containerPID.getPid());
-        }
+        assertHasAccess("Insufficient privileges to deposit to container " + containerPID.getRepositoryPath(),
+                containerPID, Permission.ingest);
 
         // Get the enum for the provided packaging type. Null can be a legitimate type
         PackagingType type = PackagingType.getPackagingType(deposit.getPackaging());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
index 94ac13f79..bba70621e 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
@@ -87,10 +87,8 @@ public Feed listCollectionContents(IRI collectionIRI, AuthCredentials auth, Swor
         }
 
         // Verify access control
-        if (!hasAccess(auth, containerPID, Permission.viewDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to view the collection list for " + containerPID.getPid());
-        }
+        assertHasAccess("Insufficient privileges to view the collection list for " + containerPID.getRepositoryPath(),
+                containerPID, Permission.viewMetadata);
 
         Feed feed = abdera.getFactory().newFeed();
         feed.setId(containerPID.getPid());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
index 07bb629e9..802cee8d7 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
@@ -17,9 +17,7 @@
 
 import java.util.Map;
 
-import org.apache.abdera.i18n.iri.IRI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.commons.lang3.NotImplementedException;
 import org.swordapp.server.AuthCredentials;
 import org.swordapp.server.ContainerManager;
 import org.swordapp.server.Deposit;
@@ -29,17 +27,7 @@
 import org.swordapp.server.SwordError;
 import org.swordapp.server.SwordServerException;
 
-import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
-import edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil;
-import edu.unc.lib.dl.fedora.AuthorizationException;
-import edu.unc.lib.dl.fedora.PID;
-import edu.unc.lib.dl.update.AtomPubMetadataUIP;
-import edu.unc.lib.dl.update.UIPException;
-import edu.unc.lib.dl.update.UIPProcessor;
-import edu.unc.lib.dl.update.UpdateException;
 import edu.unc.lib.dl.update.UpdateOperation;
-import edu.unc.lib.dl.util.ErrorURIRegistry;
 
 /**
  *
@@ -48,58 +36,10 @@
  */
 public class ContainerManagerImpl extends AbstractFedoraManager implements ContainerManager {
 
-    private static Logger log = LoggerFactory.getLogger(ContainerManagerImpl.class);
-
-    //    private DigitalObjectManager digitalObjectManager;
-    private UIPProcessor uipProcessor;
-    //    private ManagementClient managementClient;
-    private DepositReportingUtil depositReportingUtil;
-
     private DepositReceipt updateMetadata(String editIRI, Deposit deposit, AuthCredentials auth,
             SwordConfiguration config, UpdateOperation operation) throws SwordError, SwordServerException,
     SwordAuthException {
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.editDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to update metadata for " + targetPID.getPid());
-        }
-
-        AtomPubMetadataUIP uip;
-        try {
-            uip = new AtomPubMetadataUIP(targetPID, auth.getUsername(), operation, deposit.getSwordEntry().getEntry());
-        } catch (UIPException e) {
-            log.warn("An exception occurred while attempting to create metadata UIP for " + targetPID.getPid(), e);
-            throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-                    "An exception occurred while attempting to create metadata UIP for " + editIRI, e);
-        }
-
-        try {
-            uipProcessor.process(uip);
-        } catch (UpdateException e) {
-            if (e.getCause() instanceof AuthorizationException) {
-                throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                        "Failed to authorize update metadata operation", e);
-            }
-            throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-                    "An exception occurred while attempting to update object " + targetPID.getPid(), e);
-        } catch (UIPException e) {
-            log.warn("Failed to process UIP for " + targetPID.getPid(), e);
-            throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-                    "A problem occurred while attempting to perform the requested update operation on "
-                            + editIRI, e);
-        }
-
-        DepositReceipt receipt = new DepositReceipt();
-        receipt.setLocation(new IRI(editIRI));
-        receipt.setEmpty(true);
-
-        // Update the objects in progress status
-        this.setInProgress(targetPID, deposit, receipt);
-
-        return receipt;
+        throw new NotImplementedException("Operation not supported");
     }
 
     @Override
@@ -140,28 +80,7 @@ public DepositReceipt addResources(String editIRI, Deposit deposit, AuthCredenti
     @Override
     public void deleteContainer(String editIRI, AuthCredentials auth, SwordConfiguration config) throws SwordError,
     SwordServerException, SwordAuthException {
-        // Ignoring on-behalf-of for the moment
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        if (!hasAccess(auth, targetPID, Permission.moveToTrash, configImpl)) {
-            log.debug("Insufficient privileges to delete object " + targetPID.getPid());
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to delete object " + targetPID.getPid());
-        }
-
-        //        try {
-        //            this.digitalObjectManager.delete(targetPID, auth.getUsername(), "Deleted by "
-        //              + auth.getUsername());
-        //        } catch (NotFoundException e) {
-        //            throw new SwordError(ErrorURIRegistry.RESOURCE_NOT_FOUND, 404,
-        //                    "Unable to delete the object " + targetPID.getPid()
-        //                    + ".  The object was not found in the repository.");
-        //        } catch (IngestException e) {
-        //            throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-        //                    "Failed to delete object " + targetPID.getPid(), e);
-        //        }
+        throw new NotImplementedException("Operation not supported");
     }
 
     /**
@@ -170,22 +89,7 @@ public void deleteContainer(String editIRI, AuthCredentials auth, SwordConfigura
     @Override
     public DepositReceipt useHeaders(String editIRI, Deposit deposit, AuthCredentials auth, SwordConfiguration config)
             throws SwordError, SwordServerException, SwordAuthException {
-
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        DepositReceipt receipt = new DepositReceipt();
-        receipt.setLocation(new IRI(editIRI));
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.editAccessControl, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to update object headers " + targetPID.getPid());
-        }
-
-        this.setInProgress(targetPID, deposit, receipt);
-
-        return receipt;
+        throw new NotImplementedException("Operation not supported");
     }
 
     /**
@@ -205,44 +109,6 @@ public boolean isStatementRequest(String editIRI, Map<String, String> accept, Au
     @Override
     public DepositReceipt getEntry(String editIRIString, Map<String, String> accept, AuthCredentials auth,
             SwordConfiguration configBase) throws SwordServerException, SwordError, SwordAuthException {
-
-        PID targetPID = extractPID(editIRIString, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        SwordConfigurationImpl config = (SwordConfigurationImpl) configBase;
-
-        if (!hasAccess(auth, targetPID, Permission.viewDescription, config)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to get deposit receipt " + targetPID.getPid());
-        }
-
-        DepositReceipt receipt = depositReportingUtil.retrieveDepositReceipt(targetPID, config);
-
-        return receipt;
-    }
-
-    private void setInProgress(PID targetPID, Deposit deposit, DepositReceipt receipt) throws SwordError {
-        //        String state = tripleStoreQueryService.fetchState(targetPID);
-        //        if (deposit.isInProgress() != Boolean.parseBoolean(state)) {
-        //            try {
-        //                log.debug("Updating active state of in-progress item");
-        //                managementClient.addLiteralStatement(targetPID, FedoraProperty.Active.getFragment(),
-        //                        FedoraProperty.Active.getNamespace(), "Active", null);
-        //                receipt.setVerboseDescription(targetPID.getPid() + " is " +
-        //                        ((deposit.isInProgress()) ? "" : "not")
-        //                        + " in-progress");
-        //            } catch (FedoraException e) {
-        //                throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-        //                      "Failed to update active state for "
-        //                        + targetPID.getPid());
-        //            }
-        //        }
-    }
-
-    public void setUipProcessor(UIPProcessor uipProcessor) {
-        this.uipProcessor = uipProcessor;
-    }
-
-    public void setDepositReportingUtil(DepositReportingUtil depositReportingUtil) {
-        this.depositReportingUtil = depositReportingUtil;
+        throw new NotImplementedException("Operation not supported");
     }
 }
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
index 5f09eb888..ec78071f0 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
@@ -78,11 +78,8 @@ public ServiceDocument getServiceDocument(String sdUri, AuthCredentials auth, Sw
             pid = RepositoryPaths.getContentRootPid();
         }
 
-        if (!hasAccess(auth, pid, Permission.viewDescription, configImpl)) {
-            LOG.debug("Insufficient privileges to access the service document for " + pid.getPid());
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to access the service document for " + pid.getPid());
-        }
+        assertHasAccess("Insufficient privileges to access the service document for " + pid.getRepositoryPath(),
+                pid, Permission.viewMetadata);
 
         LOG.debug("Retrieving service document for " + pid);
 
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
index 9f7fb8a66..3acfe19c1 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
@@ -17,8 +17,7 @@
 
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.commons.lang3.NotImplementedException;
 import org.swordapp.server.AuthCredentials;
 import org.swordapp.server.Statement;
 import org.swordapp.server.StatementManager;
@@ -27,12 +26,6 @@
 import org.swordapp.server.SwordError;
 import org.swordapp.server.SwordServerException;
 
-import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
-import edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil;
-import edu.unc.lib.dl.fedora.PID;
-import edu.unc.lib.dl.util.ErrorURIRegistry;
-
 /**
  *
  * @author bbpennel
@@ -40,49 +33,11 @@
  */
 public class StatementManagerImpl extends AbstractFedoraManager implements StatementManager {
 
-    private static Logger log = LoggerFactory.getLogger(StatementManagerImpl.class);
-
-    private DepositReportingUtil depositReportingUtil;
-
     @Override
     public Statement getStatement(String iri, Map<String, String> accept,
             AuthCredentials auth, SwordConfiguration config)
                     throws SwordServerException, SwordError, SwordAuthException {
 
-        PID targetPID = extractPID(iri, SwordConfigurationImpl.STATE_PATH + "/");
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.viewDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to retrieve statement for " + targetPID.getPid());
-        }
-
-        //        String label = tripleStoreQueryService.lookupLabel(targetPID);
-        //        String lastModifiedString = tripleStoreQueryService.fetchFirstBySubjectAndPredicate(targetPID,
-        //                ContentModelHelper.FedoraProperty.lastModifiedDate.toString());
-        //
-        //        Statement statement = new AtomStatementImpl(iri, "CDR", label, lastModifiedString);
-        //
-        //        if (lastModifiedString != null) {
-        //            try {
-        //                statement.setLastModified(DateTimeUtil.parseUTCToDate(lastModifiedString));
-        //            } catch (ParseException e) {
-        //                log.error("Could not parse last modified", e);
-        //            }
-        //        }
-        //        statement.setOriginalDeposits(depositReportingUtil.getOriginalDeposits(targetPID, configImpl));
-        //
-        //        statement.setResources(new ArrayList<ResourcePart>());
-        //
-        //        statement.setStates(new HashMap<String, String>());
-        //        statement.addState("Activity", tripleStoreQueryService.fetchState(targetPID));
-        //
-        //        return statement;
-        return null;
-    }
-
-    public void setDepositReportingUtil(DepositReportingUtil depositReportingUtil) {
-        this.depositReportingUtil = depositReportingUtil;
+        throw new NotImplementedException("Operation not supported");
     }
 }
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
index a03388e24..f2aee41c5 100644
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
@@ -15,153 +15,19 @@
  */
 package edu.unc.lib.dl.cdr.sword.server.util;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import org.apache.abdera.i18n.iri.IRI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.swordapp.server.DepositReceipt;
-import org.swordapp.server.OriginalDeposit;
 
 import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
 import edu.unc.lib.dl.fedora.PID;
 
 /**
+ * Utility for generating reports of SWORD deposits
  *
  * @author bbpennel
  *
  */
 public class DepositReportingUtil {
-    private static Logger log = LoggerFactory.getLogger(DepositReportingUtil.class);
-
-    //    private TripleStoreQueryService tripleStoreQueryService;
-    //    private AccessClient accessClient;
-
-    public static class OriginalDepositPair {
-        public String originalDepositURI;
-        public String mimetype;
-
-        public OriginalDepositPair(String originalDepositURI, String mimetype) {
-            this.originalDepositURI = originalDepositURI;
-            this.mimetype = mimetype;
-        }
-    }
-
-    public OriginalDepositPair getOriginalDeposit(PID pid, SwordConfigurationImpl config) {
-        //        List<String> originalDeposits = tripleStoreQueryService.fetchBySubjectAndPredicate(pid,
-        //                ContentModelHelper.Relationship.originalDeposit.toString());
-        //
-        //        if (originalDeposits.size() == 0) {
-        //            return null;
-        //        }
-        //
-        //        PID depositPID = new PID(originalDeposits.get(0));
-        //
-        //        Map<String, List<String>> depositTriples = tripleStoreQueryService.fetchAllTriples(depositPID);
-        //
-        //        // Get originalDeposit URI
-        //        List<String> values = depositTriples.get(ContentModelHelper.FedoraProperty.disseminates.toString());
-        //        if (values != null) {
-        //            for (String dissemination : values) {
-        //                if (dissemination.endsWith("/" + Datastream.DATA_MANIFEST.getName())) {
-        //                    return new OriginalDepositPair(config.getSwordPath()
-        //                            + SwordConfigurationImpl.EDIT_MEDIA_PATH
-        //                            + "/" + depositPID.getPid() + "/" + Datastream.DATA_MANIFEST.getName(),
-        //                              "text/xml");
-        //                }
-        //            }
-        //        }
-        //
-        //        // Use the objects datafile as its original deposit URI if there was no manifest
-        //        return new OriginalDepositPair(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/"
-        //                + pid.getPid() + "/" + Datastream.DATA_FILE.getName(),
-        //                tripleStoreQueryService.lookupSourceMimeType(pid));
-        return null;
-    }
-
-    public List<OriginalDeposit> getOriginalDeposits(PID pid, SwordConfigurationImpl config) {
-        List<OriginalDeposit> results = new ArrayList<>();
-
-        //        List<String> originalDeposits = tripleStoreQueryService.fetchBySubjectAndPredicate(pid,
-        //                ContentModelHelper.Relationship.originalDeposit.toString());
-        //
-        //        Date depositedOn = null;
-        //        String depositedBy = null;
-        //        String depositedOnBehalfOf = null;
-        //        String originalDepositURI = null;
-        //        String mimetype = null;
-        //        List<String> packageTypes = null;
-        //        List<String> values = null;
-        //        for (String originalDeposit : originalDeposits) {
-        //            PID depositPID = new PID(originalDeposit);
-        //            Map<String, List<String>> depositTriples =
-        //                tripleStoreQueryService.fetchAllTriples(depositPID);
-        //
-        //            // Get originalDeposit URI
-        //            values = depositTriples.get(ContentModelHelper.FedoraProperty.disseminates.toString());
-        //            if (values != null) {
-        //                for (String dissemination : values) {
-        //                    if (dissemination.endsWith("/" + Datastream.DATA_MANIFEST.getName())) {
-        //                        originalDepositURI = config.getSwordPath()
-        //                                + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/"
-        //                                + depositPID.getPid() + "/" + Datastream.DATA_MANIFEST.getName();
-        //                        mimetype = "text/xml";
-        //                        break;
-        //                    }
-        //                }
-        //            }
-        //
-        //            // Use the objects datafile as its original deposit URI if there was no manifest
-        //            if (originalDepositURI == null) {
-        //                originalDepositURI = config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH
-        //                        + "/" + pid.getPid() + "/" + Datastream.DATA_FILE.getName();
-        //                mimetype = tripleStoreQueryService.lookupSourceMimeType(pid);
-        //            }
-        //
-        //            // Get depositedOn value
-        //            values = depositTriples.get(ContentModelHelper.FedoraProperty.createdDate.toString());
-        //            if (values != null && values.size() > 0) {
-        //                String depositedOnString = depositTriples.get(ContentModelHelper.FedoraProperty
-        //                        .createdDate.toString()).get(0);
-        //                try {
-        //                    depositedOn = DateTimeUtil.parseUTCToDate(depositedOnString);
-        //                } catch (ParseException e) {
-        //                    log.error("Could not parse deposited on", e);
-        //                }
-        //            }
-        //
-        //            // Get package types
-        //            packageTypes = depositTriples.get(ContentModelHelper.CDRProperty.depositPackageType.toString());
-        //            values = depositTriples.get(ContentModelHelper.CDRProperty.depositPackageSubType.toString());
-        //            if (values != null && values.size() > 0) {
-        //                if (packageTypes == null) {
-        //                    packageTypes = new ArrayList<String>();
-        //                }
-        //                packageTypes.addAll(values);
-        //            }
-        //
-        //            // Get deposited by
-        //            values = depositTriples.get(ContentModelHelper.Relationship.depositedBy.toString());
-        //            if (values != null && values.size() > 0) {
-        //                PID depositedByPID = new PID(values.get(0));
-        //                depositedBy = tripleStoreQueryService.fetchFirstBySubjectAndPredicate(depositedByPID,
-        //                        ContentModelHelper.CDRProperty.onyen.toString());
-        //            }
-        //
-        //            // Get on behalf of
-        //            values = depositTriples.get(ContentModelHelper.CDRProperty.depositedOnBehalfOf.toString());
-        //            if (values != null && values.size() > 0) {
-        //                depositedOnBehalfOf = values.get(0);
-        //            }
-        //
-        //            OriginalDeposit deposit = new OriginalDeposit(originalDepositURI, packageTypes,
-        //                    depositedOn, depositedBy, depositedOnBehalfOf);
-        //            deposit.setMediaType(mimetype);
-        //            results.add(deposit);
-        //        }
-        return results;
-    }
 
     /**
      * Generates a DepositReceipt object for the specified PID.  This represents state of the target, how it has
@@ -185,70 +51,12 @@ public DepositReceipt retrieveDepositReceipt(PID targetPID, SwordConfigurationIm
      * @return
      */
     public DepositReceipt retrieveDepositReceipt(DepositReceipt receipt, PID targetPID, SwordConfigurationImpl config) {
-        IRI editIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getPid());
+        IRI editIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getId());
         receipt.setEditIRI(editIRI);
-        IRI swordEditIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getPid());
+        IRI swordEditIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getId());
         receipt.setSwordEditIRI(swordEditIRI);
         receipt.addEditMediaIRI(
-                new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" + targetPID.getPid()));
-
-        //Add in original deposit
-        OriginalDepositPair originalDeposit = getOriginalDeposit(targetPID, config);
-        if (originalDeposit != null) {
-            receipt.setOriginalDeposit(originalDeposit.originalDepositURI, originalDeposit.mimetype);
-        }
-
-        // Add in derived resources representing all of the datastreams on this object
-        //        Map<String,String> disseminators = tripleStoreQueryService.fetchDisseminatorMimetypes(targetPID);
-        //        for (Map.Entry<String,String> disseminator: disseminators.entrySet()) {
-        //            PID disseminatorPID = new PID(disseminator.getKey());
-        //            receipt.addDerivedResource(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" +
-        //                        disseminatorPID.getPid(), disseminator.getValue());
-        //        }
-        //
-        //        receipt.setSplashUri(config.getBasePath() + "record?id=" + targetPID.getPid());
-        //
-        //        receipt.setStatementURI("application/atom+xml;type=feed",
-        //                config.getSwordPath() + SwordConfigurationImpl.STATE_PATH + "/" + targetPID.getPid());
-        //
-        //        try {
-        //            MIMETypedStream metadataStream = null;
-        //            try {
-        //                metadataStream = accessClient.getDatastreamDissemination(targetPID,
-        //                        ContentModelHelper.Datastream.MD_DESCRIPTIVE.getName(), null);
-        //            } catch (NotFoundException notFound) {
-        //                // There was no MODS, which is okay, look for DC next
-        //            }
-        //
-        //            if (metadataStream == null) {
-        //                //If there is a DC stream instead, then add all its children
-        //                try {
-        //                    metadataStream = accessClient.getDatastreamDissemination(targetPID,
-        //                            ContentModelHelper.Datastream.DC.getName(), null);
-        //                    if (metadataStream != null) {
-        //                        Abdera abdera = new Abdera();
-        //                        Parser parser = abdera.getParser();
-        //                        Document<Element> entryDoc = parser.parse(new ByteArrayInputStream(
-        //                                metadataStream.getStream()));
-        //                        for (Element child: entryDoc.getRoot().getElements()) {
-        //                            receipt.addDublinCore(child.getQName().getLocalPart(), child.getText());
-        //                        }
-        //                    }
-        //                } catch (NotFoundException notFound) {
-        //                    // No DC either, so no metadata
-        //                }
-        //            } else {
-        //                // Build MODS as an Abdera entry and add it to the receipt entry.
-        //                Abdera abdera = new Abdera();
-        //                Parser parser = abdera.getParser();
-        //                Document<Element> entryDoc = parser.parse(
-        //                  new ByteArrayInputStream(metadataStream.getStream()));
-        //
-        //                receipt.getWrappedEntry().addExtension(entryDoc.getRoot());
-        //            }
-        //        } catch (FedoraException e) {
-        //            log.error("Error retrieving MD_DESCRIPTIVE for object " + targetPID.getPid(), e);
-        //        }
+                new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" + targetPID.getId()));
 
         return receipt;
     }
