diff --git a/its/ruling/src/test/resources/profile.xml b/its/ruling/src/test/resources/profile.xml
index 40683a02b..6e5469d2c 100644
--- a/its/ruling/src/test/resources/profile.xml
+++ b/its/ruling/src/test/resources/profile.xml
@@ -614,6 +614,11 @@
       <key>S2681</key> <!-- MultilineBlocksCurlyBracesCheck -->
       <priority>INFO</priority>
     </rule>
+    <rule>
+      <repositoryKey>php</repositoryKey>
+      <key>S2260</key> <!-- ParsingErrorCheck -->
+      <priority>INFO</priority>
+    </rule>
     <rule>
       <repositoryKey>php</repositoryKey>
       <key>S2918</key> <!-- call to ini_set -->
diff --git a/php-checks/src/main/java/org/sonar/php/checks/CheckList.java b/php-checks/src/main/java/org/sonar/php/checks/CheckList.java
index 86aa48c51..a99807b94 100644
--- a/php-checks/src/main/java/org/sonar/php/checks/CheckList.java
+++ b/php-checks/src/main/java/org/sonar/php/checks/CheckList.java
@@ -20,7 +20,6 @@
 package org.sonar.php.checks;
 
 import com.google.common.collect.ImmutableList;
-
 import java.util.List;
 
 public class CheckList {
@@ -144,6 +143,7 @@ private CheckList() {
       SleepFunctionUsageCheck.class,
       HardCodedCredentialsCheck.class,
       MultilineBlocksCurlyBracesCheck.class,
+      ParsingErrorCheck.class,
       IdenticalOperandsInBinaryExpressionCheck.class);
   }
 }
diff --git a/php-checks/src/main/java/org/sonar/php/checks/ParsingErrorCheck.java b/php-checks/src/main/java/org/sonar/php/checks/ParsingErrorCheck.java
new file mode 100644
index 000000000..420ea39af
--- /dev/null
+++ b/php-checks/src/main/java/org/sonar/php/checks/ParsingErrorCheck.java
@@ -0,0 +1,36 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010-2016 SonarSource SA
+ * mailto:contact AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+package org.sonar.php.checks;
+
+import org.sonar.check.Rule;
+import org.sonar.plugins.php.api.visitors.PHPVisitorCheck;
+import org.sonar.squidbridge.annotations.ActivatedByDefault;
+
+/**
+ * This class does nothing. It exists only to be present in the SonarQube profile and GUI.
+ * Issues for this class are created upfront, during the parsing.
+ */
+@Rule(
+  key = "S2260",
+  name = "Parsing error"
+)
+@ActivatedByDefault
+public class ParsingErrorCheck extends PHPVisitorCheck {
+}
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.html b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.html
new file mode 100644
index 000000000..fa2d88b85
--- /dev/null
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.html
@@ -0,0 +1,3 @@
+<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
+that do not parse but also to easily find out why they do not parse.</p>
+
diff --git a/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.json b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.json
new file mode 100644
index 000000000..b8074ff8a
--- /dev/null
+++ b/php-checks/src/main/resources/org/sonar/l10n/php/rules/php/S2260.json
@@ -0,0 +1,13 @@
+{
+  "title": "PHP parser failure",
+  "type": "CODE_SMELL",
+  "status": "ready",
+  "remediation": {
+    "func": "Constant\/Issue",
+    "constantCost": "30min"
+  },
+  "tags": [
+    "suspicious"
+  ],
+  "defaultSeverity": "Major"
+}
diff --git a/php-checks/src/test/java/org/sonar/php/checks/CheckListTest.java b/php-checks/src/test/java/org/sonar/php/checks/CheckListTest.java
index 4557d271e..e8540b5ad 100644
--- a/php-checks/src/test/java/org/sonar/php/checks/CheckListTest.java
+++ b/php-checks/src/test/java/org/sonar/php/checks/CheckListTest.java
@@ -54,11 +54,13 @@ public void count() {
   public void test() {
     List<Class> checks = CheckList.getChecks();
 
-    for (Class cls : checks) {
-      String testName = '/' + cls.getName().replace('.', '/') + "Test.class";
-      assertThat(getClass().getResource(testName))
-        .overridingErrorMessage("No test for " + cls.getSimpleName())
-        .isNotNull();
+    for (Class<?> cls : checks) {
+      if (cls != ParsingErrorCheck.class) {
+        String testName = '/' + cls.getName().replace('.', '/') + "Test.class";
+        assertThat(getClass().getResource(testName))
+          .overridingErrorMessage("No test for " + cls.getSimpleName())
+          .isNotNull();
+      }
     }
   }
 
diff --git a/php-frontend/src/test/java/org/sonar/php/PHPAnalyzerTest.java b/php-frontend/src/test/java/org/sonar/php/PHPAnalyzerTest.java
index b7b25dea0..2d3da6994 100644
--- a/php-frontend/src/test/java/org/sonar/php/PHPAnalyzerTest.java
+++ b/php-frontend/src/test/java/org/sonar/php/PHPAnalyzerTest.java
@@ -19,9 +19,10 @@
  */
 package org.sonar.php;
 
-import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
+import com.sonar.sslr.api.RecognitionException;
 import java.io.File;
+import java.io.IOException;
 import java.util.List;
 import org.apache.commons.io.FileUtils;
 import org.junit.Rule;
@@ -31,18 +32,29 @@
 import org.sonar.plugins.php.api.visitors.Issue;
 import org.sonar.plugins.php.api.visitors.PHPCheck;
 
+import static com.google.common.base.Charsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class PHPAnalyzerTest {
+
   @Rule
   public TemporaryFolder tmpFolder = new TemporaryFolder();
 
-  @Test
+  @Test(expected = RecognitionException.class)
+  public void parsing_failure_should_raise_an_exception() throws IOException {
+    PHPCheck check = new DummyCheck();
+    PHPAnalyzer analyzer = new PHPAnalyzer(UTF_8, ImmutableList.of(check));
+    File file = tmpFolder.newFile();
+    FileUtils.write(file, "<?php if(condition): ?>", UTF_8);
+
+    analyzer.nextFile(file);
+  }
+
   public void test_analyze() throws Exception {
     PHPCheck check = new DummyCheck();
-    PHPAnalyzer analyzer = new PHPAnalyzer(Charsets.UTF_8, ImmutableList.of(check));
-    File file =  tmpFolder.newFile();
-    FileUtils.write(file, "<?php $a = 1;");
+    PHPAnalyzer analyzer = new PHPAnalyzer(UTF_8, ImmutableList.of(check));
+    File file = tmpFolder.newFile();
+    FileUtils.write(file, "<?php $a = 1;", UTF_8);
 
     analyzer.nextFile(file);
     List<Issue> issues = analyzer.analyze();
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
index 9ed0116a9..6eb6c0302 100644
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
@@ -30,6 +30,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -51,6 +52,7 @@
 import org.sonar.api.rule.RuleKey;
 import org.sonar.php.PHPAnalyzer;
 import org.sonar.php.checks.CheckList;
+import org.sonar.php.checks.ParsingErrorCheck;
 import org.sonar.php.metrics.FileMeasures;
 import org.sonar.plugins.php.api.Php;
 import org.sonar.plugins.php.api.visitors.Issue;
@@ -74,6 +76,8 @@
   private final PHPChecks checks;
   private final NoSonarFilter noSonarFilter;
 
+  private RuleKey parsingErrorRuleKey;
+
   public PHPSensor(FileSystem fileSystem, FileLinesContextFactory fileLinesContextFactory,
                    CheckFactory checkFactory, NoSonarFilter noSonarFilter) {
     this(fileSystem, fileLinesContextFactory, checkFactory, noSonarFilter, null);
@@ -91,6 +95,8 @@ public PHPSensor(FileSystem fileSystem, FileLinesContextFactory fileLinesContext
     this.mainFilePredicate = this.fileSystem.predicates().and(
       this.fileSystem.predicates().hasType(InputFile.Type.MAIN),
       this.fileSystem.predicates().hasLanguage(Php.KEY));
+
+    parsingErrorRuleKey = getParsingErrorRuleKey();
   }
 
   @Override
@@ -165,6 +171,7 @@ private void analyseFile(SensorContext context, PHPAnalyzer phpAnalyzer, InputFi
       checkInterrupted(e);
       LOG.error("Unable to parse file: " + inputFile.absolutePath());
       LOG.error(e.getMessage());
+      saveParsingIssue(context, e, inputFile);
       return;
     } catch (Exception e) {
       checkInterrupted(e);
@@ -207,6 +214,28 @@ private void saveNewFileMeasures(SensorContext context, FileMeasures fileMeasure
     noSonarFilter.noSonarInFile(inputFile, fileMeasures.getNoSonarLines());
   }
 
+  /**
+   * Creates and saves an issue for a parsing error.
+   */
+  private void saveParsingIssue(SensorContext context, RecognitionException e, InputFile inputFile) {
+    if (parsingErrorRuleKey != null) {
+      NewIssue issue = context.newIssue();
+
+      NewIssueLocation location = issue.newLocation()
+        .message(e.getMessage())
+        .on(inputFile);
+
+      if (e.getLine() > 0) {
+        location.at(inputFile.selectLine(e.getLine()));
+      }
+
+      issue
+        .forRule(parsingErrorRuleKey)
+        .at(location)
+        .save();
+    }
+  }
+
   private void saveIssues(SensorContext context, List<Issue> issues, InputFile inputFile) {
     for (Issue phpIssue : issues) {
       RuleKey ruleKey = checks.ruleKeyFor(phpIssue.check());
@@ -238,4 +267,13 @@ public String toString() {
     return getClass().getSimpleName();
   }
 
+  private RuleKey getParsingErrorRuleKey() {
+    List<RuleKey> keys = checks.all().stream()
+      .filter(check -> check instanceof ParsingErrorCheck)
+      .map(check -> checks.ruleKeyFor((ParsingErrorCheck) check))
+      .collect(Collectors.toList());
+
+    return keys.isEmpty() ? null : keys.get(0);
+  }
+
 }
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileTest.java
index 17143ce6c..02dd0b786 100644
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPProfileTest.java
@@ -46,9 +46,9 @@ public void should_create_sonar_way_profile() {
 
     assertThat(profile.getLanguage()).isEqualTo(Php.KEY);
     assertThat(profile.getName()).isEqualTo(CheckList.SONAR_WAY_PROFILE);
-    assertThat(profile.getActiveRulesByRepository(CheckList.REPOSITORY_KEY)).hasSize(63);
+    assertThat(profile.getActiveRulesByRepository(CheckList.REPOSITORY_KEY)).hasSize(64);
     assertThat(validation.hasErrors()).isFalse();
-    assertThat(profile.getActiveRules()).hasSize(64);
+    assertThat(profile.getActiveRules()).hasSize(65);
     assertThat(profile.getActiveRules()).extracting("ruleKey").contains("DuplicatedBlocks");
   }
 
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
index 52cdc3c3f..be3a016b9 100644
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
@@ -31,15 +31,17 @@
 import org.junit.rules.ExpectedException;
 import org.sonar.api.batch.fs.InputFile;
 import org.sonar.api.batch.fs.InputFile.Type;
+import org.sonar.api.batch.fs.TextRange;
 import org.sonar.api.batch.fs.internal.DefaultFileSystem;
 import org.sonar.api.batch.fs.internal.DefaultInputFile;
 import org.sonar.api.batch.fs.internal.FileMetadata;
 import org.sonar.api.batch.rule.ActiveRules;
 import org.sonar.api.batch.rule.CheckFactory;
+import org.sonar.api.batch.rule.internal.ActiveRulesBuilder;
 import org.sonar.api.batch.sensor.SensorContext;
 import org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor;
 import org.sonar.api.batch.sensor.internal.SensorContextTester;
-import org.sonar.api.config.Settings;
+import org.sonar.api.batch.sensor.issue.Issue;
 import org.sonar.api.internal.google.common.base.Charsets;
 import org.sonar.api.issue.NoSonarFilter;
 import org.sonar.api.measures.CoreMetrics;
@@ -64,9 +66,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 public class PHPSensorTest {
@@ -115,11 +115,9 @@ public String repositoryKey() {
   @Before
   public void setUp() {
     fileSystem = PhpTestUtils.getDefaultFileSystem();
-    FileLinesContextFactory fileLinesContextFactory = mock(FileLinesContextFactory.class);
-    FileLinesContext fileLinesContext = mock(FileLinesContext.class);
-    when(fileLinesContextFactory.createFor(any(InputFile.class))).thenReturn(fileLinesContext);
-
+    FileLinesContextFactory fileLinesContextFactory = createFileLinesContextFactory();
     CheckFactory checkFactory = new CheckFactory(mock(ActiveRules.class));
+
     sensor = new PHPSensor(fileSystem, fileLinesContextFactory, checkFactory, new NoSonarFilter(), CUSTOM_RULES);
   }
 
@@ -179,14 +177,44 @@ private void checkNoSonar(String componentKey, int line, boolean expected) throw
   }
 
   @Test
-  public void parse_error() throws Exception {
-    SensorContext context = mock(SensorContext.class);
-    when(context.settings()).thenReturn(new Settings());
+  public void empty_file_should_raise_no_issue() throws Exception {
+    analyseSingleFile(context, "empty.php");
+
+    assertThat(context.allIssues()).as("No issue must be raised").hasSize(0);
+  }
+
+  @Test
+  public void parsing_error_should_raise_an_issue_if_check_rule_is_activated() throws Exception {
+    // Add 1 rule, in order to active the rule of parsing errors
+    FileLinesContextFactory fileLinesContextFactory = createFileLinesContextFactory();
+    String parsingErrorCheckKey = "S2260";
+    ActiveRules activeRules = (new ActiveRulesBuilder())
+      .create(RuleKey.of(CheckList.REPOSITORY_KEY, parsingErrorCheckKey))
+      .setName(parsingErrorCheckKey)
+      .activate()
+      .build();
+    CheckFactory checkFactory = new CheckFactory(activeRules);
+    sensor = new PHPSensor(fileSystem, fileLinesContextFactory, checkFactory, new NoSonarFilter(), CUSTOM_RULES);
+
     analyseSingleFile(context, "parseError.php");
 
-    // check that the context is never used, except for a few calls to method settings()
-    verify(context, times(4)).settings();
-    verifyZeroInteractions(context);
+    assertThat(context.allIssues()).as("One issue must be raised").hasSize(1);
+
+    Issue issue = context.allIssues().iterator().next();
+    assertThat(issue.ruleKey().rule()).as("A parsing error must be raised").isEqualTo("S2260");
+
+    TextRange range = issue.primaryLocation().textRange();
+    assertThat(range.start().line()).isEqualTo(2);
+    assertThat(range.start().lineOffset()).isEqualTo(0);
+    assertThat(range.end().line()).isEqualTo(2);
+    assertThat(range.end().lineOffset()).isEqualTo(16);
+  }
+
+  @Test
+  public void parsing_error_should_raise_no_issue_if_check_rule_is_not_activated() throws Exception {
+    analyseSingleFile(context, "parseError.php");
+
+    assertThat(context.allIssues()).as("One issue must be raised").isEmpty();
   }
 
   private void analyseSingleFile(SensorContext context, String fileName) {
@@ -228,6 +256,13 @@ public void cancelled_analysis_causing_recognition_exception() throws Exception
     analyseFileWithException(check, inputFile("PHPSquidSensor.php"), "Analysis cancelled");
   }
 
+  private FileLinesContextFactory createFileLinesContextFactory() {
+    FileLinesContextFactory fileLinesContextFactory = mock(FileLinesContextFactory.class);
+    FileLinesContext fileLinesContext = mock(FileLinesContext.class);
+    when(fileLinesContextFactory.createFor(any(InputFile.class))).thenReturn(fileLinesContext);
+    return fileLinesContextFactory;
+  }
+
   private void analyseFileWithException(PHPCheck check, InputFile inputFile, String expectedMessageSubstring) {
     PHPAnalyzer phpAnalyzer = new PHPAnalyzer(StandardCharsets.UTF_8, ImmutableList.of(check));
     thrown.expect(AnalysisException.class);
diff --git a/sonar-php-plugin/src/test/resources/empty.php b/sonar-php-plugin/src/test/resources/empty.php
new file mode 100644
index 000000000..e69de29bb
