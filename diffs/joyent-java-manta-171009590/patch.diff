diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
index b775cf96..8f0bdada 100644
--- a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
@@ -14,6 +14,7 @@
 import com.joyent.manta.exception.MantaClientHttpResponseException;
 import com.joyent.manta.exception.MantaException;
 import com.joyent.manta.exception.MantaIOException;
+import com.joyent.manta.exception.MantaMultipartException;
 import org.apache.commons.lang3.SerializationUtils;
 import org.apache.http.HttpStatus;
 import org.slf4j.Logger;
@@ -31,6 +32,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Stream;
 
 import static com.joyent.manta.client.MantaClient.SEPARATOR;
@@ -608,43 +610,72 @@ public void abort(final UUID id) throws IOException {
      * Completes a multipart transfer by assembling the parts on Manta.
      *
      * @param upload multipart upload object
-     * @param parts stream of multipart part objects
+     * @param partsStream stream of multipart part objects
      * @throws java.io.IOException thrown if there is a problem connecting to Manta
      */
     public void complete(final MantaMultipartUpload upload,
-                         final Stream<? extends MantaMultipartUploadTuple> parts)
+                         final Stream<? extends MantaMultipartUploadTuple> partsStream)
             throws IOException {
         if (upload == null) {
             throw new IllegalArgumentException("Upload must be present");
         }
 
-        complete(upload.getId(), parts);
+        complete(upload.getId(), partsStream);
     }
 
     /**
      * Completes a multipart transfer by assembling the parts on Manta.
      *
      * @param id multipart upload id
-     * @param parts stream of multipart part objects
+     * @param partsStream stream of multipart part objects
      * @throws IOException thrown if there is a problem connecting to Manta
      */
     public void complete(final UUID id,
-                         final Stream<? extends MantaMultipartUploadTuple> parts)
+                         final Stream<? extends MantaMultipartUploadTuple> partsStream)
             throws IOException {
         final String uploadDir = multipartUploadDir(id);
         final MultipartMetadata metadata = downloadMultipartMetadata(id);
 
+        final Map<String, MantaMultipartUploadPart> listing = new HashMap<>();
+        try (Stream<MantaMultipartUploadPart> listStream = listParts(id)
+                .limit(MAX_PARTS)) {
+            listStream.forEach(p -> listing.put(p.getEtag(), p));
+        }
+
         final String path = metadata.getPath();
 
         final StringBuilder jobExecText = new StringBuilder("mget -q ");
 
-        // TODO: Validate parts and match up etags with path
+        List<MantaMultipartUploadTuple> missingTuples = new ArrayList<>();
+
+        final AtomicInteger count = new AtomicInteger(0);
+        partsStream.sorted().forEach(part -> {
+            if (count.incrementAndGet() > MAX_PARTS) {
+                String msg = String.format("Too many multipart parts specified [%d]. "
+                        + "The maximum number of parts is %d", MAX_PARTS, count.get());
+                throw new IllegalArgumentException(msg);
+            }
+
+            final MantaMultipartUploadPart o = listing.get(part.getEtag());
+
+            if (o != null) {
+                jobExecText.append(o.getObjectPath()).append(" ");
+            } else {
+                missingTuples.add(part);
+            }
+        });
+
+        if (!missingTuples.isEmpty()) {
+            final MantaMultipartException e = new MantaMultipartException(
+                    "Multipart part(s) specified couldn't be found");
 
-        try (Stream<MantaMultipartUploadPart> parts = listParts(id).sorted()) {
-            parts.forEach(part ->
-                    jobExecText.append(part.getObjectPath())
-                            .append(" ")
-            );
+            int missingCount = 0;
+            for (MantaMultipartUploadTuple missingPart : missingTuples) {
+                String key = String.format("missing_part_%d", ++missingCount);
+                e.setContextValue(key, missingPart.toString());
+            }
+
+            throw e;
         }
 
         jobExecText.append("| mput -q ")
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java
index a770b187..298197ab 100644
--- a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java
@@ -6,7 +6,6 @@
 import org.apache.commons.lang3.builder.ToStringBuilder;
 
 import java.io.Serializable;
-import java.util.Objects;
 
 
 /**
@@ -62,31 +61,6 @@ protected String getObjectPath() {
         return objectPath;
     }
 
-    @Override
-    public boolean equals(final Object that) {
-        if (this == that) {
-            return true;
-        }
-
-        if (that == null || getClass() != that.getClass()) {
-            return false;
-        }
-
-        if (!super.equals(that)) {
-            return false;
-        }
-
-        final MantaMultipartUploadPart part = (MantaMultipartUploadPart) that;
-
-        return Objects.equals(objectPath, part.objectPath)
-               && Objects.equals(length, part.length);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(super.hashCode(), objectPath, length);
-    }
-
     @Override
     public String toString() {
         return new ToStringBuilder(this)
diff --git a/java-manta-client/src/main/java/com/joyent/manta/exception/MantaMultipartException.java b/java-manta-client/src/main/java/com/joyent/manta/exception/MantaMultipartException.java
new file mode 100644
index 00000000..5c6eb552
--- /dev/null
+++ b/java-manta-client/src/main/java/com/joyent/manta/exception/MantaMultipartException.java
@@ -0,0 +1,40 @@
+package com.joyent.manta.exception;
+
+/**
+ * General exception type for errors relating to multipart uploads.
+ *
+ * @since 2.5.0
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ */
+public class MantaMultipartException extends MantaClientException {
+
+    private static final long serialVersionUID = -1931282527258322479L;
+
+    /**
+     * Create an empty exception.
+     */
+    public MantaMultipartException() {
+    }
+
+    /**
+     * @param message The error message.
+     */
+    public MantaMultipartException(final String message) {
+        super(message);
+    }
+
+    /**
+     * @param cause The cause of the exception.
+     */
+    public MantaMultipartException(final Throwable cause) {
+        super(cause);
+    }
+
+    /**
+     * @param message The error message.
+     * @param cause The cause.
+     */
+    public MantaMultipartException(final String message, final Throwable cause) {
+        super(message, cause);
+    }
+}
diff --git a/java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartIT.java b/java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartManagerIT.java
similarity index 88%
rename from java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartIT.java
rename to java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartManagerIT.java
index 47c42d3f..8cca9def 100644
--- a/java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartIT.java
+++ b/java-manta-it/src/test/java/com/joyent/manta/client/multipart/MantaMultipartManagerIT.java
@@ -41,7 +41,7 @@
 import static org.testng.Assert.fail;
 
 @Test
-public class MantaMultipartIT {
+public class MantaMultipartManagerIT {
     private MantaClient mantaClient;
     private MantaMultipartManager multipart;
 
@@ -102,16 +102,20 @@ public void canUploadSmallMultipartString() throws IOException {
         final String path = testPathPrefix + name;
 
         final UUID uploadId = multipart.initiateUpload(path).getId();
+        final ArrayList<MantaMultipartUploadTuple> uploadedParts =
+                new ArrayList<>();
 
         for (int i = 0; i < parts.length; i++) {
             String part = parts[i];
             int partNumber = i + 1;
-            multipart.uploadPart(uploadId, partNumber, part);
+            MantaMultipartUploadTuple uploaded = multipart.uploadPart(uploadId, partNumber, part);
+            uploadedParts.add(uploaded);
         }
 
         multipart.validateThereAreNoMissingParts(uploadId);
         Instant start = Instant.now();
-        multipart.complete(uploadId);
+        multipart.complete(uploadId, uploadedParts.stream());
+
         multipart.waitForCompletion(uploadId);
         Instant end = Instant.now();
 
@@ -145,14 +149,18 @@ public void canStoreContentType() throws IOException {
                 .setContentType("text/plain");
         final UUID uploadId = multipart.initiateUpload(path, null, headers).getId();
 
+        final ArrayList<MantaMultipartUploadTuple> uploadedParts =
+                new ArrayList<>();
+
         for (int i = 0; i < parts.length; i++) {
             String part = parts[i];
             int partNumber = i + 1;
-            multipart.uploadPart(uploadId, partNumber, part);
+            MantaMultipartUploadTuple uploaded = multipart.uploadPart(uploadId, partNumber, part);
+            uploadedParts.add(uploaded);
         }
 
         multipart.validateThereAreNoMissingParts(uploadId);
-        multipart.complete(uploadId);
+        multipart.complete(uploadId, uploadedParts.stream());
         multipart.waitForCompletion(uploadId);
 
         MantaObjectResponse head = mantaClient.head(path);
@@ -177,14 +185,18 @@ public void canStoreMetadata() throws IOException {
 
         final UUID uploadId = multipart.initiateUpload(path, metadata).getId();
 
+        final ArrayList<MantaMultipartUploadPart> uploadedParts =
+                new ArrayList<>();
+
         for (int i = 0; i < parts.length; i++) {
             String part = parts[i];
             int partNumber = i + 1;
-            multipart.uploadPart(uploadId, partNumber, part);
+            MantaMultipartUploadPart uploaded = multipart.uploadPart(uploadId, partNumber, part);
+            uploadedParts.add(uploaded);
         }
 
         multipart.validateThereAreNoMissingParts(uploadId);
-        multipart.complete(uploadId);
+        multipart.complete(uploadId, uploadedParts.stream());
         multipart.waitForCompletion(uploadId);
 
         MantaMetadata remoteMetadata = mantaClient.head(path).getMetadata();
@@ -211,15 +223,19 @@ public void canUpload5MBMultipartBinary() throws IOException {
 
         final MantaMultipartUpload upload = multipart.initiateUpload(path);
 
+        final ArrayList<MantaMultipartUploadTuple> uploadedParts =
+                new ArrayList<>();
+
         for (int i = 0; i < parts.length; i++) {
             File part = parts[i];
             int partNumber = i + 1;
-            multipart.uploadPart(upload, partNumber, part);
+            MantaMultipartUploadTuple uploaded = multipart.uploadPart(upload, partNumber, part);
+            uploadedParts.add(uploaded);
         }
 
         multipart.validateThereAreNoMissingParts(upload);
         Instant start = Instant.now();
-        multipart.complete(upload);
+        multipart.complete(upload, uploadedParts.stream());
         multipart.waitForCompletion(upload);
         Instant end = Instant.now();
 
@@ -252,14 +268,18 @@ public void canAbortMultipartBinary() throws IOException {
 
         final UUID uploadId = multipart.initiateUpload(path).getId();
 
+        final ArrayList<MantaMultipartUploadTuple> uploadedParts =
+                new ArrayList<>();
+
         for (int i = 0; i < parts.length; i++) {
             File part = parts[i];
             int partNumber = i + 1;
-            multipart.uploadPart(uploadId, partNumber, part);
+            MantaMultipartUploadTuple uploaded = multipart.uploadPart(uploadId, partNumber, part);
+            uploadedParts.add(uploaded);
         }
 
         multipart.validateThereAreNoMissingParts(uploadId);
-        multipart.complete(uploadId);
+        multipart.complete(uploadId, uploadedParts.stream());
 
         Instant start = Instant.now();
         multipart.abort(uploadId);
diff --git a/java-manta-it/src/test/resources/logback-test.xml b/java-manta-it/src/test/resources/logback-test.xml
index 6a4f7050..39eebb04 100644
--- a/java-manta-it/src/test/resources/logback-test.xml
+++ b/java-manta-it/src/test/resources/logback-test.xml
@@ -15,7 +15,7 @@
     <logger name="com.joyent" level="warn" />
     <!-- lower these to debug in order to enable most logs -->
     <logger name="com.joyent.manta.client.MantaClient" level="error" />
-    <logger name="com.joyent.manta.client.multipart.MantaMultipartIT" level="info" />
+    <logger name="com.joyent.manta.client.multipart.MantaMultipartManagerIT" level="info" />
     <logger name="com.joyent.manta.client.multipart.MantaMultipartManager" level="debug" />
     <logger name="com.joyent.manta.com.google.api.client.http" level="error" />
     <logger name="com.joyent.manta.org.apache" level="error" />
