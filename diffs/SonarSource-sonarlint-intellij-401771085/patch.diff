diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
index d4aed83f..7034875a 100644
--- a/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RuleConfigurationPanel.java
@@ -19,6 +19,13 @@
  */
 package org.sonarlint.intellij.config.global.rules;
 
+import com.intellij.ide.CommonActionsManager;
+import com.intellij.ide.DefaultTreeExpander;
+import com.intellij.ide.TreeExpander;
+import com.intellij.openapi.actionSystem.ActionManager;
+import com.intellij.openapi.actionSystem.ActionPlaces;
+import com.intellij.openapi.actionSystem.ActionToolbar;
+import com.intellij.openapi.actionSystem.DefaultActionGroup;
 import com.intellij.ui.BrowserHyperlinkListener;
 import com.intellij.ui.FilterComponent;
 import com.intellij.ui.IdeBorderFactory;
@@ -37,9 +44,7 @@
 import java.awt.GridBagLayout;
 import java.io.IOException;
 import java.io.StringReader;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
@@ -47,7 +52,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
-import javax.annotation.CheckForNull;
 import javax.annotation.Nullable;
 import javax.swing.JButton;
 import javax.swing.JComponent;
@@ -69,6 +73,8 @@
   private JPanel panel;
   private RulesTreeTableModel model;
   private FilterComponent filterComponent;
+  private TreeExpander myTreeExpander;
+  private RulesFilterModel filterModel = new RulesFilterModel(this::updateModel);
 
   private Map<String, Boolean> currentActivationByRuleKey;
 
@@ -108,49 +114,34 @@ private void getIncludedAndExcluded(Set<String> included, Set<String> excluded)
   }
 
   private void saveCurrentActivation() {
-    currentActivationByRuleKey = model.getCurrentRuleActivation();
-  }
-
-  private static boolean filter(RuleDetails ruleDetails, @Nullable List<String> filter) {
-    if (filter == null || filter.isEmpty()) {
-      return true;
-    }
-
-    List<String> split = tokenize(ruleDetails.getName());
-    return Collections.indexOfSubList(split, filter) != -1;
-  }
-
-  @CheckForNull
-  private static List<String> tokenize(@Nullable String str) {
-    if (str == null || str.isEmpty()) {
-      return null;
-    }
-    String lower = str.toLowerCase(Locale.US);
-    return Arrays.asList(lower.split("\\s"));
+    model.saveCurrentRuleActivation(currentActivationByRuleKey);
   }
 
   @Override public void load(SonarLintGlobalSettings settings) {
+    filterModel.reset(false);
     filterComponent.reset();
+
     currentActivationByRuleKey = engine.getAllRuleDetails().stream()
       .collect(Collectors.toMap(RuleDetails::getKey, r -> loadRuleActivation(settings, r)));
     updateModel();
   }
 
   private void updateModel() {
-    List<String> filter = tokenize(filterComponent.getFilter());
-
-    Collection<RuleDetails> filteredRules = engine.getAllRuleDetails();
-    Map<String, List<RuleDetails>> rulesByLanguage = filteredRules.stream()
-      .filter(r -> filter(r, filter))
-      .collect(Collectors.groupingBy(RuleDetails::getLanguage));
+    saveCurrentActivation();
+    filterComponent.getTextEditor().setText(filterModel.getText());
+    Collection<RuleDetails> ruleDetails = engine.getAllRuleDetails();
+    Map<String, List<RulesTreeNode.Rule>> rulesByLanguage = ruleDetails.stream()
+      .map(r -> new RulesTreeNode.Rule(r, currentActivationByRuleKey.get(r.getKey())))
+      .filter(r -> filterModel.filter(r))
+      .collect(Collectors.groupingBy(RulesTreeNode.Rule::language));
 
     RulesTreeNode rootNode = (RulesTreeNode) model.getRoot();
     rootNode.removeAllChildren();
 
-    for (Map.Entry<String, List<RuleDetails>> e : rulesByLanguage.entrySet()) {
+    for (Map.Entry<String, List<RulesTreeNode.Rule>> e : rulesByLanguage.entrySet()) {
       RulesTreeNode.Language languageNode = new RulesTreeNode.Language(e.getKey());
-      for (RuleDetails ruleDetails : e.getValue()) {
-        languageNode.add(new RulesTreeNode.Rule(ruleDetails, currentActivationByRuleKey.get(ruleDetails.getKey())));
+      for (RulesTreeNode.Rule r : e.getValue()) {
+        languageNode.add(r);
       }
       model.refreshLanguageActivation(languageNode);
       rootNode.add(languageNode);
@@ -158,6 +149,9 @@ private void updateModel() {
 
     TreeUtil.sort(rootNode, Comparator.comparing(Object::toString));
     model.reload();
+    if (!filterModel.isEmpty()) {
+      TreeUtil.expandAll(table.getTree());
+    }
   }
 
   private static boolean loadRuleActivation(SonarLintGlobalSettings settings, RuleDetails ruleDetails) {
@@ -187,36 +181,27 @@ private void setDescription(@Nullable RulesTreeNode.Rule rule) {
     }
   }
 
-  private void createUIComponents() {
-    panel = new JPanel(new GridBagLayout());
-    // filter
-    filterComponent = new FilterComponent("sonarlint_rule_filter", 10) {
-      @Override public void filter() {
-        String filter = getFilter();
-        saveCurrentActivation();
-        updateModel();
-        if (filter != null && !filter.isEmpty()) {
-          TreeUtil.expandAll(table.getTree());
-        }
-      }
-    };
-    filterComponent.setPreferredSize(new Dimension(20, filterComponent.getPreferredSize().height));
-    GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 0.5, 0,
-      GridBagConstraints.BASELINE_TRAILING, GridBagConstraints.HORIZONTAL, JBUI.insets(5, 0, 2, 10), 0, 0);
-    panel.add(filterComponent, gbc);
+  private ActionToolbar createTreeToolbarPanel() {
+    DefaultActionGroup actions = new DefaultActionGroup();
 
-    // top button
-    JButton restoreDefaults = new JButton("Restore defaults");
-    restoreDefaults.addActionListener(l -> model.restoreDefaults());
+    actions.add(new RulesFilterAction(filterModel));
+    actions.addSeparator();
 
-    gbc = new GridBagConstraints(1, 0, 1, 1, 1, 0,
-      GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, JBUI.insets(5, 0, 2, 10), 0, 0);
-    panel.add(restoreDefaults, gbc);
+    CommonActionsManager actionManager = CommonActionsManager.getInstance();
+    actions.add(actionManager.createExpandAllAction(myTreeExpander, table));
+    actions.add(actionManager.createCollapseAllAction(myTreeExpander, table));
+    ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, actions, true);
+    actionToolbar.setTargetComponent(panel);
+    return actionToolbar;
+  }
+
+  private void createUIComponents() {
+    panel = new JPanel(new GridBagLayout());
 
     // create tree table
     model = new RulesTreeTableModel(new RulesTreeNode.Root());
     table = new RulesTreeTable(model);
-    table.setTreeCellRenderer(new RulesTreeTableRenderer(() -> filterComponent.getFilter()));
+    table.setTreeCellRenderer(new RulesTreeTableRenderer(() -> filterModel.getText()));
     table.setRootVisible(false);
     UIUtil.setLineStyleAngled(table.getTree());
     TreeUtil.installActions(table.getTree());
@@ -242,6 +227,41 @@ private void createUIComponents() {
     scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
     scrollPane.setBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM + SideBorder.LEFT + SideBorder.TOP));
 
+    // filters
+    myTreeExpander = new DefaultTreeExpander(table.getTree()) {
+      @Override
+      public boolean canExpand() {
+        return table.isShowing();
+      }
+
+      @Override
+      public boolean canCollapse() {
+        return table.isShowing();
+      }
+    };
+
+    filterComponent = new FilterComponent("sonarlint_rule_filter", 10) {
+      @Override public void filter() {
+        filterModel.setText(getFilter());
+      }
+    };
+    filterComponent.setPreferredSize(new Dimension(20, filterComponent.getPreferredSize().height));
+    GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 0.5, 0,
+      GridBagConstraints.BASELINE_TRAILING, GridBagConstraints.HORIZONTAL, JBUI.insets(5, 0, 2, 10), 0, 0);
+    panel.add(filterComponent, gbc);
+
+    gbc = new GridBagConstraints(1, 0, 1, 1, 0.5, 0,
+      GridBagConstraints.BASELINE_TRAILING, GridBagConstraints.HORIZONTAL, JBUI.insets(5, 0, 2, 10), 0, 0);
+    panel.add(createTreeToolbarPanel().getComponent(), gbc);
+
+    // top button
+    JButton restoreDefaults = new JButton("Restore defaults");
+    restoreDefaults.addActionListener(l -> model.restoreDefaults());
+
+    gbc = new GridBagConstraints(2, 0, 1, 1, 1, 0,
+      GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, JBUI.insets(5, 0, 2, 10), 0, 0);
+    panel.add(restoreDefaults, gbc);
+
     // description pane
     descriptionBrowser = new JEditorPane(UIUtil.HTML_MIME, "<html><body></body></html>");
     descriptionBrowser.setEditable(false);
@@ -258,7 +278,7 @@ private void createUIComponents() {
     mainSplitter.setFirstComponent(scrollPane);
     mainSplitter.setSecondComponent(descriptionPanel);
 
-    gbc = new GridBagConstraints(0, 1, 2, 1, 1.0, 1.0,
+    gbc = new GridBagConstraints(0, 1, 3, 1, 1.0, 1.0,
       GridBagConstraints.CENTER, GridBagConstraints.BOTH, JBUI.insets(5, 0, 2, 10), 0, 0);
     panel.add(mainSplitter, gbc);
   }
diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterAction.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterAction.java
new file mode 100644
index 00000000..0fdc9172
--- /dev/null
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterAction.java
@@ -0,0 +1,83 @@
+/*
+ * SonarLint for IntelliJ IDEA
+ * Copyright (C) 2015 SonarSource
+ * sonarlint@sonarsource.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonarlint.intellij.config.global.rules;
+
+import com.intellij.icons.AllIcons;
+import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.intellij.openapi.actionSystem.DefaultActionGroup;
+import com.intellij.openapi.actionSystem.Presentation;
+import com.intellij.openapi.actionSystem.Toggleable;
+import com.intellij.openapi.actionSystem.ex.CheckboxAction;
+import com.intellij.openapi.project.DumbAware;
+import com.intellij.openapi.project.DumbAwareAction;
+import java.util.function.Consumer;
+import java.util.function.Supplier;
+import org.jetbrains.annotations.NotNull;
+
+class RulesFilterAction extends DefaultActionGroup implements Toggleable, DumbAware {
+  private final RulesFilterModel model;
+
+  RulesFilterAction(RulesFilterModel model) {
+    super("Filter Rules", true);
+    this.model = model;
+    getTemplatePresentation().setIcon(AllIcons.General.Filter);
+    add(new ResetFilterAction());
+    addSeparator();
+    add(new FilterCheckboxAction("Show Only Enabled", model::setShowOnlyEnabled, model::isShowOnlyEnabled));
+    add(new FilterCheckboxAction("Show Only Disabled", model::setShowOnlyDisabled, model::isShowOnlyDisabled));
+    add(new FilterCheckboxAction("Show Only Changed", model::setShowOnlyChanged, model::isShowOnlyChanged));
+  }
+
+  private static class FilterCheckboxAction extends CheckboxAction implements DumbAware {
+    private final Consumer<Boolean> setter;
+    private final Supplier<Boolean> getter;
+
+    FilterCheckboxAction(String label, Consumer<Boolean> setter, Supplier<Boolean> getter) {
+      super(label);
+      this.setter = setter;
+      this.getter = getter;
+    }
+
+    @Override public boolean isSelected(AnActionEvent e) {
+      return getter.get();
+    }
+
+    @Override public void setSelected(AnActionEvent e, boolean state) {
+      setter.accept(state);
+    }
+  }
+
+  private class ResetFilterAction extends DumbAwareAction {
+    ResetFilterAction() {
+      super("Reset Filter");
+    }
+
+    @Override
+    public void actionPerformed(@NotNull AnActionEvent e) {
+      model.reset(true);
+    }
+
+    @Override
+    public void update(@NotNull AnActionEvent e) {
+      final Presentation presentation = e.getPresentation();
+      presentation.setEnabled(!model.isEmpty());
+    }
+  }
+}
diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterModel.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterModel.java
new file mode 100644
index 00000000..57cf8d64
--- /dev/null
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesFilterModel.java
@@ -0,0 +1,131 @@
+/*
+ * SonarLint for IntelliJ IDEA
+ * Copyright (C) 2015 SonarSource
+ * sonarlint@sonarsource.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonarlint.intellij.config.global.rules;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import javax.annotation.CheckForNull;
+import javax.annotation.Nullable;
+
+public class RulesFilterModel {
+  private final Runnable onChange;
+
+  private boolean showOnlyChanged;
+  private boolean showOnlyEnabled;
+  private boolean showOnlyDisabled;
+  private String text;
+  private List<String> tokenizedText;
+
+  public RulesFilterModel(Runnable onChange) {
+    this.onChange = onChange;
+  }
+
+  public boolean isShowOnlyChanged() {
+    return showOnlyChanged;
+  }
+
+  public void setShowOnlyChanged(boolean showOnlyChanged) {
+    this.showOnlyChanged = showOnlyChanged;
+    this.showOnlyDisabled = false;
+    this.showOnlyEnabled = false;
+    onChange.run();
+  }
+
+  public boolean isShowOnlyEnabled() {
+    return showOnlyEnabled;
+  }
+
+  public void setShowOnlyEnabled(boolean showOnlyEnabled) {
+    this.showOnlyEnabled = showOnlyEnabled;
+    this.showOnlyDisabled = false;
+    this.showOnlyChanged = false;
+    onChange.run();
+  }
+
+  public boolean isShowOnlyDisabled() {
+    return showOnlyDisabled;
+  }
+
+  @CheckForNull
+  public String getText() {
+    return text;
+  }
+
+  public void setText(@Nullable String text) {
+    if (text == null || text.trim().isEmpty()) {
+      this.text = null;
+    } else {
+      this.text = text;
+    }
+    tokenizedText = tokenize(this.text);
+    onChange.run();
+  }
+
+  public void setShowOnlyDisabled(boolean showOnlyDisabled) {
+    this.showOnlyDisabled = showOnlyDisabled;
+    this.showOnlyChanged = false;
+    this.showOnlyEnabled = false;
+    onChange.run();
+  }
+
+  public boolean isEmpty() {
+    return text == null && !isShowOnlyChanged() && !isShowOnlyDisabled() && !isShowOnlyEnabled();
+  }
+
+  public void reset(boolean triggerListener) {
+    showOnlyChanged = false;
+    showOnlyDisabled = false;
+    showOnlyEnabled = false;
+    text = null;
+    if (triggerListener) {
+      onChange.run();
+    }
+  }
+
+  public boolean filter(RulesTreeNode.Rule rule) {
+    if (showOnlyEnabled && !rule.isActivated()) {
+      return false;
+    }
+    if (showOnlyDisabled && rule.isActivated()) {
+      return false;
+    }
+    if (showOnlyChanged && !rule.isChanged()) {
+      return false;
+    }
+
+    if (tokenizedText == null || tokenizedText.isEmpty()) {
+      return true;
+    }
+
+    List<String> split = tokenize(rule.getName());
+    return Collections.indexOfSubList(split, tokenizedText) != -1;
+  }
+
+  @CheckForNull
+  private static List<String> tokenize(@Nullable String str) {
+    if (str == null || str.isEmpty()) {
+      return null;
+    }
+    String lower = str.toLowerCase(Locale.US);
+    return Arrays.asList(lower.split("\\s"));
+  }
+}
diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeNode.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeNode.java
index 2b01f38d..09fcd453 100644
--- a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeNode.java
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeNode.java
@@ -117,6 +117,10 @@ public String type() {
       return details.getType();
     }
 
+    public String language() {
+      return details.getLanguage();
+    }
+
     @Override
     public boolean isChanged() {
       return details.isActiveByDefault() != activated;
diff --git a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
index e380c623..3a32359b 100644
--- a/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
+++ b/src/main/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModel.java
@@ -24,7 +24,6 @@
 import com.intellij.ui.treeStructure.treetable.TreeTableTree;
 import com.intellij.util.ui.JBUI;
 import icons.SonarLintIcons;
-import java.util.HashMap;
 import java.util.Map;
 import javax.swing.Icon;
 import javax.swing.JTree;
@@ -112,15 +111,13 @@ public boolean isCellEditable(final Object node, final int column) {
     }
   }
 
-  public Map<String, Boolean> getCurrentRuleActivation() {
-    Map<String, Boolean> currentActivationByRuleKey = new HashMap<>();
+  public void saveCurrentRuleActivation(Map<String, Boolean> map) {
     RulesTreeNode.Root rootNode = (RulesTreeNode.Root) root;
     for (RulesTreeNode.Language lang : rootNode.childrenIterable()) {
       for (RulesTreeNode.Rule rule : lang.childrenIterable()) {
-        currentActivationByRuleKey.put(rule.getKey(), rule.isActivated());
+        map.put(rule.getKey(), rule.isActivated());
       }
     }
-    return currentActivationByRuleKey;
   }
 
   private void activateRule(RulesTreeNode.Rule rule, boolean activate) {
diff --git a/src/test/java/org/sonarlint/intellij/config/global/rules/RulesFilterModelTest.java b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesFilterModelTest.java
new file mode 100644
index 00000000..c02a9af0
--- /dev/null
+++ b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesFilterModelTest.java
@@ -0,0 +1,123 @@
+/*
+ * SonarLint for IntelliJ IDEA
+ * Copyright (C) 2015 SonarSource
+ * sonarlint@sonarsource.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonarlint.intellij.config.global.rules;
+
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+public class RulesFilterModelTest {
+  private Runnable changed = mock(Runnable.class);
+  private RulesFilterModel model = new RulesFilterModel(changed);
+
+  @Test
+  public void testCallback() {
+    model.setShowOnlyChanged(true);
+    model.setShowOnlyDisabled(true);
+    model.setShowOnlyEnabled(true);
+    model.setText("asd");
+
+    verify(changed, times(4)).run();
+  }
+
+  @Test
+  public void testGetters() {
+    model.setShowOnlyDisabled(true);
+    assertThat(model.isShowOnlyDisabled()).isTrue();
+    assertThat(model.isShowOnlyChanged()).isFalse();
+    assertThat(model.isShowOnlyEnabled()).isFalse();
+
+    model.setShowOnlyChanged(true);
+    assertThat(model.isShowOnlyChanged()).isTrue();
+    assertThat(model.isShowOnlyEnabled()).isFalse();
+    assertThat(model.isShowOnlyDisabled()).isFalse();
+
+    model.setShowOnlyEnabled(true);
+    assertThat(model.isShowOnlyEnabled()).isTrue();
+    assertThat(model.isShowOnlyDisabled()).isFalse();
+    assertThat(model.isShowOnlyChanged()).isFalse();
+
+    model.setText("asd");
+    assertThat(model.getText()).isEqualTo("asd");
+  }
+
+  @Test
+  public void should_be_empty_if_nothing_is_set() {
+    assertThat(model.isEmpty()).isTrue();
+    model.setShowOnlyEnabled(true);
+    assertThat(model.isEmpty()).isFalse();
+  }
+
+  @Test
+  public void default_should_be_empty() {
+    assertEmpty();
+  }
+
+  @Test
+  public void should_reset() {
+    model.setShowOnlyChanged(true);
+    model.setShowOnlyDisabled(true);
+    model.setShowOnlyEnabled(true);
+    model.setText("asd");
+
+    model.reset(false);
+
+    verify(changed, times(4)).run();
+    assertThat(model.isShowOnlyEnabled()).isFalse();
+    assertThat(model.isShowOnlyDisabled()).isFalse();
+    assertThat(model.isShowOnlyChanged()).isFalse();
+    assertThat(model.getText()).isNull();
+  }
+
+  @Test
+  public void should_apply_filter() {
+    RulesTreeNode.Rule rule = mock(RulesTreeNode.Rule.class);
+    when(rule.getName()).thenReturn("my rule");
+    assertThat(model.filter(rule)).isTrue();
+
+    model.setText("my filter");
+
+    assertThat(model.filter(rule)).isFalse();
+
+    when(rule.getName()).thenReturn("my filter");
+    assertThat(model.filter(rule)).isTrue();
+
+    when(rule.getName()).thenReturn("some text my filter and more text");
+    assertThat(model.filter(rule)).isTrue();
+
+    model.setShowOnlyEnabled(true);
+    assertThat(model.filter(rule)).isFalse();
+
+    when(rule.isActivated()).thenReturn(true);
+    assertThat(model.filter(rule)).isTrue();
+  }
+
+  private void assertEmpty() {
+    assertThat(model.isShowOnlyEnabled()).isFalse();
+    assertThat(model.isShowOnlyDisabled()).isFalse();
+    assertThat(model.isShowOnlyChanged()).isFalse();
+    assertThat(model.getText()).isNull();
+    assertThat(model.isEmpty()).isTrue();
+  }
+}
diff --git a/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
index f5418ca5..9f3da494 100644
--- a/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
+++ b/src/test/java/org/sonarlint/intellij/config/global/rules/RulesTreeTableModelTest.java
@@ -22,6 +22,7 @@
 import com.intellij.ui.treeStructure.treetable.TreeTable;
 import com.intellij.ui.treeStructure.treetable.TreeTableModel;
 import com.intellij.ui.treeStructure.treetable.TreeTableTree;
+import java.util.HashMap;
 import java.util.Map;
 import javax.swing.Icon;
 import javax.swing.table.AbstractTableModel;
@@ -95,7 +96,8 @@ public void can_only_edit_activation() {
 
   @Test
   public void get_current_rule_activation() {
-    Map<String, Boolean> ruleActivation = model.getCurrentRuleActivation();
+    Map<String, Boolean> ruleActivation = new HashMap<>();
+    model.saveCurrentRuleActivation(ruleActivation);
     assertThat(ruleActivation).containsExactly(entry("key", true));
   }
 
diff --git a/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java b/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
index 9e857308..3989863a 100644
--- a/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
+++ b/src/test/java/org/sonarlint/intellij/trigger/SonarLintSubmitterTest.java
@@ -22,12 +22,15 @@
 import com.intellij.openapi.fileEditor.FileEditorManager;
 import com.intellij.openapi.module.Module;
 import com.intellij.openapi.project.Project;
+import com.intellij.openapi.util.Computable;
 import com.intellij.openapi.vfs.VirtualFile;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.function.Predicate;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.sonarlint.intellij.SonarTest;
 import org.sonarlint.intellij.analysis.LocalFileExclusions;
 import org.sonarlint.intellij.analysis.SonarLintJobManager;
@@ -64,6 +67,12 @@
 
   @Before
   public void start() throws InvalidBindingException {
+    when(super.app.runReadAction(any(Computable.class))).thenAnswer(new Answer() {
+      @Override
+      public Object answer(InvocationOnMock invocation) {
+        return ((Computable)invocation.getArgument(0)).compute();
+      }
+    });
     when(bindingManager.getFacade()).thenReturn(facade);
     when(facade.getExcluded(any(Module.class), anyCollection(), any(Predicate.class))).thenReturn(Collections.emptySet());
     globalSettings = new SonarLintGlobalSettings();
